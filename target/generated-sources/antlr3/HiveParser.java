// $ANTLR 3.5.2 HiveParser.g 2020-04-30 21:25:00

package whomm.hsqlformat.hive.parse;

import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


/**
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
@SuppressWarnings("all")
public class HiveParser extends Parser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AMPERSAND", "BITWISEOR", "BITWISEXOR", 
		"ByteLengthLiteral", "COLON", "COMMA", "CONCATENATE", "CharSetLiteral", 
		"CharSetName", "DIV", "DIVIDE", "DOLLAR", "DOT", "Digit", "EQUAL", "EQUAL_NS", 
		"Exponent", "GREATERTHAN", "GREATERTHANOREQUALTO", "HexDigit", "Identifier", 
		"IntegralLiteral", "KW_ABORT", "KW_ACTIVATE", "KW_ACTIVE", "KW_ADD", "KW_ADMIN", 
		"KW_AFTER", "KW_ALL", "KW_ALLOC_FRACTION", "KW_ALTER", "KW_ANALYZE", "KW_AND", 
		"KW_ANY", "KW_APPLICATION", "KW_ARCHIVE", "KW_ARRAY", "KW_AS", "KW_ASC", 
		"KW_AST", "KW_AUTHORIZATION", "KW_AUTOCOMMIT", "KW_BEFORE", "KW_BETWEEN", 
		"KW_BIGINT", "KW_BINARY", "KW_BOOLEAN", "KW_BOTH", "KW_BUCKET", "KW_BUCKETS", 
		"KW_BY", "KW_CACHE", "KW_CASCADE", "KW_CASE", "KW_CAST", "KW_CHANGE", 
		"KW_CHAR", "KW_CHECK", "KW_CLUSTER", "KW_CLUSTERED", "KW_CLUSTERSTATUS", 
		"KW_COLLECTION", "KW_COLUMN", "KW_COLUMNS", "KW_COMMENT", "KW_COMMIT", 
		"KW_COMPACT", "KW_COMPACTIONS", "KW_COMPUTE", "KW_CONCATENATE", "KW_CONF", 
		"KW_CONSTRAINT", "KW_CONTINUE", "KW_CREATE", "KW_CROSS", "KW_CUBE", "KW_CURRENT", 
		"KW_CURRENT_DATE", "KW_CURRENT_TIMESTAMP", "KW_CURSOR", "KW_DATA", "KW_DATABASE", 
		"KW_DATABASES", "KW_DATE", "KW_DATETIME", "KW_DAY", "KW_DBPROPERTIES", 
		"KW_DEBUG", "KW_DECIMAL", "KW_DEFAULT", "KW_DEFERRED", "KW_DEFINED", "KW_DELETE", 
		"KW_DELIMITED", "KW_DEPENDENCY", "KW_DESC", "KW_DESCRIBE", "KW_DETAIL", 
		"KW_DIRECTORIES", "KW_DIRECTORY", "KW_DISABLE", "KW_DISTINCT", "KW_DISTRIBUTE", 
		"KW_DO", "KW_DOUBLE", "KW_DOW", "KW_DROP", "KW_DUMP", "KW_ELEM_TYPE", 
		"KW_ELSE", "KW_ENABLE", "KW_END", "KW_ENFORCED", "KW_ESCAPED", "KW_EXCEPT", 
		"KW_EXCHANGE", "KW_EXCLUSIVE", "KW_EXISTS", "KW_EXPLAIN", "KW_EXPORT", 
		"KW_EXPRESSION", "KW_EXTENDED", "KW_EXTERNAL", "KW_EXTRACT", "KW_FALSE", 
		"KW_FETCH", "KW_FIELDS", "KW_FILE", "KW_FILEFORMAT", "KW_FIRST", "KW_FLOAT", 
		"KW_FLOOR", "KW_FOLLOWING", "KW_FOR", "KW_FORCE", "KW_FOREIGN", "KW_FORMAT", 
		"KW_FORMATTED", "KW_FROM", "KW_FULL", "KW_FUNCTION", "KW_FUNCTIONS", "KW_GRANT", 
		"KW_GROUP", "KW_GROUPING", "KW_HAVING", "KW_HOUR", "KW_IDXPROPERTIES", 
		"KW_IF", "KW_IMPORT", "KW_IN", "KW_INDEX", "KW_INDEXES", "KW_INNER", "KW_INPATH", 
		"KW_INPUTDRIVER", "KW_INPUTFORMAT", "KW_INSERT", "KW_INT", "KW_INTERSECT", 
		"KW_INTERVAL", "KW_INTO", "KW_IS", "KW_ISOLATION", "KW_ITEMS", "KW_JAR", 
		"KW_JOIN", "KW_KEY", "KW_KEYS", "KW_KEY_TYPE", "KW_KILL", "KW_LAST", "KW_LATERAL", 
		"KW_LEFT", "KW_LESS", "KW_LEVEL", "KW_LIKE", "KW_LIMIT", "KW_LINES", "KW_LOAD", 
		"KW_LOCAL", "KW_LOCATION", "KW_LOCK", "KW_LOCKS", "KW_LOGICAL", "KW_LONG", 
		"KW_MACRO", "KW_MANAGEMENT", "KW_MAP", "KW_MAPJOIN", "KW_MAPPING", "KW_MATCHED", 
		"KW_MATERIALIZED", "KW_MERGE", "KW_METADATA", "KW_MINUS", "KW_MINUTE", 
		"KW_MONTH", "KW_MORE", "KW_MOVE", "KW_MSCK", "KW_NONE", "KW_NORELY", "KW_NOSCAN", 
		"KW_NOT", "KW_NOVALIDATE", "KW_NULL", "KW_NULLS", "KW_OF", "KW_OFFSET", 
		"KW_ON", "KW_ONLY", "KW_OPERATOR", "KW_OPTION", "KW_OR", "KW_ORDER", "KW_OUT", 
		"KW_OUTER", "KW_OUTPUTDRIVER", "KW_OUTPUTFORMAT", "KW_OVER", "KW_OVERWRITE", 
		"KW_OWNER", "KW_PARTITION", "KW_PARTITIONED", "KW_PARTITIONS", "KW_PATH", 
		"KW_PERCENT", "KW_PLAN", "KW_PLANS", "KW_PLUS", "KW_POOL", "KW_PRECEDING", 
		"KW_PRECISION", "KW_PRESERVE", "KW_PRIMARY", "KW_PRINCIPALS", "KW_PROCEDURE", 
		"KW_PURGE", "KW_QUARTER", "KW_QUERY", "KW_QUERY_PARALLELISM", "KW_RANGE", 
		"KW_READ", "KW_READS", "KW_REAL", "KW_REBUILD", "KW_RECORDREADER", "KW_RECORDWRITER", 
		"KW_REDUCE", "KW_REFERENCES", "KW_REGEXP", "KW_RELOAD", "KW_RELY", "KW_RENAME", 
		"KW_REOPTIMIZATION", "KW_REPAIR", "KW_REPL", "KW_REPLACE", "KW_REPLICATION", 
		"KW_RESOURCE", "KW_RESTRICT", "KW_REVOKE", "KW_REWRITE", "KW_RIGHT", "KW_RLIKE", 
		"KW_ROLE", "KW_ROLES", "KW_ROLLBACK", "KW_ROLLUP", "KW_ROW", "KW_ROWS", 
		"KW_SCHEDULING_POLICY", "KW_SCHEMA", "KW_SCHEMAS", "KW_SECOND", "KW_SELECT", 
		"KW_SEMI", "KW_SERDE", "KW_SERDEPROPERTIES", "KW_SERVER", "KW_SET", "KW_SETS", 
		"KW_SHARED", "KW_SHOW", "KW_SHOW_DATABASE", "KW_SKEWED", "KW_SMALLINT", 
		"KW_SNAPSHOT", "KW_SORT", "KW_SORTED", "KW_SSL", "KW_START", "KW_STATISTICS", 
		"KW_STATUS", "KW_STORED", "KW_STREAMTABLE", "KW_STRING", "KW_STRUCT", 
		"KW_SUMMARY", "KW_SYNC", "KW_TABLE", "KW_TABLES", "KW_TABLESAMPLE", "KW_TBLPROPERTIES", 
		"KW_TEMPORARY", "KW_TERMINATED", "KW_THEN", "KW_TIME", "KW_TIMESTAMP", 
		"KW_TIMESTAMPLOCALTZ", "KW_TINYINT", "KW_TO", "KW_TOUCH", "KW_TRANSACTION", 
		"KW_TRANSACTIONAL", "KW_TRANSACTIONS", "KW_TRANSFORM", "KW_TRIGGER", "KW_TRUE", 
		"KW_TRUNCATE", "KW_UNARCHIVE", "KW_UNBOUNDED", "KW_UNDO", "KW_UNION", 
		"KW_UNIONTYPE", "KW_UNIQUE", "KW_UNIQUEJOIN", "KW_UNKNOWN", "KW_UNLOCK", 
		"KW_UNMANAGED", "KW_UNSET", "KW_UNSIGNED", "KW_UPDATE", "KW_URI", "KW_USE", 
		"KW_USER", "KW_USING", "KW_UTC", "KW_UTCTIMESTAMP", "KW_VALIDATE", "KW_VALUES", 
		"KW_VALUE_TYPE", "KW_VARCHAR", "KW_VECTORIZATION", "KW_VIEW", "KW_VIEWS", 
		"KW_WAIT", "KW_WEEK", "KW_WHEN", "KW_WHERE", "KW_WHILE", "KW_WINDOW", 
		"KW_WITH", "KW_WORK", "KW_WORKLOAD", "KW_WRITE", "KW_YEAR", "KW_ZONE", 
		"LCURLY", "LESSTHAN", "LESSTHANOREQUALTO", "LINE_COMMENT", "LPAREN", "LSQUARE", 
		"Letter", "MINUS", "MOD", "NOTEQUAL", "Number", "NumberLiteral", "PLUS", 
		"QUERY_HINT", "QUESTION", "QuotedIdentifier", "RCURLY", "RPAREN", "RSQUARE", 
		"RegexComponent", "SEMICOLON", "STAR", "StringLiteral", "TILDE", "WS", 
		"KW_BATCH", "KW_DAYOFWEEK", "KW_HOLD_DDLTIME", "KW_IGNORE", "KW_NO_DROP", 
		"KW_OFFLINE", "KW_PROTECTION", "KW_READONLY", "KW_TIMESTAMPTZ", "TOK_ABORT_TRANSACTIONS", 
		"TOK_ACTIVATE", "TOK_ADD_TRIGGER", "TOK_ADMIN_OPTION_FOR", "TOK_ALIASLIST", 
		"TOK_ALLCOLREF", "TOK_ALLOC_FRACTION", "TOK_ALTERDATABASE_LOCATION", "TOK_ALTERDATABASE_OWNER", 
		"TOK_ALTERDATABASE_PROPERTIES", "TOK_ALTERTABLE", "TOK_ALTERTABLE_ADDCOLS", 
		"TOK_ALTERTABLE_ADDCONSTRAINT", "TOK_ALTERTABLE_ADDPARTS", "TOK_ALTERTABLE_ARCHIVE", 
		"TOK_ALTERTABLE_BUCKETS", "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION", "TOK_ALTERTABLE_CLUSTER_SORT", 
		"TOK_ALTERTABLE_COMPACT", "TOK_ALTERTABLE_DROPCONSTRAINT", "TOK_ALTERTABLE_DROPPARTS", 
		"TOK_ALTERTABLE_DROPPROPERTIES", "TOK_ALTERTABLE_EXCHANGEPARTITION", "TOK_ALTERTABLE_FILEFORMAT", 
		"TOK_ALTERTABLE_LOCATION", "TOK_ALTERTABLE_MERGEFILES", "TOK_ALTERTABLE_OWNER", 
		"TOK_ALTERTABLE_PARTCOLTYPE", "TOK_ALTERTABLE_PROPERTIES", "TOK_ALTERTABLE_RENAME", 
		"TOK_ALTERTABLE_RENAMECOL", "TOK_ALTERTABLE_RENAMEPART", "TOK_ALTERTABLE_REPLACECOLS", 
		"TOK_ALTERTABLE_SERDEPROPERTIES", "TOK_ALTERTABLE_SERIALIZER", "TOK_ALTERTABLE_SKEWED", 
		"TOK_ALTERTABLE_SKEWED_LOCATION", "TOK_ALTERTABLE_TOUCH", "TOK_ALTERTABLE_UNARCHIVE", 
		"TOK_ALTERTABLE_UPDATECOLSTATS", "TOK_ALTERTABLE_UPDATECOLUMNS", "TOK_ALTERTABLE_UPDATESTATS", 
		"TOK_ALTERVIEW", "TOK_ALTERVIEW_ADDPARTS", "TOK_ALTERVIEW_DROPPARTS", 
		"TOK_ALTERVIEW_DROPPROPERTIES", "TOK_ALTERVIEW_PROPERTIES", "TOK_ALTERVIEW_RENAME", 
		"TOK_ALTER_MAPPING", "TOK_ALTER_MATERIALIZED_VIEW", "TOK_ALTER_MATERIALIZED_VIEW_REBUILD", 
		"TOK_ALTER_MATERIALIZED_VIEW_REWRITE", "TOK_ALTER_POOL", "TOK_ALTER_RP", 
		"TOK_ALTER_TRIGGER", "TOK_ANALYZE", "TOK_ARCHIVE", "TOK_BIGINT", "TOK_BINARY", 
		"TOK_BLOCKING", "TOK_BOOLEAN", "TOK_CACHE_METADATA", "TOK_CASCADE", "TOK_CHAR", 
		"TOK_CHARSETLITERAL", "TOK_CHECK_CONSTRAINT", "TOK_CLUSTERBY", "TOK_COLTYPELIST", 
		"TOK_COL_NAME", "TOK_COMMIT", "TOK_CONSTRAINT_NAME", "TOK_CREATEDATABASE", 
		"TOK_CREATEFUNCTION", "TOK_CREATEMACRO", "TOK_CREATEROLE", "TOK_CREATETABLE", 
		"TOK_CREATEVIEW", "TOK_CREATE_MAPPING", "TOK_CREATE_MATERIALIZED_VIEW", 
		"TOK_CREATE_POOL", "TOK_CREATE_RP", "TOK_CREATE_TRIGGER", "TOK_CROSSJOIN", 
		"TOK_CTE", "TOK_CUBE_GROUPBY", "TOK_DATABASECOMMENT", "TOK_DATABASELOCATION", 
		"TOK_DATABASEPROPERTIES", "TOK_DATE", "TOK_DATELITERAL", "TOK_DATETIME", 
		"TOK_DBNAME", "TOK_DBPROPLIST", "TOK_DB_TYPE", "TOK_DECIMAL", "TOK_DEFAULT_POOL", 
		"TOK_DEFAULT_VALUE", "TOK_DELETE", "TOK_DELETE_FROM", "TOK_DESCDATABASE", 
		"TOK_DESCFUNCTION", "TOK_DESCTABLE", "TOK_DESTINATION", "TOK_DETAIL", 
		"TOK_DIR", "TOK_DISABLE", "TOK_DISTRIBUTEBY", "TOK_DOUBLE", "TOK_DROPDATABASE", 
		"TOK_DROPFUNCTION", "TOK_DROPMACRO", "TOK_DROPROLE", "TOK_DROPTABLE", 
		"TOK_DROPVIEW", "TOK_DROP_MAPPING", "TOK_DROP_MATERIALIZED_VIEW", "TOK_DROP_POOL", 
		"TOK_DROP_RP", "TOK_DROP_TRIGGER", "TOK_ENABLE", "TOK_EXCEPTALL", "TOK_EXCEPTDISTINCT", 
		"TOK_EXPLAIN", "TOK_EXPLAIN_SQ_REWRITE", "TOK_EXPLIST", "TOK_EXPORT", 
		"TOK_EXPRESSION", "TOK_FALSE", "TOK_FILE", "TOK_FILEFORMAT_GENERIC", "TOK_FLOAT", 
		"TOK_FORCE", "TOK_FOREIGN_KEY", "TOK_FROM", "TOK_FULLOUTERJOIN", "TOK_FUNCTION", 
		"TOK_FUNCTIONDI", "TOK_FUNCTIONSTAR", "TOK_GRANT", "TOK_GRANT_OPTION_FOR", 
		"TOK_GRANT_ROLE", "TOK_GRANT_WITH_ADMIN_OPTION", "TOK_GRANT_WITH_OPTION", 
		"TOK_GROUP", "TOK_GROUPBY", "TOK_GROUPING_SETS", "TOK_GROUPING_SETS_EXPRESSION", 
		"TOK_HAVING", "TOK_IFEXISTS", "TOK_IFNOTEXISTS", "TOK_IMPORT", "TOK_INPUTFORMAT", 
		"TOK_INSERT", "TOK_INSERT_INTO", "TOK_INT", "TOK_INTERSECTALL", "TOK_INTERSECTDISTINCT", 
		"TOK_INTERVAL_DAY_LITERAL", "TOK_INTERVAL_DAY_TIME", "TOK_INTERVAL_DAY_TIME_LITERAL", 
		"TOK_INTERVAL_HOUR_LITERAL", "TOK_INTERVAL_MINUTE_LITERAL", "TOK_INTERVAL_MONTH_LITERAL", 
		"TOK_INTERVAL_SECOND_LITERAL", "TOK_INTERVAL_YEAR_LITERAL", "TOK_INTERVAL_YEAR_MONTH", 
		"TOK_INTERVAL_YEAR_MONTH_LITERAL", "TOK_ISOLATION_LEVEL", "TOK_ISOLATION_SNAPSHOT", 
		"TOK_JAR", "TOK_JOIN", "TOK_KILL_QUERY", "TOK_LATERAL_VIEW", "TOK_LATERAL_VIEW_OUTER", 
		"TOK_LEFTOUTERJOIN", "TOK_LEFTSEMIJOIN", "TOK_LENGTH", "TOK_LIKERP", "TOK_LIKETABLE", 
		"TOK_LIMIT", "TOK_LIST", "TOK_LOAD", "TOK_LOCKDB", "TOK_LOCKTABLE", "TOK_MAP", 
		"TOK_MATCHED", "TOK_MERGE", "TOK_METADATA", "TOK_MSCK", "TOK_NORELY", 
		"TOK_NOT_CLUSTERED", "TOK_NOT_MATCHED", "TOK_NOT_NULL", "TOK_NOT_SORTED", 
		"TOK_NOVALIDATE", "TOK_NO_DROP", "TOK_NULL", "TOK_NULLS_FIRST", "TOK_NULLS_LAST", 
		"TOK_OFFLINE", "TOK_OFFSET", "TOK_ONLY", "TOK_OPERATOR", "TOK_OP_ADD", 
		"TOK_OP_AND", "TOK_OP_BITAND", "TOK_OP_BITNOT", "TOK_OP_BITOR", "TOK_OP_BITXOR", 
		"TOK_OP_DIV", "TOK_OP_EQ", "TOK_OP_GE", "TOK_OP_GT", "TOK_OP_LE", "TOK_OP_LIKE", 
		"TOK_OP_LT", "TOK_OP_MOD", "TOK_OP_MUL", "TOK_OP_NE", "TOK_OP_NOT", "TOK_OP_OR", 
		"TOK_OP_SUB", "TOK_ORDERBY", "TOK_ORREPLACE", "TOK_PARTITIONINGSPEC", 
		"TOK_PARTITIONLOCATION", "TOK_PARTSPEC", "TOK_PARTVAL", "TOK_PATH", "TOK_PERCENT", 
		"TOK_PRIMARY_KEY", "TOK_PRINCIPAL_NAME", "TOK_PRIVILEGE", "TOK_PRIVILEGE_LIST", 
		"TOK_PRIV_ALL", "TOK_PRIV_ALTER_DATA", "TOK_PRIV_ALTER_METADATA", "TOK_PRIV_CREATE", 
		"TOK_PRIV_DELETE", "TOK_PRIV_DROP", "TOK_PRIV_INSERT", "TOK_PRIV_LOCK", 
		"TOK_PRIV_OBJECT", "TOK_PRIV_OBJECT_COL", "TOK_PRIV_SELECT", "TOK_PRIV_SHOW_DATABASE", 
		"TOK_PTBLFUNCTION", "TOK_QUERY", "TOK_QUERY_PARALLELISM", "TOK_READONLY", 
		"TOK_REAL", "TOK_RECORDREADER", "TOK_RECORDWRITER", "TOK_RELOADFUNCTION", 
		"TOK_RELY", "TOK_RENAME", "TOK_REPLACE", "TOK_REPLICATION", "TOK_REPL_CONFIG", 
		"TOK_REPL_CONFIG_LIST", "TOK_REPL_DUMP", "TOK_REPL_LOAD", "TOK_REPL_STATUS", 
		"TOK_RESOURCE_ALL", "TOK_RESOURCE_LIST", "TOK_RESOURCE_URI", "TOK_RESTRICT", 
		"TOK_REVOKE", "TOK_REVOKE_ROLE", "TOK_REWRITE_DISABLED", "TOK_REWRITE_ENABLED", 
		"TOK_RIGHTOUTERJOIN", "TOK_ROLE", "TOK_ROLLBACK", "TOK_ROLLUP_GROUPBY", 
		"TOK_ROWCOUNT", "TOK_SCHEDULING_POLICY", "TOK_SELECT", "TOK_SELECTDI", 
		"TOK_SELEXPR", "TOK_SERDE", "TOK_SERDENAME", "TOK_SERDEPROPS", "TOK_SERVER_TYPE", 
		"TOK_SETCOLREF", "TOK_SET_AUTOCOMMIT", "TOK_SET_COLUMNS_CLAUSE", "TOK_SHOWCOLUMNS", 
		"TOK_SHOWCONF", "TOK_SHOWDATABASES", "TOK_SHOWDBLOCKS", "TOK_SHOWFUNCTIONS", 
		"TOK_SHOWLOCKS", "TOK_SHOWMATERIALIZEDVIEWS", "TOK_SHOWPARTITIONS", "TOK_SHOWTABLES", 
		"TOK_SHOWVIEWS", "TOK_SHOW_COMPACTIONS", "TOK_SHOW_CREATEDATABASE", "TOK_SHOW_CREATETABLE", 
		"TOK_SHOW_GRANT", "TOK_SHOW_ROLES", "TOK_SHOW_ROLE_GRANT", "TOK_SHOW_ROLE_PRINCIPALS", 
		"TOK_SHOW_RP", "TOK_SHOW_SET_ROLE", "TOK_SHOW_TABLESTATUS", "TOK_SHOW_TBLPROPERTIES", 
		"TOK_SHOW_TRANSACTIONS", "TOK_SKEWED_LOCATIONS", "TOK_SKEWED_LOCATION_LIST", 
		"TOK_SKEWED_LOCATION_MAP", "TOK_SMALLINT", "TOK_SORTBY", "TOK_START_TRANSACTION", 
		"TOK_STORAGEHANDLER", "TOK_STOREDASDIRS", "TOK_STRING", "TOK_STRINGLITERALSEQUENCE", 
		"TOK_STRUCT", "TOK_SUBQUERY", "TOK_SUBQUERY_EXPR", "TOK_SUBQUERY_OP", 
		"TOK_SUBQUERY_OP_NOTEXISTS", "TOK_SUBQUERY_OP_NOTIN", "TOK_SUMMARY", "TOK_SWITCHDATABASE", 
		"TOK_TAB", "TOK_TABALIAS", "TOK_TABCOL", "TOK_TABCOLLIST", "TOK_TABCOLNAME", 
		"TOK_TABCOLVALUE", "TOK_TABCOLVALUES", "TOK_TABCOLVALUE_PAIR", "TOK_TABLEBUCKETSAMPLE", 
		"TOK_TABLECOMMENT", "TOK_TABLEFILEFORMAT", "TOK_TABLELOCATION", "TOK_TABLEPARTCOLNAMES", 
		"TOK_TABLEPARTCOLS", "TOK_TABLEPROPERTIES", "TOK_TABLEPROPERTY", "TOK_TABLEPROPLIST", 
		"TOK_TABLEROWFORMAT", "TOK_TABLEROWFORMATCOLLITEMS", "TOK_TABLEROWFORMATFIELD", 
		"TOK_TABLEROWFORMATLINES", "TOK_TABLEROWFORMATMAPKEYS", "TOK_TABLEROWFORMATNULL", 
		"TOK_TABLESERIALIZER", "TOK_TABLESKEWED", "TOK_TABLESPLITSAMPLE", "TOK_TABLE_OR_COL", 
		"TOK_TABLE_PARTITION", "TOK_TABLE_TYPE", "TOK_TABNAME", "TOK_TABREF", 
		"TOK_TABSORTCOLNAMEASC", "TOK_TABSORTCOLNAMEDESC", "TOK_TABSRC", "TOK_TABTYPE", 
		"TOK_TEMPORARY", "TOK_TIMESTAMP", "TOK_TIMESTAMPLITERAL", "TOK_TIMESTAMPLOCALTZ", 
		"TOK_TIMESTAMPLOCALTZLITERAL", "TOK_TINYINT", "TOK_TMP_FILE", "TOK_TO", 
		"TOK_TRANSFORM", "TOK_TRIGGER_EXPRESSION", "TOK_TRUE", "TOK_TRUNCATETABLE", 
		"TOK_TXN_ACCESS_MODE", "TOK_TXN_READ_ONLY", "TOK_TXN_READ_WRITE", "TOK_UNIONALL", 
		"TOK_UNIONDISTINCT", "TOK_UNIONTYPE", "TOK_UNIQUE", "TOK_UNIQUEJOIN", 
		"TOK_UNKNOWN", "TOK_UNLOCKDB", "TOK_UNLOCKTABLE", "TOK_UNMANAGED", "TOK_UPDATE", 
		"TOK_UPDATE_TABLE", "TOK_URI_TYPE", "TOK_USER", "TOK_USERSCRIPTCOLNAMES", 
		"TOK_USERSCRIPTCOLSCHEMA", "TOK_VALIDATE", "TOK_VARCHAR", "TOK_VIEWPARTCOLS", 
		"TOK_WHERE", "TOK_WINDOWDEF", "TOK_WINDOWRANGE", "TOK_WINDOWSPEC", "TOK_WINDOWVALUES"
	};
	public static final int EOF=-1;
	public static final int AMPERSAND=4;
	public static final int BITWISEOR=5;
	public static final int BITWISEXOR=6;
	public static final int ByteLengthLiteral=7;
	public static final int COLON=8;
	public static final int COMMA=9;
	public static final int CONCATENATE=10;
	public static final int CharSetLiteral=11;
	public static final int CharSetName=12;
	public static final int DIV=13;
	public static final int DIVIDE=14;
	public static final int DOLLAR=15;
	public static final int DOT=16;
	public static final int Digit=17;
	public static final int EQUAL=18;
	public static final int EQUAL_NS=19;
	public static final int Exponent=20;
	public static final int GREATERTHAN=21;
	public static final int GREATERTHANOREQUALTO=22;
	public static final int HexDigit=23;
	public static final int Identifier=24;
	public static final int IntegralLiteral=25;
	public static final int KW_ABORT=26;
	public static final int KW_ACTIVATE=27;
	public static final int KW_ACTIVE=28;
	public static final int KW_ADD=29;
	public static final int KW_ADMIN=30;
	public static final int KW_AFTER=31;
	public static final int KW_ALL=32;
	public static final int KW_ALLOC_FRACTION=33;
	public static final int KW_ALTER=34;
	public static final int KW_ANALYZE=35;
	public static final int KW_AND=36;
	public static final int KW_ANY=37;
	public static final int KW_APPLICATION=38;
	public static final int KW_ARCHIVE=39;
	public static final int KW_ARRAY=40;
	public static final int KW_AS=41;
	public static final int KW_ASC=42;
	public static final int KW_AST=43;
	public static final int KW_AUTHORIZATION=44;
	public static final int KW_AUTOCOMMIT=45;
	public static final int KW_BEFORE=46;
	public static final int KW_BETWEEN=47;
	public static final int KW_BIGINT=48;
	public static final int KW_BINARY=49;
	public static final int KW_BOOLEAN=50;
	public static final int KW_BOTH=51;
	public static final int KW_BUCKET=52;
	public static final int KW_BUCKETS=53;
	public static final int KW_BY=54;
	public static final int KW_CACHE=55;
	public static final int KW_CASCADE=56;
	public static final int KW_CASE=57;
	public static final int KW_CAST=58;
	public static final int KW_CHANGE=59;
	public static final int KW_CHAR=60;
	public static final int KW_CHECK=61;
	public static final int KW_CLUSTER=62;
	public static final int KW_CLUSTERED=63;
	public static final int KW_CLUSTERSTATUS=64;
	public static final int KW_COLLECTION=65;
	public static final int KW_COLUMN=66;
	public static final int KW_COLUMNS=67;
	public static final int KW_COMMENT=68;
	public static final int KW_COMMIT=69;
	public static final int KW_COMPACT=70;
	public static final int KW_COMPACTIONS=71;
	public static final int KW_COMPUTE=72;
	public static final int KW_CONCATENATE=73;
	public static final int KW_CONF=74;
	public static final int KW_CONSTRAINT=75;
	public static final int KW_CONTINUE=76;
	public static final int KW_CREATE=77;
	public static final int KW_CROSS=78;
	public static final int KW_CUBE=79;
	public static final int KW_CURRENT=80;
	public static final int KW_CURRENT_DATE=81;
	public static final int KW_CURRENT_TIMESTAMP=82;
	public static final int KW_CURSOR=83;
	public static final int KW_DATA=84;
	public static final int KW_DATABASE=85;
	public static final int KW_DATABASES=86;
	public static final int KW_DATE=87;
	public static final int KW_DATETIME=88;
	public static final int KW_DAY=89;
	public static final int KW_DBPROPERTIES=90;
	public static final int KW_DEBUG=91;
	public static final int KW_DECIMAL=92;
	public static final int KW_DEFAULT=93;
	public static final int KW_DEFERRED=94;
	public static final int KW_DEFINED=95;
	public static final int KW_DELETE=96;
	public static final int KW_DELIMITED=97;
	public static final int KW_DEPENDENCY=98;
	public static final int KW_DESC=99;
	public static final int KW_DESCRIBE=100;
	public static final int KW_DETAIL=101;
	public static final int KW_DIRECTORIES=102;
	public static final int KW_DIRECTORY=103;
	public static final int KW_DISABLE=104;
	public static final int KW_DISTINCT=105;
	public static final int KW_DISTRIBUTE=106;
	public static final int KW_DO=107;
	public static final int KW_DOUBLE=108;
	public static final int KW_DOW=109;
	public static final int KW_DROP=110;
	public static final int KW_DUMP=111;
	public static final int KW_ELEM_TYPE=112;
	public static final int KW_ELSE=113;
	public static final int KW_ENABLE=114;
	public static final int KW_END=115;
	public static final int KW_ENFORCED=116;
	public static final int KW_ESCAPED=117;
	public static final int KW_EXCEPT=118;
	public static final int KW_EXCHANGE=119;
	public static final int KW_EXCLUSIVE=120;
	public static final int KW_EXISTS=121;
	public static final int KW_EXPLAIN=122;
	public static final int KW_EXPORT=123;
	public static final int KW_EXPRESSION=124;
	public static final int KW_EXTENDED=125;
	public static final int KW_EXTERNAL=126;
	public static final int KW_EXTRACT=127;
	public static final int KW_FALSE=128;
	public static final int KW_FETCH=129;
	public static final int KW_FIELDS=130;
	public static final int KW_FILE=131;
	public static final int KW_FILEFORMAT=132;
	public static final int KW_FIRST=133;
	public static final int KW_FLOAT=134;
	public static final int KW_FLOOR=135;
	public static final int KW_FOLLOWING=136;
	public static final int KW_FOR=137;
	public static final int KW_FORCE=138;
	public static final int KW_FOREIGN=139;
	public static final int KW_FORMAT=140;
	public static final int KW_FORMATTED=141;
	public static final int KW_FROM=142;
	public static final int KW_FULL=143;
	public static final int KW_FUNCTION=144;
	public static final int KW_FUNCTIONS=145;
	public static final int KW_GRANT=146;
	public static final int KW_GROUP=147;
	public static final int KW_GROUPING=148;
	public static final int KW_HAVING=149;
	public static final int KW_HOUR=150;
	public static final int KW_IDXPROPERTIES=151;
	public static final int KW_IF=152;
	public static final int KW_IMPORT=153;
	public static final int KW_IN=154;
	public static final int KW_INDEX=155;
	public static final int KW_INDEXES=156;
	public static final int KW_INNER=157;
	public static final int KW_INPATH=158;
	public static final int KW_INPUTDRIVER=159;
	public static final int KW_INPUTFORMAT=160;
	public static final int KW_INSERT=161;
	public static final int KW_INT=162;
	public static final int KW_INTERSECT=163;
	public static final int KW_INTERVAL=164;
	public static final int KW_INTO=165;
	public static final int KW_IS=166;
	public static final int KW_ISOLATION=167;
	public static final int KW_ITEMS=168;
	public static final int KW_JAR=169;
	public static final int KW_JOIN=170;
	public static final int KW_KEY=171;
	public static final int KW_KEYS=172;
	public static final int KW_KEY_TYPE=173;
	public static final int KW_KILL=174;
	public static final int KW_LAST=175;
	public static final int KW_LATERAL=176;
	public static final int KW_LEFT=177;
	public static final int KW_LESS=178;
	public static final int KW_LEVEL=179;
	public static final int KW_LIKE=180;
	public static final int KW_LIMIT=181;
	public static final int KW_LINES=182;
	public static final int KW_LOAD=183;
	public static final int KW_LOCAL=184;
	public static final int KW_LOCATION=185;
	public static final int KW_LOCK=186;
	public static final int KW_LOCKS=187;
	public static final int KW_LOGICAL=188;
	public static final int KW_LONG=189;
	public static final int KW_MACRO=190;
	public static final int KW_MANAGEMENT=191;
	public static final int KW_MAP=192;
	public static final int KW_MAPJOIN=193;
	public static final int KW_MAPPING=194;
	public static final int KW_MATCHED=195;
	public static final int KW_MATERIALIZED=196;
	public static final int KW_MERGE=197;
	public static final int KW_METADATA=198;
	public static final int KW_MINUS=199;
	public static final int KW_MINUTE=200;
	public static final int KW_MONTH=201;
	public static final int KW_MORE=202;
	public static final int KW_MOVE=203;
	public static final int KW_MSCK=204;
	public static final int KW_NONE=205;
	public static final int KW_NORELY=206;
	public static final int KW_NOSCAN=207;
	public static final int KW_NOT=208;
	public static final int KW_NOVALIDATE=209;
	public static final int KW_NULL=210;
	public static final int KW_NULLS=211;
	public static final int KW_OF=212;
	public static final int KW_OFFSET=213;
	public static final int KW_ON=214;
	public static final int KW_ONLY=215;
	public static final int KW_OPERATOR=216;
	public static final int KW_OPTION=217;
	public static final int KW_OR=218;
	public static final int KW_ORDER=219;
	public static final int KW_OUT=220;
	public static final int KW_OUTER=221;
	public static final int KW_OUTPUTDRIVER=222;
	public static final int KW_OUTPUTFORMAT=223;
	public static final int KW_OVER=224;
	public static final int KW_OVERWRITE=225;
	public static final int KW_OWNER=226;
	public static final int KW_PARTITION=227;
	public static final int KW_PARTITIONED=228;
	public static final int KW_PARTITIONS=229;
	public static final int KW_PATH=230;
	public static final int KW_PERCENT=231;
	public static final int KW_PLAN=232;
	public static final int KW_PLANS=233;
	public static final int KW_PLUS=234;
	public static final int KW_POOL=235;
	public static final int KW_PRECEDING=236;
	public static final int KW_PRECISION=237;
	public static final int KW_PRESERVE=238;
	public static final int KW_PRIMARY=239;
	public static final int KW_PRINCIPALS=240;
	public static final int KW_PROCEDURE=241;
	public static final int KW_PURGE=242;
	public static final int KW_QUARTER=243;
	public static final int KW_QUERY=244;
	public static final int KW_QUERY_PARALLELISM=245;
	public static final int KW_RANGE=246;
	public static final int KW_READ=247;
	public static final int KW_READS=248;
	public static final int KW_REAL=249;
	public static final int KW_REBUILD=250;
	public static final int KW_RECORDREADER=251;
	public static final int KW_RECORDWRITER=252;
	public static final int KW_REDUCE=253;
	public static final int KW_REFERENCES=254;
	public static final int KW_REGEXP=255;
	public static final int KW_RELOAD=256;
	public static final int KW_RELY=257;
	public static final int KW_RENAME=258;
	public static final int KW_REOPTIMIZATION=259;
	public static final int KW_REPAIR=260;
	public static final int KW_REPL=261;
	public static final int KW_REPLACE=262;
	public static final int KW_REPLICATION=263;
	public static final int KW_RESOURCE=264;
	public static final int KW_RESTRICT=265;
	public static final int KW_REVOKE=266;
	public static final int KW_REWRITE=267;
	public static final int KW_RIGHT=268;
	public static final int KW_RLIKE=269;
	public static final int KW_ROLE=270;
	public static final int KW_ROLES=271;
	public static final int KW_ROLLBACK=272;
	public static final int KW_ROLLUP=273;
	public static final int KW_ROW=274;
	public static final int KW_ROWS=275;
	public static final int KW_SCHEDULING_POLICY=276;
	public static final int KW_SCHEMA=277;
	public static final int KW_SCHEMAS=278;
	public static final int KW_SECOND=279;
	public static final int KW_SELECT=280;
	public static final int KW_SEMI=281;
	public static final int KW_SERDE=282;
	public static final int KW_SERDEPROPERTIES=283;
	public static final int KW_SERVER=284;
	public static final int KW_SET=285;
	public static final int KW_SETS=286;
	public static final int KW_SHARED=287;
	public static final int KW_SHOW=288;
	public static final int KW_SHOW_DATABASE=289;
	public static final int KW_SKEWED=290;
	public static final int KW_SMALLINT=291;
	public static final int KW_SNAPSHOT=292;
	public static final int KW_SORT=293;
	public static final int KW_SORTED=294;
	public static final int KW_SSL=295;
	public static final int KW_START=296;
	public static final int KW_STATISTICS=297;
	public static final int KW_STATUS=298;
	public static final int KW_STORED=299;
	public static final int KW_STREAMTABLE=300;
	public static final int KW_STRING=301;
	public static final int KW_STRUCT=302;
	public static final int KW_SUMMARY=303;
	public static final int KW_SYNC=304;
	public static final int KW_TABLE=305;
	public static final int KW_TABLES=306;
	public static final int KW_TABLESAMPLE=307;
	public static final int KW_TBLPROPERTIES=308;
	public static final int KW_TEMPORARY=309;
	public static final int KW_TERMINATED=310;
	public static final int KW_THEN=311;
	public static final int KW_TIME=312;
	public static final int KW_TIMESTAMP=313;
	public static final int KW_TIMESTAMPLOCALTZ=314;
	public static final int KW_TINYINT=315;
	public static final int KW_TO=316;
	public static final int KW_TOUCH=317;
	public static final int KW_TRANSACTION=318;
	public static final int KW_TRANSACTIONAL=319;
	public static final int KW_TRANSACTIONS=320;
	public static final int KW_TRANSFORM=321;
	public static final int KW_TRIGGER=322;
	public static final int KW_TRUE=323;
	public static final int KW_TRUNCATE=324;
	public static final int KW_UNARCHIVE=325;
	public static final int KW_UNBOUNDED=326;
	public static final int KW_UNDO=327;
	public static final int KW_UNION=328;
	public static final int KW_UNIONTYPE=329;
	public static final int KW_UNIQUE=330;
	public static final int KW_UNIQUEJOIN=331;
	public static final int KW_UNKNOWN=332;
	public static final int KW_UNLOCK=333;
	public static final int KW_UNMANAGED=334;
	public static final int KW_UNSET=335;
	public static final int KW_UNSIGNED=336;
	public static final int KW_UPDATE=337;
	public static final int KW_URI=338;
	public static final int KW_USE=339;
	public static final int KW_USER=340;
	public static final int KW_USING=341;
	public static final int KW_UTC=342;
	public static final int KW_UTCTIMESTAMP=343;
	public static final int KW_VALIDATE=344;
	public static final int KW_VALUES=345;
	public static final int KW_VALUE_TYPE=346;
	public static final int KW_VARCHAR=347;
	public static final int KW_VECTORIZATION=348;
	public static final int KW_VIEW=349;
	public static final int KW_VIEWS=350;
	public static final int KW_WAIT=351;
	public static final int KW_WEEK=352;
	public static final int KW_WHEN=353;
	public static final int KW_WHERE=354;
	public static final int KW_WHILE=355;
	public static final int KW_WINDOW=356;
	public static final int KW_WITH=357;
	public static final int KW_WORK=358;
	public static final int KW_WORKLOAD=359;
	public static final int KW_WRITE=360;
	public static final int KW_YEAR=361;
	public static final int KW_ZONE=362;
	public static final int LCURLY=363;
	public static final int LESSTHAN=364;
	public static final int LESSTHANOREQUALTO=365;
	public static final int LINE_COMMENT=366;
	public static final int LPAREN=367;
	public static final int LSQUARE=368;
	public static final int Letter=369;
	public static final int MINUS=370;
	public static final int MOD=371;
	public static final int NOTEQUAL=372;
	public static final int Number=373;
	public static final int NumberLiteral=374;
	public static final int PLUS=375;
	public static final int QUERY_HINT=376;
	public static final int QUESTION=377;
	public static final int QuotedIdentifier=378;
	public static final int RCURLY=379;
	public static final int RPAREN=380;
	public static final int RSQUARE=381;
	public static final int RegexComponent=382;
	public static final int SEMICOLON=383;
	public static final int STAR=384;
	public static final int StringLiteral=385;
	public static final int TILDE=386;
	public static final int WS=387;
	public static final int KW_BATCH=424;
	public static final int KW_DAYOFWEEK=461;
	public static final int KW_HOLD_DDLTIME=509;
	public static final int KW_IGNORE=513;
	public static final int KW_NO_DROP=560;
	public static final int KW_OFFLINE=564;
	public static final int KW_PROTECTION=590;
	public static final int KW_READONLY=597;
	public static final int KW_TIMESTAMPTZ=658;
	public static final int TOK_ABORT_TRANSACTIONS=719;
	public static final int TOK_ACTIVATE=720;
	public static final int TOK_ADD_TRIGGER=721;
	public static final int TOK_ADMIN_OPTION_FOR=722;
	public static final int TOK_ALIASLIST=723;
	public static final int TOK_ALLCOLREF=724;
	public static final int TOK_ALLOC_FRACTION=725;
	public static final int TOK_ALTERDATABASE_LOCATION=726;
	public static final int TOK_ALTERDATABASE_OWNER=727;
	public static final int TOK_ALTERDATABASE_PROPERTIES=728;
	public static final int TOK_ALTERTABLE=729;
	public static final int TOK_ALTERTABLE_ADDCOLS=730;
	public static final int TOK_ALTERTABLE_ADDCONSTRAINT=731;
	public static final int TOK_ALTERTABLE_ADDPARTS=732;
	public static final int TOK_ALTERTABLE_ARCHIVE=733;
	public static final int TOK_ALTERTABLE_BUCKETS=734;
	public static final int TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION=735;
	public static final int TOK_ALTERTABLE_CLUSTER_SORT=736;
	public static final int TOK_ALTERTABLE_COMPACT=737;
	public static final int TOK_ALTERTABLE_DROPCONSTRAINT=738;
	public static final int TOK_ALTERTABLE_DROPPARTS=739;
	public static final int TOK_ALTERTABLE_DROPPROPERTIES=740;
	public static final int TOK_ALTERTABLE_EXCHANGEPARTITION=741;
	public static final int TOK_ALTERTABLE_FILEFORMAT=742;
	public static final int TOK_ALTERTABLE_LOCATION=743;
	public static final int TOK_ALTERTABLE_MERGEFILES=744;
	public static final int TOK_ALTERTABLE_OWNER=745;
	public static final int TOK_ALTERTABLE_PARTCOLTYPE=746;
	public static final int TOK_ALTERTABLE_PROPERTIES=747;
	public static final int TOK_ALTERTABLE_RENAME=748;
	public static final int TOK_ALTERTABLE_RENAMECOL=749;
	public static final int TOK_ALTERTABLE_RENAMEPART=750;
	public static final int TOK_ALTERTABLE_REPLACECOLS=751;
	public static final int TOK_ALTERTABLE_SERDEPROPERTIES=752;
	public static final int TOK_ALTERTABLE_SERIALIZER=753;
	public static final int TOK_ALTERTABLE_SKEWED=754;
	public static final int TOK_ALTERTABLE_SKEWED_LOCATION=755;
	public static final int TOK_ALTERTABLE_TOUCH=756;
	public static final int TOK_ALTERTABLE_UNARCHIVE=757;
	public static final int TOK_ALTERTABLE_UPDATECOLSTATS=758;
	public static final int TOK_ALTERTABLE_UPDATECOLUMNS=759;
	public static final int TOK_ALTERTABLE_UPDATESTATS=760;
	public static final int TOK_ALTERVIEW=761;
	public static final int TOK_ALTERVIEW_ADDPARTS=762;
	public static final int TOK_ALTERVIEW_DROPPARTS=763;
	public static final int TOK_ALTERVIEW_DROPPROPERTIES=764;
	public static final int TOK_ALTERVIEW_PROPERTIES=765;
	public static final int TOK_ALTERVIEW_RENAME=766;
	public static final int TOK_ALTER_MAPPING=767;
	public static final int TOK_ALTER_MATERIALIZED_VIEW=768;
	public static final int TOK_ALTER_MATERIALIZED_VIEW_REBUILD=769;
	public static final int TOK_ALTER_MATERIALIZED_VIEW_REWRITE=770;
	public static final int TOK_ALTER_POOL=771;
	public static final int TOK_ALTER_RP=772;
	public static final int TOK_ALTER_TRIGGER=773;
	public static final int TOK_ANALYZE=774;
	public static final int TOK_ARCHIVE=775;
	public static final int TOK_BIGINT=776;
	public static final int TOK_BINARY=777;
	public static final int TOK_BLOCKING=778;
	public static final int TOK_BOOLEAN=779;
	public static final int TOK_CACHE_METADATA=780;
	public static final int TOK_CASCADE=781;
	public static final int TOK_CHAR=782;
	public static final int TOK_CHARSETLITERAL=783;
	public static final int TOK_CHECK_CONSTRAINT=784;
	public static final int TOK_CLUSTERBY=785;
	public static final int TOK_COLTYPELIST=786;
	public static final int TOK_COL_NAME=787;
	public static final int TOK_COMMIT=788;
	public static final int TOK_CONSTRAINT_NAME=789;
	public static final int TOK_CREATEDATABASE=790;
	public static final int TOK_CREATEFUNCTION=791;
	public static final int TOK_CREATEMACRO=792;
	public static final int TOK_CREATEROLE=793;
	public static final int TOK_CREATETABLE=794;
	public static final int TOK_CREATEVIEW=795;
	public static final int TOK_CREATE_MAPPING=796;
	public static final int TOK_CREATE_MATERIALIZED_VIEW=797;
	public static final int TOK_CREATE_POOL=798;
	public static final int TOK_CREATE_RP=799;
	public static final int TOK_CREATE_TRIGGER=800;
	public static final int TOK_CROSSJOIN=801;
	public static final int TOK_CTE=802;
	public static final int TOK_CUBE_GROUPBY=803;
	public static final int TOK_DATABASECOMMENT=804;
	public static final int TOK_DATABASELOCATION=805;
	public static final int TOK_DATABASEPROPERTIES=806;
	public static final int TOK_DATE=807;
	public static final int TOK_DATELITERAL=808;
	public static final int TOK_DATETIME=809;
	public static final int TOK_DBNAME=810;
	public static final int TOK_DBPROPLIST=811;
	public static final int TOK_DB_TYPE=812;
	public static final int TOK_DECIMAL=813;
	public static final int TOK_DEFAULT_POOL=814;
	public static final int TOK_DEFAULT_VALUE=815;
	public static final int TOK_DELETE=816;
	public static final int TOK_DELETE_FROM=817;
	public static final int TOK_DESCDATABASE=818;
	public static final int TOK_DESCFUNCTION=819;
	public static final int TOK_DESCTABLE=820;
	public static final int TOK_DESTINATION=821;
	public static final int TOK_DETAIL=822;
	public static final int TOK_DIR=823;
	public static final int TOK_DISABLE=824;
	public static final int TOK_DISTRIBUTEBY=825;
	public static final int TOK_DOUBLE=826;
	public static final int TOK_DROPDATABASE=827;
	public static final int TOK_DROPFUNCTION=828;
	public static final int TOK_DROPMACRO=829;
	public static final int TOK_DROPROLE=830;
	public static final int TOK_DROPTABLE=831;
	public static final int TOK_DROPVIEW=832;
	public static final int TOK_DROP_MAPPING=833;
	public static final int TOK_DROP_MATERIALIZED_VIEW=834;
	public static final int TOK_DROP_POOL=835;
	public static final int TOK_DROP_RP=836;
	public static final int TOK_DROP_TRIGGER=837;
	public static final int TOK_ENABLE=838;
	public static final int TOK_EXCEPTALL=839;
	public static final int TOK_EXCEPTDISTINCT=840;
	public static final int TOK_EXPLAIN=841;
	public static final int TOK_EXPLAIN_SQ_REWRITE=842;
	public static final int TOK_EXPLIST=843;
	public static final int TOK_EXPORT=844;
	public static final int TOK_EXPRESSION=845;
	public static final int TOK_FALSE=846;
	public static final int TOK_FILE=847;
	public static final int TOK_FILEFORMAT_GENERIC=848;
	public static final int TOK_FLOAT=849;
	public static final int TOK_FORCE=850;
	public static final int TOK_FOREIGN_KEY=851;
	public static final int TOK_FROM=852;
	public static final int TOK_FULLOUTERJOIN=853;
	public static final int TOK_FUNCTION=854;
	public static final int TOK_FUNCTIONDI=855;
	public static final int TOK_FUNCTIONSTAR=856;
	public static final int TOK_GRANT=857;
	public static final int TOK_GRANT_OPTION_FOR=858;
	public static final int TOK_GRANT_ROLE=859;
	public static final int TOK_GRANT_WITH_ADMIN_OPTION=860;
	public static final int TOK_GRANT_WITH_OPTION=861;
	public static final int TOK_GROUP=862;
	public static final int TOK_GROUPBY=863;
	public static final int TOK_GROUPING_SETS=864;
	public static final int TOK_GROUPING_SETS_EXPRESSION=865;
	public static final int TOK_HAVING=866;
	public static final int TOK_IFEXISTS=867;
	public static final int TOK_IFNOTEXISTS=868;
	public static final int TOK_IMPORT=869;
	public static final int TOK_INPUTFORMAT=870;
	public static final int TOK_INSERT=871;
	public static final int TOK_INSERT_INTO=872;
	public static final int TOK_INT=873;
	public static final int TOK_INTERSECTALL=874;
	public static final int TOK_INTERSECTDISTINCT=875;
	public static final int TOK_INTERVAL_DAY_LITERAL=876;
	public static final int TOK_INTERVAL_DAY_TIME=877;
	public static final int TOK_INTERVAL_DAY_TIME_LITERAL=878;
	public static final int TOK_INTERVAL_HOUR_LITERAL=879;
	public static final int TOK_INTERVAL_MINUTE_LITERAL=880;
	public static final int TOK_INTERVAL_MONTH_LITERAL=881;
	public static final int TOK_INTERVAL_SECOND_LITERAL=882;
	public static final int TOK_INTERVAL_YEAR_LITERAL=883;
	public static final int TOK_INTERVAL_YEAR_MONTH=884;
	public static final int TOK_INTERVAL_YEAR_MONTH_LITERAL=885;
	public static final int TOK_ISOLATION_LEVEL=886;
	public static final int TOK_ISOLATION_SNAPSHOT=887;
	public static final int TOK_JAR=888;
	public static final int TOK_JOIN=889;
	public static final int TOK_KILL_QUERY=890;
	public static final int TOK_LATERAL_VIEW=891;
	public static final int TOK_LATERAL_VIEW_OUTER=892;
	public static final int TOK_LEFTOUTERJOIN=893;
	public static final int TOK_LEFTSEMIJOIN=894;
	public static final int TOK_LENGTH=895;
	public static final int TOK_LIKERP=896;
	public static final int TOK_LIKETABLE=897;
	public static final int TOK_LIMIT=898;
	public static final int TOK_LIST=899;
	public static final int TOK_LOAD=900;
	public static final int TOK_LOCKDB=901;
	public static final int TOK_LOCKTABLE=902;
	public static final int TOK_MAP=903;
	public static final int TOK_MATCHED=904;
	public static final int TOK_MERGE=905;
	public static final int TOK_METADATA=906;
	public static final int TOK_MSCK=907;
	public static final int TOK_NORELY=908;
	public static final int TOK_NOT_CLUSTERED=909;
	public static final int TOK_NOT_MATCHED=910;
	public static final int TOK_NOT_NULL=911;
	public static final int TOK_NOT_SORTED=912;
	public static final int TOK_NOVALIDATE=913;
	public static final int TOK_NO_DROP=914;
	public static final int TOK_NULL=915;
	public static final int TOK_NULLS_FIRST=916;
	public static final int TOK_NULLS_LAST=917;
	public static final int TOK_OFFLINE=918;
	public static final int TOK_OFFSET=919;
	public static final int TOK_ONLY=920;
	public static final int TOK_OPERATOR=921;
	public static final int TOK_OP_ADD=922;
	public static final int TOK_OP_AND=923;
	public static final int TOK_OP_BITAND=924;
	public static final int TOK_OP_BITNOT=925;
	public static final int TOK_OP_BITOR=926;
	public static final int TOK_OP_BITXOR=927;
	public static final int TOK_OP_DIV=928;
	public static final int TOK_OP_EQ=929;
	public static final int TOK_OP_GE=930;
	public static final int TOK_OP_GT=931;
	public static final int TOK_OP_LE=932;
	public static final int TOK_OP_LIKE=933;
	public static final int TOK_OP_LT=934;
	public static final int TOK_OP_MOD=935;
	public static final int TOK_OP_MUL=936;
	public static final int TOK_OP_NE=937;
	public static final int TOK_OP_NOT=938;
	public static final int TOK_OP_OR=939;
	public static final int TOK_OP_SUB=940;
	public static final int TOK_ORDERBY=941;
	public static final int TOK_ORREPLACE=942;
	public static final int TOK_PARTITIONINGSPEC=943;
	public static final int TOK_PARTITIONLOCATION=944;
	public static final int TOK_PARTSPEC=945;
	public static final int TOK_PARTVAL=946;
	public static final int TOK_PATH=947;
	public static final int TOK_PERCENT=948;
	public static final int TOK_PRIMARY_KEY=949;
	public static final int TOK_PRINCIPAL_NAME=950;
	public static final int TOK_PRIVILEGE=951;
	public static final int TOK_PRIVILEGE_LIST=952;
	public static final int TOK_PRIV_ALL=953;
	public static final int TOK_PRIV_ALTER_DATA=954;
	public static final int TOK_PRIV_ALTER_METADATA=955;
	public static final int TOK_PRIV_CREATE=956;
	public static final int TOK_PRIV_DELETE=957;
	public static final int TOK_PRIV_DROP=958;
	public static final int TOK_PRIV_INSERT=959;
	public static final int TOK_PRIV_LOCK=960;
	public static final int TOK_PRIV_OBJECT=961;
	public static final int TOK_PRIV_OBJECT_COL=962;
	public static final int TOK_PRIV_SELECT=963;
	public static final int TOK_PRIV_SHOW_DATABASE=964;
	public static final int TOK_PTBLFUNCTION=965;
	public static final int TOK_QUERY=966;
	public static final int TOK_QUERY_PARALLELISM=967;
	public static final int TOK_READONLY=968;
	public static final int TOK_REAL=969;
	public static final int TOK_RECORDREADER=970;
	public static final int TOK_RECORDWRITER=971;
	public static final int TOK_RELOADFUNCTION=972;
	public static final int TOK_RELY=973;
	public static final int TOK_RENAME=974;
	public static final int TOK_REPLACE=975;
	public static final int TOK_REPLICATION=976;
	public static final int TOK_REPL_CONFIG=977;
	public static final int TOK_REPL_CONFIG_LIST=978;
	public static final int TOK_REPL_DUMP=979;
	public static final int TOK_REPL_LOAD=980;
	public static final int TOK_REPL_STATUS=981;
	public static final int TOK_RESOURCE_ALL=982;
	public static final int TOK_RESOURCE_LIST=983;
	public static final int TOK_RESOURCE_URI=984;
	public static final int TOK_RESTRICT=985;
	public static final int TOK_REVOKE=986;
	public static final int TOK_REVOKE_ROLE=987;
	public static final int TOK_REWRITE_DISABLED=988;
	public static final int TOK_REWRITE_ENABLED=989;
	public static final int TOK_RIGHTOUTERJOIN=990;
	public static final int TOK_ROLE=991;
	public static final int TOK_ROLLBACK=992;
	public static final int TOK_ROLLUP_GROUPBY=993;
	public static final int TOK_ROWCOUNT=994;
	public static final int TOK_SCHEDULING_POLICY=995;
	public static final int TOK_SELECT=996;
	public static final int TOK_SELECTDI=997;
	public static final int TOK_SELEXPR=998;
	public static final int TOK_SERDE=999;
	public static final int TOK_SERDENAME=1000;
	public static final int TOK_SERDEPROPS=1001;
	public static final int TOK_SERVER_TYPE=1002;
	public static final int TOK_SETCOLREF=1003;
	public static final int TOK_SET_AUTOCOMMIT=1004;
	public static final int TOK_SET_COLUMNS_CLAUSE=1005;
	public static final int TOK_SHOWCOLUMNS=1006;
	public static final int TOK_SHOWCONF=1007;
	public static final int TOK_SHOWDATABASES=1008;
	public static final int TOK_SHOWDBLOCKS=1009;
	public static final int TOK_SHOWFUNCTIONS=1010;
	public static final int TOK_SHOWLOCKS=1011;
	public static final int TOK_SHOWMATERIALIZEDVIEWS=1012;
	public static final int TOK_SHOWPARTITIONS=1013;
	public static final int TOK_SHOWTABLES=1014;
	public static final int TOK_SHOWVIEWS=1015;
	public static final int TOK_SHOW_COMPACTIONS=1016;
	public static final int TOK_SHOW_CREATEDATABASE=1017;
	public static final int TOK_SHOW_CREATETABLE=1018;
	public static final int TOK_SHOW_GRANT=1019;
	public static final int TOK_SHOW_ROLES=1020;
	public static final int TOK_SHOW_ROLE_GRANT=1021;
	public static final int TOK_SHOW_ROLE_PRINCIPALS=1022;
	public static final int TOK_SHOW_RP=1023;
	public static final int TOK_SHOW_SET_ROLE=1024;
	public static final int TOK_SHOW_TABLESTATUS=1025;
	public static final int TOK_SHOW_TBLPROPERTIES=1026;
	public static final int TOK_SHOW_TRANSACTIONS=1027;
	public static final int TOK_SKEWED_LOCATIONS=1028;
	public static final int TOK_SKEWED_LOCATION_LIST=1029;
	public static final int TOK_SKEWED_LOCATION_MAP=1030;
	public static final int TOK_SMALLINT=1031;
	public static final int TOK_SORTBY=1032;
	public static final int TOK_START_TRANSACTION=1033;
	public static final int TOK_STORAGEHANDLER=1034;
	public static final int TOK_STOREDASDIRS=1035;
	public static final int TOK_STRING=1036;
	public static final int TOK_STRINGLITERALSEQUENCE=1037;
	public static final int TOK_STRUCT=1038;
	public static final int TOK_SUBQUERY=1039;
	public static final int TOK_SUBQUERY_EXPR=1040;
	public static final int TOK_SUBQUERY_OP=1041;
	public static final int TOK_SUBQUERY_OP_NOTEXISTS=1042;
	public static final int TOK_SUBQUERY_OP_NOTIN=1043;
	public static final int TOK_SUMMARY=1044;
	public static final int TOK_SWITCHDATABASE=1045;
	public static final int TOK_TAB=1046;
	public static final int TOK_TABALIAS=1047;
	public static final int TOK_TABCOL=1048;
	public static final int TOK_TABCOLLIST=1049;
	public static final int TOK_TABCOLNAME=1050;
	public static final int TOK_TABCOLVALUE=1051;
	public static final int TOK_TABCOLVALUES=1052;
	public static final int TOK_TABCOLVALUE_PAIR=1053;
	public static final int TOK_TABLEBUCKETSAMPLE=1054;
	public static final int TOK_TABLECOMMENT=1055;
	public static final int TOK_TABLEFILEFORMAT=1056;
	public static final int TOK_TABLELOCATION=1057;
	public static final int TOK_TABLEPARTCOLNAMES=1058;
	public static final int TOK_TABLEPARTCOLS=1059;
	public static final int TOK_TABLEPROPERTIES=1060;
	public static final int TOK_TABLEPROPERTY=1061;
	public static final int TOK_TABLEPROPLIST=1062;
	public static final int TOK_TABLEROWFORMAT=1063;
	public static final int TOK_TABLEROWFORMATCOLLITEMS=1064;
	public static final int TOK_TABLEROWFORMATFIELD=1065;
	public static final int TOK_TABLEROWFORMATLINES=1066;
	public static final int TOK_TABLEROWFORMATMAPKEYS=1067;
	public static final int TOK_TABLEROWFORMATNULL=1068;
	public static final int TOK_TABLESERIALIZER=1069;
	public static final int TOK_TABLESKEWED=1070;
	public static final int TOK_TABLESPLITSAMPLE=1071;
	public static final int TOK_TABLE_OR_COL=1072;
	public static final int TOK_TABLE_PARTITION=1073;
	public static final int TOK_TABLE_TYPE=1074;
	public static final int TOK_TABNAME=1075;
	public static final int TOK_TABREF=1076;
	public static final int TOK_TABSORTCOLNAMEASC=1077;
	public static final int TOK_TABSORTCOLNAMEDESC=1078;
	public static final int TOK_TABSRC=1079;
	public static final int TOK_TABTYPE=1080;
	public static final int TOK_TEMPORARY=1081;
	public static final int TOK_TIMESTAMP=1082;
	public static final int TOK_TIMESTAMPLITERAL=1083;
	public static final int TOK_TIMESTAMPLOCALTZ=1084;
	public static final int TOK_TIMESTAMPLOCALTZLITERAL=1085;
	public static final int TOK_TINYINT=1086;
	public static final int TOK_TMP_FILE=1087;
	public static final int TOK_TO=1088;
	public static final int TOK_TRANSFORM=1089;
	public static final int TOK_TRIGGER_EXPRESSION=1090;
	public static final int TOK_TRUE=1091;
	public static final int TOK_TRUNCATETABLE=1092;
	public static final int TOK_TXN_ACCESS_MODE=1093;
	public static final int TOK_TXN_READ_ONLY=1094;
	public static final int TOK_TXN_READ_WRITE=1095;
	public static final int TOK_UNIONALL=1096;
	public static final int TOK_UNIONDISTINCT=1097;
	public static final int TOK_UNIONTYPE=1098;
	public static final int TOK_UNIQUE=1099;
	public static final int TOK_UNIQUEJOIN=1100;
	public static final int TOK_UNKNOWN=1101;
	public static final int TOK_UNLOCKDB=1102;
	public static final int TOK_UNLOCKTABLE=1103;
	public static final int TOK_UNMANAGED=1104;
	public static final int TOK_UPDATE=1105;
	public static final int TOK_UPDATE_TABLE=1106;
	public static final int TOK_URI_TYPE=1107;
	public static final int TOK_USER=1108;
	public static final int TOK_USERSCRIPTCOLNAMES=1109;
	public static final int TOK_USERSCRIPTCOLSCHEMA=1110;
	public static final int TOK_VALIDATE=1111;
	public static final int TOK_VARCHAR=1112;
	public static final int TOK_VIEWPARTCOLS=1113;
	public static final int TOK_WHERE=1114;
	public static final int TOK_WINDOWDEF=1115;
	public static final int TOK_WINDOWRANGE=1116;
	public static final int TOK_WINDOWSPEC=1117;
	public static final int TOK_WINDOWVALUES=1118;

	// delegates
	public HiveParser_SelectClauseParser gSelectClauseParser;
	public HiveParser_FromClauseParser gFromClauseParser;
	public HiveParser_IdentifiersParser gIdentifiersParser;
	public HiveParser_ResourcePlanParser gResourcePlanParser;
	public Parser[] getDelegates() {
		return new Parser[] {gSelectClauseParser, gFromClauseParser, gIdentifiersParser, gResourcePlanParser};
	}

	// delegators


	public HiveParser(TokenStream input) {
		this(input, new RecognizerSharedState());
	}
	public HiveParser(TokenStream input, RecognizerSharedState state) {
		super(input, state);
		gSelectClauseParser = new HiveParser_SelectClauseParser(input, state, this);
		gFromClauseParser = new HiveParser_FromClauseParser(input, state, this);
		gIdentifiersParser = new HiveParser_IdentifiersParser(input, state, this);
		gResourcePlanParser = new HiveParser_ResourcePlanParser(input, state, this);
	}

	protected TreeAdaptor adaptor = new CommonTreeAdaptor();

	public void setTreeAdaptor(TreeAdaptor adaptor) {
		this.adaptor = adaptor;
		gSelectClauseParser.setTreeAdaptor(this.adaptor);gFromClauseParser.setTreeAdaptor(this.adaptor);gIdentifiersParser.setTreeAdaptor(this.adaptor);gResourcePlanParser.setTreeAdaptor(this.adaptor);
	}
	public TreeAdaptor getTreeAdaptor() {
		return adaptor;
	}
	@Override public String[] getTokenNames() { return HiveParser.tokenNames; }
	@Override public String getGrammarFileName() { return "HiveParser.g"; }


	  ArrayList<ParseError> errors = new ArrayList<ParseError>();
	  Stack msgs = new Stack<String>();
	  public Stack xstarttokens = new Stack<Token>();

	  private static HashMap<String, String> xlateMap;
	  static {
	    //this is used to support auto completion in CLI
	    xlateMap = new HashMap<String, String>();

	    // Keywords
	    xlateMap.put("KW_TRUE", "TRUE");
	    xlateMap.put("KW_FALSE", "FALSE");
	    xlateMap.put("KW_UNKNOWN", "UNKNOWN");
	    xlateMap.put("KW_ALL", "ALL");
	    xlateMap.put("KW_NONE", "NONE");
	    xlateMap.put("KW_AND", "AND");
	    xlateMap.put("KW_OR", "OR");
	    xlateMap.put("KW_NOT", "NOT");
	    xlateMap.put("KW_LIKE", "LIKE");

	    xlateMap.put("KW_ASC", "ASC");
	    xlateMap.put("KW_DESC", "DESC");
	    xlateMap.put("KW_NULLS", "NULLS");
	    xlateMap.put("KW_LAST", "LAST");
	    xlateMap.put("KW_ORDER", "ORDER");
	    xlateMap.put("KW_BY", "BY");
	    xlateMap.put("KW_GROUP", "GROUP");
	    xlateMap.put("KW_WHERE", "WHERE");
	    xlateMap.put("KW_FROM", "FROM");
	    xlateMap.put("KW_AS", "AS");
	    xlateMap.put("KW_SELECT", "SELECT");
	    xlateMap.put("KW_DISTINCT", "DISTINCT");
	    xlateMap.put("KW_INSERT", "INSERT");
	    xlateMap.put("KW_OVERWRITE", "OVERWRITE");
	    xlateMap.put("KW_OUTER", "OUTER");
	    xlateMap.put("KW_JOIN", "JOIN");
	    xlateMap.put("KW_LEFT", "LEFT");
	    xlateMap.put("KW_RIGHT", "RIGHT");
	    xlateMap.put("KW_FULL", "FULL");
	    xlateMap.put("KW_ON", "ON");
	    xlateMap.put("KW_PARTITION", "PARTITION");
	    xlateMap.put("KW_PARTITIONS", "PARTITIONS");
	    xlateMap.put("KW_TABLE", "TABLE");
	    xlateMap.put("KW_TABLES", "TABLES");
	    xlateMap.put("KW_TBLPROPERTIES", "TBLPROPERTIES");
	    xlateMap.put("KW_SHOW", "SHOW");
	    xlateMap.put("KW_MSCK", "MSCK");
	    xlateMap.put("KW_DIRECTORY", "DIRECTORY");
	    xlateMap.put("KW_LOCAL", "LOCAL");
	    xlateMap.put("KW_TRANSFORM", "TRANSFORM");
	    xlateMap.put("KW_USING", "USING");
	    xlateMap.put("KW_CLUSTER", "CLUSTER");
	    xlateMap.put("KW_DISTRIBUTE", "DISTRIBUTE");
	    xlateMap.put("KW_SORT", "SORT");
	    xlateMap.put("KW_SYNC", "SYNC");
	    xlateMap.put("KW_UNION", "UNION");
	    xlateMap.put("KW_INTERSECT", "INTERSECT");
	    xlateMap.put("KW_EXCEPT", "EXCEPT");
	    xlateMap.put("KW_LOAD", "LOAD");
	    xlateMap.put("KW_DATA", "DATA");
	    xlateMap.put("KW_INPATH", "INPATH");
	    xlateMap.put("KW_IS", "IS");
	    xlateMap.put("KW_NULL", "NULL");
	    xlateMap.put("KW_CREATE", "CREATE");
	    xlateMap.put("KW_EXTERNAL", "EXTERNAL");
	    xlateMap.put("KW_ALTER", "ALTER");
	    xlateMap.put("KW_DESCRIBE", "DESCRIBE");
	    xlateMap.put("KW_DROP", "DROP");
	    xlateMap.put("KW_RENAME", "RENAME");
	    xlateMap.put("KW_TO", "TO");
	    xlateMap.put("KW_COMMENT", "COMMENT");
	    xlateMap.put("KW_BOOLEAN", "BOOLEAN");
	    xlateMap.put("KW_TINYINT", "TINYINT");
	    xlateMap.put("KW_SMALLINT", "SMALLINT");
	    xlateMap.put("KW_INT", "INT");
	    xlateMap.put("KW_BIGINT", "BIGINT");
	    xlateMap.put("KW_FLOAT", "FLOAT");
	    xlateMap.put("KW_REAL", "REAL");
	    xlateMap.put("KW_DOUBLE", "DOUBLE");
	    xlateMap.put("KW_PRECISION", "PRECISION");
	    xlateMap.put("KW_DATE", "DATE");
	    xlateMap.put("KW_DATETIME", "DATETIME");
	    xlateMap.put("KW_TIMESTAMP", "TIMESTAMP");
	    xlateMap.put("KW_TIMESTAMPLOCALTZ", "TIMESTAMPLOCALTZ");
	    xlateMap.put("KW_TIME", "TIME");
	    xlateMap.put("KW_ZONE", "ZONE");
	    xlateMap.put("KW_STRING", "STRING");
	    xlateMap.put("KW_BINARY", "BINARY");
	    xlateMap.put("KW_ARRAY", "ARRAY");
	    xlateMap.put("KW_MAP", "MAP");
	    xlateMap.put("KW_REDUCE", "REDUCE");
	    xlateMap.put("KW_PARTITIONED", "PARTITIONED");
	    xlateMap.put("KW_CLUSTERED", "CLUSTERED");
	    xlateMap.put("KW_SORTED", "SORTED");
	    xlateMap.put("KW_INTO", "INTO");
	    xlateMap.put("KW_BUCKETS", "BUCKETS");
	    xlateMap.put("KW_ROW", "ROW");
	    xlateMap.put("KW_FORMAT", "FORMAT");
	    xlateMap.put("KW_DELIMITED", "DELIMITED");
	    xlateMap.put("KW_FIELDS", "FIELDS");
	    xlateMap.put("KW_TERMINATED", "TERMINATED");
	    xlateMap.put("KW_COLLECTION", "COLLECTION");
	    xlateMap.put("KW_ITEMS", "ITEMS");
	    xlateMap.put("KW_KEYS", "KEYS");
	    xlateMap.put("KW_KEY_TYPE", "$KEY$");
	    xlateMap.put("KW_LINES", "LINES");
	    xlateMap.put("KW_STORED", "STORED");
	    xlateMap.put("KW_SEQUENCEFILE", "SEQUENCEFILE");
	    xlateMap.put("KW_TEXTFILE", "TEXTFILE");
	    xlateMap.put("KW_INPUTFORMAT", "INPUTFORMAT");
	    xlateMap.put("KW_OUTPUTFORMAT", "OUTPUTFORMAT");
	    xlateMap.put("KW_LOCATION", "LOCATION");
	    xlateMap.put("KW_TABLESAMPLE", "TABLESAMPLE");
	    xlateMap.put("KW_BUCKET", "BUCKET");
	    xlateMap.put("KW_OUT", "OUT");
	    xlateMap.put("KW_OF", "OF");
	    xlateMap.put("KW_CAST", "CAST");
	    xlateMap.put("KW_ADD", "ADD");
	    xlateMap.put("KW_REPLACE", "REPLACE");
	    xlateMap.put("KW_COLUMNS", "COLUMNS");
	    xlateMap.put("KW_RLIKE", "RLIKE");
	    xlateMap.put("KW_REGEXP", "REGEXP");
	    xlateMap.put("KW_TEMPORARY", "TEMPORARY");
	    xlateMap.put("KW_FUNCTION", "FUNCTION");
	    xlateMap.put("KW_EXPLAIN", "EXPLAIN");
	    xlateMap.put("KW_EXTENDED", "EXTENDED");
	    xlateMap.put("KW_DEBUG", "DEBUG");
	    xlateMap.put("KW_SERDE", "SERDE");
	    xlateMap.put("KW_WITH", "WITH");
	    xlateMap.put("KW_SERDEPROPERTIES", "SERDEPROPERTIES");
	    xlateMap.put("KW_LIMIT", "LIMIT");
	    xlateMap.put("KW_OFFSET", "OFFSET");
	    xlateMap.put("KW_SET", "SET");
	    xlateMap.put("KW_PROPERTIES", "TBLPROPERTIES");
	    xlateMap.put("KW_VALUE_TYPE", "$VALUE$");
	    xlateMap.put("KW_ELEM_TYPE", "$ELEM$");
	    xlateMap.put("KW_DEFINED", "DEFINED");
	    xlateMap.put("KW_SUBQUERY", "SUBQUERY");
	    xlateMap.put("KW_REWRITE", "REWRITE");
	    xlateMap.put("KW_UPDATE", "UPDATE");
	    xlateMap.put("KW_VALUES", "VALUES");
	    xlateMap.put("KW_PURGE", "PURGE");
	    xlateMap.put("KW_UNIQUE", "UNIQUE");
	    xlateMap.put("KW_PRIMARY", "PRIMARY");
	    xlateMap.put("KW_FOREIGN", "FOREIGN");
	    xlateMap.put("KW_KEY", "KEY");
	    xlateMap.put("KW_REFERENCES", "REFERENCES");
	    xlateMap.put("KW_CONSTRAINT", "CONSTRAINT");
	    xlateMap.put("KW_ENABLE", "ENABLE");
	    xlateMap.put("KW_DISABLE", "DISABLE");
	    xlateMap.put("KW_VALIDATE", "VALIDATE");
	    xlateMap.put("KW_NOVALIDATE", "NOVALIDATE");
	    xlateMap.put("KW_RELY", "RELY");
	    xlateMap.put("KW_NORELY", "NORELY");
	    xlateMap.put("KW_ABORT", "ABORT");
	    xlateMap.put("KW_TRANSACTIONS", "TRANSACTIONS");
	    xlateMap.put("KW_COMPACTIONS", "COMPACTIONS");
	    xlateMap.put("KW_COMPACT", "COMPACT");
	    xlateMap.put("KW_WAIT", "WAIT");
	    xlateMap.put("KW_KILL", "KILL");
	    xlateMap.put("KW_QUERY", "QUERY");
	    xlateMap.put("KW_RESOURCE", "RESOURCE");
	    xlateMap.put("KW_PLAN", "PLAN");
	    xlateMap.put("KW_QUERY_PARALLELISM", "QUERY_PARALLELISM");
	    xlateMap.put("KW_PLANS", "PLANS");
	    xlateMap.put("KW_ACTIVATE", "ACTIVATE");
	    xlateMap.put("KW_DEFAULT", "DEFAULT");
	    xlateMap.put("KW_CHECK", "CHECK");
	    xlateMap.put("KW_POOL", "POOL");
	    xlateMap.put("KW_MOVE", "MOVE");
	    xlateMap.put("KW_DO", "DO");
	    xlateMap.put("KW_ALLOC_FRACTION", "ALLOC_FRACTION");
	    xlateMap.put("KW_SCHEDULING_POLICY", "SCHEDULING_POLICY");
	    xlateMap.put("KW_PATH", "PATH");
	    xlateMap.put("KW_AST", "AST");
	    xlateMap.put("KW_TRANSACTIONAL", "TRANSACTIONAL");

	    // Operators
	    xlateMap.put("DOT", ".");
	    xlateMap.put("COLON", ":");
	    xlateMap.put("COMMA", ",");
	    xlateMap.put("SEMICOLON", ");");

	    xlateMap.put("LPAREN", "(");
	    xlateMap.put("RPAREN", ")");
	    xlateMap.put("LSQUARE", "[");
	    xlateMap.put("RSQUARE", "]");

	    xlateMap.put("EQUAL", "=");
	    xlateMap.put("NOTEQUAL", "<>");
	    xlateMap.put("EQUAL_NS", "<=>");
	    xlateMap.put("LESSTHANOREQUALTO", "<=");
	    xlateMap.put("LESSTHAN", "<");
	    xlateMap.put("GREATERTHANOREQUALTO", ">=");
	    xlateMap.put("GREATERTHAN", ">");

	    xlateMap.put("DIVIDE", "/");
	    xlateMap.put("PLUS", "+");
	    xlateMap.put("MINUS", "-");
	    xlateMap.put("STAR", "*");
	    xlateMap.put("MOD", "%");

	    xlateMap.put("AMPERSAND", "&");
	    xlateMap.put("TILDE", "~");
	    xlateMap.put("BITWISEOR", "|");
	    xlateMap.put("BITWISEXOR", "^");
	    xlateMap.put("CharSetLiteral", "\\'");
	  }

	  public static Collection<String> getKeywords() {
	    return xlateMap.values();
	  }
	  
	  public static String getKeyStr(String name) {

	    return xlateMap.get(name);

	  }

	  public static String xlate(String name) {

	    String ret = xlateMap.get(name);
	    if (ret == null) {
	      ret = name;
	    }

	    return ret;
	  }
	  
	  

	  @Override
	  public Object recoverFromMismatchedSet(IntStream input,
	      RecognitionException re, BitSet follow) throws RecognitionException {
	    throw re;
	  }

	  @Override
	  public void displayRecognitionError(String[] tokenNames,
	      RecognitionException e) {
	    errors.add(new ParseError(this, e, tokenNames));
	  }

	  @Override
	  public String getErrorHeader(RecognitionException e) {
	    String header = null;
	    if (e.charPositionInLine < 0 && input.LT(-1) != null) {
	      Token t = input.LT(-1);
	      header = "line " + t.getLine() + ":" + t.getCharPositionInLine();
	    } else {
	      header = super.getErrorHeader(e);
	    }

	    return header;
	  }

	  @Override
	  public String getErrorMessage(RecognitionException e, String[] tokenNames) {
	    String msg = null;

	    // Translate the token names to something that the user can understand
	    String[] xlateNames = new String[tokenNames.length];
	    for (int i = 0; i < tokenNames.length; ++i) {
	      xlateNames[i] = HiveParser.xlate(tokenNames[i]);
	    }

	    if (e instanceof NoViableAltException) {
	      @SuppressWarnings("unused")
	      NoViableAltException nvae = (NoViableAltException) e;
	      // for development, can add
	      // "decision=<<"+nvae.grammarDecisionDescription+">>"
	      // and "(decision="+nvae.decisionNumber+") and
	      // "state "+nvae.stateNumber
	      msg = "cannot recognize input near"
	              + (input.LT(1) != null ? " " + getTokenErrorDisplay(input.LT(1)) : "")
	              + (input.LT(2) != null ? " " + getTokenErrorDisplay(input.LT(2)) : "")
	              + (input.LT(3) != null ? " " + getTokenErrorDisplay(input.LT(3)) : "");
	    } else if (e instanceof MismatchedTokenException) {
	      MismatchedTokenException mte = (MismatchedTokenException) e;
	      msg = super.getErrorMessage(e, xlateNames) + (input.LT(-1) == null ? "":" near '" + input.LT(-1).getText()) + "'";
	    } else if (e instanceof FailedPredicateException) {
	      FailedPredicateException fpe = (FailedPredicateException) e;
	      msg = "Failed to recognize predicate '" + fpe.token.getText() + "'. Failed rule: '" + fpe.ruleName + "'";
	    } else {
	      msg = super.getErrorMessage(e, xlateNames);
	    }

	    if (msgs.size() > 0) {
	      msg = msg + " in " + msgs.peek();
	    }
	    return msg;
	  }

	  public void pushMsg(Token t,String msg, RecognizerSharedState state) {
	    // ANTLR generated code does not wrap the @init code wit this backtracking check,
	    //  even if the matching @after has it. If we have parser rules with that are doing
	    // some lookahead with syntactic predicates this can cause the push() and pop() calls
	    // to become unbalanced, so make sure both push/pop check the backtracking state.
	    if (state.backtracking == 0) {
	      msgs.push(msg);
	    }
	    xstarttokens.push(t);
	  }

	  public void popMsg(RecognizerSharedState state) {
	    if (state.backtracking == 0) {
	      Object o = msgs.pop();
	    }
	    xstarttokens.pop();
	    
	  }

	  // counter to generate unique union aliases
	  private int aliasCounter;
	  private String generateUnionAlias() {
	    return "_u" + (++aliasCounter);
	  }
	  private char [] excludedCharForColumnName = {'.', ':'};
	  private boolean containExcludedCharForCreateTableColumnName(String input) {
	    for(char c : excludedCharForColumnName) {
	      if(input.indexOf(c)>-1) {
	        return true;
	      }
	    }
	    return false;
	  }
	  private CommonTree throwSetOpException() throws RecognitionException {
	    throw new FailedPredicateException(input, "orderByClause clusterByClause distributeByClause sortByClause limitClause can only be applied to the whole union.", "");
	  }
	  private CommonTree throwColumnNameException() throws RecognitionException {
	    throw new FailedPredicateException(input, Arrays.toString(excludedCharForColumnName) + " can not be used in column name in create table statement.", "");
	  }
	  protected boolean nullsLast() {
	    return true;
	  }


	public static class statement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "statement"
	// HiveParser.g:791:1: statement : ( explainStatement EOF | execStatement EOF );
	public final HiveParser.statement_return statement() throws RecognitionException {
		HiveParser.statement_return retval = new HiveParser.statement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token EOF2=null;
		Token EOF4=null;
		ParserRuleReturnScope explainStatement1 =null;
		ParserRuleReturnScope execStatement3 =null;

		ASTNode EOF2_tree=null;
		ASTNode EOF4_tree=null;

		try {
			// HiveParser.g:792:2: ( explainStatement EOF | execStatement EOF )
			int alt1=2;
			int LA1_0 = input.LA(1);
			if ( (LA1_0==KW_EXPLAIN) ) {
				alt1=1;
			}
			else if ( (LA1_0==KW_ABORT||(LA1_0 >= KW_ALTER && LA1_0 <= KW_ANALYZE)||LA1_0==KW_COMMIT||LA1_0==KW_CREATE||LA1_0==KW_DELETE||(LA1_0 >= KW_DESC && LA1_0 <= KW_DESCRIBE)||LA1_0==KW_DISABLE||LA1_0==KW_DROP||LA1_0==KW_ENABLE||LA1_0==KW_EXPORT||LA1_0==KW_FROM||LA1_0==KW_GRANT||LA1_0==KW_IMPORT||LA1_0==KW_INSERT||LA1_0==KW_KILL||LA1_0==KW_LOAD||LA1_0==KW_LOCK||LA1_0==KW_MAP||LA1_0==KW_MERGE||LA1_0==KW_MSCK||LA1_0==KW_REDUCE||LA1_0==KW_RELOAD||(LA1_0 >= KW_REPL && LA1_0 <= KW_REPLACE)||LA1_0==KW_REVOKE||LA1_0==KW_ROLLBACK||LA1_0==KW_SELECT||LA1_0==KW_SET||LA1_0==KW_SHOW||LA1_0==KW_START||LA1_0==KW_TRUNCATE||LA1_0==KW_UNLOCK||LA1_0==KW_UPDATE||LA1_0==KW_USE||LA1_0==KW_WITH||LA1_0==LPAREN) ) {
				alt1=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 1, 0, input);
				throw nvae;
			}

			switch (alt1) {
				case 1 :
					// HiveParser.g:792:4: explainStatement EOF
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_explainStatement_in_statement1290);
					explainStatement1=explainStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, explainStatement1.getTree());

					EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_statement1292); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EOF2_tree = (ASTNode)adaptor.create(EOF2);
					adaptor.addChild(root_0, EOF2_tree);
					}

					}
					break;
				case 2 :
					// HiveParser.g:793:4: execStatement EOF
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_execStatement_in_statement1297);
					execStatement3=execStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, execStatement3.getTree());

					EOF4=(Token)match(input,EOF,FOLLOW_EOF_in_statement1299); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EOF4_tree = (ASTNode)adaptor.create(EOF4);
					adaptor.addChild(root_0, EOF4_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "statement"


	public static class explainStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "explainStatement"
	// HiveParser.g:796:1: explainStatement : KW_EXPLAIN ( ( explainOption )* execStatement -> ^( TOK_EXPLAIN execStatement ( explainOption )* ) | KW_REWRITE queryStatementExpression -> ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression ) ) ;
	public final HiveParser.explainStatement_return explainStatement() throws RecognitionException {
		HiveParser.explainStatement_return retval = new HiveParser.explainStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_EXPLAIN5=null;
		Token KW_REWRITE8=null;
		ParserRuleReturnScope explainOption6 =null;
		ParserRuleReturnScope execStatement7 =null;
		ParserRuleReturnScope queryStatementExpression9 =null;

		ASTNode KW_EXPLAIN5_tree=null;
		ASTNode KW_REWRITE8_tree=null;
		RewriteRuleTokenStream stream_KW_REWRITE=new RewriteRuleTokenStream(adaptor,"token KW_REWRITE");
		RewriteRuleTokenStream stream_KW_EXPLAIN=new RewriteRuleTokenStream(adaptor,"token KW_EXPLAIN");
		RewriteRuleSubtreeStream stream_queryStatementExpression=new RewriteRuleSubtreeStream(adaptor,"rule queryStatementExpression");
		RewriteRuleSubtreeStream stream_explainOption=new RewriteRuleSubtreeStream(adaptor,"rule explainOption");
		RewriteRuleSubtreeStream stream_execStatement=new RewriteRuleSubtreeStream(adaptor,"rule execStatement");

		 pushMsg(retval.start,"explain statement", state); 
		try {
			// HiveParser.g:799:2: ( KW_EXPLAIN ( ( explainOption )* execStatement -> ^( TOK_EXPLAIN execStatement ( explainOption )* ) | KW_REWRITE queryStatementExpression -> ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression ) ) )
			// HiveParser.g:799:4: KW_EXPLAIN ( ( explainOption )* execStatement -> ^( TOK_EXPLAIN execStatement ( explainOption )* ) | KW_REWRITE queryStatementExpression -> ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression ) )
			{
			KW_EXPLAIN5=(Token)match(input,KW_EXPLAIN,FOLLOW_KW_EXPLAIN_in_explainStatement1320); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_EXPLAIN.add(KW_EXPLAIN5);

			// HiveParser.g:799:15: ( ( explainOption )* execStatement -> ^( TOK_EXPLAIN execStatement ( explainOption )* ) | KW_REWRITE queryStatementExpression -> ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression ) )
			int alt3=2;
			int LA3_0 = input.LA(1);
			if ( (LA3_0==KW_ABORT||(LA3_0 >= KW_ALTER && LA3_0 <= KW_ANALYZE)||(LA3_0 >= KW_AST && LA3_0 <= KW_AUTHORIZATION)||LA3_0==KW_COMMIT||LA3_0==KW_CREATE||LA3_0==KW_DEBUG||LA3_0==KW_DELETE||(LA3_0 >= KW_DEPENDENCY && LA3_0 <= KW_DESCRIBE)||LA3_0==KW_DISABLE||LA3_0==KW_DROP||LA3_0==KW_ENABLE||LA3_0==KW_EXPORT||LA3_0==KW_EXTENDED||(LA3_0 >= KW_FORMATTED && LA3_0 <= KW_FROM)||LA3_0==KW_GRANT||LA3_0==KW_IMPORT||LA3_0==KW_INSERT||LA3_0==KW_KILL||LA3_0==KW_LOAD||(LA3_0 >= KW_LOCK && LA3_0 <= KW_LOGICAL)||LA3_0==KW_MAP||LA3_0==KW_MERGE||LA3_0==KW_MSCK||LA3_0==KW_REDUCE||LA3_0==KW_RELOAD||LA3_0==KW_REOPTIMIZATION||(LA3_0 >= KW_REPL && LA3_0 <= KW_REPLACE)||LA3_0==KW_REVOKE||LA3_0==KW_ROLLBACK||LA3_0==KW_SELECT||LA3_0==KW_SET||LA3_0==KW_SHOW||LA3_0==KW_START||LA3_0==KW_TRUNCATE||LA3_0==KW_UNLOCK||LA3_0==KW_UPDATE||LA3_0==KW_USE||LA3_0==KW_VECTORIZATION||LA3_0==KW_WITH||LA3_0==LPAREN) ) {
				alt3=1;
			}
			else if ( (LA3_0==KW_REWRITE) ) {
				alt3=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 3, 0, input);
				throw nvae;
			}

			switch (alt3) {
				case 1 :
					// HiveParser.g:800:6: ( explainOption )* execStatement
					{
					// HiveParser.g:800:6: ( explainOption )*
					loop2:
					while (true) {
						int alt2=2;
						alt2 = dfa2.predict(input);
						switch (alt2) {
						case 1 :
							// HiveParser.g:800:6: explainOption
							{
							pushFollow(FOLLOW_explainOption_in_explainStatement1329);
							explainOption6=explainOption();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_explainOption.add(explainOption6.getTree());
							}
							break;

						default :
							break loop2;
						}
					}

					pushFollow(FOLLOW_execStatement_in_explainStatement1332);
					execStatement7=execStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_execStatement.add(execStatement7.getTree());
					// AST REWRITE
					// elements: explainOption, execStatement
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 800:35: -> ^( TOK_EXPLAIN execStatement ( explainOption )* )
					{
						// HiveParser.g:800:38: ^( TOK_EXPLAIN execStatement ( explainOption )* )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_EXPLAIN, "TOK_EXPLAIN"), root_1);
						adaptor.addChild(root_1, stream_execStatement.nextTree());
						// HiveParser.g:800:66: ( explainOption )*
						while ( stream_explainOption.hasNext() ) {
							adaptor.addChild(root_1, stream_explainOption.nextTree());
						}
						stream_explainOption.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:802:9: KW_REWRITE queryStatementExpression
					{
					KW_REWRITE8=(Token)match(input,KW_REWRITE,FOLLOW_KW_REWRITE_in_explainStatement1363); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_REWRITE.add(KW_REWRITE8);

					pushFollow(FOLLOW_queryStatementExpression_in_explainStatement1365);
					queryStatementExpression9=queryStatementExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_queryStatementExpression.add(queryStatementExpression9.getTree());
					// AST REWRITE
					// elements: queryStatementExpression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 802:45: -> ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression )
					{
						// HiveParser.g:802:48: ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_EXPLAIN_SQ_REWRITE, "TOK_EXPLAIN_SQ_REWRITE"), root_1);
						adaptor.addChild(root_1, stream_queryStatementExpression.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "explainStatement"


	public static class explainOption_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "explainOption"
	// HiveParser.g:806:1: explainOption : ( KW_EXTENDED | KW_FORMATTED | KW_DEPENDENCY | KW_LOGICAL | KW_AUTHORIZATION | KW_ANALYZE | KW_REOPTIMIZATION | KW_LOCKS | KW_AST | ( KW_VECTORIZATION ( vectorizationOnly )? ( vectorizatonDetail )? ) | KW_DEBUG );
	public final HiveParser.explainOption_return explainOption() throws RecognitionException {
		HiveParser.explainOption_return retval = new HiveParser.explainOption_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_EXTENDED10=null;
		Token KW_FORMATTED11=null;
		Token KW_DEPENDENCY12=null;
		Token KW_LOGICAL13=null;
		Token KW_AUTHORIZATION14=null;
		Token KW_ANALYZE15=null;
		Token KW_REOPTIMIZATION16=null;
		Token KW_LOCKS17=null;
		Token KW_AST18=null;
		Token KW_VECTORIZATION19=null;
		Token KW_DEBUG22=null;
		ParserRuleReturnScope vectorizationOnly20 =null;
		ParserRuleReturnScope vectorizatonDetail21 =null;

		ASTNode KW_EXTENDED10_tree=null;
		ASTNode KW_FORMATTED11_tree=null;
		ASTNode KW_DEPENDENCY12_tree=null;
		ASTNode KW_LOGICAL13_tree=null;
		ASTNode KW_AUTHORIZATION14_tree=null;
		ASTNode KW_ANALYZE15_tree=null;
		ASTNode KW_REOPTIMIZATION16_tree=null;
		ASTNode KW_LOCKS17_tree=null;
		ASTNode KW_AST18_tree=null;
		ASTNode KW_VECTORIZATION19_tree=null;
		ASTNode KW_DEBUG22_tree=null;

		 msgs.push("explain option"); 
		try {
			// HiveParser.g:809:5: ( KW_EXTENDED | KW_FORMATTED | KW_DEPENDENCY | KW_LOGICAL | KW_AUTHORIZATION | KW_ANALYZE | KW_REOPTIMIZATION | KW_LOCKS | KW_AST | ( KW_VECTORIZATION ( vectorizationOnly )? ( vectorizatonDetail )? ) | KW_DEBUG )
			int alt6=11;
			switch ( input.LA(1) ) {
			case KW_EXTENDED:
				{
				alt6=1;
				}
				break;
			case KW_FORMATTED:
				{
				alt6=2;
				}
				break;
			case KW_DEPENDENCY:
				{
				alt6=3;
				}
				break;
			case KW_LOGICAL:
				{
				alt6=4;
				}
				break;
			case KW_AUTHORIZATION:
				{
				alt6=5;
				}
				break;
			case KW_ANALYZE:
				{
				alt6=6;
				}
				break;
			case KW_REOPTIMIZATION:
				{
				alt6=7;
				}
				break;
			case KW_LOCKS:
				{
				alt6=8;
				}
				break;
			case KW_AST:
				{
				alt6=9;
				}
				break;
			case KW_VECTORIZATION:
				{
				alt6=10;
				}
				break;
			case KW_DEBUG:
				{
				alt6=11;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 6, 0, input);
				throw nvae;
			}
			switch (alt6) {
				case 1 :
					// HiveParser.g:809:7: KW_EXTENDED
					{
					root_0 = (ASTNode)adaptor.nil();


					KW_EXTENDED10=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_explainOption1405); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KW_EXTENDED10_tree = (ASTNode)adaptor.create(KW_EXTENDED10);
					adaptor.addChild(root_0, KW_EXTENDED10_tree);
					}

					}
					break;
				case 2 :
					// HiveParser.g:810:7: KW_FORMATTED
					{
					root_0 = (ASTNode)adaptor.nil();


					KW_FORMATTED11=(Token)match(input,KW_FORMATTED,FOLLOW_KW_FORMATTED_in_explainOption1413); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KW_FORMATTED11_tree = (ASTNode)adaptor.create(KW_FORMATTED11);
					adaptor.addChild(root_0, KW_FORMATTED11_tree);
					}

					}
					break;
				case 3 :
					// HiveParser.g:811:7: KW_DEPENDENCY
					{
					root_0 = (ASTNode)adaptor.nil();


					KW_DEPENDENCY12=(Token)match(input,KW_DEPENDENCY,FOLLOW_KW_DEPENDENCY_in_explainOption1421); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KW_DEPENDENCY12_tree = (ASTNode)adaptor.create(KW_DEPENDENCY12);
					adaptor.addChild(root_0, KW_DEPENDENCY12_tree);
					}

					}
					break;
				case 4 :
					// HiveParser.g:812:7: KW_LOGICAL
					{
					root_0 = (ASTNode)adaptor.nil();


					KW_LOGICAL13=(Token)match(input,KW_LOGICAL,FOLLOW_KW_LOGICAL_in_explainOption1429); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KW_LOGICAL13_tree = (ASTNode)adaptor.create(KW_LOGICAL13);
					adaptor.addChild(root_0, KW_LOGICAL13_tree);
					}

					}
					break;
				case 5 :
					// HiveParser.g:813:7: KW_AUTHORIZATION
					{
					root_0 = (ASTNode)adaptor.nil();


					KW_AUTHORIZATION14=(Token)match(input,KW_AUTHORIZATION,FOLLOW_KW_AUTHORIZATION_in_explainOption1437); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KW_AUTHORIZATION14_tree = (ASTNode)adaptor.create(KW_AUTHORIZATION14);
					adaptor.addChild(root_0, KW_AUTHORIZATION14_tree);
					}

					}
					break;
				case 6 :
					// HiveParser.g:814:7: KW_ANALYZE
					{
					root_0 = (ASTNode)adaptor.nil();


					KW_ANALYZE15=(Token)match(input,KW_ANALYZE,FOLLOW_KW_ANALYZE_in_explainOption1445); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KW_ANALYZE15_tree = (ASTNode)adaptor.create(KW_ANALYZE15);
					adaptor.addChild(root_0, KW_ANALYZE15_tree);
					}

					}
					break;
				case 7 :
					// HiveParser.g:815:7: KW_REOPTIMIZATION
					{
					root_0 = (ASTNode)adaptor.nil();


					KW_REOPTIMIZATION16=(Token)match(input,KW_REOPTIMIZATION,FOLLOW_KW_REOPTIMIZATION_in_explainOption1453); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KW_REOPTIMIZATION16_tree = (ASTNode)adaptor.create(KW_REOPTIMIZATION16);
					adaptor.addChild(root_0, KW_REOPTIMIZATION16_tree);
					}

					}
					break;
				case 8 :
					// HiveParser.g:816:7: KW_LOCKS
					{
					root_0 = (ASTNode)adaptor.nil();


					KW_LOCKS17=(Token)match(input,KW_LOCKS,FOLLOW_KW_LOCKS_in_explainOption1461); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KW_LOCKS17_tree = (ASTNode)adaptor.create(KW_LOCKS17);
					adaptor.addChild(root_0, KW_LOCKS17_tree);
					}

					}
					break;
				case 9 :
					// HiveParser.g:817:7: KW_AST
					{
					root_0 = (ASTNode)adaptor.nil();


					KW_AST18=(Token)match(input,KW_AST,FOLLOW_KW_AST_in_explainOption1469); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KW_AST18_tree = (ASTNode)adaptor.create(KW_AST18);
					adaptor.addChild(root_0, KW_AST18_tree);
					}

					}
					break;
				case 10 :
					// HiveParser.g:818:7: ( KW_VECTORIZATION ( vectorizationOnly )? ( vectorizatonDetail )? )
					{
					root_0 = (ASTNode)adaptor.nil();


					// HiveParser.g:818:7: ( KW_VECTORIZATION ( vectorizationOnly )? ( vectorizatonDetail )? )
					// HiveParser.g:818:8: KW_VECTORIZATION ( vectorizationOnly )? ( vectorizatonDetail )?
					{
					KW_VECTORIZATION19=(Token)match(input,KW_VECTORIZATION,FOLLOW_KW_VECTORIZATION_in_explainOption1478); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KW_VECTORIZATION19_tree = (ASTNode)adaptor.create(KW_VECTORIZATION19);
					adaptor.addChild(root_0, KW_VECTORIZATION19_tree);
					}

					// HiveParser.g:818:25: ( vectorizationOnly )?
					int alt4=2;
					int LA4_0 = input.LA(1);
					if ( (LA4_0==KW_ONLY) ) {
						alt4=1;
					}
					switch (alt4) {
						case 1 :
							// HiveParser.g:818:25: vectorizationOnly
							{
							pushFollow(FOLLOW_vectorizationOnly_in_explainOption1480);
							vectorizationOnly20=vectorizationOnly();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, vectorizationOnly20.getTree());

							}
							break;

					}

					// HiveParser.g:818:44: ( vectorizatonDetail )?
					int alt5=2;
					int LA5_0 = input.LA(1);
					if ( (LA5_0==KW_DETAIL||LA5_0==KW_EXPRESSION||LA5_0==KW_OPERATOR||LA5_0==KW_SUMMARY) ) {
						alt5=1;
					}
					switch (alt5) {
						case 1 :
							// HiveParser.g:818:44: vectorizatonDetail
							{
							pushFollow(FOLLOW_vectorizatonDetail_in_explainOption1483);
							vectorizatonDetail21=vectorizatonDetail();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, vectorizatonDetail21.getTree());

							}
							break;

					}

					}

					}
					break;
				case 11 :
					// HiveParser.g:819:7: KW_DEBUG
					{
					root_0 = (ASTNode)adaptor.nil();


					KW_DEBUG22=(Token)match(input,KW_DEBUG,FOLLOW_KW_DEBUG_in_explainOption1493); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KW_DEBUG22_tree = (ASTNode)adaptor.create(KW_DEBUG22);
					adaptor.addChild(root_0, KW_DEBUG22_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { msgs.pop(); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "explainOption"


	public static class vectorizationOnly_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "vectorizationOnly"
	// HiveParser.g:822:1: vectorizationOnly : KW_ONLY -> ^( TOK_ONLY ) ;
	public final HiveParser.vectorizationOnly_return vectorizationOnly() throws RecognitionException {
		HiveParser.vectorizationOnly_return retval = new HiveParser.vectorizationOnly_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_ONLY23=null;

		ASTNode KW_ONLY23_tree=null;
		RewriteRuleTokenStream stream_KW_ONLY=new RewriteRuleTokenStream(adaptor,"token KW_ONLY");

		 pushMsg(retval.start,"vectorization's only clause", state); 
		try {
			// HiveParser.g:825:5: ( KW_ONLY -> ^( TOK_ONLY ) )
			// HiveParser.g:825:7: KW_ONLY
			{
			KW_ONLY23=(Token)match(input,KW_ONLY,FOLLOW_KW_ONLY_in_vectorizationOnly1520); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ONLY.add(KW_ONLY23);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 826:5: -> ^( TOK_ONLY )
			{
				// HiveParser.g:826:8: ^( TOK_ONLY )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ONLY, "TOK_ONLY"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "vectorizationOnly"


	public static class vectorizatonDetail_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "vectorizatonDetail"
	// HiveParser.g:829:1: vectorizatonDetail : ( KW_SUMMARY -> ^( TOK_SUMMARY ) | KW_OPERATOR -> ^( TOK_OPERATOR ) | KW_EXPRESSION -> ^( TOK_EXPRESSION ) | KW_DETAIL -> ^( TOK_DETAIL ) );
	public final HiveParser.vectorizatonDetail_return vectorizatonDetail() throws RecognitionException {
		HiveParser.vectorizatonDetail_return retval = new HiveParser.vectorizatonDetail_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_SUMMARY24=null;
		Token KW_OPERATOR25=null;
		Token KW_EXPRESSION26=null;
		Token KW_DETAIL27=null;

		ASTNode KW_SUMMARY24_tree=null;
		ASTNode KW_OPERATOR25_tree=null;
		ASTNode KW_EXPRESSION26_tree=null;
		ASTNode KW_DETAIL27_tree=null;
		RewriteRuleTokenStream stream_KW_SUMMARY=new RewriteRuleTokenStream(adaptor,"token KW_SUMMARY");
		RewriteRuleTokenStream stream_KW_DETAIL=new RewriteRuleTokenStream(adaptor,"token KW_DETAIL");
		RewriteRuleTokenStream stream_KW_OPERATOR=new RewriteRuleTokenStream(adaptor,"token KW_OPERATOR");
		RewriteRuleTokenStream stream_KW_EXPRESSION=new RewriteRuleTokenStream(adaptor,"token KW_EXPRESSION");

		 pushMsg(retval.start,"vectorization's detail level clause", state); 
		try {
			// HiveParser.g:832:5: ( KW_SUMMARY -> ^( TOK_SUMMARY ) | KW_OPERATOR -> ^( TOK_OPERATOR ) | KW_EXPRESSION -> ^( TOK_EXPRESSION ) | KW_DETAIL -> ^( TOK_DETAIL ) )
			int alt7=4;
			switch ( input.LA(1) ) {
			case KW_SUMMARY:
				{
				alt7=1;
				}
				break;
			case KW_OPERATOR:
				{
				alt7=2;
				}
				break;
			case KW_EXPRESSION:
				{
				alt7=3;
				}
				break;
			case KW_DETAIL:
				{
				alt7=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 7, 0, input);
				throw nvae;
			}
			switch (alt7) {
				case 1 :
					// HiveParser.g:832:7: KW_SUMMARY
					{
					KW_SUMMARY24=(Token)match(input,KW_SUMMARY,FOLLOW_KW_SUMMARY_in_vectorizatonDetail1557); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SUMMARY.add(KW_SUMMARY24);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 833:5: -> ^( TOK_SUMMARY )
					{
						// HiveParser.g:833:8: ^( TOK_SUMMARY )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SUMMARY, "TOK_SUMMARY"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:834:7: KW_OPERATOR
					{
					KW_OPERATOR25=(Token)match(input,KW_OPERATOR,FOLLOW_KW_OPERATOR_in_vectorizatonDetail1575); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_OPERATOR.add(KW_OPERATOR25);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 835:5: -> ^( TOK_OPERATOR )
					{
						// HiveParser.g:835:8: ^( TOK_OPERATOR )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_OPERATOR, "TOK_OPERATOR"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// HiveParser.g:836:7: KW_EXPRESSION
					{
					KW_EXPRESSION26=(Token)match(input,KW_EXPRESSION,FOLLOW_KW_EXPRESSION_in_vectorizatonDetail1593); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_EXPRESSION.add(KW_EXPRESSION26);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 837:5: -> ^( TOK_EXPRESSION )
					{
						// HiveParser.g:837:8: ^( TOK_EXPRESSION )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_EXPRESSION, "TOK_EXPRESSION"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// HiveParser.g:838:7: KW_DETAIL
					{
					KW_DETAIL27=(Token)match(input,KW_DETAIL,FOLLOW_KW_DETAIL_in_vectorizatonDetail1611); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DETAIL.add(KW_DETAIL27);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 839:5: -> ^( TOK_DETAIL )
					{
						// HiveParser.g:839:8: ^( TOK_DETAIL )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DETAIL, "TOK_DETAIL"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "vectorizatonDetail"


	public static class execStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "execStatement"
	// HiveParser.g:842:1: execStatement : ( queryStatementExpression | loadStatement | exportStatement | importStatement | replDumpStatement | replLoadStatement | replStatusStatement | ddlStatement | deleteStatement | updateStatement | sqlTransactionStatement | mergeStatement );
	public final HiveParser.execStatement_return execStatement() throws RecognitionException {
		HiveParser.execStatement_return retval = new HiveParser.execStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope queryStatementExpression28 =null;
		ParserRuleReturnScope loadStatement29 =null;
		ParserRuleReturnScope exportStatement30 =null;
		ParserRuleReturnScope importStatement31 =null;
		ParserRuleReturnScope replDumpStatement32 =null;
		ParserRuleReturnScope replLoadStatement33 =null;
		ParserRuleReturnScope replStatusStatement34 =null;
		ParserRuleReturnScope ddlStatement35 =null;
		ParserRuleReturnScope deleteStatement36 =null;
		ParserRuleReturnScope updateStatement37 =null;
		ParserRuleReturnScope sqlTransactionStatement38 =null;
		ParserRuleReturnScope mergeStatement39 =null;


		 pushMsg(retval.start,"statement", state); 
		try {
			// HiveParser.g:845:5: ( queryStatementExpression | loadStatement | exportStatement | importStatement | replDumpStatement | replLoadStatement | replStatusStatement | ddlStatement | deleteStatement | updateStatement | sqlTransactionStatement | mergeStatement )
			int alt8=12;
			switch ( input.LA(1) ) {
			case KW_FROM:
			case KW_INSERT:
			case KW_MAP:
			case KW_REDUCE:
			case KW_SELECT:
			case KW_WITH:
			case LPAREN:
				{
				alt8=1;
				}
				break;
			case KW_LOAD:
				{
				alt8=2;
				}
				break;
			case KW_EXPORT:
				{
				alt8=3;
				}
				break;
			case KW_IMPORT:
				{
				alt8=4;
				}
				break;
			case KW_REPL:
				{
				switch ( input.LA(2) ) {
				case KW_DUMP:
					{
					alt8=5;
					}
					break;
				case KW_LOAD:
					{
					alt8=6;
					}
					break;
				case KW_STATUS:
					{
					alt8=7;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 8, 11, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case KW_ABORT:
			case KW_ALTER:
			case KW_ANALYZE:
			case KW_CREATE:
			case KW_DESC:
			case KW_DESCRIBE:
			case KW_DISABLE:
			case KW_DROP:
			case KW_ENABLE:
			case KW_GRANT:
			case KW_KILL:
			case KW_LOCK:
			case KW_MSCK:
			case KW_RELOAD:
			case KW_REPLACE:
			case KW_REVOKE:
			case KW_SHOW:
			case KW_TRUNCATE:
			case KW_UNLOCK:
			case KW_USE:
				{
				alt8=8;
				}
				break;
			case KW_SET:
				{
				int LA8_27 = input.LA(2);
				if ( (LA8_27==KW_ROLE) ) {
					alt8=8;
				}
				else if ( (LA8_27==KW_AUTOCOMMIT) ) {
					alt8=11;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 8, 27, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_DELETE:
				{
				alt8=9;
				}
				break;
			case KW_UPDATE:
				{
				alt8=10;
				}
				break;
			case KW_COMMIT:
			case KW_ROLLBACK:
			case KW_START:
				{
				alt8=11;
				}
				break;
			case KW_MERGE:
				{
				alt8=12;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 8, 0, input);
				throw nvae;
			}
			switch (alt8) {
				case 1 :
					// HiveParser.g:845:7: queryStatementExpression
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_queryStatementExpression_in_execStatement1648);
					queryStatementExpression28=queryStatementExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, queryStatementExpression28.getTree());

					}
					break;
				case 2 :
					// HiveParser.g:846:7: loadStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_loadStatement_in_execStatement1656);
					loadStatement29=loadStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, loadStatement29.getTree());

					}
					break;
				case 3 :
					// HiveParser.g:847:7: exportStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_exportStatement_in_execStatement1664);
					exportStatement30=exportStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exportStatement30.getTree());

					}
					break;
				case 4 :
					// HiveParser.g:848:7: importStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_importStatement_in_execStatement1672);
					importStatement31=importStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, importStatement31.getTree());

					}
					break;
				case 5 :
					// HiveParser.g:849:7: replDumpStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_replDumpStatement_in_execStatement1680);
					replDumpStatement32=replDumpStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, replDumpStatement32.getTree());

					}
					break;
				case 6 :
					// HiveParser.g:850:7: replLoadStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_replLoadStatement_in_execStatement1688);
					replLoadStatement33=replLoadStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, replLoadStatement33.getTree());

					}
					break;
				case 7 :
					// HiveParser.g:851:7: replStatusStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_replStatusStatement_in_execStatement1696);
					replStatusStatement34=replStatusStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, replStatusStatement34.getTree());

					}
					break;
				case 8 :
					// HiveParser.g:852:7: ddlStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_ddlStatement_in_execStatement1704);
					ddlStatement35=ddlStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ddlStatement35.getTree());

					}
					break;
				case 9 :
					// HiveParser.g:853:7: deleteStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_deleteStatement_in_execStatement1712);
					deleteStatement36=deleteStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, deleteStatement36.getTree());

					}
					break;
				case 10 :
					// HiveParser.g:854:7: updateStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_updateStatement_in_execStatement1720);
					updateStatement37=updateStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, updateStatement37.getTree());

					}
					break;
				case 11 :
					// HiveParser.g:855:7: sqlTransactionStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_sqlTransactionStatement_in_execStatement1728);
					sqlTransactionStatement38=sqlTransactionStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlTransactionStatement38.getTree());

					}
					break;
				case 12 :
					// HiveParser.g:856:7: mergeStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_mergeStatement_in_execStatement1736);
					mergeStatement39=mergeStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeStatement39.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "execStatement"


	public static class loadStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "loadStatement"
	// HiveParser.g:859:1: loadStatement : KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition ) ( inputFileFormat )? -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? ( inputFileFormat )? ) ;
	public final HiveParser.loadStatement_return loadStatement() throws RecognitionException {
		HiveParser.loadStatement_return retval = new HiveParser.loadStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token islocal=null;
		Token path=null;
		Token isoverwrite=null;
		Token KW_LOAD40=null;
		Token KW_DATA41=null;
		Token KW_INPATH42=null;
		Token KW_INTO43=null;
		Token KW_TABLE44=null;
		ParserRuleReturnScope tab =null;
		ParserRuleReturnScope inputFileFormat45 =null;

		ASTNode islocal_tree=null;
		ASTNode path_tree=null;
		ASTNode isoverwrite_tree=null;
		ASTNode KW_LOAD40_tree=null;
		ASTNode KW_DATA41_tree=null;
		ASTNode KW_INPATH42_tree=null;
		ASTNode KW_INTO43_tree=null;
		ASTNode KW_TABLE44_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
		RewriteRuleTokenStream stream_KW_INPATH=new RewriteRuleTokenStream(adaptor,"token KW_INPATH");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_OVERWRITE=new RewriteRuleTokenStream(adaptor,"token KW_OVERWRITE");
		RewriteRuleTokenStream stream_KW_LOAD=new RewriteRuleTokenStream(adaptor,"token KW_LOAD");
		RewriteRuleTokenStream stream_KW_DATA=new RewriteRuleTokenStream(adaptor,"token KW_DATA");
		RewriteRuleTokenStream stream_KW_LOCAL=new RewriteRuleTokenStream(adaptor,"token KW_LOCAL");
		RewriteRuleSubtreeStream stream_inputFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule inputFileFormat");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");

		 pushMsg(retval.start,"load statement", state); 
		try {
			// HiveParser.g:862:5: ( KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition ) ( inputFileFormat )? -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? ( inputFileFormat )? ) )
			// HiveParser.g:862:7: KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition ) ( inputFileFormat )?
			{
			KW_LOAD40=(Token)match(input,KW_LOAD,FOLLOW_KW_LOAD_in_loadStatement1763); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LOAD.add(KW_LOAD40);

			KW_DATA41=(Token)match(input,KW_DATA,FOLLOW_KW_DATA_in_loadStatement1765); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DATA.add(KW_DATA41);

			// HiveParser.g:862:23: (islocal= KW_LOCAL )?
			int alt9=2;
			int LA9_0 = input.LA(1);
			if ( (LA9_0==KW_LOCAL) ) {
				alt9=1;
			}
			switch (alt9) {
				case 1 :
					// HiveParser.g:862:24: islocal= KW_LOCAL
					{
					islocal=(Token)match(input,KW_LOCAL,FOLLOW_KW_LOCAL_in_loadStatement1770); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_LOCAL.add(islocal);

					}
					break;

			}

			KW_INPATH42=(Token)match(input,KW_INPATH,FOLLOW_KW_INPATH_in_loadStatement1774); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_INPATH.add(KW_INPATH42);

			// HiveParser.g:862:53: (path= StringLiteral )
			// HiveParser.g:862:54: path= StringLiteral
			{
			path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_loadStatement1779); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(path);

			}

			// HiveParser.g:862:74: (isoverwrite= KW_OVERWRITE )?
			int alt10=2;
			int LA10_0 = input.LA(1);
			if ( (LA10_0==KW_OVERWRITE) ) {
				alt10=1;
			}
			switch (alt10) {
				case 1 :
					// HiveParser.g:862:75: isoverwrite= KW_OVERWRITE
					{
					isoverwrite=(Token)match(input,KW_OVERWRITE,FOLLOW_KW_OVERWRITE_in_loadStatement1785); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_OVERWRITE.add(isoverwrite);

					}
					break;

			}

			KW_INTO43=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_loadStatement1789); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_INTO.add(KW_INTO43);

			KW_TABLE44=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_loadStatement1791); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE44);

			// HiveParser.g:862:119: (tab= tableOrPartition )
			// HiveParser.g:862:120: tab= tableOrPartition
			{
			pushFollow(FOLLOW_tableOrPartition_in_loadStatement1796);
			tab=tableOrPartition();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableOrPartition.add(tab.getTree());
			}

			// HiveParser.g:862:142: ( inputFileFormat )?
			int alt11=2;
			int LA11_0 = input.LA(1);
			if ( (LA11_0==KW_INPUTFORMAT) ) {
				alt11=1;
			}
			switch (alt11) {
				case 1 :
					// HiveParser.g:862:142: inputFileFormat
					{
					pushFollow(FOLLOW_inputFileFormat_in_loadStatement1799);
					inputFileFormat45=inputFileFormat();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_inputFileFormat.add(inputFileFormat45.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: islocal, tab, inputFileFormat, path, isoverwrite
			// token labels: islocal, path, isoverwrite
			// rule labels: tab, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_islocal=new RewriteRuleTokenStream(adaptor,"token islocal",islocal);
			RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
			RewriteRuleTokenStream stream_isoverwrite=new RewriteRuleTokenStream(adaptor,"token isoverwrite",isoverwrite);
			RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 863:5: -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? ( inputFileFormat )? )
			{
				// HiveParser.g:863:8: ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? ( inputFileFormat )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_LOAD, "TOK_LOAD"), root_1);
				adaptor.addChild(root_1, stream_path.nextNode());
				adaptor.addChild(root_1, stream_tab.nextTree());
				// HiveParser.g:863:31: ( $islocal)?
				if ( stream_islocal.hasNext() ) {
					adaptor.addChild(root_1, stream_islocal.nextNode());
				}
				stream_islocal.reset();

				// HiveParser.g:863:41: ( $isoverwrite)?
				if ( stream_isoverwrite.hasNext() ) {
					adaptor.addChild(root_1, stream_isoverwrite.nextNode());
				}
				stream_isoverwrite.reset();

				// HiveParser.g:863:54: ( inputFileFormat )?
				if ( stream_inputFileFormat.hasNext() ) {
					adaptor.addChild(root_1, stream_inputFileFormat.nextTree());
				}
				stream_inputFileFormat.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "loadStatement"


	public static class replicationClause_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "replicationClause"
	// HiveParser.g:866:1: replicationClause : KW_FOR (isMetadataOnly= KW_METADATA )? KW_REPLICATION LPAREN (replId= StringLiteral ) RPAREN -> ^( TOK_REPLICATION $replId ( $isMetadataOnly)? ) ;
	public final HiveParser.replicationClause_return replicationClause() throws RecognitionException {
		HiveParser.replicationClause_return retval = new HiveParser.replicationClause_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token isMetadataOnly=null;
		Token replId=null;
		Token KW_FOR46=null;
		Token KW_REPLICATION47=null;
		Token LPAREN48=null;
		Token RPAREN49=null;

		ASTNode isMetadataOnly_tree=null;
		ASTNode replId_tree=null;
		ASTNode KW_FOR46_tree=null;
		ASTNode KW_REPLICATION47_tree=null;
		ASTNode LPAREN48_tree=null;
		ASTNode RPAREN49_tree=null;
		RewriteRuleTokenStream stream_KW_REPLICATION=new RewriteRuleTokenStream(adaptor,"token KW_REPLICATION");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_METADATA=new RewriteRuleTokenStream(adaptor,"token KW_METADATA");

		 pushMsg(retval.start,"replication clause", state); 
		try {
			// HiveParser.g:869:5: ( KW_FOR (isMetadataOnly= KW_METADATA )? KW_REPLICATION LPAREN (replId= StringLiteral ) RPAREN -> ^( TOK_REPLICATION $replId ( $isMetadataOnly)? ) )
			// HiveParser.g:869:7: KW_FOR (isMetadataOnly= KW_METADATA )? KW_REPLICATION LPAREN (replId= StringLiteral ) RPAREN
			{
			KW_FOR46=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_replicationClause1854); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FOR.add(KW_FOR46);

			// HiveParser.g:869:14: (isMetadataOnly= KW_METADATA )?
			int alt12=2;
			int LA12_0 = input.LA(1);
			if ( (LA12_0==KW_METADATA) ) {
				alt12=1;
			}
			switch (alt12) {
				case 1 :
					// HiveParser.g:869:15: isMetadataOnly= KW_METADATA
					{
					isMetadataOnly=(Token)match(input,KW_METADATA,FOLLOW_KW_METADATA_in_replicationClause1859); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_METADATA.add(isMetadataOnly);

					}
					break;

			}

			KW_REPLICATION47=(Token)match(input,KW_REPLICATION,FOLLOW_KW_REPLICATION_in_replicationClause1863); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REPLICATION.add(KW_REPLICATION47);

			LPAREN48=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_replicationClause1865); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN48);

			// HiveParser.g:869:66: (replId= StringLiteral )
			// HiveParser.g:869:67: replId= StringLiteral
			{
			replId=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_replicationClause1870); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(replId);

			}

			RPAREN49=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_replicationClause1873); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN49);

			// AST REWRITE
			// elements: replId, isMetadataOnly
			// token labels: replId, isMetadataOnly
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_replId=new RewriteRuleTokenStream(adaptor,"token replId",replId);
			RewriteRuleTokenStream stream_isMetadataOnly=new RewriteRuleTokenStream(adaptor,"token isMetadataOnly",isMetadataOnly);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 870:5: -> ^( TOK_REPLICATION $replId ( $isMetadataOnly)? )
			{
				// HiveParser.g:870:8: ^( TOK_REPLICATION $replId ( $isMetadataOnly)? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_REPLICATION, "TOK_REPLICATION"), root_1);
				adaptor.addChild(root_1, stream_replId.nextNode());
				// HiveParser.g:870:35: ( $isMetadataOnly)?
				if ( stream_isMetadataOnly.hasNext() ) {
					adaptor.addChild(root_1, stream_isMetadataOnly.nextNode());
				}
				stream_isMetadataOnly.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "replicationClause"


	public static class exportStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "exportStatement"
	// HiveParser.g:873:1: exportStatement : KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral ) ( replicationClause )? -> ^( TOK_EXPORT $tab $path ( replicationClause )? ) ;
	public final HiveParser.exportStatement_return exportStatement() throws RecognitionException {
		HiveParser.exportStatement_return retval = new HiveParser.exportStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token path=null;
		Token KW_EXPORT50=null;
		Token KW_TABLE51=null;
		Token KW_TO52=null;
		ParserRuleReturnScope tab =null;
		ParserRuleReturnScope replicationClause53 =null;

		ASTNode path_tree=null;
		ASTNode KW_EXPORT50_tree=null;
		ASTNode KW_TABLE51_tree=null;
		ASTNode KW_TO52_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
		RewriteRuleTokenStream stream_KW_EXPORT=new RewriteRuleTokenStream(adaptor,"token KW_EXPORT");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
		RewriteRuleSubtreeStream stream_replicationClause=new RewriteRuleSubtreeStream(adaptor,"rule replicationClause");

		 pushMsg(retval.start,"export statement", state); 
		try {
			// HiveParser.g:876:5: ( KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral ) ( replicationClause )? -> ^( TOK_EXPORT $tab $path ( replicationClause )? ) )
			// HiveParser.g:876:7: KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral ) ( replicationClause )?
			{
			KW_EXPORT50=(Token)match(input,KW_EXPORT,FOLLOW_KW_EXPORT_in_exportStatement1917); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_EXPORT.add(KW_EXPORT50);

			KW_TABLE51=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_exportStatement1925); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE51);

			// HiveParser.g:877:16: (tab= tableOrPartition )
			// HiveParser.g:877:17: tab= tableOrPartition
			{
			pushFollow(FOLLOW_tableOrPartition_in_exportStatement1930);
			tab=tableOrPartition();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableOrPartition.add(tab.getTree());
			}

			KW_TO52=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_exportStatement1939); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TO.add(KW_TO52);

			// HiveParser.g:878:13: (path= StringLiteral )
			// HiveParser.g:878:14: path= StringLiteral
			{
			path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_exportStatement1944); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(path);

			}

			// HiveParser.g:879:7: ( replicationClause )?
			int alt13=2;
			int LA13_0 = input.LA(1);
			if ( (LA13_0==KW_FOR) ) {
				alt13=1;
			}
			switch (alt13) {
				case 1 :
					// HiveParser.g:879:7: replicationClause
					{
					pushFollow(FOLLOW_replicationClause_in_exportStatement1953);
					replicationClause53=replicationClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_replicationClause.add(replicationClause53.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: replicationClause, path, tab
			// token labels: path
			// rule labels: tab, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
			RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 880:5: -> ^( TOK_EXPORT $tab $path ( replicationClause )? )
			{
				// HiveParser.g:880:8: ^( TOK_EXPORT $tab $path ( replicationClause )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_EXPORT, "TOK_EXPORT"), root_1);
				adaptor.addChild(root_1, stream_tab.nextTree());
				adaptor.addChild(root_1, stream_path.nextNode());
				// HiveParser.g:880:32: ( replicationClause )?
				if ( stream_replicationClause.hasNext() ) {
					adaptor.addChild(root_1, stream_replicationClause.nextTree());
				}
				stream_replicationClause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exportStatement"


	public static class importStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "importStatement"
	// HiveParser.g:883:1: importStatement : KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )? -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? ) ;
	public final HiveParser.importStatement_return importStatement() throws RecognitionException {
		HiveParser.importStatement_return retval = new HiveParser.importStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token ext=null;
		Token path=null;
		Token KW_IMPORT54=null;
		Token KW_TABLE55=null;
		Token KW_FROM56=null;
		ParserRuleReturnScope tab =null;
		ParserRuleReturnScope tableLocation57 =null;

		ASTNode ext_tree=null;
		ASTNode path_tree=null;
		ASTNode KW_IMPORT54_tree=null;
		ASTNode KW_TABLE55_tree=null;
		ASTNode KW_FROM56_tree=null;
		RewriteRuleTokenStream stream_KW_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token KW_EXTERNAL");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_IMPORT=new RewriteRuleTokenStream(adaptor,"token KW_IMPORT");
		RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");

		 pushMsg(retval.start,"import statement", state); 
		try {
			// HiveParser.g:886:8: ( KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )? -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? ) )
			// HiveParser.g:886:10: KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )?
			{
			KW_IMPORT54=(Token)match(input,KW_IMPORT,FOLLOW_KW_IMPORT_in_importStatement2003); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_IMPORT.add(KW_IMPORT54);

			// HiveParser.g:887:10: ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )?
			int alt15=2;
			int LA15_0 = input.LA(1);
			if ( (LA15_0==KW_EXTERNAL||LA15_0==KW_TABLE) ) {
				alt15=1;
			}
			switch (alt15) {
				case 1 :
					// HiveParser.g:887:11: (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition )
					{
					// HiveParser.g:887:11: (ext= KW_EXTERNAL )?
					int alt14=2;
					int LA14_0 = input.LA(1);
					if ( (LA14_0==KW_EXTERNAL) ) {
						alt14=1;
					}
					switch (alt14) {
						case 1 :
							// HiveParser.g:887:12: ext= KW_EXTERNAL
							{
							ext=(Token)match(input,KW_EXTERNAL,FOLLOW_KW_EXTERNAL_in_importStatement2018); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_EXTERNAL.add(ext);

							}
							break;

					}

					KW_TABLE55=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_importStatement2022); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE55);

					// HiveParser.g:887:39: (tab= tableOrPartition )
					// HiveParser.g:887:40: tab= tableOrPartition
					{
					pushFollow(FOLLOW_tableOrPartition_in_importStatement2027);
					tab=tableOrPartition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableOrPartition.add(tab.getTree());
					}

					}
					break;

			}

			KW_FROM56=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_importStatement2041); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM56);

			// HiveParser.g:888:18: (path= StringLiteral )
			// HiveParser.g:888:19: path= StringLiteral
			{
			path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_importStatement2046); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(path);

			}

			// HiveParser.g:889:10: ( tableLocation )?
			int alt16=2;
			int LA16_0 = input.LA(1);
			if ( (LA16_0==KW_LOCATION) ) {
				alt16=1;
			}
			switch (alt16) {
				case 1 :
					// HiveParser.g:889:10: tableLocation
					{
					pushFollow(FOLLOW_tableLocation_in_importStatement2058);
					tableLocation57=tableLocation();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableLocation.add(tableLocation57.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: tab, ext, path, tableLocation
			// token labels: ext, path
			// rule labels: tab, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_ext=new RewriteRuleTokenStream(adaptor,"token ext",ext);
			RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
			RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 890:5: -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? )
			{
				// HiveParser.g:890:8: ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_IMPORT, "TOK_IMPORT"), root_1);
				adaptor.addChild(root_1, stream_path.nextNode());
				// HiveParser.g:890:28: ( $tab)?
				if ( stream_tab.hasNext() ) {
					adaptor.addChild(root_1, stream_tab.nextTree());
				}
				stream_tab.reset();

				// HiveParser.g:890:34: ( $ext)?
				if ( stream_ext.hasNext() ) {
					adaptor.addChild(root_1, stream_ext.nextNode());
				}
				stream_ext.reset();

				// HiveParser.g:890:39: ( tableLocation )?
				if ( stream_tableLocation.hasNext() ) {
					adaptor.addChild(root_1, stream_tableLocation.nextTree());
				}
				stream_tableLocation.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "importStatement"


	public static class replDumpStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "replDumpStatement"
	// HiveParser.g:893:1: replDumpStatement : KW_REPL KW_DUMP (dbName= identifier ) ( DOT tblName= identifier )? ( KW_FROM (eventId= Number ) ( KW_TO (rangeEnd= Number ) )? ( KW_LIMIT (batchSize= Number ) )? )? ( KW_WITH replConf= replConfigs )? -> ^( TOK_REPL_DUMP $dbName ( ^( TOK_TABNAME $tblName) )? ( ^( TOK_FROM $eventId ( TOK_TO $rangeEnd)? ( TOK_LIMIT $batchSize)? ) )? ( $replConf)? ) ;
	public final HiveParser.replDumpStatement_return replDumpStatement() throws RecognitionException {
		HiveParser.replDumpStatement_return retval = new HiveParser.replDumpStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token eventId=null;
		Token rangeEnd=null;
		Token batchSize=null;
		Token KW_REPL58=null;
		Token KW_DUMP59=null;
		Token DOT60=null;
		Token KW_FROM61=null;
		Token KW_TO62=null;
		Token KW_LIMIT63=null;
		Token KW_WITH64=null;
		ParserRuleReturnScope dbName =null;
		ParserRuleReturnScope tblName =null;
		ParserRuleReturnScope replConf =null;

		ASTNode eventId_tree=null;
		ASTNode rangeEnd_tree=null;
		ASTNode batchSize_tree=null;
		ASTNode KW_REPL58_tree=null;
		ASTNode KW_DUMP59_tree=null;
		ASTNode DOT60_tree=null;
		ASTNode KW_FROM61_tree=null;
		ASTNode KW_TO62_tree=null;
		ASTNode KW_LIMIT63_tree=null;
		ASTNode KW_WITH64_tree=null;
		RewriteRuleTokenStream stream_KW_DUMP=new RewriteRuleTokenStream(adaptor,"token KW_DUMP");
		RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
		RewriteRuleTokenStream stream_KW_REPL=new RewriteRuleTokenStream(adaptor,"token KW_REPL");
		RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
		RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
		RewriteRuleTokenStream stream_KW_LIMIT=new RewriteRuleTokenStream(adaptor,"token KW_LIMIT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_replConfigs=new RewriteRuleSubtreeStream(adaptor,"rule replConfigs");

		 pushMsg(retval.start,"replication dump statement", state); 
		try {
			// HiveParser.g:896:7: ( KW_REPL KW_DUMP (dbName= identifier ) ( DOT tblName= identifier )? ( KW_FROM (eventId= Number ) ( KW_TO (rangeEnd= Number ) )? ( KW_LIMIT (batchSize= Number ) )? )? ( KW_WITH replConf= replConfigs )? -> ^( TOK_REPL_DUMP $dbName ( ^( TOK_TABNAME $tblName) )? ( ^( TOK_FROM $eventId ( TOK_TO $rangeEnd)? ( TOK_LIMIT $batchSize)? ) )? ( $replConf)? ) )
			// HiveParser.g:896:9: KW_REPL KW_DUMP (dbName= identifier ) ( DOT tblName= identifier )? ( KW_FROM (eventId= Number ) ( KW_TO (rangeEnd= Number ) )? ( KW_LIMIT (batchSize= Number ) )? )? ( KW_WITH replConf= replConfigs )?
			{
			KW_REPL58=(Token)match(input,KW_REPL,FOLLOW_KW_REPL_in_replDumpStatement2112); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REPL.add(KW_REPL58);

			KW_DUMP59=(Token)match(input,KW_DUMP,FOLLOW_KW_DUMP_in_replDumpStatement2114); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DUMP.add(KW_DUMP59);

			// HiveParser.g:897:9: (dbName= identifier )
			// HiveParser.g:897:10: dbName= identifier
			{
			pushFollow(FOLLOW_identifier_in_replDumpStatement2127);
			dbName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(dbName.getTree());
			}

			// HiveParser.g:897:29: ( DOT tblName= identifier )?
			int alt17=2;
			int LA17_0 = input.LA(1);
			if ( (LA17_0==DOT) ) {
				alt17=1;
			}
			switch (alt17) {
				case 1 :
					// HiveParser.g:897:30: DOT tblName= identifier
					{
					DOT60=(Token)match(input,DOT,FOLLOW_DOT_in_replDumpStatement2131); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DOT.add(DOT60);

					pushFollow(FOLLOW_identifier_in_replDumpStatement2135);
					tblName=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(tblName.getTree());
					}
					break;

			}

			// HiveParser.g:898:9: ( KW_FROM (eventId= Number ) ( KW_TO (rangeEnd= Number ) )? ( KW_LIMIT (batchSize= Number ) )? )?
			int alt20=2;
			int LA20_0 = input.LA(1);
			if ( (LA20_0==KW_FROM) ) {
				alt20=1;
			}
			switch (alt20) {
				case 1 :
					// HiveParser.g:898:10: KW_FROM (eventId= Number ) ( KW_TO (rangeEnd= Number ) )? ( KW_LIMIT (batchSize= Number ) )?
					{
					KW_FROM61=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_replDumpStatement2148); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM61);

					// HiveParser.g:898:18: (eventId= Number )
					// HiveParser.g:898:19: eventId= Number
					{
					eventId=(Token)match(input,Number,FOLLOW_Number_in_replDumpStatement2153); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_Number.add(eventId);

					}

					// HiveParser.g:899:11: ( KW_TO (rangeEnd= Number ) )?
					int alt18=2;
					int LA18_0 = input.LA(1);
					if ( (LA18_0==KW_TO) ) {
						alt18=1;
					}
					switch (alt18) {
						case 1 :
							// HiveParser.g:899:12: KW_TO (rangeEnd= Number )
							{
							KW_TO62=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_replDumpStatement2167); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_TO.add(KW_TO62);

							// HiveParser.g:899:18: (rangeEnd= Number )
							// HiveParser.g:899:19: rangeEnd= Number
							{
							rangeEnd=(Token)match(input,Number,FOLLOW_Number_in_replDumpStatement2172); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_Number.add(rangeEnd);

							}

							}
							break;

					}

					// HiveParser.g:900:11: ( KW_LIMIT (batchSize= Number ) )?
					int alt19=2;
					int LA19_0 = input.LA(1);
					if ( (LA19_0==KW_LIMIT) ) {
						alt19=1;
					}
					switch (alt19) {
						case 1 :
							// HiveParser.g:900:12: KW_LIMIT (batchSize= Number )
							{
							KW_LIMIT63=(Token)match(input,KW_LIMIT,FOLLOW_KW_LIMIT_in_replDumpStatement2188); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_LIMIT.add(KW_LIMIT63);

							// HiveParser.g:900:21: (batchSize= Number )
							// HiveParser.g:900:22: batchSize= Number
							{
							batchSize=(Token)match(input,Number,FOLLOW_Number_in_replDumpStatement2193); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_Number.add(batchSize);

							}

							}
							break;

					}

					}
					break;

			}

			// HiveParser.g:902:9: ( KW_WITH replConf= replConfigs )?
			int alt21=2;
			int LA21_0 = input.LA(1);
			if ( (LA21_0==KW_WITH) ) {
				alt21=1;
			}
			switch (alt21) {
				case 1 :
					// HiveParser.g:902:10: KW_WITH replConf= replConfigs
					{
					KW_WITH64=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_replDumpStatement2218); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH64);

					pushFollow(FOLLOW_replConfigs_in_replDumpStatement2222);
					replConf=replConfigs();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_replConfigs.add(replConf.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: rangeEnd, batchSize, tblName, eventId, dbName, replConf
			// token labels: eventId, batchSize, rangeEnd
			// rule labels: dbName, tblName, retval, replConf
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_eventId=new RewriteRuleTokenStream(adaptor,"token eventId",eventId);
			RewriteRuleTokenStream stream_batchSize=new RewriteRuleTokenStream(adaptor,"token batchSize",batchSize);
			RewriteRuleTokenStream stream_rangeEnd=new RewriteRuleTokenStream(adaptor,"token rangeEnd",rangeEnd);
			RewriteRuleSubtreeStream stream_dbName=new RewriteRuleSubtreeStream(adaptor,"rule dbName",dbName!=null?dbName.getTree():null);
			RewriteRuleSubtreeStream stream_tblName=new RewriteRuleSubtreeStream(adaptor,"rule tblName",tblName!=null?tblName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_replConf=new RewriteRuleSubtreeStream(adaptor,"rule replConf",replConf!=null?replConf.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 903:5: -> ^( TOK_REPL_DUMP $dbName ( ^( TOK_TABNAME $tblName) )? ( ^( TOK_FROM $eventId ( TOK_TO $rangeEnd)? ( TOK_LIMIT $batchSize)? ) )? ( $replConf)? )
			{
				// HiveParser.g:903:8: ^( TOK_REPL_DUMP $dbName ( ^( TOK_TABNAME $tblName) )? ( ^( TOK_FROM $eventId ( TOK_TO $rangeEnd)? ( TOK_LIMIT $batchSize)? ) )? ( $replConf)? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_REPL_DUMP, "TOK_REPL_DUMP"), root_1);
				adaptor.addChild(root_1, stream_dbName.nextTree());
				// HiveParser.g:903:32: ( ^( TOK_TABNAME $tblName) )?
				if ( stream_tblName.hasNext() ) {
					// HiveParser.g:903:32: ^( TOK_TABNAME $tblName)
					{
					ASTNode root_2 = (ASTNode)adaptor.nil();
					root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABNAME, "TOK_TABNAME"), root_2);
					adaptor.addChild(root_2, stream_tblName.nextTree());
					adaptor.addChild(root_1, root_2);
					}

				}
				stream_tblName.reset();

				// HiveParser.g:903:57: ( ^( TOK_FROM $eventId ( TOK_TO $rangeEnd)? ( TOK_LIMIT $batchSize)? ) )?
				if ( stream_rangeEnd.hasNext()||stream_batchSize.hasNext()||stream_eventId.hasNext() ) {
					// HiveParser.g:903:57: ^( TOK_FROM $eventId ( TOK_TO $rangeEnd)? ( TOK_LIMIT $batchSize)? )
					{
					ASTNode root_2 = (ASTNode)adaptor.nil();
					root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_FROM, "TOK_FROM"), root_2);
					adaptor.addChild(root_2, stream_eventId.nextNode());
					// HiveParser.g:903:77: ( TOK_TO $rangeEnd)?
					if ( stream_rangeEnd.hasNext() ) {
						adaptor.addChild(root_2, (ASTNode)adaptor.create(TOK_TO, "TOK_TO"));
						adaptor.addChild(root_2, stream_rangeEnd.nextNode());
					}
					stream_rangeEnd.reset();

					// HiveParser.g:903:97: ( TOK_LIMIT $batchSize)?
					if ( stream_batchSize.hasNext() ) {
						adaptor.addChild(root_2, (ASTNode)adaptor.create(TOK_LIMIT, "TOK_LIMIT"));
						adaptor.addChild(root_2, stream_batchSize.nextNode());
					}
					stream_batchSize.reset();

					adaptor.addChild(root_1, root_2);
					}

				}
				stream_rangeEnd.reset();
				stream_batchSize.reset();
				stream_eventId.reset();

				// HiveParser.g:903:124: ( $replConf)?
				if ( stream_replConf.hasNext() ) {
					adaptor.addChild(root_1, stream_replConf.nextTree());
				}
				stream_replConf.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "replDumpStatement"


	public static class replLoadStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "replLoadStatement"
	// HiveParser.g:906:1: replLoadStatement : KW_REPL KW_LOAD ( (dbName= identifier ) ( DOT tblName= identifier )? )? KW_FROM (path= StringLiteral ) ( KW_WITH replConf= replConfigs )? -> ^( TOK_REPL_LOAD $path ( ^( TOK_DBNAME $dbName) )? ( ^( TOK_TABNAME $tblName) )? ( $replConf)? ) ;
	public final HiveParser.replLoadStatement_return replLoadStatement() throws RecognitionException {
		HiveParser.replLoadStatement_return retval = new HiveParser.replLoadStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token path=null;
		Token KW_REPL65=null;
		Token KW_LOAD66=null;
		Token DOT67=null;
		Token KW_FROM68=null;
		Token KW_WITH69=null;
		ParserRuleReturnScope dbName =null;
		ParserRuleReturnScope tblName =null;
		ParserRuleReturnScope replConf =null;

		ASTNode path_tree=null;
		ASTNode KW_REPL65_tree=null;
		ASTNode KW_LOAD66_tree=null;
		ASTNode DOT67_tree=null;
		ASTNode KW_FROM68_tree=null;
		ASTNode KW_WITH69_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_REPL=new RewriteRuleTokenStream(adaptor,"token KW_REPL");
		RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
		RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
		RewriteRuleTokenStream stream_KW_LOAD=new RewriteRuleTokenStream(adaptor,"token KW_LOAD");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_replConfigs=new RewriteRuleSubtreeStream(adaptor,"rule replConfigs");

		 pushMsg(retval.start,"replication load statement", state); 
		try {
			// HiveParser.g:909:7: ( KW_REPL KW_LOAD ( (dbName= identifier ) ( DOT tblName= identifier )? )? KW_FROM (path= StringLiteral ) ( KW_WITH replConf= replConfigs )? -> ^( TOK_REPL_LOAD $path ( ^( TOK_DBNAME $dbName) )? ( ^( TOK_TABNAME $tblName) )? ( $replConf)? ) )
			// HiveParser.g:909:9: KW_REPL KW_LOAD ( (dbName= identifier ) ( DOT tblName= identifier )? )? KW_FROM (path= StringLiteral ) ( KW_WITH replConf= replConfigs )?
			{
			KW_REPL65=(Token)match(input,KW_REPL,FOLLOW_KW_REPL_in_replLoadStatement2302); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REPL.add(KW_REPL65);

			KW_LOAD66=(Token)match(input,KW_LOAD,FOLLOW_KW_LOAD_in_replLoadStatement2304); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LOAD.add(KW_LOAD66);

			// HiveParser.g:910:9: ( (dbName= identifier ) ( DOT tblName= identifier )? )?
			int alt23=2;
			int LA23_0 = input.LA(1);
			if ( (LA23_0==Identifier||(LA23_0 >= KW_ABORT && LA23_0 <= KW_AFTER)||LA23_0==KW_ALLOC_FRACTION||LA23_0==KW_ANALYZE||LA23_0==KW_ARCHIVE||(LA23_0 >= KW_ASC && LA23_0 <= KW_AST)||(LA23_0 >= KW_AUTOCOMMIT && LA23_0 <= KW_BEFORE)||(LA23_0 >= KW_BUCKET && LA23_0 <= KW_BUCKETS)||(LA23_0 >= KW_CACHE && LA23_0 <= KW_CASCADE)||LA23_0==KW_CHANGE||(LA23_0 >= KW_CHECK && LA23_0 <= KW_COLLECTION)||(LA23_0 >= KW_COLUMNS && LA23_0 <= KW_COMMENT)||(LA23_0 >= KW_COMPACT && LA23_0 <= KW_CONCATENATE)||LA23_0==KW_CONTINUE||LA23_0==KW_DATA||(LA23_0 >= KW_DATABASES && LA23_0 <= KW_DEBUG)||(LA23_0 >= KW_DEFAULT && LA23_0 <= KW_DEFINED)||(LA23_0 >= KW_DELIMITED && LA23_0 <= KW_DESC)||(LA23_0 >= KW_DETAIL && LA23_0 <= KW_DISABLE)||(LA23_0 >= KW_DISTRIBUTE && LA23_0 <= KW_DO)||LA23_0==KW_DOW||(LA23_0 >= KW_DUMP && LA23_0 <= KW_ELEM_TYPE)||LA23_0==KW_ENABLE||(LA23_0 >= KW_ENFORCED && LA23_0 <= KW_ESCAPED)||LA23_0==KW_EXCLUSIVE||(LA23_0 >= KW_EXPLAIN && LA23_0 <= KW_EXPRESSION)||(LA23_0 >= KW_FIELDS && LA23_0 <= KW_FIRST)||(LA23_0 >= KW_FORMAT && LA23_0 <= KW_FORMATTED)||LA23_0==KW_FUNCTIONS||LA23_0==KW_GROUP||(LA23_0 >= KW_HOUR && LA23_0 <= KW_IDXPROPERTIES)||(LA23_0 >= KW_INDEX && LA23_0 <= KW_INDEXES)||(LA23_0 >= KW_INPATH && LA23_0 <= KW_INPUTFORMAT)||(LA23_0 >= KW_ISOLATION && LA23_0 <= KW_JAR)||(LA23_0 >= KW_KEY && LA23_0 <= KW_LAST)||LA23_0==KW_LEVEL||(LA23_0 >= KW_LIMIT && LA23_0 <= KW_LOAD)||(LA23_0 >= KW_LOCATION && LA23_0 <= KW_LONG)||LA23_0==KW_MANAGEMENT||(LA23_0 >= KW_MAPJOIN && LA23_0 <= KW_MATERIALIZED)||LA23_0==KW_METADATA||(LA23_0 >= KW_MINUTE && LA23_0 <= KW_MONTH)||(LA23_0 >= KW_MOVE && LA23_0 <= KW_MSCK)||(LA23_0 >= KW_NORELY && LA23_0 <= KW_NOSCAN)||LA23_0==KW_NOVALIDATE||LA23_0==KW_NULLS||LA23_0==KW_OFFSET||(LA23_0 >= KW_OPERATOR && LA23_0 <= KW_OPTION)||LA23_0==KW_ORDER||(LA23_0 >= KW_OUTPUTDRIVER && LA23_0 <= KW_OUTPUTFORMAT)||(LA23_0 >= KW_OVERWRITE && LA23_0 <= KW_OWNER)||(LA23_0 >= KW_PARTITIONED && LA23_0 <= KW_PATH)||(LA23_0 >= KW_PLAN && LA23_0 <= KW_POOL)||LA23_0==KW_PRINCIPALS||(LA23_0 >= KW_PURGE && LA23_0 <= KW_QUERY_PARALLELISM)||LA23_0==KW_READ||(LA23_0 >= KW_REBUILD && LA23_0 <= KW_RECORDWRITER)||(LA23_0 >= KW_RELOAD && LA23_0 <= KW_RESTRICT)||LA23_0==KW_REWRITE||(LA23_0 >= KW_ROLE && LA23_0 <= KW_ROLES)||(LA23_0 >= KW_SCHEDULING_POLICY && LA23_0 <= KW_SECOND)||(LA23_0 >= KW_SEMI && LA23_0 <= KW_SERVER)||(LA23_0 >= KW_SETS && LA23_0 <= KW_SKEWED)||(LA23_0 >= KW_SNAPSHOT && LA23_0 <= KW_SSL)||(LA23_0 >= KW_STATISTICS && LA23_0 <= KW_SUMMARY)||LA23_0==KW_TABLES||(LA23_0 >= KW_TBLPROPERTIES && LA23_0 <= KW_TERMINATED)||LA23_0==KW_TINYINT||(LA23_0 >= KW_TOUCH && LA23_0 <= KW_TRANSACTIONS)||LA23_0==KW_UNARCHIVE||LA23_0==KW_UNDO||LA23_0==KW_UNIONTYPE||(LA23_0 >= KW_UNKNOWN && LA23_0 <= KW_UNSIGNED)||(LA23_0 >= KW_URI && LA23_0 <= KW_USE)||(LA23_0 >= KW_UTC && LA23_0 <= KW_VALIDATE)||LA23_0==KW_VALUE_TYPE||(LA23_0 >= KW_VECTORIZATION && LA23_0 <= KW_WEEK)||LA23_0==KW_WHILE||(LA23_0 >= KW_WORK && LA23_0 <= KW_ZONE)||LA23_0==KW_BATCH||LA23_0==KW_DAYOFWEEK||LA23_0==KW_HOLD_DDLTIME||LA23_0==KW_IGNORE||LA23_0==KW_NO_DROP||LA23_0==KW_OFFLINE||LA23_0==KW_PROTECTION||LA23_0==KW_READONLY||LA23_0==KW_TIMESTAMPTZ) ) {
				alt23=1;
			}
			switch (alt23) {
				case 1 :
					// HiveParser.g:910:10: (dbName= identifier ) ( DOT tblName= identifier )?
					{
					// HiveParser.g:910:10: (dbName= identifier )
					// HiveParser.g:910:11: dbName= identifier
					{
					pushFollow(FOLLOW_identifier_in_replLoadStatement2318);
					dbName=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(dbName.getTree());
					}

					// HiveParser.g:910:30: ( DOT tblName= identifier )?
					int alt22=2;
					int LA22_0 = input.LA(1);
					if ( (LA22_0==DOT) ) {
						alt22=1;
					}
					switch (alt22) {
						case 1 :
							// HiveParser.g:910:31: DOT tblName= identifier
							{
							DOT67=(Token)match(input,DOT,FOLLOW_DOT_in_replLoadStatement2322); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_DOT.add(DOT67);

							pushFollow(FOLLOW_identifier_in_replLoadStatement2326);
							tblName=identifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_identifier.add(tblName.getTree());
							}
							break;

					}

					}
					break;

			}

			KW_FROM68=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_replLoadStatement2340); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM68);

			// HiveParser.g:911:17: (path= StringLiteral )
			// HiveParser.g:911:18: path= StringLiteral
			{
			path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_replLoadStatement2345); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(path);

			}

			// HiveParser.g:912:9: ( KW_WITH replConf= replConfigs )?
			int alt24=2;
			int LA24_0 = input.LA(1);
			if ( (LA24_0==KW_WITH) ) {
				alt24=1;
			}
			switch (alt24) {
				case 1 :
					// HiveParser.g:912:10: KW_WITH replConf= replConfigs
					{
					KW_WITH69=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_replLoadStatement2357); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH69);

					pushFollow(FOLLOW_replConfigs_in_replLoadStatement2361);
					replConf=replConfigs();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_replConfigs.add(replConf.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: replConf, dbName, path, tblName
			// token labels: path
			// rule labels: dbName, tblName, retval, replConf
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
			RewriteRuleSubtreeStream stream_dbName=new RewriteRuleSubtreeStream(adaptor,"rule dbName",dbName!=null?dbName.getTree():null);
			RewriteRuleSubtreeStream stream_tblName=new RewriteRuleSubtreeStream(adaptor,"rule tblName",tblName!=null?tblName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_replConf=new RewriteRuleSubtreeStream(adaptor,"rule replConf",replConf!=null?replConf.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 913:7: -> ^( TOK_REPL_LOAD $path ( ^( TOK_DBNAME $dbName) )? ( ^( TOK_TABNAME $tblName) )? ( $replConf)? )
			{
				// HiveParser.g:913:10: ^( TOK_REPL_LOAD $path ( ^( TOK_DBNAME $dbName) )? ( ^( TOK_TABNAME $tblName) )? ( $replConf)? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_REPL_LOAD, "TOK_REPL_LOAD"), root_1);
				adaptor.addChild(root_1, stream_path.nextNode());
				// HiveParser.g:913:32: ( ^( TOK_DBNAME $dbName) )?
				if ( stream_dbName.hasNext() ) {
					// HiveParser.g:913:32: ^( TOK_DBNAME $dbName)
					{
					ASTNode root_2 = (ASTNode)adaptor.nil();
					root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DBNAME, "TOK_DBNAME"), root_2);
					adaptor.addChild(root_2, stream_dbName.nextTree());
					adaptor.addChild(root_1, root_2);
					}

				}
				stream_dbName.reset();

				// HiveParser.g:913:55: ( ^( TOK_TABNAME $tblName) )?
				if ( stream_tblName.hasNext() ) {
					// HiveParser.g:913:55: ^( TOK_TABNAME $tblName)
					{
					ASTNode root_2 = (ASTNode)adaptor.nil();
					root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABNAME, "TOK_TABNAME"), root_2);
					adaptor.addChild(root_2, stream_tblName.nextTree());
					adaptor.addChild(root_1, root_2);
					}

				}
				stream_tblName.reset();

				// HiveParser.g:913:81: ( $replConf)?
				if ( stream_replConf.hasNext() ) {
					adaptor.addChild(root_1, stream_replConf.nextTree());
				}
				stream_replConf.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "replLoadStatement"


	public static class replConfigs_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "replConfigs"
	// HiveParser.g:916:1: replConfigs : LPAREN replConfigsList RPAREN -> ^( TOK_REPL_CONFIG replConfigsList ) ;
	public final HiveParser.replConfigs_return replConfigs() throws RecognitionException {
		HiveParser.replConfigs_return retval = new HiveParser.replConfigs_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token LPAREN70=null;
		Token RPAREN72=null;
		ParserRuleReturnScope replConfigsList71 =null;

		ASTNode LPAREN70_tree=null;
		ASTNode RPAREN72_tree=null;
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_replConfigsList=new RewriteRuleSubtreeStream(adaptor,"rule replConfigsList");

		 pushMsg(retval.start,"repl configurations", state); 
		try {
			// HiveParser.g:919:5: ( LPAREN replConfigsList RPAREN -> ^( TOK_REPL_CONFIG replConfigsList ) )
			// HiveParser.g:920:7: LPAREN replConfigsList RPAREN
			{
			LPAREN70=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_replConfigs2433); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN70);

			pushFollow(FOLLOW_replConfigsList_in_replConfigs2435);
			replConfigsList71=replConfigsList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_replConfigsList.add(replConfigsList71.getTree());
			RPAREN72=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_replConfigs2437); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN72);

			// AST REWRITE
			// elements: replConfigsList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 920:37: -> ^( TOK_REPL_CONFIG replConfigsList )
			{
				// HiveParser.g:920:40: ^( TOK_REPL_CONFIG replConfigsList )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_REPL_CONFIG, "TOK_REPL_CONFIG"), root_1);
				adaptor.addChild(root_1, stream_replConfigsList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "replConfigs"


	public static class replConfigsList_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "replConfigsList"
	// HiveParser.g:923:1: replConfigsList : keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_REPL_CONFIG_LIST ( keyValueProperty )+ ) ;
	public final HiveParser.replConfigsList_return replConfigsList() throws RecognitionException {
		HiveParser.replConfigsList_return retval = new HiveParser.replConfigsList_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token COMMA74=null;
		ParserRuleReturnScope keyValueProperty73 =null;
		ParserRuleReturnScope keyValueProperty75 =null;

		ASTNode COMMA74_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");

		 pushMsg(retval.start,"repl configurations list", state); 
		try {
			// HiveParser.g:926:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_REPL_CONFIG_LIST ( keyValueProperty )+ ) )
			// HiveParser.g:927:7: keyValueProperty ( COMMA keyValueProperty )*
			{
			pushFollow(FOLLOW_keyValueProperty_in_replConfigsList2478);
			keyValueProperty73=keyValueProperty();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_keyValueProperty.add(keyValueProperty73.getTree());
			// HiveParser.g:927:24: ( COMMA keyValueProperty )*
			loop25:
			while (true) {
				int alt25=2;
				int LA25_0 = input.LA(1);
				if ( (LA25_0==COMMA) ) {
					alt25=1;
				}

				switch (alt25) {
				case 1 :
					// HiveParser.g:927:25: COMMA keyValueProperty
					{
					COMMA74=(Token)match(input,COMMA,FOLLOW_COMMA_in_replConfigsList2481); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA74);

					pushFollow(FOLLOW_keyValueProperty_in_replConfigsList2483);
					keyValueProperty75=keyValueProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_keyValueProperty.add(keyValueProperty75.getTree());
					}
					break;

				default :
					break loop25;
				}
			}

			// AST REWRITE
			// elements: keyValueProperty
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 927:50: -> ^( TOK_REPL_CONFIG_LIST ( keyValueProperty )+ )
			{
				// HiveParser.g:927:53: ^( TOK_REPL_CONFIG_LIST ( keyValueProperty )+ )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_REPL_CONFIG_LIST, "TOK_REPL_CONFIG_LIST"), root_1);
				if ( !(stream_keyValueProperty.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_keyValueProperty.hasNext() ) {
					adaptor.addChild(root_1, stream_keyValueProperty.nextTree());
				}
				stream_keyValueProperty.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "replConfigsList"


	public static class replStatusStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "replStatusStatement"
	// HiveParser.g:930:1: replStatusStatement : KW_REPL KW_STATUS (dbName= identifier ) ( DOT tblName= identifier )? ( KW_WITH replConf= replConfigs )? -> ^( TOK_REPL_STATUS $dbName ( ^( TOK_TABNAME $tblName) )? ( $replConf)? ) ;
	public final HiveParser.replStatusStatement_return replStatusStatement() throws RecognitionException {
		HiveParser.replStatusStatement_return retval = new HiveParser.replStatusStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_REPL76=null;
		Token KW_STATUS77=null;
		Token DOT78=null;
		Token KW_WITH79=null;
		ParserRuleReturnScope dbName =null;
		ParserRuleReturnScope tblName =null;
		ParserRuleReturnScope replConf =null;

		ASTNode KW_REPL76_tree=null;
		ASTNode KW_STATUS77_tree=null;
		ASTNode DOT78_tree=null;
		ASTNode KW_WITH79_tree=null;
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_STATUS=new RewriteRuleTokenStream(adaptor,"token KW_STATUS");
		RewriteRuleTokenStream stream_KW_REPL=new RewriteRuleTokenStream(adaptor,"token KW_REPL");
		RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_replConfigs=new RewriteRuleSubtreeStream(adaptor,"rule replConfigs");

		 pushMsg(retval.start,"replication status statement", state); 
		try {
			// HiveParser.g:933:7: ( KW_REPL KW_STATUS (dbName= identifier ) ( DOT tblName= identifier )? ( KW_WITH replConf= replConfigs )? -> ^( TOK_REPL_STATUS $dbName ( ^( TOK_TABNAME $tblName) )? ( $replConf)? ) )
			// HiveParser.g:933:9: KW_REPL KW_STATUS (dbName= identifier ) ( DOT tblName= identifier )? ( KW_WITH replConf= replConfigs )?
			{
			KW_REPL76=(Token)match(input,KW_REPL,FOLLOW_KW_REPL_in_replStatusStatement2523); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REPL.add(KW_REPL76);

			KW_STATUS77=(Token)match(input,KW_STATUS,FOLLOW_KW_STATUS_in_replStatusStatement2525); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_STATUS.add(KW_STATUS77);

			// HiveParser.g:934:9: (dbName= identifier )
			// HiveParser.g:934:10: dbName= identifier
			{
			pushFollow(FOLLOW_identifier_in_replStatusStatement2538);
			dbName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(dbName.getTree());
			}

			// HiveParser.g:934:29: ( DOT tblName= identifier )?
			int alt26=2;
			int LA26_0 = input.LA(1);
			if ( (LA26_0==DOT) ) {
				alt26=1;
			}
			switch (alt26) {
				case 1 :
					// HiveParser.g:934:30: DOT tblName= identifier
					{
					DOT78=(Token)match(input,DOT,FOLLOW_DOT_in_replStatusStatement2542); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DOT.add(DOT78);

					pushFollow(FOLLOW_identifier_in_replStatusStatement2546);
					tblName=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(tblName.getTree());
					}
					break;

			}

			// HiveParser.g:935:9: ( KW_WITH replConf= replConfigs )?
			int alt27=2;
			int LA27_0 = input.LA(1);
			if ( (LA27_0==KW_WITH) ) {
				alt27=1;
			}
			switch (alt27) {
				case 1 :
					// HiveParser.g:935:10: KW_WITH replConf= replConfigs
					{
					KW_WITH79=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_replStatusStatement2559); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH79);

					pushFollow(FOLLOW_replConfigs_in_replStatusStatement2563);
					replConf=replConfigs();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_replConfigs.add(replConf.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: dbName, replConf, tblName
			// token labels: 
			// rule labels: dbName, tblName, retval, replConf
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_dbName=new RewriteRuleSubtreeStream(adaptor,"rule dbName",dbName!=null?dbName.getTree():null);
			RewriteRuleSubtreeStream stream_tblName=new RewriteRuleSubtreeStream(adaptor,"rule tblName",tblName!=null?tblName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_replConf=new RewriteRuleSubtreeStream(adaptor,"rule replConf",replConf!=null?replConf.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 936:7: -> ^( TOK_REPL_STATUS $dbName ( ^( TOK_TABNAME $tblName) )? ( $replConf)? )
			{
				// HiveParser.g:936:10: ^( TOK_REPL_STATUS $dbName ( ^( TOK_TABNAME $tblName) )? ( $replConf)? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_REPL_STATUS, "TOK_REPL_STATUS"), root_1);
				adaptor.addChild(root_1, stream_dbName.nextTree());
				// HiveParser.g:936:36: ( ^( TOK_TABNAME $tblName) )?
				if ( stream_tblName.hasNext() ) {
					// HiveParser.g:936:36: ^( TOK_TABNAME $tblName)
					{
					ASTNode root_2 = (ASTNode)adaptor.nil();
					root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABNAME, "TOK_TABNAME"), root_2);
					adaptor.addChild(root_2, stream_tblName.nextTree());
					adaptor.addChild(root_1, root_2);
					}

				}
				stream_tblName.reset();

				// HiveParser.g:936:62: ( $replConf)?
				if ( stream_replConf.hasNext() ) {
					adaptor.addChild(root_1, stream_replConf.nextTree());
				}
				stream_replConf.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "replStatusStatement"


	public static class ddlStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "ddlStatement"
	// HiveParser.g:939:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | truncateTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | createMaterializedViewStatement | dropViewStatement | dropMaterializedViewStatement | createFunctionStatement | createMacroStatement | dropFunctionStatement | reloadFunctionStatement | dropMacroStatement | analyzeStatement | lockStatement | unlockStatement | lockDatabase | unlockDatabase | createRoleStatement | dropRoleStatement | ( grantPrivileges )=> grantPrivileges | ( revokePrivileges )=> revokePrivileges | showGrants | showRoleGrants | showRolePrincipals | showRoles | grantRole | revokeRole | setRole | showCurrentRole | abortTransactionStatement | killQueryStatement | resourcePlanDdlStatements );
	public final HiveParser.ddlStatement_return ddlStatement() throws RecognitionException {
		HiveParser.ddlStatement_return retval = new HiveParser.ddlStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope createDatabaseStatement80 =null;
		ParserRuleReturnScope switchDatabaseStatement81 =null;
		ParserRuleReturnScope dropDatabaseStatement82 =null;
		ParserRuleReturnScope createTableStatement83 =null;
		ParserRuleReturnScope dropTableStatement84 =null;
		ParserRuleReturnScope truncateTableStatement85 =null;
		ParserRuleReturnScope alterStatement86 =null;
		ParserRuleReturnScope descStatement87 =null;
		ParserRuleReturnScope showStatement88 =null;
		ParserRuleReturnScope metastoreCheck89 =null;
		ParserRuleReturnScope createViewStatement90 =null;
		ParserRuleReturnScope createMaterializedViewStatement91 =null;
		ParserRuleReturnScope dropViewStatement92 =null;
		ParserRuleReturnScope dropMaterializedViewStatement93 =null;
		ParserRuleReturnScope createFunctionStatement94 =null;
		ParserRuleReturnScope createMacroStatement95 =null;
		ParserRuleReturnScope dropFunctionStatement96 =null;
		ParserRuleReturnScope reloadFunctionStatement97 =null;
		ParserRuleReturnScope dropMacroStatement98 =null;
		ParserRuleReturnScope analyzeStatement99 =null;
		ParserRuleReturnScope lockStatement100 =null;
		ParserRuleReturnScope unlockStatement101 =null;
		ParserRuleReturnScope lockDatabase102 =null;
		ParserRuleReturnScope unlockDatabase103 =null;
		ParserRuleReturnScope createRoleStatement104 =null;
		ParserRuleReturnScope dropRoleStatement105 =null;
		ParserRuleReturnScope grantPrivileges106 =null;
		ParserRuleReturnScope revokePrivileges107 =null;
		ParserRuleReturnScope showGrants108 =null;
		ParserRuleReturnScope showRoleGrants109 =null;
		ParserRuleReturnScope showRolePrincipals110 =null;
		ParserRuleReturnScope showRoles111 =null;
		ParserRuleReturnScope grantRole112 =null;
		ParserRuleReturnScope revokeRole113 =null;
		ParserRuleReturnScope setRole114 =null;
		ParserRuleReturnScope showCurrentRole115 =null;
		ParserRuleReturnScope abortTransactionStatement116 =null;
		ParserRuleReturnScope killQueryStatement117 =null;
		ParserRuleReturnScope resourcePlanDdlStatements118 =null;


		 pushMsg(retval.start,"ddl statement", state); 
		try {
			// HiveParser.g:942:5: ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | truncateTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | createMaterializedViewStatement | dropViewStatement | dropMaterializedViewStatement | createFunctionStatement | createMacroStatement | dropFunctionStatement | reloadFunctionStatement | dropMacroStatement | analyzeStatement | lockStatement | unlockStatement | lockDatabase | unlockDatabase | createRoleStatement | dropRoleStatement | ( grantPrivileges )=> grantPrivileges | ( revokePrivileges )=> revokePrivileges | showGrants | showRoleGrants | showRolePrincipals | showRoles | grantRole | revokeRole | setRole | showCurrentRole | abortTransactionStatement | killQueryStatement | resourcePlanDdlStatements )
			int alt28=39;
			alt28 = dfa28.predict(input);
			switch (alt28) {
				case 1 :
					// HiveParser.g:942:7: createDatabaseStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_createDatabaseStatement_in_ddlStatement2621);
					createDatabaseStatement80=createDatabaseStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, createDatabaseStatement80.getTree());

					}
					break;
				case 2 :
					// HiveParser.g:943:7: switchDatabaseStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_switchDatabaseStatement_in_ddlStatement2629);
					switchDatabaseStatement81=switchDatabaseStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, switchDatabaseStatement81.getTree());

					}
					break;
				case 3 :
					// HiveParser.g:944:7: dropDatabaseStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_dropDatabaseStatement_in_ddlStatement2637);
					dropDatabaseStatement82=dropDatabaseStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dropDatabaseStatement82.getTree());

					}
					break;
				case 4 :
					// HiveParser.g:945:7: createTableStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_createTableStatement_in_ddlStatement2645);
					createTableStatement83=createTableStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, createTableStatement83.getTree());

					}
					break;
				case 5 :
					// HiveParser.g:946:7: dropTableStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_dropTableStatement_in_ddlStatement2653);
					dropTableStatement84=dropTableStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dropTableStatement84.getTree());

					}
					break;
				case 6 :
					// HiveParser.g:947:7: truncateTableStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_truncateTableStatement_in_ddlStatement2661);
					truncateTableStatement85=truncateTableStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, truncateTableStatement85.getTree());

					}
					break;
				case 7 :
					// HiveParser.g:948:7: alterStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatement_in_ddlStatement2669);
					alterStatement86=alterStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatement86.getTree());

					}
					break;
				case 8 :
					// HiveParser.g:949:7: descStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_descStatement_in_ddlStatement2677);
					descStatement87=descStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, descStatement87.getTree());

					}
					break;
				case 9 :
					// HiveParser.g:950:7: showStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_showStatement_in_ddlStatement2685);
					showStatement88=showStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, showStatement88.getTree());

					}
					break;
				case 10 :
					// HiveParser.g:951:7: metastoreCheck
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_metastoreCheck_in_ddlStatement2693);
					metastoreCheck89=metastoreCheck();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, metastoreCheck89.getTree());

					}
					break;
				case 11 :
					// HiveParser.g:952:7: createViewStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_createViewStatement_in_ddlStatement2701);
					createViewStatement90=createViewStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, createViewStatement90.getTree());

					}
					break;
				case 12 :
					// HiveParser.g:953:7: createMaterializedViewStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_createMaterializedViewStatement_in_ddlStatement2709);
					createMaterializedViewStatement91=createMaterializedViewStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, createMaterializedViewStatement91.getTree());

					}
					break;
				case 13 :
					// HiveParser.g:954:7: dropViewStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_dropViewStatement_in_ddlStatement2717);
					dropViewStatement92=dropViewStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dropViewStatement92.getTree());

					}
					break;
				case 14 :
					// HiveParser.g:955:7: dropMaterializedViewStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_dropMaterializedViewStatement_in_ddlStatement2725);
					dropMaterializedViewStatement93=dropMaterializedViewStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dropMaterializedViewStatement93.getTree());

					}
					break;
				case 15 :
					// HiveParser.g:956:7: createFunctionStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_createFunctionStatement_in_ddlStatement2733);
					createFunctionStatement94=createFunctionStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, createFunctionStatement94.getTree());

					}
					break;
				case 16 :
					// HiveParser.g:957:7: createMacroStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_createMacroStatement_in_ddlStatement2741);
					createMacroStatement95=createMacroStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, createMacroStatement95.getTree());

					}
					break;
				case 17 :
					// HiveParser.g:958:7: dropFunctionStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_dropFunctionStatement_in_ddlStatement2749);
					dropFunctionStatement96=dropFunctionStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dropFunctionStatement96.getTree());

					}
					break;
				case 18 :
					// HiveParser.g:959:7: reloadFunctionStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_reloadFunctionStatement_in_ddlStatement2757);
					reloadFunctionStatement97=reloadFunctionStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, reloadFunctionStatement97.getTree());

					}
					break;
				case 19 :
					// HiveParser.g:960:7: dropMacroStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_dropMacroStatement_in_ddlStatement2765);
					dropMacroStatement98=dropMacroStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dropMacroStatement98.getTree());

					}
					break;
				case 20 :
					// HiveParser.g:961:7: analyzeStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_analyzeStatement_in_ddlStatement2773);
					analyzeStatement99=analyzeStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, analyzeStatement99.getTree());

					}
					break;
				case 21 :
					// HiveParser.g:962:7: lockStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_lockStatement_in_ddlStatement2781);
					lockStatement100=lockStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, lockStatement100.getTree());

					}
					break;
				case 22 :
					// HiveParser.g:963:7: unlockStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_unlockStatement_in_ddlStatement2789);
					unlockStatement101=unlockStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unlockStatement101.getTree());

					}
					break;
				case 23 :
					// HiveParser.g:964:7: lockDatabase
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_lockDatabase_in_ddlStatement2797);
					lockDatabase102=lockDatabase();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, lockDatabase102.getTree());

					}
					break;
				case 24 :
					// HiveParser.g:965:7: unlockDatabase
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_unlockDatabase_in_ddlStatement2805);
					unlockDatabase103=unlockDatabase();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unlockDatabase103.getTree());

					}
					break;
				case 25 :
					// HiveParser.g:966:7: createRoleStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_createRoleStatement_in_ddlStatement2813);
					createRoleStatement104=createRoleStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, createRoleStatement104.getTree());

					}
					break;
				case 26 :
					// HiveParser.g:967:7: dropRoleStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_dropRoleStatement_in_ddlStatement2821);
					dropRoleStatement105=dropRoleStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dropRoleStatement105.getTree());

					}
					break;
				case 27 :
					// HiveParser.g:968:7: ( grantPrivileges )=> grantPrivileges
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_grantPrivileges_in_ddlStatement2835);
					grantPrivileges106=grantPrivileges();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, grantPrivileges106.getTree());

					}
					break;
				case 28 :
					// HiveParser.g:969:7: ( revokePrivileges )=> revokePrivileges
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_revokePrivileges_in_ddlStatement2849);
					revokePrivileges107=revokePrivileges();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, revokePrivileges107.getTree());

					}
					break;
				case 29 :
					// HiveParser.g:970:7: showGrants
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_showGrants_in_ddlStatement2857);
					showGrants108=showGrants();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, showGrants108.getTree());

					}
					break;
				case 30 :
					// HiveParser.g:971:7: showRoleGrants
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_showRoleGrants_in_ddlStatement2865);
					showRoleGrants109=showRoleGrants();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, showRoleGrants109.getTree());

					}
					break;
				case 31 :
					// HiveParser.g:972:7: showRolePrincipals
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_showRolePrincipals_in_ddlStatement2873);
					showRolePrincipals110=showRolePrincipals();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, showRolePrincipals110.getTree());

					}
					break;
				case 32 :
					// HiveParser.g:973:7: showRoles
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_showRoles_in_ddlStatement2881);
					showRoles111=showRoles();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, showRoles111.getTree());

					}
					break;
				case 33 :
					// HiveParser.g:974:7: grantRole
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_grantRole_in_ddlStatement2889);
					grantRole112=grantRole();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, grantRole112.getTree());

					}
					break;
				case 34 :
					// HiveParser.g:975:7: revokeRole
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_revokeRole_in_ddlStatement2897);
					revokeRole113=revokeRole();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, revokeRole113.getTree());

					}
					break;
				case 35 :
					// HiveParser.g:976:7: setRole
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_setRole_in_ddlStatement2905);
					setRole114=setRole();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, setRole114.getTree());

					}
					break;
				case 36 :
					// HiveParser.g:977:7: showCurrentRole
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_showCurrentRole_in_ddlStatement2913);
					showCurrentRole115=showCurrentRole();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, showCurrentRole115.getTree());

					}
					break;
				case 37 :
					// HiveParser.g:978:7: abortTransactionStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_abortTransactionStatement_in_ddlStatement2921);
					abortTransactionStatement116=abortTransactionStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, abortTransactionStatement116.getTree());

					}
					break;
				case 38 :
					// HiveParser.g:979:7: killQueryStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_killQueryStatement_in_ddlStatement2929);
					killQueryStatement117=killQueryStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, killQueryStatement117.getTree());

					}
					break;
				case 39 :
					// HiveParser.g:980:7: resourcePlanDdlStatements
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_resourcePlanDdlStatements_in_ddlStatement2937);
					resourcePlanDdlStatements118=resourcePlanDdlStatements();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, resourcePlanDdlStatements118.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "ddlStatement"


	public static class ifExists_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "ifExists"
	// HiveParser.g:983:1: ifExists : KW_IF KW_EXISTS -> ^( TOK_IFEXISTS ) ;
	public final HiveParser.ifExists_return ifExists() throws RecognitionException {
		HiveParser.ifExists_return retval = new HiveParser.ifExists_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_IF119=null;
		Token KW_EXISTS120=null;

		ASTNode KW_IF119_tree=null;
		ASTNode KW_EXISTS120_tree=null;
		RewriteRuleTokenStream stream_KW_EXISTS=new RewriteRuleTokenStream(adaptor,"token KW_EXISTS");
		RewriteRuleTokenStream stream_KW_IF=new RewriteRuleTokenStream(adaptor,"token KW_IF");

		 pushMsg(retval.start,"if exists clause", state); 
		try {
			// HiveParser.g:986:5: ( KW_IF KW_EXISTS -> ^( TOK_IFEXISTS ) )
			// HiveParser.g:986:7: KW_IF KW_EXISTS
			{
			KW_IF119=(Token)match(input,KW_IF,FOLLOW_KW_IF_in_ifExists2964); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_IF.add(KW_IF119);

			KW_EXISTS120=(Token)match(input,KW_EXISTS,FOLLOW_KW_EXISTS_in_ifExists2966); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_EXISTS.add(KW_EXISTS120);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 987:5: -> ^( TOK_IFEXISTS )
			{
				// HiveParser.g:987:8: ^( TOK_IFEXISTS )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_IFEXISTS, "TOK_IFEXISTS"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "ifExists"


	public static class restrictOrCascade_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "restrictOrCascade"
	// HiveParser.g:990:1: restrictOrCascade : ( KW_RESTRICT -> ^( TOK_RESTRICT ) | KW_CASCADE -> ^( TOK_CASCADE ) );
	public final HiveParser.restrictOrCascade_return restrictOrCascade() throws RecognitionException {
		HiveParser.restrictOrCascade_return retval = new HiveParser.restrictOrCascade_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_RESTRICT121=null;
		Token KW_CASCADE122=null;

		ASTNode KW_RESTRICT121_tree=null;
		ASTNode KW_CASCADE122_tree=null;
		RewriteRuleTokenStream stream_KW_CASCADE=new RewriteRuleTokenStream(adaptor,"token KW_CASCADE");
		RewriteRuleTokenStream stream_KW_RESTRICT=new RewriteRuleTokenStream(adaptor,"token KW_RESTRICT");

		 pushMsg(retval.start,"restrict or cascade clause", state); 
		try {
			// HiveParser.g:993:5: ( KW_RESTRICT -> ^( TOK_RESTRICT ) | KW_CASCADE -> ^( TOK_CASCADE ) )
			int alt29=2;
			int LA29_0 = input.LA(1);
			if ( (LA29_0==KW_RESTRICT) ) {
				alt29=1;
			}
			else if ( (LA29_0==KW_CASCADE) ) {
				alt29=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 29, 0, input);
				throw nvae;
			}

			switch (alt29) {
				case 1 :
					// HiveParser.g:993:7: KW_RESTRICT
					{
					KW_RESTRICT121=(Token)match(input,KW_RESTRICT,FOLLOW_KW_RESTRICT_in_restrictOrCascade3003); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_RESTRICT.add(KW_RESTRICT121);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 994:5: -> ^( TOK_RESTRICT )
					{
						// HiveParser.g:994:8: ^( TOK_RESTRICT )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_RESTRICT, "TOK_RESTRICT"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:995:7: KW_CASCADE
					{
					KW_CASCADE122=(Token)match(input,KW_CASCADE,FOLLOW_KW_CASCADE_in_restrictOrCascade3021); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CASCADE.add(KW_CASCADE122);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 996:5: -> ^( TOK_CASCADE )
					{
						// HiveParser.g:996:8: ^( TOK_CASCADE )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_CASCADE, "TOK_CASCADE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "restrictOrCascade"


	public static class ifNotExists_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "ifNotExists"
	// HiveParser.g:999:1: ifNotExists : KW_IF KW_NOT KW_EXISTS -> ^( TOK_IFNOTEXISTS ) ;
	public final HiveParser.ifNotExists_return ifNotExists() throws RecognitionException {
		HiveParser.ifNotExists_return retval = new HiveParser.ifNotExists_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_IF123=null;
		Token KW_NOT124=null;
		Token KW_EXISTS125=null;

		ASTNode KW_IF123_tree=null;
		ASTNode KW_NOT124_tree=null;
		ASTNode KW_EXISTS125_tree=null;
		RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
		RewriteRuleTokenStream stream_KW_EXISTS=new RewriteRuleTokenStream(adaptor,"token KW_EXISTS");
		RewriteRuleTokenStream stream_KW_IF=new RewriteRuleTokenStream(adaptor,"token KW_IF");

		 pushMsg(retval.start,"if not exists clause", state); 
		try {
			// HiveParser.g:1002:5: ( KW_IF KW_NOT KW_EXISTS -> ^( TOK_IFNOTEXISTS ) )
			// HiveParser.g:1002:7: KW_IF KW_NOT KW_EXISTS
			{
			KW_IF123=(Token)match(input,KW_IF,FOLLOW_KW_IF_in_ifNotExists3058); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_IF.add(KW_IF123);

			KW_NOT124=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_ifNotExists3060); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT124);

			KW_EXISTS125=(Token)match(input,KW_EXISTS,FOLLOW_KW_EXISTS_in_ifNotExists3062); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_EXISTS.add(KW_EXISTS125);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1003:5: -> ^( TOK_IFNOTEXISTS )
			{
				// HiveParser.g:1003:8: ^( TOK_IFNOTEXISTS )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_IFNOTEXISTS, "TOK_IFNOTEXISTS"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "ifNotExists"


	public static class force_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "force"
	// HiveParser.g:1006:1: force : KW_FORCE -> ^( TOK_FORCE ) ;
	public final HiveParser.force_return force() throws RecognitionException {
		HiveParser.force_return retval = new HiveParser.force_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_FORCE126=null;

		ASTNode KW_FORCE126_tree=null;
		RewriteRuleTokenStream stream_KW_FORCE=new RewriteRuleTokenStream(adaptor,"token KW_FORCE");

		 msgs.push("force clause"); 
		try {
			// HiveParser.g:1009:5: ( KW_FORCE -> ^( TOK_FORCE ) )
			// HiveParser.g:1009:7: KW_FORCE
			{
			KW_FORCE126=(Token)match(input,KW_FORCE,FOLLOW_KW_FORCE_in_force3099); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FORCE.add(KW_FORCE126);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1010:5: -> ^( TOK_FORCE )
			{
				// HiveParser.g:1010:8: ^( TOK_FORCE )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_FORCE, "TOK_FORCE"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { msgs.pop(); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "force"


	public static class rewriteEnabled_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "rewriteEnabled"
	// HiveParser.g:1013:1: rewriteEnabled : KW_ENABLE KW_REWRITE -> ^( TOK_REWRITE_ENABLED ) ;
	public final HiveParser.rewriteEnabled_return rewriteEnabled() throws RecognitionException {
		HiveParser.rewriteEnabled_return retval = new HiveParser.rewriteEnabled_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_ENABLE127=null;
		Token KW_REWRITE128=null;

		ASTNode KW_ENABLE127_tree=null;
		ASTNode KW_REWRITE128_tree=null;
		RewriteRuleTokenStream stream_KW_REWRITE=new RewriteRuleTokenStream(adaptor,"token KW_REWRITE");
		RewriteRuleTokenStream stream_KW_ENABLE=new RewriteRuleTokenStream(adaptor,"token KW_ENABLE");

		 pushMsg(retval.start,"rewrite enabled clause", state); 
		try {
			// HiveParser.g:1016:5: ( KW_ENABLE KW_REWRITE -> ^( TOK_REWRITE_ENABLED ) )
			// HiveParser.g:1016:7: KW_ENABLE KW_REWRITE
			{
			KW_ENABLE127=(Token)match(input,KW_ENABLE,FOLLOW_KW_ENABLE_in_rewriteEnabled3136); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ENABLE.add(KW_ENABLE127);

			KW_REWRITE128=(Token)match(input,KW_REWRITE,FOLLOW_KW_REWRITE_in_rewriteEnabled3138); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REWRITE.add(KW_REWRITE128);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1017:5: -> ^( TOK_REWRITE_ENABLED )
			{
				// HiveParser.g:1017:8: ^( TOK_REWRITE_ENABLED )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_REWRITE_ENABLED, "TOK_REWRITE_ENABLED"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rewriteEnabled"


	public static class rewriteDisabled_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "rewriteDisabled"
	// HiveParser.g:1020:1: rewriteDisabled : KW_DISABLE KW_REWRITE -> ^( TOK_REWRITE_DISABLED ) ;
	public final HiveParser.rewriteDisabled_return rewriteDisabled() throws RecognitionException {
		HiveParser.rewriteDisabled_return retval = new HiveParser.rewriteDisabled_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_DISABLE129=null;
		Token KW_REWRITE130=null;

		ASTNode KW_DISABLE129_tree=null;
		ASTNode KW_REWRITE130_tree=null;
		RewriteRuleTokenStream stream_KW_DISABLE=new RewriteRuleTokenStream(adaptor,"token KW_DISABLE");
		RewriteRuleTokenStream stream_KW_REWRITE=new RewriteRuleTokenStream(adaptor,"token KW_REWRITE");

		 pushMsg(retval.start,"rewrite disabled clause", state); 
		try {
			// HiveParser.g:1023:5: ( KW_DISABLE KW_REWRITE -> ^( TOK_REWRITE_DISABLED ) )
			// HiveParser.g:1023:7: KW_DISABLE KW_REWRITE
			{
			KW_DISABLE129=(Token)match(input,KW_DISABLE,FOLLOW_KW_DISABLE_in_rewriteDisabled3175); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DISABLE.add(KW_DISABLE129);

			KW_REWRITE130=(Token)match(input,KW_REWRITE,FOLLOW_KW_REWRITE_in_rewriteDisabled3177); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REWRITE.add(KW_REWRITE130);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1024:5: -> ^( TOK_REWRITE_DISABLED )
			{
				// HiveParser.g:1024:8: ^( TOK_REWRITE_DISABLED )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_REWRITE_DISABLED, "TOK_REWRITE_DISABLED"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rewriteDisabled"


	public static class storedAsDirs_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "storedAsDirs"
	// HiveParser.g:1027:1: storedAsDirs : KW_STORED KW_AS KW_DIRECTORIES -> ^( TOK_STOREDASDIRS ) ;
	public final HiveParser.storedAsDirs_return storedAsDirs() throws RecognitionException {
		HiveParser.storedAsDirs_return retval = new HiveParser.storedAsDirs_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_STORED131=null;
		Token KW_AS132=null;
		Token KW_DIRECTORIES133=null;

		ASTNode KW_STORED131_tree=null;
		ASTNode KW_AS132_tree=null;
		ASTNode KW_DIRECTORIES133_tree=null;
		RewriteRuleTokenStream stream_KW_DIRECTORIES=new RewriteRuleTokenStream(adaptor,"token KW_DIRECTORIES");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_KW_STORED=new RewriteRuleTokenStream(adaptor,"token KW_STORED");

		 pushMsg(retval.start,"stored as directories", state); 
		try {
			// HiveParser.g:1030:5: ( KW_STORED KW_AS KW_DIRECTORIES -> ^( TOK_STOREDASDIRS ) )
			// HiveParser.g:1030:7: KW_STORED KW_AS KW_DIRECTORIES
			{
			KW_STORED131=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_storedAsDirs3214); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_STORED.add(KW_STORED131);

			KW_AS132=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_storedAsDirs3216); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS132);

			KW_DIRECTORIES133=(Token)match(input,KW_DIRECTORIES,FOLLOW_KW_DIRECTORIES_in_storedAsDirs3218); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DIRECTORIES.add(KW_DIRECTORIES133);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1031:5: -> ^( TOK_STOREDASDIRS )
			{
				// HiveParser.g:1031:8: ^( TOK_STOREDASDIRS )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_STOREDASDIRS, "TOK_STOREDASDIRS"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "storedAsDirs"


	public static class orReplace_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "orReplace"
	// HiveParser.g:1034:1: orReplace : KW_OR KW_REPLACE -> ^( TOK_ORREPLACE ) ;
	public final HiveParser.orReplace_return orReplace() throws RecognitionException {
		HiveParser.orReplace_return retval = new HiveParser.orReplace_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_OR134=null;
		Token KW_REPLACE135=null;

		ASTNode KW_OR134_tree=null;
		ASTNode KW_REPLACE135_tree=null;
		RewriteRuleTokenStream stream_KW_REPLACE=new RewriteRuleTokenStream(adaptor,"token KW_REPLACE");
		RewriteRuleTokenStream stream_KW_OR=new RewriteRuleTokenStream(adaptor,"token KW_OR");

		 pushMsg(retval.start,"or replace clause", state); 
		try {
			// HiveParser.g:1037:5: ( KW_OR KW_REPLACE -> ^( TOK_ORREPLACE ) )
			// HiveParser.g:1037:7: KW_OR KW_REPLACE
			{
			KW_OR134=(Token)match(input,KW_OR,FOLLOW_KW_OR_in_orReplace3255); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_OR.add(KW_OR134);

			KW_REPLACE135=(Token)match(input,KW_REPLACE,FOLLOW_KW_REPLACE_in_orReplace3257); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REPLACE.add(KW_REPLACE135);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1038:5: -> ^( TOK_ORREPLACE )
			{
				// HiveParser.g:1038:8: ^( TOK_ORREPLACE )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ORREPLACE, "TOK_ORREPLACE"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "orReplace"


	public static class createDatabaseStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "createDatabaseStatement"
	// HiveParser.g:1041:1: createDatabaseStatement : KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= identifier ( databaseComment )? ( dbLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )? -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? ) ;
	public final HiveParser.createDatabaseStatement_return createDatabaseStatement() throws RecognitionException {
		HiveParser.createDatabaseStatement_return retval = new HiveParser.createDatabaseStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_CREATE136=null;
		Token KW_DATABASE137=null;
		Token KW_SCHEMA138=null;
		Token KW_WITH142=null;
		Token KW_DBPROPERTIES143=null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope dbprops =null;
		ParserRuleReturnScope ifNotExists139 =null;
		ParserRuleReturnScope databaseComment140 =null;
		ParserRuleReturnScope dbLocation141 =null;

		ASTNode KW_CREATE136_tree=null;
		ASTNode KW_DATABASE137_tree=null;
		ASTNode KW_SCHEMA138_tree=null;
		ASTNode KW_WITH142_tree=null;
		ASTNode KW_DBPROPERTIES143_tree=null;
		RewriteRuleTokenStream stream_KW_DBPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_DBPROPERTIES");
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_dbProperties=new RewriteRuleSubtreeStream(adaptor,"rule dbProperties");
		RewriteRuleSubtreeStream stream_databaseComment=new RewriteRuleSubtreeStream(adaptor,"rule databaseComment");
		RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
		RewriteRuleSubtreeStream stream_dbLocation=new RewriteRuleSubtreeStream(adaptor,"rule dbLocation");

		 pushMsg(retval.start,"create database statement", state); 
		try {
			// HiveParser.g:1044:5: ( KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= identifier ( databaseComment )? ( dbLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )? -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? ) )
			// HiveParser.g:1044:7: KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= identifier ( databaseComment )? ( dbLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )?
			{
			KW_CREATE136=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createDatabaseStatement3294); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE136);

			// HiveParser.g:1044:17: ( KW_DATABASE | KW_SCHEMA )
			int alt30=2;
			int LA30_0 = input.LA(1);
			if ( (LA30_0==KW_DATABASE) ) {
				alt30=1;
			}
			else if ( (LA30_0==KW_SCHEMA) ) {
				alt30=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 30, 0, input);
				throw nvae;
			}

			switch (alt30) {
				case 1 :
					// HiveParser.g:1044:18: KW_DATABASE
					{
					KW_DATABASE137=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_createDatabaseStatement3297); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE137);

					}
					break;
				case 2 :
					// HiveParser.g:1044:30: KW_SCHEMA
					{
					KW_SCHEMA138=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_createDatabaseStatement3299); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA138);

					}
					break;

			}

			// HiveParser.g:1045:9: ( ifNotExists )?
			int alt31=2;
			int LA31_0 = input.LA(1);
			if ( (LA31_0==KW_IF) ) {
				alt31=1;
			}
			switch (alt31) {
				case 1 :
					// HiveParser.g:1045:9: ifNotExists
					{
					pushFollow(FOLLOW_ifNotExists_in_createDatabaseStatement3310);
					ifNotExists139=ifNotExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifNotExists.add(ifNotExists139.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_createDatabaseStatement3323);
			name=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(name.getTree());
			// HiveParser.g:1047:9: ( databaseComment )?
			int alt32=2;
			int LA32_0 = input.LA(1);
			if ( (LA32_0==KW_COMMENT) ) {
				alt32=1;
			}
			switch (alt32) {
				case 1 :
					// HiveParser.g:1047:9: databaseComment
					{
					pushFollow(FOLLOW_databaseComment_in_createDatabaseStatement3333);
					databaseComment140=databaseComment();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_databaseComment.add(databaseComment140.getTree());
					}
					break;

			}

			// HiveParser.g:1048:9: ( dbLocation )?
			int alt33=2;
			int LA33_0 = input.LA(1);
			if ( (LA33_0==KW_LOCATION) ) {
				alt33=1;
			}
			switch (alt33) {
				case 1 :
					// HiveParser.g:1048:9: dbLocation
					{
					pushFollow(FOLLOW_dbLocation_in_createDatabaseStatement3344);
					dbLocation141=dbLocation();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_dbLocation.add(dbLocation141.getTree());
					}
					break;

			}

			// HiveParser.g:1049:9: ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )?
			int alt34=2;
			int LA34_0 = input.LA(1);
			if ( (LA34_0==KW_WITH) ) {
				alt34=1;
			}
			switch (alt34) {
				case 1 :
					// HiveParser.g:1049:10: KW_WITH KW_DBPROPERTIES dbprops= dbProperties
					{
					KW_WITH142=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_createDatabaseStatement3356); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH142);

					KW_DBPROPERTIES143=(Token)match(input,KW_DBPROPERTIES,FOLLOW_KW_DBPROPERTIES_in_createDatabaseStatement3358); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DBPROPERTIES.add(KW_DBPROPERTIES143);

					pushFollow(FOLLOW_dbProperties_in_createDatabaseStatement3362);
					dbprops=dbProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_dbProperties.add(dbprops.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: dbLocation, databaseComment, ifNotExists, name, dbprops
			// token labels: 
			// rule labels: name, dbprops, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);
			RewriteRuleSubtreeStream stream_dbprops=new RewriteRuleSubtreeStream(adaptor,"rule dbprops",dbprops!=null?dbprops.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1050:5: -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? )
			{
				// HiveParser.g:1050:8: ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_CREATEDATABASE, "TOK_CREATEDATABASE"), root_1);
				adaptor.addChild(root_1, stream_name.nextTree());
				// HiveParser.g:1050:35: ( ifNotExists )?
				if ( stream_ifNotExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifNotExists.nextTree());
				}
				stream_ifNotExists.reset();

				// HiveParser.g:1050:48: ( dbLocation )?
				if ( stream_dbLocation.hasNext() ) {
					adaptor.addChild(root_1, stream_dbLocation.nextTree());
				}
				stream_dbLocation.reset();

				// HiveParser.g:1050:60: ( databaseComment )?
				if ( stream_databaseComment.hasNext() ) {
					adaptor.addChild(root_1, stream_databaseComment.nextTree());
				}
				stream_databaseComment.reset();

				// HiveParser.g:1050:78: ( $dbprops)?
				if ( stream_dbprops.hasNext() ) {
					adaptor.addChild(root_1, stream_dbprops.nextTree());
				}
				stream_dbprops.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createDatabaseStatement"


	public static class dbLocation_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "dbLocation"
	// HiveParser.g:1053:1: dbLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_DATABASELOCATION $locn) ;
	public final HiveParser.dbLocation_return dbLocation() throws RecognitionException {
		HiveParser.dbLocation_return retval = new HiveParser.dbLocation_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token locn=null;
		Token KW_LOCATION144=null;

		ASTNode locn_tree=null;
		ASTNode KW_LOCATION144_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

		 pushMsg(retval.start,"database location specification", state); 
		try {
			// HiveParser.g:1056:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_DATABASELOCATION $locn) )
			// HiveParser.g:1057:7: KW_LOCATION locn= StringLiteral
			{
			KW_LOCATION144=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_dbLocation3423); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LOCATION.add(KW_LOCATION144);

			locn=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_dbLocation3427); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(locn);

			// AST REWRITE
			// elements: locn
			// token labels: locn
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1057:38: -> ^( TOK_DATABASELOCATION $locn)
			{
				// HiveParser.g:1057:41: ^( TOK_DATABASELOCATION $locn)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DATABASELOCATION, "TOK_DATABASELOCATION"), root_1);
				adaptor.addChild(root_1, stream_locn.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dbLocation"


	public static class dbProperties_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "dbProperties"
	// HiveParser.g:1060:1: dbProperties : LPAREN dbPropertiesList RPAREN -> ^( TOK_DATABASEPROPERTIES dbPropertiesList ) ;
	public final HiveParser.dbProperties_return dbProperties() throws RecognitionException {
		HiveParser.dbProperties_return retval = new HiveParser.dbProperties_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token LPAREN145=null;
		Token RPAREN147=null;
		ParserRuleReturnScope dbPropertiesList146 =null;

		ASTNode LPAREN145_tree=null;
		ASTNode RPAREN147_tree=null;
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_dbPropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule dbPropertiesList");

		 pushMsg(retval.start,"dbproperties", state); 
		try {
			// HiveParser.g:1063:5: ( LPAREN dbPropertiesList RPAREN -> ^( TOK_DATABASEPROPERTIES dbPropertiesList ) )
			// HiveParser.g:1064:7: LPAREN dbPropertiesList RPAREN
			{
			LPAREN145=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_dbProperties3469); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN145);

			pushFollow(FOLLOW_dbPropertiesList_in_dbProperties3471);
			dbPropertiesList146=dbPropertiesList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_dbPropertiesList.add(dbPropertiesList146.getTree());
			RPAREN147=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_dbProperties3473); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN147);

			// AST REWRITE
			// elements: dbPropertiesList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1064:38: -> ^( TOK_DATABASEPROPERTIES dbPropertiesList )
			{
				// HiveParser.g:1064:41: ^( TOK_DATABASEPROPERTIES dbPropertiesList )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DATABASEPROPERTIES, "TOK_DATABASEPROPERTIES"), root_1);
				adaptor.addChild(root_1, stream_dbPropertiesList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dbProperties"


	public static class dbPropertiesList_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "dbPropertiesList"
	// HiveParser.g:1067:1: dbPropertiesList : keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_DBPROPLIST ( keyValueProperty )+ ) ;
	public final HiveParser.dbPropertiesList_return dbPropertiesList() throws RecognitionException {
		HiveParser.dbPropertiesList_return retval = new HiveParser.dbPropertiesList_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token COMMA149=null;
		ParserRuleReturnScope keyValueProperty148 =null;
		ParserRuleReturnScope keyValueProperty150 =null;

		ASTNode COMMA149_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");

		 pushMsg(retval.start,"database properties list", state); 
		try {
			// HiveParser.g:1070:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_DBPROPLIST ( keyValueProperty )+ ) )
			// HiveParser.g:1071:7: keyValueProperty ( COMMA keyValueProperty )*
			{
			pushFollow(FOLLOW_keyValueProperty_in_dbPropertiesList3514);
			keyValueProperty148=keyValueProperty();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_keyValueProperty.add(keyValueProperty148.getTree());
			// HiveParser.g:1071:24: ( COMMA keyValueProperty )*
			loop35:
			while (true) {
				int alt35=2;
				int LA35_0 = input.LA(1);
				if ( (LA35_0==COMMA) ) {
					alt35=1;
				}

				switch (alt35) {
				case 1 :
					// HiveParser.g:1071:25: COMMA keyValueProperty
					{
					COMMA149=(Token)match(input,COMMA,FOLLOW_COMMA_in_dbPropertiesList3517); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA149);

					pushFollow(FOLLOW_keyValueProperty_in_dbPropertiesList3519);
					keyValueProperty150=keyValueProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_keyValueProperty.add(keyValueProperty150.getTree());
					}
					break;

				default :
					break loop35;
				}
			}

			// AST REWRITE
			// elements: keyValueProperty
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1071:50: -> ^( TOK_DBPROPLIST ( keyValueProperty )+ )
			{
				// HiveParser.g:1071:53: ^( TOK_DBPROPLIST ( keyValueProperty )+ )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DBPROPLIST, "TOK_DBPROPLIST"), root_1);
				if ( !(stream_keyValueProperty.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_keyValueProperty.hasNext() ) {
					adaptor.addChild(root_1, stream_keyValueProperty.nextTree());
				}
				stream_keyValueProperty.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dbPropertiesList"


	public static class switchDatabaseStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "switchDatabaseStatement"
	// HiveParser.g:1075:1: switchDatabaseStatement : KW_USE identifier -> ^( TOK_SWITCHDATABASE identifier ) ;
	public final HiveParser.switchDatabaseStatement_return switchDatabaseStatement() throws RecognitionException {
		HiveParser.switchDatabaseStatement_return retval = new HiveParser.switchDatabaseStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_USE151=null;
		ParserRuleReturnScope identifier152 =null;

		ASTNode KW_USE151_tree=null;
		RewriteRuleTokenStream stream_KW_USE=new RewriteRuleTokenStream(adaptor,"token KW_USE");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg(retval.start,"switch database statement", state); 
		try {
			// HiveParser.g:1078:5: ( KW_USE identifier -> ^( TOK_SWITCHDATABASE identifier ) )
			// HiveParser.g:1078:7: KW_USE identifier
			{
			KW_USE151=(Token)match(input,KW_USE,FOLLOW_KW_USE_in_switchDatabaseStatement3558); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_USE.add(KW_USE151);

			pushFollow(FOLLOW_identifier_in_switchDatabaseStatement3560);
			identifier152=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(identifier152.getTree());
			// AST REWRITE
			// elements: identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1079:5: -> ^( TOK_SWITCHDATABASE identifier )
			{
				// HiveParser.g:1079:8: ^( TOK_SWITCHDATABASE identifier )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SWITCHDATABASE, "TOK_SWITCHDATABASE"), root_1);
				adaptor.addChild(root_1, stream_identifier.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "switchDatabaseStatement"


	public static class dropDatabaseStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "dropDatabaseStatement"
	// HiveParser.g:1082:1: dropDatabaseStatement : KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? identifier ( restrictOrCascade )? -> ^( TOK_DROPDATABASE identifier ( ifExists )? ( restrictOrCascade )? ) ;
	public final HiveParser.dropDatabaseStatement_return dropDatabaseStatement() throws RecognitionException {
		HiveParser.dropDatabaseStatement_return retval = new HiveParser.dropDatabaseStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_DROP153=null;
		Token KW_DATABASE154=null;
		Token KW_SCHEMA155=null;
		ParserRuleReturnScope ifExists156 =null;
		ParserRuleReturnScope identifier157 =null;
		ParserRuleReturnScope restrictOrCascade158 =null;

		ASTNode KW_DROP153_tree=null;
		ASTNode KW_DATABASE154_tree=null;
		ASTNode KW_SCHEMA155_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
		RewriteRuleSubtreeStream stream_restrictOrCascade=new RewriteRuleSubtreeStream(adaptor,"rule restrictOrCascade");

		 pushMsg(retval.start,"drop database statement", state); 
		try {
			// HiveParser.g:1085:5: ( KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? identifier ( restrictOrCascade )? -> ^( TOK_DROPDATABASE identifier ( ifExists )? ( restrictOrCascade )? ) )
			// HiveParser.g:1085:7: KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? identifier ( restrictOrCascade )?
			{
			KW_DROP153=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropDatabaseStatement3599); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP153);

			// HiveParser.g:1085:15: ( KW_DATABASE | KW_SCHEMA )
			int alt36=2;
			int LA36_0 = input.LA(1);
			if ( (LA36_0==KW_DATABASE) ) {
				alt36=1;
			}
			else if ( (LA36_0==KW_SCHEMA) ) {
				alt36=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 36, 0, input);
				throw nvae;
			}

			switch (alt36) {
				case 1 :
					// HiveParser.g:1085:16: KW_DATABASE
					{
					KW_DATABASE154=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_dropDatabaseStatement3602); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE154);

					}
					break;
				case 2 :
					// HiveParser.g:1085:28: KW_SCHEMA
					{
					KW_SCHEMA155=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_dropDatabaseStatement3604); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA155);

					}
					break;

			}

			// HiveParser.g:1085:39: ( ifExists )?
			int alt37=2;
			int LA37_0 = input.LA(1);
			if ( (LA37_0==KW_IF) ) {
				alt37=1;
			}
			switch (alt37) {
				case 1 :
					// HiveParser.g:1085:39: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropDatabaseStatement3607);
					ifExists156=ifExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifExists.add(ifExists156.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_dropDatabaseStatement3610);
			identifier157=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(identifier157.getTree());
			// HiveParser.g:1085:60: ( restrictOrCascade )?
			int alt38=2;
			int LA38_0 = input.LA(1);
			if ( (LA38_0==KW_CASCADE||LA38_0==KW_RESTRICT) ) {
				alt38=1;
			}
			switch (alt38) {
				case 1 :
					// HiveParser.g:1085:60: restrictOrCascade
					{
					pushFollow(FOLLOW_restrictOrCascade_in_dropDatabaseStatement3612);
					restrictOrCascade158=restrictOrCascade();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_restrictOrCascade.add(restrictOrCascade158.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: identifier, restrictOrCascade, ifExists
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1086:5: -> ^( TOK_DROPDATABASE identifier ( ifExists )? ( restrictOrCascade )? )
			{
				// HiveParser.g:1086:8: ^( TOK_DROPDATABASE identifier ( ifExists )? ( restrictOrCascade )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DROPDATABASE, "TOK_DROPDATABASE"), root_1);
				adaptor.addChild(root_1, stream_identifier.nextTree());
				// HiveParser.g:1086:38: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				// HiveParser.g:1086:48: ( restrictOrCascade )?
				if ( stream_restrictOrCascade.hasNext() ) {
					adaptor.addChild(root_1, stream_restrictOrCascade.nextTree());
				}
				stream_restrictOrCascade.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropDatabaseStatement"


	public static class databaseComment_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "databaseComment"
	// HiveParser.g:1089:1: databaseComment : KW_COMMENT comment= StringLiteral -> ^( TOK_DATABASECOMMENT $comment) ;
	public final HiveParser.databaseComment_return databaseComment() throws RecognitionException {
		HiveParser.databaseComment_return retval = new HiveParser.databaseComment_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token comment=null;
		Token KW_COMMENT159=null;

		ASTNode comment_tree=null;
		ASTNode KW_COMMENT159_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

		 pushMsg(retval.start,"database's comment", state); 
		try {
			// HiveParser.g:1092:5: ( KW_COMMENT comment= StringLiteral -> ^( TOK_DATABASECOMMENT $comment) )
			// HiveParser.g:1092:7: KW_COMMENT comment= StringLiteral
			{
			KW_COMMENT159=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_databaseComment3658); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT159);

			comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_databaseComment3662); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(comment);

			// AST REWRITE
			// elements: comment
			// token labels: comment
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1093:5: -> ^( TOK_DATABASECOMMENT $comment)
			{
				// HiveParser.g:1093:8: ^( TOK_DATABASECOMMENT $comment)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DATABASECOMMENT, "TOK_DATABASECOMMENT"), root_1);
				adaptor.addChild(root_1, stream_comment.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "databaseComment"


	public static class createTableStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "createTableStatement"
	// HiveParser.g:1096:1: createTableStatement : KW_CREATE (temp= KW_TEMPORARY )? (trans= KW_TRANSACTIONAL )? (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= tableName (like= KW_LIKE likeName= tableName ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? | ( LPAREN columnNameTypeOrConstraintList RPAREN )? ( tableComment )? ( createTablePartitionSpec )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatementWithCTE )? ) -> ^( TOK_CREATETABLE $name ( $temp)? ( $trans)? ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeOrConstraintList )? ( tableComment )? ( createTablePartitionSpec )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatementWithCTE )? ) ;
	public final HiveParser.createTableStatement_return createTableStatement() throws RecognitionException {
		HiveParser.createTableStatement_return retval = new HiveParser.createTableStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token temp=null;
		Token trans=null;
		Token ext=null;
		Token like=null;
		Token KW_CREATE160=null;
		Token KW_TABLE161=null;
		Token LPAREN167=null;
		Token RPAREN169=null;
		Token KW_AS178=null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope likeName =null;
		ParserRuleReturnScope ifNotExists162 =null;
		ParserRuleReturnScope tableRowFormat163 =null;
		ParserRuleReturnScope tableFileFormat164 =null;
		ParserRuleReturnScope tableLocation165 =null;
		ParserRuleReturnScope tablePropertiesPrefixed166 =null;
		ParserRuleReturnScope columnNameTypeOrConstraintList168 =null;
		ParserRuleReturnScope tableComment170 =null;
		ParserRuleReturnScope createTablePartitionSpec171 =null;
		ParserRuleReturnScope tableBuckets172 =null;
		ParserRuleReturnScope tableSkewed173 =null;
		ParserRuleReturnScope tableRowFormat174 =null;
		ParserRuleReturnScope tableFileFormat175 =null;
		ParserRuleReturnScope tableLocation176 =null;
		ParserRuleReturnScope tablePropertiesPrefixed177 =null;
		ParserRuleReturnScope selectStatementWithCTE179 =null;

		ASTNode temp_tree=null;
		ASTNode trans_tree=null;
		ASTNode ext_tree=null;
		ASTNode like_tree=null;
		ASTNode KW_CREATE160_tree=null;
		ASTNode KW_TABLE161_tree=null;
		ASTNode LPAREN167_tree=null;
		ASTNode RPAREN169_tree=null;
		ASTNode KW_AS178_tree=null;
		RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_KW_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token KW_EXTERNAL");
		RewriteRuleTokenStream stream_KW_TRANSACTIONAL=new RewriteRuleTokenStream(adaptor,"token KW_TRANSACTIONAL");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_KW_LIKE=new RewriteRuleTokenStream(adaptor,"token KW_LIKE");
		RewriteRuleSubtreeStream stream_tableRowFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormat");
		RewriteRuleSubtreeStream stream_selectStatementWithCTE=new RewriteRuleSubtreeStream(adaptor,"rule selectStatementWithCTE");
		RewriteRuleSubtreeStream stream_createTablePartitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule createTablePartitionSpec");
		RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
		RewriteRuleSubtreeStream stream_columnNameTypeOrConstraintList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeOrConstraintList");
		RewriteRuleSubtreeStream stream_tableSkewed=new RewriteRuleSubtreeStream(adaptor,"rule tableSkewed");
		RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
		RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
		RewriteRuleSubtreeStream stream_tableFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableFileFormat");
		RewriteRuleSubtreeStream stream_tableComment=new RewriteRuleSubtreeStream(adaptor,"rule tableComment");
		RewriteRuleSubtreeStream stream_tableBuckets=new RewriteRuleSubtreeStream(adaptor,"rule tableBuckets");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg(retval.start,"create table statement", state); 
		try {
			// HiveParser.g:1099:5: ( KW_CREATE (temp= KW_TEMPORARY )? (trans= KW_TRANSACTIONAL )? (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= tableName (like= KW_LIKE likeName= tableName ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? | ( LPAREN columnNameTypeOrConstraintList RPAREN )? ( tableComment )? ( createTablePartitionSpec )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatementWithCTE )? ) -> ^( TOK_CREATETABLE $name ( $temp)? ( $trans)? ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeOrConstraintList )? ( tableComment )? ( createTablePartitionSpec )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatementWithCTE )? ) )
			// HiveParser.g:1099:7: KW_CREATE (temp= KW_TEMPORARY )? (trans= KW_TRANSACTIONAL )? (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= tableName (like= KW_LIKE likeName= tableName ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? | ( LPAREN columnNameTypeOrConstraintList RPAREN )? ( tableComment )? ( createTablePartitionSpec )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatementWithCTE )? )
			{
			KW_CREATE160=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createTableStatement3702); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE160);

			// HiveParser.g:1099:17: (temp= KW_TEMPORARY )?
			int alt39=2;
			int LA39_0 = input.LA(1);
			if ( (LA39_0==KW_TEMPORARY) ) {
				alt39=1;
			}
			switch (alt39) {
				case 1 :
					// HiveParser.g:1099:18: temp= KW_TEMPORARY
					{
					temp=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_createTableStatement3707); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TEMPORARY.add(temp);

					}
					break;

			}

			// HiveParser.g:1099:38: (trans= KW_TRANSACTIONAL )?
			int alt40=2;
			int LA40_0 = input.LA(1);
			if ( (LA40_0==KW_TRANSACTIONAL) ) {
				alt40=1;
			}
			switch (alt40) {
				case 1 :
					// HiveParser.g:1099:39: trans= KW_TRANSACTIONAL
					{
					trans=(Token)match(input,KW_TRANSACTIONAL,FOLLOW_KW_TRANSACTIONAL_in_createTableStatement3714); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TRANSACTIONAL.add(trans);

					}
					break;

			}

			// HiveParser.g:1099:64: (ext= KW_EXTERNAL )?
			int alt41=2;
			int LA41_0 = input.LA(1);
			if ( (LA41_0==KW_EXTERNAL) ) {
				alt41=1;
			}
			switch (alt41) {
				case 1 :
					// HiveParser.g:1099:65: ext= KW_EXTERNAL
					{
					ext=(Token)match(input,KW_EXTERNAL,FOLLOW_KW_EXTERNAL_in_createTableStatement3721); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_EXTERNAL.add(ext);

					}
					break;

			}

			KW_TABLE161=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_createTableStatement3725); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE161);

			// HiveParser.g:1099:92: ( ifNotExists )?
			int alt42=2;
			int LA42_0 = input.LA(1);
			if ( (LA42_0==KW_IF) ) {
				alt42=1;
			}
			switch (alt42) {
				case 1 :
					// HiveParser.g:1099:92: ifNotExists
					{
					pushFollow(FOLLOW_ifNotExists_in_createTableStatement3727);
					ifNotExists162=ifNotExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifNotExists.add(ifNotExists162.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_tableName_in_createTableStatement3732);
			name=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(name.getTree());
			// HiveParser.g:1100:7: (like= KW_LIKE likeName= tableName ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? | ( LPAREN columnNameTypeOrConstraintList RPAREN )? ( tableComment )? ( createTablePartitionSpec )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatementWithCTE )? )
			int alt57=2;
			int LA57_0 = input.LA(1);
			if ( (LA57_0==KW_LIKE) ) {
				alt57=1;
			}
			else if ( (LA57_0==EOF||LA57_0==KW_AS||LA57_0==KW_CLUSTERED||LA57_0==KW_COMMENT||LA57_0==KW_LOCATION||LA57_0==KW_PARTITIONED||LA57_0==KW_ROW||LA57_0==KW_SKEWED||LA57_0==KW_STORED||LA57_0==KW_TBLPROPERTIES||LA57_0==LPAREN) ) {
				alt57=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 57, 0, input);
				throw nvae;
			}

			switch (alt57) {
				case 1 :
					// HiveParser.g:1100:10: like= KW_LIKE likeName= tableName ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )?
					{
					like=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_createTableStatement3745); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_LIKE.add(like);

					pushFollow(FOLLOW_tableName_in_createTableStatement3749);
					likeName=tableName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableName.add(likeName.getTree());
					// HiveParser.g:1101:10: ( tableRowFormat )?
					int alt43=2;
					int LA43_0 = input.LA(1);
					if ( (LA43_0==KW_ROW) ) {
						alt43=1;
					}
					switch (alt43) {
						case 1 :
							// HiveParser.g:1101:10: tableRowFormat
							{
							pushFollow(FOLLOW_tableRowFormat_in_createTableStatement3760);
							tableRowFormat163=tableRowFormat();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableRowFormat.add(tableRowFormat163.getTree());
							}
							break;

					}

					// HiveParser.g:1102:10: ( tableFileFormat )?
					int alt44=2;
					int LA44_0 = input.LA(1);
					if ( (LA44_0==KW_STORED) ) {
						alt44=1;
					}
					switch (alt44) {
						case 1 :
							// HiveParser.g:1102:10: tableFileFormat
							{
							pushFollow(FOLLOW_tableFileFormat_in_createTableStatement3772);
							tableFileFormat164=tableFileFormat();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableFileFormat.add(tableFileFormat164.getTree());
							}
							break;

					}

					// HiveParser.g:1103:10: ( tableLocation )?
					int alt45=2;
					int LA45_0 = input.LA(1);
					if ( (LA45_0==KW_LOCATION) ) {
						alt45=1;
					}
					switch (alt45) {
						case 1 :
							// HiveParser.g:1103:10: tableLocation
							{
							pushFollow(FOLLOW_tableLocation_in_createTableStatement3784);
							tableLocation165=tableLocation();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableLocation.add(tableLocation165.getTree());
							}
							break;

					}

					// HiveParser.g:1104:10: ( tablePropertiesPrefixed )?
					int alt46=2;
					int LA46_0 = input.LA(1);
					if ( (LA46_0==KW_TBLPROPERTIES) ) {
						alt46=1;
					}
					switch (alt46) {
						case 1 :
							// HiveParser.g:1104:10: tablePropertiesPrefixed
							{
							pushFollow(FOLLOW_tablePropertiesPrefixed_in_createTableStatement3796);
							tablePropertiesPrefixed166=tablePropertiesPrefixed();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed166.getTree());
							}
							break;

					}

					}
					break;
				case 2 :
					// HiveParser.g:1105:10: ( LPAREN columnNameTypeOrConstraintList RPAREN )? ( tableComment )? ( createTablePartitionSpec )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatementWithCTE )?
					{
					// HiveParser.g:1105:10: ( LPAREN columnNameTypeOrConstraintList RPAREN )?
					int alt47=2;
					int LA47_0 = input.LA(1);
					if ( (LA47_0==LPAREN) ) {
						alt47=1;
					}
					switch (alt47) {
						case 1 :
							// HiveParser.g:1105:11: LPAREN columnNameTypeOrConstraintList RPAREN
							{
							LPAREN167=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createTableStatement3809); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN167);

							pushFollow(FOLLOW_columnNameTypeOrConstraintList_in_createTableStatement3811);
							columnNameTypeOrConstraintList168=columnNameTypeOrConstraintList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_columnNameTypeOrConstraintList.add(columnNameTypeOrConstraintList168.getTree());
							RPAREN169=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createTableStatement3813); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN169);

							}
							break;

					}

					// HiveParser.g:1106:10: ( tableComment )?
					int alt48=2;
					int LA48_0 = input.LA(1);
					if ( (LA48_0==KW_COMMENT) ) {
						alt48=1;
					}
					switch (alt48) {
						case 1 :
							// HiveParser.g:1106:10: tableComment
							{
							pushFollow(FOLLOW_tableComment_in_createTableStatement3826);
							tableComment170=tableComment();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableComment.add(tableComment170.getTree());
							}
							break;

					}

					// HiveParser.g:1107:10: ( createTablePartitionSpec )?
					int alt49=2;
					int LA49_0 = input.LA(1);
					if ( (LA49_0==KW_PARTITIONED) ) {
						alt49=1;
					}
					switch (alt49) {
						case 1 :
							// HiveParser.g:1107:10: createTablePartitionSpec
							{
							pushFollow(FOLLOW_createTablePartitionSpec_in_createTableStatement3838);
							createTablePartitionSpec171=createTablePartitionSpec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_createTablePartitionSpec.add(createTablePartitionSpec171.getTree());
							}
							break;

					}

					// HiveParser.g:1108:10: ( tableBuckets )?
					int alt50=2;
					int LA50_0 = input.LA(1);
					if ( (LA50_0==KW_CLUSTERED) ) {
						alt50=1;
					}
					switch (alt50) {
						case 1 :
							// HiveParser.g:1108:10: tableBuckets
							{
							pushFollow(FOLLOW_tableBuckets_in_createTableStatement3850);
							tableBuckets172=tableBuckets();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableBuckets.add(tableBuckets172.getTree());
							}
							break;

					}

					// HiveParser.g:1109:10: ( tableSkewed )?
					int alt51=2;
					int LA51_0 = input.LA(1);
					if ( (LA51_0==KW_SKEWED) ) {
						alt51=1;
					}
					switch (alt51) {
						case 1 :
							// HiveParser.g:1109:10: tableSkewed
							{
							pushFollow(FOLLOW_tableSkewed_in_createTableStatement3862);
							tableSkewed173=tableSkewed();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableSkewed.add(tableSkewed173.getTree());
							}
							break;

					}

					// HiveParser.g:1110:10: ( tableRowFormat )?
					int alt52=2;
					int LA52_0 = input.LA(1);
					if ( (LA52_0==KW_ROW) ) {
						alt52=1;
					}
					switch (alt52) {
						case 1 :
							// HiveParser.g:1110:10: tableRowFormat
							{
							pushFollow(FOLLOW_tableRowFormat_in_createTableStatement3874);
							tableRowFormat174=tableRowFormat();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableRowFormat.add(tableRowFormat174.getTree());
							}
							break;

					}

					// HiveParser.g:1111:10: ( tableFileFormat )?
					int alt53=2;
					int LA53_0 = input.LA(1);
					if ( (LA53_0==KW_STORED) ) {
						alt53=1;
					}
					switch (alt53) {
						case 1 :
							// HiveParser.g:1111:10: tableFileFormat
							{
							pushFollow(FOLLOW_tableFileFormat_in_createTableStatement3886);
							tableFileFormat175=tableFileFormat();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableFileFormat.add(tableFileFormat175.getTree());
							}
							break;

					}

					// HiveParser.g:1112:10: ( tableLocation )?
					int alt54=2;
					int LA54_0 = input.LA(1);
					if ( (LA54_0==KW_LOCATION) ) {
						alt54=1;
					}
					switch (alt54) {
						case 1 :
							// HiveParser.g:1112:10: tableLocation
							{
							pushFollow(FOLLOW_tableLocation_in_createTableStatement3898);
							tableLocation176=tableLocation();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableLocation.add(tableLocation176.getTree());
							}
							break;

					}

					// HiveParser.g:1113:10: ( tablePropertiesPrefixed )?
					int alt55=2;
					int LA55_0 = input.LA(1);
					if ( (LA55_0==KW_TBLPROPERTIES) ) {
						alt55=1;
					}
					switch (alt55) {
						case 1 :
							// HiveParser.g:1113:10: tablePropertiesPrefixed
							{
							pushFollow(FOLLOW_tablePropertiesPrefixed_in_createTableStatement3910);
							tablePropertiesPrefixed177=tablePropertiesPrefixed();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed177.getTree());
							}
							break;

					}

					// HiveParser.g:1114:10: ( KW_AS selectStatementWithCTE )?
					int alt56=2;
					int LA56_0 = input.LA(1);
					if ( (LA56_0==KW_AS) ) {
						alt56=1;
					}
					switch (alt56) {
						case 1 :
							// HiveParser.g:1114:11: KW_AS selectStatementWithCTE
							{
							KW_AS178=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createTableStatement3923); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS178);

							pushFollow(FOLLOW_selectStatementWithCTE_in_createTableStatement3925);
							selectStatementWithCTE179=selectStatementWithCTE();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_selectStatementWithCTE.add(selectStatementWithCTE179.getTree());
							}
							break;

					}

					}
					break;

			}

			// AST REWRITE
			// elements: tableFileFormat, temp, tableBuckets, tableLocation, tableComment, tableSkewed, createTablePartitionSpec, tablePropertiesPrefixed, tableRowFormat, columnNameTypeOrConstraintList, name, likeName, ext, selectStatementWithCTE, trans, ifNotExists
			// token labels: ext, temp, trans
			// rule labels: likeName, name, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_ext=new RewriteRuleTokenStream(adaptor,"token ext",ext);
			RewriteRuleTokenStream stream_temp=new RewriteRuleTokenStream(adaptor,"token temp",temp);
			RewriteRuleTokenStream stream_trans=new RewriteRuleTokenStream(adaptor,"token trans",trans);
			RewriteRuleSubtreeStream stream_likeName=new RewriteRuleSubtreeStream(adaptor,"rule likeName",likeName!=null?likeName.getTree():null);
			RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1116:5: -> ^( TOK_CREATETABLE $name ( $temp)? ( $trans)? ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeOrConstraintList )? ( tableComment )? ( createTablePartitionSpec )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatementWithCTE )? )
			{
				// HiveParser.g:1116:8: ^( TOK_CREATETABLE $name ( $temp)? ( $trans)? ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeOrConstraintList )? ( tableComment )? ( createTablePartitionSpec )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatementWithCTE )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_CREATETABLE, "TOK_CREATETABLE"), root_1);
				adaptor.addChild(root_1, stream_name.nextTree());
				// HiveParser.g:1116:33: ( $temp)?
				if ( stream_temp.hasNext() ) {
					adaptor.addChild(root_1, stream_temp.nextNode());
				}
				stream_temp.reset();

				// HiveParser.g:1116:40: ( $trans)?
				if ( stream_trans.hasNext() ) {
					adaptor.addChild(root_1, stream_trans.nextNode());
				}
				stream_trans.reset();

				// HiveParser.g:1116:48: ( $ext)?
				if ( stream_ext.hasNext() ) {
					adaptor.addChild(root_1, stream_ext.nextNode());
				}
				stream_ext.reset();

				// HiveParser.g:1116:53: ( ifNotExists )?
				if ( stream_ifNotExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifNotExists.nextTree());
				}
				stream_ifNotExists.reset();

				// HiveParser.g:1117:10: ^( TOK_LIKETABLE ( $likeName)? )
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_LIKETABLE, "TOK_LIKETABLE"), root_2);
				// HiveParser.g:1117:27: ( $likeName)?
				if ( stream_likeName.hasNext() ) {
					adaptor.addChild(root_2, stream_likeName.nextTree());
				}
				stream_likeName.reset();

				adaptor.addChild(root_1, root_2);
				}

				// HiveParser.g:1118:10: ( columnNameTypeOrConstraintList )?
				if ( stream_columnNameTypeOrConstraintList.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameTypeOrConstraintList.nextTree());
				}
				stream_columnNameTypeOrConstraintList.reset();

				// HiveParser.g:1119:10: ( tableComment )?
				if ( stream_tableComment.hasNext() ) {
					adaptor.addChild(root_1, stream_tableComment.nextTree());
				}
				stream_tableComment.reset();

				// HiveParser.g:1120:10: ( createTablePartitionSpec )?
				if ( stream_createTablePartitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_createTablePartitionSpec.nextTree());
				}
				stream_createTablePartitionSpec.reset();

				// HiveParser.g:1121:10: ( tableBuckets )?
				if ( stream_tableBuckets.hasNext() ) {
					adaptor.addChild(root_1, stream_tableBuckets.nextTree());
				}
				stream_tableBuckets.reset();

				// HiveParser.g:1122:10: ( tableSkewed )?
				if ( stream_tableSkewed.hasNext() ) {
					adaptor.addChild(root_1, stream_tableSkewed.nextTree());
				}
				stream_tableSkewed.reset();

				// HiveParser.g:1123:10: ( tableRowFormat )?
				if ( stream_tableRowFormat.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormat.nextTree());
				}
				stream_tableRowFormat.reset();

				// HiveParser.g:1124:10: ( tableFileFormat )?
				if ( stream_tableFileFormat.hasNext() ) {
					adaptor.addChild(root_1, stream_tableFileFormat.nextTree());
				}
				stream_tableFileFormat.reset();

				// HiveParser.g:1125:10: ( tableLocation )?
				if ( stream_tableLocation.hasNext() ) {
					adaptor.addChild(root_1, stream_tableLocation.nextTree());
				}
				stream_tableLocation.reset();

				// HiveParser.g:1126:10: ( tablePropertiesPrefixed )?
				if ( stream_tablePropertiesPrefixed.hasNext() ) {
					adaptor.addChild(root_1, stream_tablePropertiesPrefixed.nextTree());
				}
				stream_tablePropertiesPrefixed.reset();

				// HiveParser.g:1127:10: ( selectStatementWithCTE )?
				if ( stream_selectStatementWithCTE.hasNext() ) {
					adaptor.addChild(root_1, stream_selectStatementWithCTE.nextTree());
				}
				stream_selectStatementWithCTE.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createTableStatement"


	public static class truncateTableStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "truncateTableStatement"
	// HiveParser.g:1131:1: truncateTableStatement : KW_TRUNCATE KW_TABLE tablePartitionPrefix ( KW_COLUMNS LPAREN columnNameList RPAREN )? ( force )? -> ^( TOK_TRUNCATETABLE tablePartitionPrefix ( columnNameList )? ( force )? ) ;
	public final HiveParser.truncateTableStatement_return truncateTableStatement() throws RecognitionException {
		HiveParser.truncateTableStatement_return retval = new HiveParser.truncateTableStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_TRUNCATE180=null;
		Token KW_TABLE181=null;
		Token KW_COLUMNS183=null;
		Token LPAREN184=null;
		Token RPAREN186=null;
		ParserRuleReturnScope tablePartitionPrefix182 =null;
		ParserRuleReturnScope columnNameList185 =null;
		ParserRuleReturnScope force187 =null;

		ASTNode KW_TRUNCATE180_tree=null;
		ASTNode KW_TABLE181_tree=null;
		ASTNode KW_COLUMNS183_tree=null;
		ASTNode LPAREN184_tree=null;
		ASTNode RPAREN186_tree=null;
		RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_TRUNCATE=new RewriteRuleTokenStream(adaptor,"token KW_TRUNCATE");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_force=new RewriteRuleSubtreeStream(adaptor,"rule force");
		RewriteRuleSubtreeStream stream_tablePartitionPrefix=new RewriteRuleSubtreeStream(adaptor,"rule tablePartitionPrefix");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");

		 pushMsg(retval.start,"truncate table statement", state); 
		try {
			// HiveParser.g:1134:5: ( KW_TRUNCATE KW_TABLE tablePartitionPrefix ( KW_COLUMNS LPAREN columnNameList RPAREN )? ( force )? -> ^( TOK_TRUNCATETABLE tablePartitionPrefix ( columnNameList )? ( force )? ) )
			// HiveParser.g:1134:7: KW_TRUNCATE KW_TABLE tablePartitionPrefix ( KW_COLUMNS LPAREN columnNameList RPAREN )? ( force )?
			{
			KW_TRUNCATE180=(Token)match(input,KW_TRUNCATE,FOLLOW_KW_TRUNCATE_in_truncateTableStatement4136); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TRUNCATE.add(KW_TRUNCATE180);

			KW_TABLE181=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_truncateTableStatement4138); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE181);

			pushFollow(FOLLOW_tablePartitionPrefix_in_truncateTableStatement4140);
			tablePartitionPrefix182=tablePartitionPrefix();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tablePartitionPrefix.add(tablePartitionPrefix182.getTree());
			// HiveParser.g:1134:49: ( KW_COLUMNS LPAREN columnNameList RPAREN )?
			int alt58=2;
			int LA58_0 = input.LA(1);
			if ( (LA58_0==KW_COLUMNS) ) {
				alt58=1;
			}
			switch (alt58) {
				case 1 :
					// HiveParser.g:1134:50: KW_COLUMNS LPAREN columnNameList RPAREN
					{
					KW_COLUMNS183=(Token)match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_truncateTableStatement4143); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COLUMNS.add(KW_COLUMNS183);

					LPAREN184=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_truncateTableStatement4145); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN184);

					pushFollow(FOLLOW_columnNameList_in_truncateTableStatement4147);
					columnNameList185=columnNameList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameList.add(columnNameList185.getTree());
					RPAREN186=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_truncateTableStatement4149); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN186);

					}
					break;

			}

			// HiveParser.g:1134:92: ( force )?
			int alt59=2;
			int LA59_0 = input.LA(1);
			if ( (LA59_0==KW_FORCE) ) {
				alt59=1;
			}
			switch (alt59) {
				case 1 :
					// HiveParser.g:1134:92: force
					{
					pushFollow(FOLLOW_force_in_truncateTableStatement4153);
					force187=force();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_force.add(force187.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: tablePartitionPrefix, columnNameList, force
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1135:5: -> ^( TOK_TRUNCATETABLE tablePartitionPrefix ( columnNameList )? ( force )? )
			{
				// HiveParser.g:1135:8: ^( TOK_TRUNCATETABLE tablePartitionPrefix ( columnNameList )? ( force )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TRUNCATETABLE, "TOK_TRUNCATETABLE"), root_1);
				adaptor.addChild(root_1, stream_tablePartitionPrefix.nextTree());
				// HiveParser.g:1135:49: ( columnNameList )?
				if ( stream_columnNameList.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameList.nextTree());
				}
				stream_columnNameList.reset();

				// HiveParser.g:1135:65: ( force )?
				if ( stream_force.hasNext() ) {
					adaptor.addChild(root_1, stream_force.nextTree());
				}
				stream_force.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "truncateTableStatement"


	public static class dropTableStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "dropTableStatement"
	// HiveParser.g:1137:1: dropTableStatement : KW_DROP KW_TABLE ( ifExists )? tableName ( KW_PURGE )? ( replicationClause )? -> ^( TOK_DROPTABLE tableName ( ifExists )? ( KW_PURGE )? ( replicationClause )? ) ;
	public final HiveParser.dropTableStatement_return dropTableStatement() throws RecognitionException {
		HiveParser.dropTableStatement_return retval = new HiveParser.dropTableStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_DROP188=null;
		Token KW_TABLE189=null;
		Token KW_PURGE192=null;
		ParserRuleReturnScope ifExists190 =null;
		ParserRuleReturnScope tableName191 =null;
		ParserRuleReturnScope replicationClause193 =null;

		ASTNode KW_DROP188_tree=null;
		ASTNode KW_TABLE189_tree=null;
		ASTNode KW_PURGE192_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_PURGE=new RewriteRuleTokenStream(adaptor,"token KW_PURGE");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
		RewriteRuleSubtreeStream stream_replicationClause=new RewriteRuleSubtreeStream(adaptor,"rule replicationClause");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg(retval.start,"drop statement", state); 
		try {
			// HiveParser.g:1140:5: ( KW_DROP KW_TABLE ( ifExists )? tableName ( KW_PURGE )? ( replicationClause )? -> ^( TOK_DROPTABLE tableName ( ifExists )? ( KW_PURGE )? ( replicationClause )? ) )
			// HiveParser.g:1140:7: KW_DROP KW_TABLE ( ifExists )? tableName ( KW_PURGE )? ( replicationClause )?
			{
			KW_DROP188=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropTableStatement4194); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP188);

			KW_TABLE189=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_dropTableStatement4196); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE189);

			// HiveParser.g:1140:24: ( ifExists )?
			int alt60=2;
			int LA60_0 = input.LA(1);
			if ( (LA60_0==KW_IF) ) {
				alt60=1;
			}
			switch (alt60) {
				case 1 :
					// HiveParser.g:1140:24: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropTableStatement4198);
					ifExists190=ifExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifExists.add(ifExists190.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_tableName_in_dropTableStatement4201);
			tableName191=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tableName191.getTree());
			// HiveParser.g:1140:44: ( KW_PURGE )?
			int alt61=2;
			int LA61_0 = input.LA(1);
			if ( (LA61_0==KW_PURGE) ) {
				alt61=1;
			}
			switch (alt61) {
				case 1 :
					// HiveParser.g:1140:44: KW_PURGE
					{
					KW_PURGE192=(Token)match(input,KW_PURGE,FOLLOW_KW_PURGE_in_dropTableStatement4203); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_PURGE.add(KW_PURGE192);

					}
					break;

			}

			// HiveParser.g:1140:54: ( replicationClause )?
			int alt62=2;
			int LA62_0 = input.LA(1);
			if ( (LA62_0==KW_FOR) ) {
				alt62=1;
			}
			switch (alt62) {
				case 1 :
					// HiveParser.g:1140:54: replicationClause
					{
					pushFollow(FOLLOW_replicationClause_in_dropTableStatement4206);
					replicationClause193=replicationClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_replicationClause.add(replicationClause193.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: tableName, KW_PURGE, replicationClause, ifExists
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1141:5: -> ^( TOK_DROPTABLE tableName ( ifExists )? ( KW_PURGE )? ( replicationClause )? )
			{
				// HiveParser.g:1141:8: ^( TOK_DROPTABLE tableName ( ifExists )? ( KW_PURGE )? ( replicationClause )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DROPTABLE, "TOK_DROPTABLE"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				// HiveParser.g:1141:34: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				// HiveParser.g:1141:44: ( KW_PURGE )?
				if ( stream_KW_PURGE.hasNext() ) {
					adaptor.addChild(root_1, stream_KW_PURGE.nextNode());
				}
				stream_KW_PURGE.reset();

				// HiveParser.g:1141:54: ( replicationClause )?
				if ( stream_replicationClause.hasNext() ) {
					adaptor.addChild(root_1, stream_replicationClause.nextTree());
				}
				stream_replicationClause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropTableStatement"


	public static class alterStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatement"
	// HiveParser.g:1144:1: alterStatement : ( KW_ALTER KW_TABLE tableName alterTableStatementSuffix -> ^( TOK_ALTERTABLE tableName alterTableStatementSuffix ) | KW_ALTER KW_VIEW tableName ( KW_AS )? alterViewStatementSuffix -> ^( TOK_ALTERVIEW tableName alterViewStatementSuffix ) | KW_ALTER KW_MATERIALIZED KW_VIEW tableName alterMaterializedViewStatementSuffix -> ^( TOK_ALTER_MATERIALIZED_VIEW tableName alterMaterializedViewStatementSuffix ) | KW_ALTER ( KW_DATABASE | KW_SCHEMA ) alterDatabaseStatementSuffix -> alterDatabaseStatementSuffix );
	public final HiveParser.alterStatement_return alterStatement() throws RecognitionException {
		HiveParser.alterStatement_return retval = new HiveParser.alterStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_ALTER194=null;
		Token KW_TABLE195=null;
		Token KW_ALTER198=null;
		Token KW_VIEW199=null;
		Token KW_AS201=null;
		Token KW_ALTER203=null;
		Token KW_MATERIALIZED204=null;
		Token KW_VIEW205=null;
		Token KW_ALTER208=null;
		Token KW_DATABASE209=null;
		Token KW_SCHEMA210=null;
		ParserRuleReturnScope tableName196 =null;
		ParserRuleReturnScope alterTableStatementSuffix197 =null;
		ParserRuleReturnScope tableName200 =null;
		ParserRuleReturnScope alterViewStatementSuffix202 =null;
		ParserRuleReturnScope tableName206 =null;
		ParserRuleReturnScope alterMaterializedViewStatementSuffix207 =null;
		ParserRuleReturnScope alterDatabaseStatementSuffix211 =null;

		ASTNode KW_ALTER194_tree=null;
		ASTNode KW_TABLE195_tree=null;
		ASTNode KW_ALTER198_tree=null;
		ASTNode KW_VIEW199_tree=null;
		ASTNode KW_AS201_tree=null;
		ASTNode KW_ALTER203_tree=null;
		ASTNode KW_MATERIALIZED204_tree=null;
		ASTNode KW_VIEW205_tree=null;
		ASTNode KW_ALTER208_tree=null;
		ASTNode KW_DATABASE209_tree=null;
		ASTNode KW_SCHEMA210_tree=null;
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_KW_ALTER=new RewriteRuleTokenStream(adaptor,"token KW_ALTER");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_KW_MATERIALIZED=new RewriteRuleTokenStream(adaptor,"token KW_MATERIALIZED");
		RewriteRuleSubtreeStream stream_alterMaterializedViewStatementSuffix=new RewriteRuleSubtreeStream(adaptor,"rule alterMaterializedViewStatementSuffix");
		RewriteRuleSubtreeStream stream_alterTableStatementSuffix=new RewriteRuleSubtreeStream(adaptor,"rule alterTableStatementSuffix");
		RewriteRuleSubtreeStream stream_alterViewStatementSuffix=new RewriteRuleSubtreeStream(adaptor,"rule alterViewStatementSuffix");
		RewriteRuleSubtreeStream stream_alterDatabaseStatementSuffix=new RewriteRuleSubtreeStream(adaptor,"rule alterDatabaseStatementSuffix");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg(retval.start,"alter statement", state); 
		try {
			// HiveParser.g:1147:5: ( KW_ALTER KW_TABLE tableName alterTableStatementSuffix -> ^( TOK_ALTERTABLE tableName alterTableStatementSuffix ) | KW_ALTER KW_VIEW tableName ( KW_AS )? alterViewStatementSuffix -> ^( TOK_ALTERVIEW tableName alterViewStatementSuffix ) | KW_ALTER KW_MATERIALIZED KW_VIEW tableName alterMaterializedViewStatementSuffix -> ^( TOK_ALTER_MATERIALIZED_VIEW tableName alterMaterializedViewStatementSuffix ) | KW_ALTER ( KW_DATABASE | KW_SCHEMA ) alterDatabaseStatementSuffix -> alterDatabaseStatementSuffix )
			int alt65=4;
			int LA65_0 = input.LA(1);
			if ( (LA65_0==KW_ALTER) ) {
				switch ( input.LA(2) ) {
				case KW_TABLE:
					{
					alt65=1;
					}
					break;
				case KW_VIEW:
					{
					alt65=2;
					}
					break;
				case KW_MATERIALIZED:
					{
					alt65=3;
					}
					break;
				case KW_DATABASE:
				case KW_SCHEMA:
					{
					alt65=4;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 65, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 65, 0, input);
				throw nvae;
			}

			switch (alt65) {
				case 1 :
					// HiveParser.g:1147:7: KW_ALTER KW_TABLE tableName alterTableStatementSuffix
					{
					KW_ALTER194=(Token)match(input,KW_ALTER,FOLLOW_KW_ALTER_in_alterStatement4255); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALTER.add(KW_ALTER194);

					KW_TABLE195=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_alterStatement4257); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE195);

					pushFollow(FOLLOW_tableName_in_alterStatement4259);
					tableName196=tableName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableName.add(tableName196.getTree());
					pushFollow(FOLLOW_alterTableStatementSuffix_in_alterStatement4261);
					alterTableStatementSuffix197=alterTableStatementSuffix();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterTableStatementSuffix.add(alterTableStatementSuffix197.getTree());
					// AST REWRITE
					// elements: tableName, alterTableStatementSuffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1147:61: -> ^( TOK_ALTERTABLE tableName alterTableStatementSuffix )
					{
						// HiveParser.g:1147:64: ^( TOK_ALTERTABLE tableName alterTableStatementSuffix )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE, "TOK_ALTERTABLE"), root_1);
						adaptor.addChild(root_1, stream_tableName.nextTree());
						adaptor.addChild(root_1, stream_alterTableStatementSuffix.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:1148:7: KW_ALTER KW_VIEW tableName ( KW_AS )? alterViewStatementSuffix
					{
					KW_ALTER198=(Token)match(input,KW_ALTER,FOLLOW_KW_ALTER_in_alterStatement4279); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALTER.add(KW_ALTER198);

					KW_VIEW199=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_alterStatement4281); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_VIEW.add(KW_VIEW199);

					pushFollow(FOLLOW_tableName_in_alterStatement4283);
					tableName200=tableName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableName.add(tableName200.getTree());
					// HiveParser.g:1148:34: ( KW_AS )?
					int alt63=2;
					int LA63_0 = input.LA(1);
					if ( (LA63_0==KW_AS) ) {
						alt63=1;
					}
					switch (alt63) {
						case 1 :
							// HiveParser.g:1148:34: KW_AS
							{
							KW_AS201=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_alterStatement4285); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS201);

							}
							break;

					}

					pushFollow(FOLLOW_alterViewStatementSuffix_in_alterStatement4288);
					alterViewStatementSuffix202=alterViewStatementSuffix();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterViewStatementSuffix.add(alterViewStatementSuffix202.getTree());
					// AST REWRITE
					// elements: alterViewStatementSuffix, tableName
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1148:66: -> ^( TOK_ALTERVIEW tableName alterViewStatementSuffix )
					{
						// HiveParser.g:1148:69: ^( TOK_ALTERVIEW tableName alterViewStatementSuffix )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERVIEW, "TOK_ALTERVIEW"), root_1);
						adaptor.addChild(root_1, stream_tableName.nextTree());
						adaptor.addChild(root_1, stream_alterViewStatementSuffix.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// HiveParser.g:1149:7: KW_ALTER KW_MATERIALIZED KW_VIEW tableName alterMaterializedViewStatementSuffix
					{
					KW_ALTER203=(Token)match(input,KW_ALTER,FOLLOW_KW_ALTER_in_alterStatement4306); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALTER.add(KW_ALTER203);

					KW_MATERIALIZED204=(Token)match(input,KW_MATERIALIZED,FOLLOW_KW_MATERIALIZED_in_alterStatement4308); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_MATERIALIZED.add(KW_MATERIALIZED204);

					KW_VIEW205=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_alterStatement4310); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_VIEW.add(KW_VIEW205);

					pushFollow(FOLLOW_tableName_in_alterStatement4312);
					tableName206=tableName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableName.add(tableName206.getTree());
					pushFollow(FOLLOW_alterMaterializedViewStatementSuffix_in_alterStatement4314);
					alterMaterializedViewStatementSuffix207=alterMaterializedViewStatementSuffix();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterMaterializedViewStatementSuffix.add(alterMaterializedViewStatementSuffix207.getTree());
					// AST REWRITE
					// elements: alterMaterializedViewStatementSuffix, tableName
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1150:5: -> ^( TOK_ALTER_MATERIALIZED_VIEW tableName alterMaterializedViewStatementSuffix )
					{
						// HiveParser.g:1150:8: ^( TOK_ALTER_MATERIALIZED_VIEW tableName alterMaterializedViewStatementSuffix )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTER_MATERIALIZED_VIEW, "TOK_ALTER_MATERIALIZED_VIEW"), root_1);
						adaptor.addChild(root_1, stream_tableName.nextTree());
						adaptor.addChild(root_1, stream_alterMaterializedViewStatementSuffix.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// HiveParser.g:1151:7: KW_ALTER ( KW_DATABASE | KW_SCHEMA ) alterDatabaseStatementSuffix
					{
					KW_ALTER208=(Token)match(input,KW_ALTER,FOLLOW_KW_ALTER_in_alterStatement4336); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALTER.add(KW_ALTER208);

					// HiveParser.g:1151:16: ( KW_DATABASE | KW_SCHEMA )
					int alt64=2;
					int LA64_0 = input.LA(1);
					if ( (LA64_0==KW_DATABASE) ) {
						alt64=1;
					}
					else if ( (LA64_0==KW_SCHEMA) ) {
						alt64=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 64, 0, input);
						throw nvae;
					}

					switch (alt64) {
						case 1 :
							// HiveParser.g:1151:17: KW_DATABASE
							{
							KW_DATABASE209=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_alterStatement4339); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE209);

							}
							break;
						case 2 :
							// HiveParser.g:1151:29: KW_SCHEMA
							{
							KW_SCHEMA210=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_alterStatement4341); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA210);

							}
							break;

					}

					pushFollow(FOLLOW_alterDatabaseStatementSuffix_in_alterStatement4344);
					alterDatabaseStatementSuffix211=alterDatabaseStatementSuffix();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterDatabaseStatementSuffix.add(alterDatabaseStatementSuffix211.getTree());
					// AST REWRITE
					// elements: alterDatabaseStatementSuffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1151:69: -> alterDatabaseStatementSuffix
					{
						adaptor.addChild(root_0, stream_alterDatabaseStatementSuffix.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatement"


	public static class alterTableStatementSuffix_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterTableStatementSuffix"
	// HiveParser.g:1154:1: alterTableStatementSuffix : ( ( alterStatementSuffixRename[true] )=> alterStatementSuffixRename[true] | alterStatementSuffixDropPartitions[true] | alterStatementSuffixAddPartitions[true] | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterStatementSuffixSkewedby | alterStatementSuffixExchangePartition | alterStatementPartitionKeyType | alterStatementSuffixDropConstraint | alterStatementSuffixAddConstraint | ( partitionSpec )? alterTblPartitionStatementSuffix -> alterTblPartitionStatementSuffix ( partitionSpec )? | alterStatementSuffixSetOwner );
	public final HiveParser.alterTableStatementSuffix_return alterTableStatementSuffix() throws RecognitionException {
		HiveParser.alterTableStatementSuffix_return retval = new HiveParser.alterTableStatementSuffix_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope alterStatementSuffixRename212 =null;
		ParserRuleReturnScope alterStatementSuffixDropPartitions213 =null;
		ParserRuleReturnScope alterStatementSuffixAddPartitions214 =null;
		ParserRuleReturnScope alterStatementSuffixTouch215 =null;
		ParserRuleReturnScope alterStatementSuffixArchive216 =null;
		ParserRuleReturnScope alterStatementSuffixUnArchive217 =null;
		ParserRuleReturnScope alterStatementSuffixProperties218 =null;
		ParserRuleReturnScope alterStatementSuffixSkewedby219 =null;
		ParserRuleReturnScope alterStatementSuffixExchangePartition220 =null;
		ParserRuleReturnScope alterStatementPartitionKeyType221 =null;
		ParserRuleReturnScope alterStatementSuffixDropConstraint222 =null;
		ParserRuleReturnScope alterStatementSuffixAddConstraint223 =null;
		ParserRuleReturnScope partitionSpec224 =null;
		ParserRuleReturnScope alterTblPartitionStatementSuffix225 =null;
		ParserRuleReturnScope alterStatementSuffixSetOwner226 =null;

		RewriteRuleSubtreeStream stream_alterTblPartitionStatementSuffix=new RewriteRuleSubtreeStream(adaptor,"rule alterTblPartitionStatementSuffix");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		 pushMsg(retval.start,"alter table statement", state); 
		try {
			// HiveParser.g:1157:5: ( ( alterStatementSuffixRename[true] )=> alterStatementSuffixRename[true] | alterStatementSuffixDropPartitions[true] | alterStatementSuffixAddPartitions[true] | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterStatementSuffixSkewedby | alterStatementSuffixExchangePartition | alterStatementPartitionKeyType | alterStatementSuffixDropConstraint | alterStatementSuffixAddConstraint | ( partitionSpec )? alterTblPartitionStatementSuffix -> alterTblPartitionStatementSuffix ( partitionSpec )? | alterStatementSuffixSetOwner )
			int alt67=14;
			switch ( input.LA(1) ) {
			case KW_RENAME:
				{
				int LA67_1 = input.LA(2);
				if ( (LA67_1==KW_TO) ) {
					int LA67_20 = input.LA(3);
					if ( (LA67_20==Identifier) && (synpred3_HiveParser())) {
						alt67=1;
					}
					else if ( ((LA67_20 >= KW_ABORT && LA67_20 <= KW_AFTER)||LA67_20==KW_ALLOC_FRACTION||LA67_20==KW_ANALYZE||LA67_20==KW_ARCHIVE||(LA67_20 >= KW_ASC && LA67_20 <= KW_AST)||(LA67_20 >= KW_AUTOCOMMIT && LA67_20 <= KW_BEFORE)||(LA67_20 >= KW_BUCKET && LA67_20 <= KW_BUCKETS)||(LA67_20 >= KW_CACHE && LA67_20 <= KW_CASCADE)||LA67_20==KW_CHANGE||(LA67_20 >= KW_CHECK && LA67_20 <= KW_COLLECTION)||(LA67_20 >= KW_COLUMNS && LA67_20 <= KW_COMMENT)||(LA67_20 >= KW_COMPACT && LA67_20 <= KW_CONCATENATE)||LA67_20==KW_CONTINUE||LA67_20==KW_DATA||(LA67_20 >= KW_DATABASES && LA67_20 <= KW_DEBUG)||(LA67_20 >= KW_DEFAULT && LA67_20 <= KW_DEFINED)||(LA67_20 >= KW_DELIMITED && LA67_20 <= KW_DESC)||(LA67_20 >= KW_DETAIL && LA67_20 <= KW_DISABLE)||(LA67_20 >= KW_DISTRIBUTE && LA67_20 <= KW_DO)||LA67_20==KW_DOW||(LA67_20 >= KW_DUMP && LA67_20 <= KW_ELEM_TYPE)||LA67_20==KW_ENABLE||(LA67_20 >= KW_ENFORCED && LA67_20 <= KW_ESCAPED)||LA67_20==KW_EXCLUSIVE||(LA67_20 >= KW_EXPLAIN && LA67_20 <= KW_EXPRESSION)||(LA67_20 >= KW_FIELDS && LA67_20 <= KW_FIRST)||(LA67_20 >= KW_FORMAT && LA67_20 <= KW_FORMATTED)||LA67_20==KW_FUNCTIONS||LA67_20==KW_GROUP||(LA67_20 >= KW_HOUR && LA67_20 <= KW_IDXPROPERTIES)||(LA67_20 >= KW_INDEX && LA67_20 <= KW_INDEXES)||(LA67_20 >= KW_INPATH && LA67_20 <= KW_INPUTFORMAT)||(LA67_20 >= KW_ISOLATION && LA67_20 <= KW_JAR)||(LA67_20 >= KW_KEY && LA67_20 <= KW_LAST)||LA67_20==KW_LEVEL||(LA67_20 >= KW_LIMIT && LA67_20 <= KW_LOAD)||(LA67_20 >= KW_LOCATION && LA67_20 <= KW_LONG)||LA67_20==KW_MANAGEMENT||(LA67_20 >= KW_MAPJOIN && LA67_20 <= KW_MATERIALIZED)||LA67_20==KW_METADATA||(LA67_20 >= KW_MINUTE && LA67_20 <= KW_MONTH)||(LA67_20 >= KW_MOVE && LA67_20 <= KW_MSCK)||(LA67_20 >= KW_NORELY && LA67_20 <= KW_NOSCAN)||LA67_20==KW_NOVALIDATE||LA67_20==KW_NULLS||LA67_20==KW_OFFSET||(LA67_20 >= KW_OPERATOR && LA67_20 <= KW_OPTION)||LA67_20==KW_ORDER||(LA67_20 >= KW_OUTPUTDRIVER && LA67_20 <= KW_OUTPUTFORMAT)||(LA67_20 >= KW_OVERWRITE && LA67_20 <= KW_OWNER)||(LA67_20 >= KW_PARTITIONED && LA67_20 <= KW_PATH)||(LA67_20 >= KW_PLAN && LA67_20 <= KW_POOL)||LA67_20==KW_PRINCIPALS||(LA67_20 >= KW_PURGE && LA67_20 <= KW_QUERY_PARALLELISM)||LA67_20==KW_READ||(LA67_20 >= KW_REBUILD && LA67_20 <= KW_RECORDWRITER)||(LA67_20 >= KW_RELOAD && LA67_20 <= KW_RESTRICT)||LA67_20==KW_REWRITE||(LA67_20 >= KW_ROLE && LA67_20 <= KW_ROLES)||(LA67_20 >= KW_SCHEDULING_POLICY && LA67_20 <= KW_SECOND)||(LA67_20 >= KW_SEMI && LA67_20 <= KW_SERVER)||(LA67_20 >= KW_SETS && LA67_20 <= KW_SKEWED)||(LA67_20 >= KW_SNAPSHOT && LA67_20 <= KW_SSL)||(LA67_20 >= KW_STATISTICS && LA67_20 <= KW_SUMMARY)||LA67_20==KW_TABLES||(LA67_20 >= KW_TBLPROPERTIES && LA67_20 <= KW_TERMINATED)||LA67_20==KW_TINYINT||(LA67_20 >= KW_TOUCH && LA67_20 <= KW_TRANSACTIONS)||LA67_20==KW_UNARCHIVE||LA67_20==KW_UNDO||LA67_20==KW_UNIONTYPE||(LA67_20 >= KW_UNKNOWN && LA67_20 <= KW_UNSIGNED)||(LA67_20 >= KW_URI && LA67_20 <= KW_USE)||(LA67_20 >= KW_UTC && LA67_20 <= KW_VALIDATE)||LA67_20==KW_VALUE_TYPE||(LA67_20 >= KW_VECTORIZATION && LA67_20 <= KW_WEEK)||LA67_20==KW_WHILE||(LA67_20 >= KW_WORK && LA67_20 <= KW_ZONE)||LA67_20==KW_BATCH||LA67_20==KW_DAYOFWEEK||LA67_20==KW_HOLD_DDLTIME||LA67_20==KW_IGNORE||LA67_20==KW_NO_DROP||LA67_20==KW_OFFLINE||LA67_20==KW_PROTECTION||LA67_20==KW_READONLY||LA67_20==KW_TIMESTAMPTZ) && (synpred3_HiveParser())) {
						alt67=1;
					}
					else if ( (LA67_20==KW_PARTITION) ) {
						alt67=13;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 67, 20, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 67, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_DROP:
				{
				int LA67_2 = input.LA(2);
				if ( (LA67_2==KW_CONSTRAINT) ) {
					alt67=11;
				}
				else if ( (LA67_2==KW_IF||LA67_2==KW_PARTITION) ) {
					alt67=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 67, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_ADD:
				{
				switch ( input.LA(2) ) {
				case KW_IF:
				case KW_PARTITION:
					{
					alt67=3;
					}
					break;
				case KW_CONSTRAINT:
					{
					alt67=12;
					}
					break;
				case KW_COLUMNS:
					{
					alt67=13;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 67, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case KW_TOUCH:
				{
				alt67=4;
				}
				break;
			case KW_ARCHIVE:
				{
				alt67=5;
				}
				break;
			case KW_UNARCHIVE:
				{
				alt67=6;
				}
				break;
			case KW_SET:
				{
				switch ( input.LA(2) ) {
				case KW_TBLPROPERTIES:
					{
					alt67=7;
					}
					break;
				case KW_FILEFORMAT:
				case KW_LOCATION:
				case KW_SERDE:
				case KW_SERDEPROPERTIES:
				case KW_SKEWED:
					{
					alt67=13;
					}
					break;
				case KW_OWNER:
					{
					alt67=14;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 67, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case KW_UNSET:
				{
				alt67=7;
				}
				break;
			case KW_SKEWED:
				{
				alt67=8;
				}
				break;
			case KW_NOT:
				{
				int LA67_10 = input.LA(2);
				if ( (LA67_10==KW_SKEWED||LA67_10==KW_STORED) ) {
					alt67=8;
				}
				else if ( (LA67_10==KW_CLUSTERED||LA67_10==KW_SORTED) ) {
					alt67=13;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 67, 10, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_EXCHANGE:
				{
				alt67=9;
				}
				break;
			case KW_PARTITION:
				{
				int LA67_12 = input.LA(2);
				if ( (LA67_12==KW_COLUMN) ) {
					alt67=10;
				}
				else if ( (LA67_12==LPAREN) ) {
					alt67=13;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 67, 12, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_CHANGE:
			case KW_CLUSTERED:
			case KW_COMPACT:
			case KW_CONCATENATE:
			case KW_INTO:
			case KW_REPLACE:
			case KW_UPDATE:
				{
				alt67=13;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 67, 0, input);
				throw nvae;
			}
			switch (alt67) {
				case 1 :
					// HiveParser.g:1157:7: ( alterStatementSuffixRename[true] )=> alterStatementSuffixRename[true]
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixRename_in_alterTableStatementSuffix4382);
					alterStatementSuffixRename212=alterStatementSuffixRename(true);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixRename212.getTree());

					}
					break;
				case 2 :
					// HiveParser.g:1158:7: alterStatementSuffixDropPartitions[true]
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixDropPartitions_in_alterTableStatementSuffix4391);
					alterStatementSuffixDropPartitions213=alterStatementSuffixDropPartitions(true);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixDropPartitions213.getTree());

					}
					break;
				case 3 :
					// HiveParser.g:1159:7: alterStatementSuffixAddPartitions[true]
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixAddPartitions_in_alterTableStatementSuffix4400);
					alterStatementSuffixAddPartitions214=alterStatementSuffixAddPartitions(true);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixAddPartitions214.getTree());

					}
					break;
				case 4 :
					// HiveParser.g:1160:7: alterStatementSuffixTouch
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixTouch_in_alterTableStatementSuffix4409);
					alterStatementSuffixTouch215=alterStatementSuffixTouch();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixTouch215.getTree());

					}
					break;
				case 5 :
					// HiveParser.g:1161:7: alterStatementSuffixArchive
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixArchive_in_alterTableStatementSuffix4417);
					alterStatementSuffixArchive216=alterStatementSuffixArchive();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixArchive216.getTree());

					}
					break;
				case 6 :
					// HiveParser.g:1162:7: alterStatementSuffixUnArchive
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixUnArchive_in_alterTableStatementSuffix4425);
					alterStatementSuffixUnArchive217=alterStatementSuffixUnArchive();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixUnArchive217.getTree());

					}
					break;
				case 7 :
					// HiveParser.g:1163:7: alterStatementSuffixProperties
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixProperties_in_alterTableStatementSuffix4433);
					alterStatementSuffixProperties218=alterStatementSuffixProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixProperties218.getTree());

					}
					break;
				case 8 :
					// HiveParser.g:1164:7: alterStatementSuffixSkewedby
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixSkewedby_in_alterTableStatementSuffix4441);
					alterStatementSuffixSkewedby219=alterStatementSuffixSkewedby();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixSkewedby219.getTree());

					}
					break;
				case 9 :
					// HiveParser.g:1165:7: alterStatementSuffixExchangePartition
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixExchangePartition_in_alterTableStatementSuffix4449);
					alterStatementSuffixExchangePartition220=alterStatementSuffixExchangePartition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixExchangePartition220.getTree());

					}
					break;
				case 10 :
					// HiveParser.g:1166:7: alterStatementPartitionKeyType
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementPartitionKeyType_in_alterTableStatementSuffix4457);
					alterStatementPartitionKeyType221=alterStatementPartitionKeyType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementPartitionKeyType221.getTree());

					}
					break;
				case 11 :
					// HiveParser.g:1167:7: alterStatementSuffixDropConstraint
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixDropConstraint_in_alterTableStatementSuffix4465);
					alterStatementSuffixDropConstraint222=alterStatementSuffixDropConstraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixDropConstraint222.getTree());

					}
					break;
				case 12 :
					// HiveParser.g:1168:7: alterStatementSuffixAddConstraint
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixAddConstraint_in_alterTableStatementSuffix4473);
					alterStatementSuffixAddConstraint223=alterStatementSuffixAddConstraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixAddConstraint223.getTree());

					}
					break;
				case 13 :
					// HiveParser.g:1169:7: ( partitionSpec )? alterTblPartitionStatementSuffix
					{
					// HiveParser.g:1169:7: ( partitionSpec )?
					int alt66=2;
					int LA66_0 = input.LA(1);
					if ( (LA66_0==KW_PARTITION) ) {
						alt66=1;
					}
					switch (alt66) {
						case 1 :
							// HiveParser.g:1169:7: partitionSpec
							{
							pushFollow(FOLLOW_partitionSpec_in_alterTableStatementSuffix4481);
							partitionSpec224=partitionSpec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec224.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_alterTblPartitionStatementSuffix_in_alterTableStatementSuffix4484);
					alterTblPartitionStatementSuffix225=alterTblPartitionStatementSuffix();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterTblPartitionStatementSuffix.add(alterTblPartitionStatementSuffix225.getTree());
					// AST REWRITE
					// elements: alterTblPartitionStatementSuffix, partitionSpec
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1169:55: -> alterTblPartitionStatementSuffix ( partitionSpec )?
					{
						adaptor.addChild(root_0, stream_alterTblPartitionStatementSuffix.nextTree());
						// HiveParser.g:1169:91: ( partitionSpec )?
						if ( stream_partitionSpec.hasNext() ) {
							adaptor.addChild(root_0, stream_partitionSpec.nextTree());
						}
						stream_partitionSpec.reset();

					}


					retval.tree = root_0;
					}

					}
					break;
				case 14 :
					// HiveParser.g:1170:7: alterStatementSuffixSetOwner
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixSetOwner_in_alterTableStatementSuffix4499);
					alterStatementSuffixSetOwner226=alterStatementSuffixSetOwner();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixSetOwner226.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterTableStatementSuffix"


	public static class alterTblPartitionStatementSuffix_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterTblPartitionStatementSuffix"
	// HiveParser.g:1173:1: alterTblPartitionStatementSuffix : ( alterStatementSuffixFileFormat | alterStatementSuffixLocation | alterStatementSuffixMergeFiles | alterStatementSuffixSerdeProperties | alterStatementSuffixRenamePart | alterStatementSuffixBucketNum | alterTblPartitionStatementSuffixSkewedLocation | alterStatementSuffixClusterbySortby | alterStatementSuffixCompact | alterStatementSuffixUpdateStatsCol | alterStatementSuffixUpdateStats | alterStatementSuffixRenameCol | alterStatementSuffixAddCol | alterStatementSuffixUpdateColumns );
	public final HiveParser.alterTblPartitionStatementSuffix_return alterTblPartitionStatementSuffix() throws RecognitionException {
		HiveParser.alterTblPartitionStatementSuffix_return retval = new HiveParser.alterTblPartitionStatementSuffix_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope alterStatementSuffixFileFormat227 =null;
		ParserRuleReturnScope alterStatementSuffixLocation228 =null;
		ParserRuleReturnScope alterStatementSuffixMergeFiles229 =null;
		ParserRuleReturnScope alterStatementSuffixSerdeProperties230 =null;
		ParserRuleReturnScope alterStatementSuffixRenamePart231 =null;
		ParserRuleReturnScope alterStatementSuffixBucketNum232 =null;
		ParserRuleReturnScope alterTblPartitionStatementSuffixSkewedLocation233 =null;
		ParserRuleReturnScope alterStatementSuffixClusterbySortby234 =null;
		ParserRuleReturnScope alterStatementSuffixCompact235 =null;
		ParserRuleReturnScope alterStatementSuffixUpdateStatsCol236 =null;
		ParserRuleReturnScope alterStatementSuffixUpdateStats237 =null;
		ParserRuleReturnScope alterStatementSuffixRenameCol238 =null;
		ParserRuleReturnScope alterStatementSuffixAddCol239 =null;
		ParserRuleReturnScope alterStatementSuffixUpdateColumns240 =null;


		pushMsg(retval.start,"alter table partition statement suffix", state);
		try {
			// HiveParser.g:1176:3: ( alterStatementSuffixFileFormat | alterStatementSuffixLocation | alterStatementSuffixMergeFiles | alterStatementSuffixSerdeProperties | alterStatementSuffixRenamePart | alterStatementSuffixBucketNum | alterTblPartitionStatementSuffixSkewedLocation | alterStatementSuffixClusterbySortby | alterStatementSuffixCompact | alterStatementSuffixUpdateStatsCol | alterStatementSuffixUpdateStats | alterStatementSuffixRenameCol | alterStatementSuffixAddCol | alterStatementSuffixUpdateColumns )
			int alt68=14;
			switch ( input.LA(1) ) {
			case KW_SET:
				{
				switch ( input.LA(2) ) {
				case KW_FILEFORMAT:
					{
					alt68=1;
					}
					break;
				case KW_LOCATION:
					{
					alt68=2;
					}
					break;
				case KW_SERDE:
				case KW_SERDEPROPERTIES:
					{
					alt68=4;
					}
					break;
				case KW_SKEWED:
					{
					alt68=7;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 68, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case KW_CONCATENATE:
				{
				alt68=3;
				}
				break;
			case KW_RENAME:
				{
				alt68=5;
				}
				break;
			case KW_INTO:
				{
				alt68=6;
				}
				break;
			case KW_CLUSTERED:
			case KW_NOT:
				{
				alt68=8;
				}
				break;
			case KW_COMPACT:
				{
				alt68=9;
				}
				break;
			case KW_UPDATE:
				{
				int LA68_8 = input.LA(2);
				if ( (LA68_8==KW_STATISTICS) ) {
					int LA68_17 = input.LA(3);
					if ( (LA68_17==KW_FOR) ) {
						alt68=10;
					}
					else if ( (LA68_17==KW_SET) ) {
						alt68=11;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 68, 17, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( (LA68_8==KW_COLUMNS) ) {
					alt68=14;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 68, 8, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_CHANGE:
				{
				alt68=12;
				}
				break;
			case KW_ADD:
			case KW_REPLACE:
				{
				alt68=13;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 68, 0, input);
				throw nvae;
			}
			switch (alt68) {
				case 1 :
					// HiveParser.g:1176:5: alterStatementSuffixFileFormat
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixFileFormat_in_alterTblPartitionStatementSuffix4524);
					alterStatementSuffixFileFormat227=alterStatementSuffixFileFormat();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixFileFormat227.getTree());

					}
					break;
				case 2 :
					// HiveParser.g:1177:5: alterStatementSuffixLocation
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixLocation_in_alterTblPartitionStatementSuffix4530);
					alterStatementSuffixLocation228=alterStatementSuffixLocation();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixLocation228.getTree());

					}
					break;
				case 3 :
					// HiveParser.g:1178:5: alterStatementSuffixMergeFiles
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixMergeFiles_in_alterTblPartitionStatementSuffix4536);
					alterStatementSuffixMergeFiles229=alterStatementSuffixMergeFiles();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixMergeFiles229.getTree());

					}
					break;
				case 4 :
					// HiveParser.g:1179:5: alterStatementSuffixSerdeProperties
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixSerdeProperties_in_alterTblPartitionStatementSuffix4542);
					alterStatementSuffixSerdeProperties230=alterStatementSuffixSerdeProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixSerdeProperties230.getTree());

					}
					break;
				case 5 :
					// HiveParser.g:1180:5: alterStatementSuffixRenamePart
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixRenamePart_in_alterTblPartitionStatementSuffix4548);
					alterStatementSuffixRenamePart231=alterStatementSuffixRenamePart();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixRenamePart231.getTree());

					}
					break;
				case 6 :
					// HiveParser.g:1181:5: alterStatementSuffixBucketNum
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixBucketNum_in_alterTblPartitionStatementSuffix4554);
					alterStatementSuffixBucketNum232=alterStatementSuffixBucketNum();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixBucketNum232.getTree());

					}
					break;
				case 7 :
					// HiveParser.g:1182:5: alterTblPartitionStatementSuffixSkewedLocation
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterTblPartitionStatementSuffixSkewedLocation_in_alterTblPartitionStatementSuffix4560);
					alterTblPartitionStatementSuffixSkewedLocation233=alterTblPartitionStatementSuffixSkewedLocation();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterTblPartitionStatementSuffixSkewedLocation233.getTree());

					}
					break;
				case 8 :
					// HiveParser.g:1183:5: alterStatementSuffixClusterbySortby
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixClusterbySortby_in_alterTblPartitionStatementSuffix4566);
					alterStatementSuffixClusterbySortby234=alterStatementSuffixClusterbySortby();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixClusterbySortby234.getTree());

					}
					break;
				case 9 :
					// HiveParser.g:1184:5: alterStatementSuffixCompact
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixCompact_in_alterTblPartitionStatementSuffix4572);
					alterStatementSuffixCompact235=alterStatementSuffixCompact();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixCompact235.getTree());

					}
					break;
				case 10 :
					// HiveParser.g:1185:5: alterStatementSuffixUpdateStatsCol
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixUpdateStatsCol_in_alterTblPartitionStatementSuffix4578);
					alterStatementSuffixUpdateStatsCol236=alterStatementSuffixUpdateStatsCol();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixUpdateStatsCol236.getTree());

					}
					break;
				case 11 :
					// HiveParser.g:1186:5: alterStatementSuffixUpdateStats
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixUpdateStats_in_alterTblPartitionStatementSuffix4584);
					alterStatementSuffixUpdateStats237=alterStatementSuffixUpdateStats();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixUpdateStats237.getTree());

					}
					break;
				case 12 :
					// HiveParser.g:1187:5: alterStatementSuffixRenameCol
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixRenameCol_in_alterTblPartitionStatementSuffix4590);
					alterStatementSuffixRenameCol238=alterStatementSuffixRenameCol();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixRenameCol238.getTree());

					}
					break;
				case 13 :
					// HiveParser.g:1188:5: alterStatementSuffixAddCol
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixAddCol_in_alterTblPartitionStatementSuffix4596);
					alterStatementSuffixAddCol239=alterStatementSuffixAddCol();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixAddCol239.getTree());

					}
					break;
				case 14 :
					// HiveParser.g:1189:5: alterStatementSuffixUpdateColumns
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixUpdateColumns_in_alterTblPartitionStatementSuffix4602);
					alterStatementSuffixUpdateColumns240=alterStatementSuffixUpdateColumns();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixUpdateColumns240.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterTblPartitionStatementSuffix"


	public static class alterStatementPartitionKeyType_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementPartitionKeyType"
	// HiveParser.g:1192:1: alterStatementPartitionKeyType : KW_PARTITION KW_COLUMN LPAREN columnNameType RPAREN -> ^( TOK_ALTERTABLE_PARTCOLTYPE columnNameType ) ;
	public final HiveParser.alterStatementPartitionKeyType_return alterStatementPartitionKeyType() throws RecognitionException {
		HiveParser.alterStatementPartitionKeyType_return retval = new HiveParser.alterStatementPartitionKeyType_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_PARTITION241=null;
		Token KW_COLUMN242=null;
		Token LPAREN243=null;
		Token RPAREN245=null;
		ParserRuleReturnScope columnNameType244 =null;

		ASTNode KW_PARTITION241_tree=null;
		ASTNode KW_COLUMN242_tree=null;
		ASTNode LPAREN243_tree=null;
		ASTNode RPAREN245_tree=null;
		RewriteRuleTokenStream stream_KW_PARTITION=new RewriteRuleTokenStream(adaptor,"token KW_PARTITION");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_COLUMN=new RewriteRuleTokenStream(adaptor,"token KW_COLUMN");
		RewriteRuleSubtreeStream stream_columnNameType=new RewriteRuleSubtreeStream(adaptor,"rule columnNameType");

		msgs.push("alter partition key type"); 
		try {
			// HiveParser.g:1195:2: ( KW_PARTITION KW_COLUMN LPAREN columnNameType RPAREN -> ^( TOK_ALTERTABLE_PARTCOLTYPE columnNameType ) )
			// HiveParser.g:1195:4: KW_PARTITION KW_COLUMN LPAREN columnNameType RPAREN
			{
			KW_PARTITION241=(Token)match(input,KW_PARTITION,FOLLOW_KW_PARTITION_in_alterStatementPartitionKeyType4624); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_PARTITION.add(KW_PARTITION241);

			KW_COLUMN242=(Token)match(input,KW_COLUMN,FOLLOW_KW_COLUMN_in_alterStatementPartitionKeyType4626); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_COLUMN.add(KW_COLUMN242);

			LPAREN243=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alterStatementPartitionKeyType4628); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN243);

			pushFollow(FOLLOW_columnNameType_in_alterStatementPartitionKeyType4630);
			columnNameType244=columnNameType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameType.add(columnNameType244.getTree());
			RPAREN245=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alterStatementPartitionKeyType4632); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN245);

			// AST REWRITE
			// elements: columnNameType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1196:2: -> ^( TOK_ALTERTABLE_PARTCOLTYPE columnNameType )
			{
				// HiveParser.g:1196:5: ^( TOK_ALTERTABLE_PARTCOLTYPE columnNameType )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_PARTCOLTYPE, "TOK_ALTERTABLE_PARTCOLTYPE"), root_1);
				adaptor.addChild(root_1, stream_columnNameType.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {msgs.pop();}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementPartitionKeyType"


	public static class alterViewStatementSuffix_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterViewStatementSuffix"
	// HiveParser.g:1199:1: alterViewStatementSuffix : ( alterViewSuffixProperties | alterStatementSuffixRename[false] | alterStatementSuffixAddPartitions[false] | alterStatementSuffixDropPartitions[false] | selectStatementWithCTE );
	public final HiveParser.alterViewStatementSuffix_return alterViewStatementSuffix() throws RecognitionException {
		HiveParser.alterViewStatementSuffix_return retval = new HiveParser.alterViewStatementSuffix_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope alterViewSuffixProperties246 =null;
		ParserRuleReturnScope alterStatementSuffixRename247 =null;
		ParserRuleReturnScope alterStatementSuffixAddPartitions248 =null;
		ParserRuleReturnScope alterStatementSuffixDropPartitions249 =null;
		ParserRuleReturnScope selectStatementWithCTE250 =null;


		 pushMsg(retval.start,"alter view statement", state); 
		try {
			// HiveParser.g:1202:5: ( alterViewSuffixProperties | alterStatementSuffixRename[false] | alterStatementSuffixAddPartitions[false] | alterStatementSuffixDropPartitions[false] | selectStatementWithCTE )
			int alt69=5;
			switch ( input.LA(1) ) {
			case KW_SET:
			case KW_UNSET:
				{
				alt69=1;
				}
				break;
			case KW_RENAME:
				{
				alt69=2;
				}
				break;
			case KW_ADD:
				{
				alt69=3;
				}
				break;
			case KW_DROP:
				{
				alt69=4;
				}
				break;
			case KW_MAP:
			case KW_REDUCE:
			case KW_SELECT:
			case KW_WITH:
			case LPAREN:
				{
				alt69=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 69, 0, input);
				throw nvae;
			}
			switch (alt69) {
				case 1 :
					// HiveParser.g:1202:7: alterViewSuffixProperties
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterViewSuffixProperties_in_alterViewStatementSuffix4665);
					alterViewSuffixProperties246=alterViewSuffixProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterViewSuffixProperties246.getTree());

					}
					break;
				case 2 :
					// HiveParser.g:1203:7: alterStatementSuffixRename[false]
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixRename_in_alterViewStatementSuffix4673);
					alterStatementSuffixRename247=alterStatementSuffixRename(false);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixRename247.getTree());

					}
					break;
				case 3 :
					// HiveParser.g:1204:7: alterStatementSuffixAddPartitions[false]
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixAddPartitions_in_alterViewStatementSuffix4682);
					alterStatementSuffixAddPartitions248=alterStatementSuffixAddPartitions(false);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixAddPartitions248.getTree());

					}
					break;
				case 4 :
					// HiveParser.g:1205:7: alterStatementSuffixDropPartitions[false]
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixDropPartitions_in_alterViewStatementSuffix4691);
					alterStatementSuffixDropPartitions249=alterStatementSuffixDropPartitions(false);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixDropPartitions249.getTree());

					}
					break;
				case 5 :
					// HiveParser.g:1206:7: selectStatementWithCTE
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_selectStatementWithCTE_in_alterViewStatementSuffix4700);
					selectStatementWithCTE250=selectStatementWithCTE();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, selectStatementWithCTE250.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterViewStatementSuffix"


	public static class alterMaterializedViewStatementSuffix_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterMaterializedViewStatementSuffix"
	// HiveParser.g:1209:1: alterMaterializedViewStatementSuffix : ( alterMaterializedViewSuffixRewrite | alterMaterializedViewSuffixRebuild );
	public final HiveParser.alterMaterializedViewStatementSuffix_return alterMaterializedViewStatementSuffix() throws RecognitionException {
		HiveParser.alterMaterializedViewStatementSuffix_return retval = new HiveParser.alterMaterializedViewStatementSuffix_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope alterMaterializedViewSuffixRewrite251 =null;
		ParserRuleReturnScope alterMaterializedViewSuffixRebuild252 =null;


		 pushMsg(retval.start,"alter materialized view statement", state); 
		try {
			// HiveParser.g:1212:5: ( alterMaterializedViewSuffixRewrite | alterMaterializedViewSuffixRebuild )
			int alt70=2;
			int LA70_0 = input.LA(1);
			if ( (LA70_0==KW_DISABLE||LA70_0==KW_ENABLE) ) {
				alt70=1;
			}
			else if ( (LA70_0==KW_REBUILD) ) {
				alt70=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 70, 0, input);
				throw nvae;
			}

			switch (alt70) {
				case 1 :
					// HiveParser.g:1212:7: alterMaterializedViewSuffixRewrite
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterMaterializedViewSuffixRewrite_in_alterMaterializedViewStatementSuffix4727);
					alterMaterializedViewSuffixRewrite251=alterMaterializedViewSuffixRewrite();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterMaterializedViewSuffixRewrite251.getTree());

					}
					break;
				case 2 :
					// HiveParser.g:1213:7: alterMaterializedViewSuffixRebuild
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterMaterializedViewSuffixRebuild_in_alterMaterializedViewStatementSuffix4735);
					alterMaterializedViewSuffixRebuild252=alterMaterializedViewSuffixRebuild();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterMaterializedViewSuffixRebuild252.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterMaterializedViewStatementSuffix"


	public static class alterDatabaseStatementSuffix_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterDatabaseStatementSuffix"
	// HiveParser.g:1216:1: alterDatabaseStatementSuffix : ( alterDatabaseSuffixProperties | alterDatabaseSuffixSetOwner | alterDatabaseSuffixSetLocation );
	public final HiveParser.alterDatabaseStatementSuffix_return alterDatabaseStatementSuffix() throws RecognitionException {
		HiveParser.alterDatabaseStatementSuffix_return retval = new HiveParser.alterDatabaseStatementSuffix_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope alterDatabaseSuffixProperties253 =null;
		ParserRuleReturnScope alterDatabaseSuffixSetOwner254 =null;
		ParserRuleReturnScope alterDatabaseSuffixSetLocation255 =null;


		 pushMsg(retval.start,"alter database statement", state); 
		try {
			// HiveParser.g:1219:5: ( alterDatabaseSuffixProperties | alterDatabaseSuffixSetOwner | alterDatabaseSuffixSetLocation )
			int alt71=3;
			int LA71_0 = input.LA(1);
			if ( (LA71_0==Identifier) ) {
				int LA71_1 = input.LA(2);
				if ( (LA71_1==KW_SET) ) {
					switch ( input.LA(3) ) {
					case KW_DBPROPERTIES:
						{
						alt71=1;
						}
						break;
					case KW_OWNER:
						{
						alt71=2;
						}
						break;
					case KW_LOCATION:
						{
						alt71=3;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 71, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 71, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( ((LA71_0 >= KW_ABORT && LA71_0 <= KW_AFTER)||LA71_0==KW_ALLOC_FRACTION||LA71_0==KW_ANALYZE||LA71_0==KW_ARCHIVE||(LA71_0 >= KW_ASC && LA71_0 <= KW_AST)||(LA71_0 >= KW_AUTOCOMMIT && LA71_0 <= KW_BEFORE)||(LA71_0 >= KW_BUCKET && LA71_0 <= KW_BUCKETS)||(LA71_0 >= KW_CACHE && LA71_0 <= KW_CASCADE)||LA71_0==KW_CHANGE||(LA71_0 >= KW_CHECK && LA71_0 <= KW_COLLECTION)||(LA71_0 >= KW_COLUMNS && LA71_0 <= KW_COMMENT)||(LA71_0 >= KW_COMPACT && LA71_0 <= KW_CONCATENATE)||LA71_0==KW_CONTINUE||LA71_0==KW_DATA||(LA71_0 >= KW_DATABASES && LA71_0 <= KW_DEBUG)||(LA71_0 >= KW_DEFAULT && LA71_0 <= KW_DEFINED)||(LA71_0 >= KW_DELIMITED && LA71_0 <= KW_DESC)||(LA71_0 >= KW_DETAIL && LA71_0 <= KW_DISABLE)||(LA71_0 >= KW_DISTRIBUTE && LA71_0 <= KW_DO)||LA71_0==KW_DOW||(LA71_0 >= KW_DUMP && LA71_0 <= KW_ELEM_TYPE)||LA71_0==KW_ENABLE||(LA71_0 >= KW_ENFORCED && LA71_0 <= KW_ESCAPED)||LA71_0==KW_EXCLUSIVE||(LA71_0 >= KW_EXPLAIN && LA71_0 <= KW_EXPRESSION)||(LA71_0 >= KW_FIELDS && LA71_0 <= KW_FIRST)||(LA71_0 >= KW_FORMAT && LA71_0 <= KW_FORMATTED)||LA71_0==KW_FUNCTIONS||LA71_0==KW_GROUP||(LA71_0 >= KW_HOUR && LA71_0 <= KW_IDXPROPERTIES)||(LA71_0 >= KW_INDEX && LA71_0 <= KW_INDEXES)||(LA71_0 >= KW_INPATH && LA71_0 <= KW_INPUTFORMAT)||(LA71_0 >= KW_ISOLATION && LA71_0 <= KW_JAR)||(LA71_0 >= KW_KEY && LA71_0 <= KW_LAST)||LA71_0==KW_LEVEL||(LA71_0 >= KW_LIMIT && LA71_0 <= KW_LOAD)||(LA71_0 >= KW_LOCATION && LA71_0 <= KW_LONG)||LA71_0==KW_MANAGEMENT||(LA71_0 >= KW_MAPJOIN && LA71_0 <= KW_MATERIALIZED)||LA71_0==KW_METADATA||(LA71_0 >= KW_MINUTE && LA71_0 <= KW_MONTH)||(LA71_0 >= KW_MOVE && LA71_0 <= KW_MSCK)||(LA71_0 >= KW_NORELY && LA71_0 <= KW_NOSCAN)||LA71_0==KW_NOVALIDATE||LA71_0==KW_NULLS||LA71_0==KW_OFFSET||(LA71_0 >= KW_OPERATOR && LA71_0 <= KW_OPTION)||LA71_0==KW_ORDER||(LA71_0 >= KW_OUTPUTDRIVER && LA71_0 <= KW_OUTPUTFORMAT)||(LA71_0 >= KW_OVERWRITE && LA71_0 <= KW_OWNER)||(LA71_0 >= KW_PARTITIONED && LA71_0 <= KW_PATH)||(LA71_0 >= KW_PLAN && LA71_0 <= KW_POOL)||LA71_0==KW_PRINCIPALS||(LA71_0 >= KW_PURGE && LA71_0 <= KW_QUERY_PARALLELISM)||LA71_0==KW_READ||(LA71_0 >= KW_REBUILD && LA71_0 <= KW_RECORDWRITER)||(LA71_0 >= KW_RELOAD && LA71_0 <= KW_RESTRICT)||LA71_0==KW_REWRITE||(LA71_0 >= KW_ROLE && LA71_0 <= KW_ROLES)||(LA71_0 >= KW_SCHEDULING_POLICY && LA71_0 <= KW_SECOND)||(LA71_0 >= KW_SEMI && LA71_0 <= KW_SERVER)||(LA71_0 >= KW_SETS && LA71_0 <= KW_SKEWED)||(LA71_0 >= KW_SNAPSHOT && LA71_0 <= KW_SSL)||(LA71_0 >= KW_STATISTICS && LA71_0 <= KW_SUMMARY)||LA71_0==KW_TABLES||(LA71_0 >= KW_TBLPROPERTIES && LA71_0 <= KW_TERMINATED)||LA71_0==KW_TINYINT||(LA71_0 >= KW_TOUCH && LA71_0 <= KW_TRANSACTIONS)||LA71_0==KW_UNARCHIVE||LA71_0==KW_UNDO||LA71_0==KW_UNIONTYPE||(LA71_0 >= KW_UNKNOWN && LA71_0 <= KW_UNSIGNED)||(LA71_0 >= KW_URI && LA71_0 <= KW_USE)||(LA71_0 >= KW_UTC && LA71_0 <= KW_VALIDATE)||LA71_0==KW_VALUE_TYPE||(LA71_0 >= KW_VECTORIZATION && LA71_0 <= KW_WEEK)||LA71_0==KW_WHILE||(LA71_0 >= KW_WORK && LA71_0 <= KW_ZONE)||LA71_0==KW_BATCH||LA71_0==KW_DAYOFWEEK||LA71_0==KW_HOLD_DDLTIME||LA71_0==KW_IGNORE||LA71_0==KW_NO_DROP||LA71_0==KW_OFFLINE||LA71_0==KW_PROTECTION||LA71_0==KW_READONLY||LA71_0==KW_TIMESTAMPTZ) ) {
				int LA71_2 = input.LA(2);
				if ( (LA71_2==KW_SET) ) {
					switch ( input.LA(3) ) {
					case KW_DBPROPERTIES:
						{
						alt71=1;
						}
						break;
					case KW_OWNER:
						{
						alt71=2;
						}
						break;
					case KW_LOCATION:
						{
						alt71=3;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 71, 4, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 71, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 71, 0, input);
				throw nvae;
			}

			switch (alt71) {
				case 1 :
					// HiveParser.g:1219:7: alterDatabaseSuffixProperties
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterDatabaseSuffixProperties_in_alterDatabaseStatementSuffix4762);
					alterDatabaseSuffixProperties253=alterDatabaseSuffixProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterDatabaseSuffixProperties253.getTree());

					}
					break;
				case 2 :
					// HiveParser.g:1220:7: alterDatabaseSuffixSetOwner
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterDatabaseSuffixSetOwner_in_alterDatabaseStatementSuffix4770);
					alterDatabaseSuffixSetOwner254=alterDatabaseSuffixSetOwner();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterDatabaseSuffixSetOwner254.getTree());

					}
					break;
				case 3 :
					// HiveParser.g:1221:7: alterDatabaseSuffixSetLocation
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterDatabaseSuffixSetLocation_in_alterDatabaseStatementSuffix4778);
					alterDatabaseSuffixSetLocation255=alterDatabaseSuffixSetLocation();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterDatabaseSuffixSetLocation255.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterDatabaseStatementSuffix"


	public static class alterDatabaseSuffixProperties_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterDatabaseSuffixProperties"
	// HiveParser.g:1224:1: alterDatabaseSuffixProperties : name= identifier KW_SET KW_DBPROPERTIES dbProperties -> ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties ) ;
	public final HiveParser.alterDatabaseSuffixProperties_return alterDatabaseSuffixProperties() throws RecognitionException {
		HiveParser.alterDatabaseSuffixProperties_return retval = new HiveParser.alterDatabaseSuffixProperties_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_SET256=null;
		Token KW_DBPROPERTIES257=null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope dbProperties258 =null;

		ASTNode KW_SET256_tree=null;
		ASTNode KW_DBPROPERTIES257_tree=null;
		RewriteRuleTokenStream stream_KW_DBPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_DBPROPERTIES");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_dbProperties=new RewriteRuleSubtreeStream(adaptor,"rule dbProperties");

		 pushMsg(retval.start,"alter database properties statement", state); 
		try {
			// HiveParser.g:1227:5: (name= identifier KW_SET KW_DBPROPERTIES dbProperties -> ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties ) )
			// HiveParser.g:1227:7: name= identifier KW_SET KW_DBPROPERTIES dbProperties
			{
			pushFollow(FOLLOW_identifier_in_alterDatabaseSuffixProperties4807);
			name=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(name.getTree());
			KW_SET256=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterDatabaseSuffixProperties4809); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET256);

			KW_DBPROPERTIES257=(Token)match(input,KW_DBPROPERTIES,FOLLOW_KW_DBPROPERTIES_in_alterDatabaseSuffixProperties4811); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DBPROPERTIES.add(KW_DBPROPERTIES257);

			pushFollow(FOLLOW_dbProperties_in_alterDatabaseSuffixProperties4813);
			dbProperties258=dbProperties();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_dbProperties.add(dbProperties258.getTree());
			// AST REWRITE
			// elements: dbProperties, name
			// token labels: 
			// rule labels: name, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1228:5: -> ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties )
			{
				// HiveParser.g:1228:8: ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERDATABASE_PROPERTIES, "TOK_ALTERDATABASE_PROPERTIES"), root_1);
				adaptor.addChild(root_1, stream_name.nextTree());
				adaptor.addChild(root_1, stream_dbProperties.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterDatabaseSuffixProperties"


	public static class alterDatabaseSuffixSetOwner_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterDatabaseSuffixSetOwner"
	// HiveParser.g:1231:1: alterDatabaseSuffixSetOwner : dbName= identifier KW_SET KW_OWNER principalName -> ^( TOK_ALTERDATABASE_OWNER $dbName principalName ) ;
	public final HiveParser.alterDatabaseSuffixSetOwner_return alterDatabaseSuffixSetOwner() throws RecognitionException {
		HiveParser.alterDatabaseSuffixSetOwner_return retval = new HiveParser.alterDatabaseSuffixSetOwner_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_SET259=null;
		Token KW_OWNER260=null;
		ParserRuleReturnScope dbName =null;
		ParserRuleReturnScope principalName261 =null;

		ASTNode KW_SET259_tree=null;
		ASTNode KW_OWNER260_tree=null;
		RewriteRuleTokenStream stream_KW_OWNER=new RewriteRuleTokenStream(adaptor,"token KW_OWNER");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");

		 pushMsg(retval.start,"alter database set owner", state); 
		try {
			// HiveParser.g:1234:5: (dbName= identifier KW_SET KW_OWNER principalName -> ^( TOK_ALTERDATABASE_OWNER $dbName principalName ) )
			// HiveParser.g:1234:7: dbName= identifier KW_SET KW_OWNER principalName
			{
			pushFollow(FOLLOW_identifier_in_alterDatabaseSuffixSetOwner4857);
			dbName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(dbName.getTree());
			KW_SET259=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterDatabaseSuffixSetOwner4859); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET259);

			KW_OWNER260=(Token)match(input,KW_OWNER,FOLLOW_KW_OWNER_in_alterDatabaseSuffixSetOwner4861); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_OWNER.add(KW_OWNER260);

			pushFollow(FOLLOW_principalName_in_alterDatabaseSuffixSetOwner4863);
			principalName261=principalName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_principalName.add(principalName261.getTree());
			// AST REWRITE
			// elements: dbName, principalName
			// token labels: 
			// rule labels: dbName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_dbName=new RewriteRuleSubtreeStream(adaptor,"rule dbName",dbName!=null?dbName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1235:5: -> ^( TOK_ALTERDATABASE_OWNER $dbName principalName )
			{
				// HiveParser.g:1235:8: ^( TOK_ALTERDATABASE_OWNER $dbName principalName )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERDATABASE_OWNER, "TOK_ALTERDATABASE_OWNER"), root_1);
				adaptor.addChild(root_1, stream_dbName.nextTree());
				adaptor.addChild(root_1, stream_principalName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterDatabaseSuffixSetOwner"


	public static class alterDatabaseSuffixSetLocation_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterDatabaseSuffixSetLocation"
	// HiveParser.g:1238:1: alterDatabaseSuffixSetLocation : dbName= identifier KW_SET KW_LOCATION newLocation= StringLiteral -> ^( TOK_ALTERDATABASE_LOCATION $dbName $newLocation) ;
	public final HiveParser.alterDatabaseSuffixSetLocation_return alterDatabaseSuffixSetLocation() throws RecognitionException {
		HiveParser.alterDatabaseSuffixSetLocation_return retval = new HiveParser.alterDatabaseSuffixSetLocation_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token newLocation=null;
		Token KW_SET262=null;
		Token KW_LOCATION263=null;
		ParserRuleReturnScope dbName =null;

		ASTNode newLocation_tree=null;
		ASTNode KW_SET262_tree=null;
		ASTNode KW_LOCATION263_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg(retval.start,"alter database set location", state); 
		try {
			// HiveParser.g:1241:5: (dbName= identifier KW_SET KW_LOCATION newLocation= StringLiteral -> ^( TOK_ALTERDATABASE_LOCATION $dbName $newLocation) )
			// HiveParser.g:1241:7: dbName= identifier KW_SET KW_LOCATION newLocation= StringLiteral
			{
			pushFollow(FOLLOW_identifier_in_alterDatabaseSuffixSetLocation4907);
			dbName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(dbName.getTree());
			KW_SET262=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterDatabaseSuffixSetLocation4909); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET262);

			KW_LOCATION263=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_alterDatabaseSuffixSetLocation4911); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LOCATION.add(KW_LOCATION263);

			newLocation=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterDatabaseSuffixSetLocation4915); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(newLocation);

			// AST REWRITE
			// elements: dbName, newLocation
			// token labels: newLocation
			// rule labels: dbName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_newLocation=new RewriteRuleTokenStream(adaptor,"token newLocation",newLocation);
			RewriteRuleSubtreeStream stream_dbName=new RewriteRuleSubtreeStream(adaptor,"rule dbName",dbName!=null?dbName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1242:5: -> ^( TOK_ALTERDATABASE_LOCATION $dbName $newLocation)
			{
				// HiveParser.g:1242:8: ^( TOK_ALTERDATABASE_LOCATION $dbName $newLocation)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERDATABASE_LOCATION, "TOK_ALTERDATABASE_LOCATION"), root_1);
				adaptor.addChild(root_1, stream_dbName.nextTree());
				adaptor.addChild(root_1, stream_newLocation.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterDatabaseSuffixSetLocation"


	public static class alterStatementSuffixRename_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixRename"
	// HiveParser.g:1245:1: alterStatementSuffixRename[boolean table] : KW_RENAME KW_TO tableName -> { table }? ^( TOK_ALTERTABLE_RENAME tableName ) -> ^( TOK_ALTERVIEW_RENAME tableName ) ;
	public final HiveParser.alterStatementSuffixRename_return alterStatementSuffixRename(boolean table) throws RecognitionException {
		HiveParser.alterStatementSuffixRename_return retval = new HiveParser.alterStatementSuffixRename_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_RENAME264=null;
		Token KW_TO265=null;
		ParserRuleReturnScope tableName266 =null;

		ASTNode KW_RENAME264_tree=null;
		ASTNode KW_TO265_tree=null;
		RewriteRuleTokenStream stream_KW_RENAME=new RewriteRuleTokenStream(adaptor,"token KW_RENAME");
		RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg(retval.start,"rename statement", state); 
		try {
			// HiveParser.g:1248:5: ( KW_RENAME KW_TO tableName -> { table }? ^( TOK_ALTERTABLE_RENAME tableName ) -> ^( TOK_ALTERVIEW_RENAME tableName ) )
			// HiveParser.g:1248:7: KW_RENAME KW_TO tableName
			{
			KW_RENAME264=(Token)match(input,KW_RENAME,FOLLOW_KW_RENAME_in_alterStatementSuffixRename4959); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_RENAME.add(KW_RENAME264);

			KW_TO265=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_alterStatementSuffixRename4961); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TO.add(KW_TO265);

			pushFollow(FOLLOW_tableName_in_alterStatementSuffixRename4963);
			tableName266=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tableName266.getTree());
			// AST REWRITE
			// elements: tableName, tableName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1249:5: -> { table }? ^( TOK_ALTERTABLE_RENAME tableName )
			if ( table ) {
				// HiveParser.g:1249:19: ^( TOK_ALTERTABLE_RENAME tableName )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_RENAME, "TOK_ALTERTABLE_RENAME"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1250:5: -> ^( TOK_ALTERVIEW_RENAME tableName )
			{
				// HiveParser.g:1250:19: ^( TOK_ALTERVIEW_RENAME tableName )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERVIEW_RENAME, "TOK_ALTERVIEW_RENAME"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixRename"


	public static class alterStatementSuffixAddCol_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixAddCol"
	// HiveParser.g:1253:1: alterStatementSuffixAddCol : (add= KW_ADD |replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN ( restrictOrCascade )? -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS columnNameTypeList ( restrictOrCascade )? ) -> ^( TOK_ALTERTABLE_REPLACECOLS columnNameTypeList ( restrictOrCascade )? ) ;
	public final HiveParser.alterStatementSuffixAddCol_return alterStatementSuffixAddCol() throws RecognitionException {
		HiveParser.alterStatementSuffixAddCol_return retval = new HiveParser.alterStatementSuffixAddCol_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token add=null;
		Token replace=null;
		Token KW_COLUMNS267=null;
		Token LPAREN268=null;
		Token RPAREN270=null;
		ParserRuleReturnScope columnNameTypeList269 =null;
		ParserRuleReturnScope restrictOrCascade271 =null;

		ASTNode add_tree=null;
		ASTNode replace_tree=null;
		ASTNode KW_COLUMNS267_tree=null;
		ASTNode LPAREN268_tree=null;
		ASTNode RPAREN270_tree=null;
		RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_REPLACE=new RewriteRuleTokenStream(adaptor,"token KW_REPLACE");
		RewriteRuleTokenStream stream_KW_ADD=new RewriteRuleTokenStream(adaptor,"token KW_ADD");
		RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
		RewriteRuleSubtreeStream stream_restrictOrCascade=new RewriteRuleSubtreeStream(adaptor,"rule restrictOrCascade");

		 pushMsg(retval.start,"add column statement", state); 
		try {
			// HiveParser.g:1256:5: ( (add= KW_ADD |replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN ( restrictOrCascade )? -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS columnNameTypeList ( restrictOrCascade )? ) -> ^( TOK_ALTERTABLE_REPLACECOLS columnNameTypeList ( restrictOrCascade )? ) )
			// HiveParser.g:1256:7: (add= KW_ADD |replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN ( restrictOrCascade )?
			{
			// HiveParser.g:1256:7: (add= KW_ADD |replace= KW_REPLACE )
			int alt72=2;
			int LA72_0 = input.LA(1);
			if ( (LA72_0==KW_ADD) ) {
				alt72=1;
			}
			else if ( (LA72_0==KW_REPLACE) ) {
				alt72=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 72, 0, input);
				throw nvae;
			}

			switch (alt72) {
				case 1 :
					// HiveParser.g:1256:8: add= KW_ADD
					{
					add=(Token)match(input,KW_ADD,FOLLOW_KW_ADD_in_alterStatementSuffixAddCol5030); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ADD.add(add);

					}
					break;
				case 2 :
					// HiveParser.g:1256:21: replace= KW_REPLACE
					{
					replace=(Token)match(input,KW_REPLACE,FOLLOW_KW_REPLACE_in_alterStatementSuffixAddCol5036); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_REPLACE.add(replace);

					}
					break;

			}

			KW_COLUMNS267=(Token)match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_alterStatementSuffixAddCol5039); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_COLUMNS.add(KW_COLUMNS267);

			LPAREN268=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alterStatementSuffixAddCol5041); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN268);

			pushFollow(FOLLOW_columnNameTypeList_in_alterStatementSuffixAddCol5043);
			columnNameTypeList269=columnNameTypeList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameTypeList.add(columnNameTypeList269.getTree());
			RPAREN270=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alterStatementSuffixAddCol5045); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN270);

			// HiveParser.g:1256:85: ( restrictOrCascade )?
			int alt73=2;
			int LA73_0 = input.LA(1);
			if ( (LA73_0==KW_CASCADE||LA73_0==KW_RESTRICT) ) {
				alt73=1;
			}
			switch (alt73) {
				case 1 :
					// HiveParser.g:1256:85: restrictOrCascade
					{
					pushFollow(FOLLOW_restrictOrCascade_in_alterStatementSuffixAddCol5047);
					restrictOrCascade271=restrictOrCascade();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_restrictOrCascade.add(restrictOrCascade271.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: restrictOrCascade, restrictOrCascade, columnNameTypeList, columnNameTypeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1257:5: -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS columnNameTypeList ( restrictOrCascade )? )
			if (add != null) {
				// HiveParser.g:1257:24: ^( TOK_ALTERTABLE_ADDCOLS columnNameTypeList ( restrictOrCascade )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_ADDCOLS, "TOK_ALTERTABLE_ADDCOLS"), root_1);
				adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());
				// HiveParser.g:1257:68: ( restrictOrCascade )?
				if ( stream_restrictOrCascade.hasNext() ) {
					adaptor.addChild(root_1, stream_restrictOrCascade.nextTree());
				}
				stream_restrictOrCascade.reset();

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1258:5: -> ^( TOK_ALTERTABLE_REPLACECOLS columnNameTypeList ( restrictOrCascade )? )
			{
				// HiveParser.g:1258:24: ^( TOK_ALTERTABLE_REPLACECOLS columnNameTypeList ( restrictOrCascade )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_REPLACECOLS, "TOK_ALTERTABLE_REPLACECOLS"), root_1);
				adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());
				// HiveParser.g:1258:72: ( restrictOrCascade )?
				if ( stream_restrictOrCascade.hasNext() ) {
					adaptor.addChild(root_1, stream_restrictOrCascade.nextTree());
				}
				stream_restrictOrCascade.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixAddCol"


	public static class alterStatementSuffixAddConstraint_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixAddConstraint"
	// HiveParser.g:1261:1: alterStatementSuffixAddConstraint : KW_ADD (fk= alterForeignKeyWithName | alterConstraintWithName ) -> {fk != null}? ^( TOK_ALTERTABLE_ADDCONSTRAINT alterForeignKeyWithName ) -> ^( TOK_ALTERTABLE_ADDCONSTRAINT alterConstraintWithName ) ;
	public final HiveParser.alterStatementSuffixAddConstraint_return alterStatementSuffixAddConstraint() throws RecognitionException {
		HiveParser.alterStatementSuffixAddConstraint_return retval = new HiveParser.alterStatementSuffixAddConstraint_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_ADD272=null;
		ParserRuleReturnScope fk =null;
		ParserRuleReturnScope alterConstraintWithName273 =null;

		ASTNode KW_ADD272_tree=null;
		RewriteRuleTokenStream stream_KW_ADD=new RewriteRuleTokenStream(adaptor,"token KW_ADD");
		RewriteRuleSubtreeStream stream_alterForeignKeyWithName=new RewriteRuleSubtreeStream(adaptor,"rule alterForeignKeyWithName");
		RewriteRuleSubtreeStream stream_alterConstraintWithName=new RewriteRuleSubtreeStream(adaptor,"rule alterConstraintWithName");

		 pushMsg(retval.start,"add constraint statement", state); 
		try {
			// HiveParser.g:1264:4: ( KW_ADD (fk= alterForeignKeyWithName | alterConstraintWithName ) -> {fk != null}? ^( TOK_ALTERTABLE_ADDCONSTRAINT alterForeignKeyWithName ) -> ^( TOK_ALTERTABLE_ADDCONSTRAINT alterConstraintWithName ) )
			// HiveParser.g:1264:7: KW_ADD (fk= alterForeignKeyWithName | alterConstraintWithName )
			{
			KW_ADD272=(Token)match(input,KW_ADD,FOLLOW_KW_ADD_in_alterStatementSuffixAddConstraint5123); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ADD.add(KW_ADD272);

			// HiveParser.g:1264:14: (fk= alterForeignKeyWithName | alterConstraintWithName )
			int alt74=2;
			int LA74_0 = input.LA(1);
			if ( (LA74_0==KW_CONSTRAINT) ) {
				int LA74_1 = input.LA(2);
				if ( (LA74_1==Identifier) ) {
					int LA74_2 = input.LA(3);
					if ( (LA74_2==KW_FOREIGN) ) {
						alt74=1;
					}
					else if ( (LA74_2==KW_CHECK||LA74_2==KW_PRIMARY||LA74_2==KW_UNIQUE) ) {
						alt74=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 74, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( ((LA74_1 >= KW_ABORT && LA74_1 <= KW_AFTER)||LA74_1==KW_ALLOC_FRACTION||LA74_1==KW_ANALYZE||LA74_1==KW_ARCHIVE||(LA74_1 >= KW_ASC && LA74_1 <= KW_AST)||(LA74_1 >= KW_AUTOCOMMIT && LA74_1 <= KW_BEFORE)||(LA74_1 >= KW_BUCKET && LA74_1 <= KW_BUCKETS)||(LA74_1 >= KW_CACHE && LA74_1 <= KW_CASCADE)||LA74_1==KW_CHANGE||(LA74_1 >= KW_CHECK && LA74_1 <= KW_COLLECTION)||(LA74_1 >= KW_COLUMNS && LA74_1 <= KW_COMMENT)||(LA74_1 >= KW_COMPACT && LA74_1 <= KW_CONCATENATE)||LA74_1==KW_CONTINUE||LA74_1==KW_DATA||(LA74_1 >= KW_DATABASES && LA74_1 <= KW_DEBUG)||(LA74_1 >= KW_DEFAULT && LA74_1 <= KW_DEFINED)||(LA74_1 >= KW_DELIMITED && LA74_1 <= KW_DESC)||(LA74_1 >= KW_DETAIL && LA74_1 <= KW_DISABLE)||(LA74_1 >= KW_DISTRIBUTE && LA74_1 <= KW_DO)||LA74_1==KW_DOW||(LA74_1 >= KW_DUMP && LA74_1 <= KW_ELEM_TYPE)||LA74_1==KW_ENABLE||(LA74_1 >= KW_ENFORCED && LA74_1 <= KW_ESCAPED)||LA74_1==KW_EXCLUSIVE||(LA74_1 >= KW_EXPLAIN && LA74_1 <= KW_EXPRESSION)||(LA74_1 >= KW_FIELDS && LA74_1 <= KW_FIRST)||(LA74_1 >= KW_FORMAT && LA74_1 <= KW_FORMATTED)||LA74_1==KW_FUNCTIONS||LA74_1==KW_GROUP||(LA74_1 >= KW_HOUR && LA74_1 <= KW_IDXPROPERTIES)||(LA74_1 >= KW_INDEX && LA74_1 <= KW_INDEXES)||(LA74_1 >= KW_INPATH && LA74_1 <= KW_INPUTFORMAT)||(LA74_1 >= KW_ISOLATION && LA74_1 <= KW_JAR)||(LA74_1 >= KW_KEY && LA74_1 <= KW_LAST)||LA74_1==KW_LEVEL||(LA74_1 >= KW_LIMIT && LA74_1 <= KW_LOAD)||(LA74_1 >= KW_LOCATION && LA74_1 <= KW_LONG)||LA74_1==KW_MANAGEMENT||(LA74_1 >= KW_MAPJOIN && LA74_1 <= KW_MATERIALIZED)||LA74_1==KW_METADATA||(LA74_1 >= KW_MINUTE && LA74_1 <= KW_MONTH)||(LA74_1 >= KW_MOVE && LA74_1 <= KW_MSCK)||(LA74_1 >= KW_NORELY && LA74_1 <= KW_NOSCAN)||LA74_1==KW_NOVALIDATE||LA74_1==KW_NULLS||LA74_1==KW_OFFSET||(LA74_1 >= KW_OPERATOR && LA74_1 <= KW_OPTION)||LA74_1==KW_ORDER||(LA74_1 >= KW_OUTPUTDRIVER && LA74_1 <= KW_OUTPUTFORMAT)||(LA74_1 >= KW_OVERWRITE && LA74_1 <= KW_OWNER)||(LA74_1 >= KW_PARTITIONED && LA74_1 <= KW_PATH)||(LA74_1 >= KW_PLAN && LA74_1 <= KW_POOL)||LA74_1==KW_PRINCIPALS||(LA74_1 >= KW_PURGE && LA74_1 <= KW_QUERY_PARALLELISM)||LA74_1==KW_READ||(LA74_1 >= KW_REBUILD && LA74_1 <= KW_RECORDWRITER)||(LA74_1 >= KW_RELOAD && LA74_1 <= KW_RESTRICT)||LA74_1==KW_REWRITE||(LA74_1 >= KW_ROLE && LA74_1 <= KW_ROLES)||(LA74_1 >= KW_SCHEDULING_POLICY && LA74_1 <= KW_SECOND)||(LA74_1 >= KW_SEMI && LA74_1 <= KW_SERVER)||(LA74_1 >= KW_SETS && LA74_1 <= KW_SKEWED)||(LA74_1 >= KW_SNAPSHOT && LA74_1 <= KW_SSL)||(LA74_1 >= KW_STATISTICS && LA74_1 <= KW_SUMMARY)||LA74_1==KW_TABLES||(LA74_1 >= KW_TBLPROPERTIES && LA74_1 <= KW_TERMINATED)||LA74_1==KW_TINYINT||(LA74_1 >= KW_TOUCH && LA74_1 <= KW_TRANSACTIONS)||LA74_1==KW_UNARCHIVE||LA74_1==KW_UNDO||LA74_1==KW_UNIONTYPE||(LA74_1 >= KW_UNKNOWN && LA74_1 <= KW_UNSIGNED)||(LA74_1 >= KW_URI && LA74_1 <= KW_USE)||(LA74_1 >= KW_UTC && LA74_1 <= KW_VALIDATE)||LA74_1==KW_VALUE_TYPE||(LA74_1 >= KW_VECTORIZATION && LA74_1 <= KW_WEEK)||LA74_1==KW_WHILE||(LA74_1 >= KW_WORK && LA74_1 <= KW_ZONE)||LA74_1==KW_BATCH||LA74_1==KW_DAYOFWEEK||LA74_1==KW_HOLD_DDLTIME||LA74_1==KW_IGNORE||LA74_1==KW_NO_DROP||LA74_1==KW_OFFLINE||LA74_1==KW_PROTECTION||LA74_1==KW_READONLY||LA74_1==KW_TIMESTAMPTZ) ) {
					int LA74_3 = input.LA(3);
					if ( (LA74_3==KW_FOREIGN) ) {
						alt74=1;
					}
					else if ( (LA74_3==KW_CHECK||LA74_3==KW_PRIMARY||LA74_3==KW_UNIQUE) ) {
						alt74=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 74, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 74, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 74, 0, input);
				throw nvae;
			}

			switch (alt74) {
				case 1 :
					// HiveParser.g:1264:15: fk= alterForeignKeyWithName
					{
					pushFollow(FOLLOW_alterForeignKeyWithName_in_alterStatementSuffixAddConstraint5128);
					fk=alterForeignKeyWithName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterForeignKeyWithName.add(fk.getTree());
					}
					break;
				case 2 :
					// HiveParser.g:1264:44: alterConstraintWithName
					{
					pushFollow(FOLLOW_alterConstraintWithName_in_alterStatementSuffixAddConstraint5132);
					alterConstraintWithName273=alterConstraintWithName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterConstraintWithName.add(alterConstraintWithName273.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: alterForeignKeyWithName, alterConstraintWithName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1265:4: -> {fk != null}? ^( TOK_ALTERTABLE_ADDCONSTRAINT alterForeignKeyWithName )
			if (fk != null) {
				// HiveParser.g:1265:21: ^( TOK_ALTERTABLE_ADDCONSTRAINT alterForeignKeyWithName )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_ADDCONSTRAINT, "TOK_ALTERTABLE_ADDCONSTRAINT"), root_1);
				adaptor.addChild(root_1, stream_alterForeignKeyWithName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1266:4: -> ^( TOK_ALTERTABLE_ADDCONSTRAINT alterConstraintWithName )
			{
				// HiveParser.g:1266:21: ^( TOK_ALTERTABLE_ADDCONSTRAINT alterConstraintWithName )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_ADDCONSTRAINT, "TOK_ALTERTABLE_ADDCONSTRAINT"), root_1);
				adaptor.addChild(root_1, stream_alterConstraintWithName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixAddConstraint"


	public static class alterStatementSuffixUpdateColumns_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixUpdateColumns"
	// HiveParser.g:1269:1: alterStatementSuffixUpdateColumns : KW_UPDATE KW_COLUMNS ( restrictOrCascade )? -> ^( TOK_ALTERTABLE_UPDATECOLUMNS ( restrictOrCascade )? ) ;
	public final HiveParser.alterStatementSuffixUpdateColumns_return alterStatementSuffixUpdateColumns() throws RecognitionException {
		HiveParser.alterStatementSuffixUpdateColumns_return retval = new HiveParser.alterStatementSuffixUpdateColumns_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_UPDATE274=null;
		Token KW_COLUMNS275=null;
		ParserRuleReturnScope restrictOrCascade276 =null;

		ASTNode KW_UPDATE274_tree=null;
		ASTNode KW_COLUMNS275_tree=null;
		RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
		RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
		RewriteRuleSubtreeStream stream_restrictOrCascade=new RewriteRuleSubtreeStream(adaptor,"rule restrictOrCascade");

		 pushMsg(retval.start,"update columns statement", state); 
		try {
			// HiveParser.g:1272:5: ( KW_UPDATE KW_COLUMNS ( restrictOrCascade )? -> ^( TOK_ALTERTABLE_UPDATECOLUMNS ( restrictOrCascade )? ) )
			// HiveParser.g:1272:7: KW_UPDATE KW_COLUMNS ( restrictOrCascade )?
			{
			KW_UPDATE274=(Token)match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_alterStatementSuffixUpdateColumns5197); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_UPDATE.add(KW_UPDATE274);

			KW_COLUMNS275=(Token)match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_alterStatementSuffixUpdateColumns5199); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_COLUMNS.add(KW_COLUMNS275);

			// HiveParser.g:1272:28: ( restrictOrCascade )?
			int alt75=2;
			int LA75_0 = input.LA(1);
			if ( (LA75_0==KW_CASCADE||LA75_0==KW_RESTRICT) ) {
				alt75=1;
			}
			switch (alt75) {
				case 1 :
					// HiveParser.g:1272:28: restrictOrCascade
					{
					pushFollow(FOLLOW_restrictOrCascade_in_alterStatementSuffixUpdateColumns5201);
					restrictOrCascade276=restrictOrCascade();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_restrictOrCascade.add(restrictOrCascade276.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: restrictOrCascade
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1273:5: -> ^( TOK_ALTERTABLE_UPDATECOLUMNS ( restrictOrCascade )? )
			{
				// HiveParser.g:1273:8: ^( TOK_ALTERTABLE_UPDATECOLUMNS ( restrictOrCascade )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_UPDATECOLUMNS, "TOK_ALTERTABLE_UPDATECOLUMNS"), root_1);
				// HiveParser.g:1273:39: ( restrictOrCascade )?
				if ( stream_restrictOrCascade.hasNext() ) {
					adaptor.addChild(root_1, stream_restrictOrCascade.nextTree());
				}
				stream_restrictOrCascade.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixUpdateColumns"


	public static class alterStatementSuffixDropConstraint_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixDropConstraint"
	// HiveParser.g:1276:1: alterStatementSuffixDropConstraint : KW_DROP KW_CONSTRAINT cName= identifier -> ^( TOK_ALTERTABLE_DROPCONSTRAINT $cName) ;
	public final HiveParser.alterStatementSuffixDropConstraint_return alterStatementSuffixDropConstraint() throws RecognitionException {
		HiveParser.alterStatementSuffixDropConstraint_return retval = new HiveParser.alterStatementSuffixDropConstraint_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_DROP277=null;
		Token KW_CONSTRAINT278=null;
		ParserRuleReturnScope cName =null;

		ASTNode KW_DROP277_tree=null;
		ASTNode KW_CONSTRAINT278_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_CONSTRAINT=new RewriteRuleTokenStream(adaptor,"token KW_CONSTRAINT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg(retval.start,"drop constraint statement", state); 
		try {
			// HiveParser.g:1279:4: ( KW_DROP KW_CONSTRAINT cName= identifier -> ^( TOK_ALTERTABLE_DROPCONSTRAINT $cName) )
			// HiveParser.g:1279:6: KW_DROP KW_CONSTRAINT cName= identifier
			{
			KW_DROP277=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_alterStatementSuffixDropConstraint5241); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP277);

			KW_CONSTRAINT278=(Token)match(input,KW_CONSTRAINT,FOLLOW_KW_CONSTRAINT_in_alterStatementSuffixDropConstraint5243); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CONSTRAINT.add(KW_CONSTRAINT278);

			pushFollow(FOLLOW_identifier_in_alterStatementSuffixDropConstraint5247);
			cName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(cName.getTree());
			// AST REWRITE
			// elements: cName
			// token labels: 
			// rule labels: cName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_cName=new RewriteRuleSubtreeStream(adaptor,"rule cName",cName!=null?cName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1280:4: -> ^( TOK_ALTERTABLE_DROPCONSTRAINT $cName)
			{
				// HiveParser.g:1280:6: ^( TOK_ALTERTABLE_DROPCONSTRAINT $cName)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_DROPCONSTRAINT, "TOK_ALTERTABLE_DROPCONSTRAINT"), root_1);
				adaptor.addChild(root_1, stream_cName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixDropConstraint"


	public static class alterStatementSuffixRenameCol_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixRenameCol"
	// HiveParser.g:1283:1: alterStatementSuffixRenameCol : KW_CHANGE ( KW_COLUMN )? oldName= identifier newName= identifier colType ( alterColumnConstraint[$newName.tree] )? ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )? ( restrictOrCascade )? -> ^( TOK_ALTERTABLE_RENAMECOL $oldName $newName colType ( $comment)? ( alterColumnConstraint )? ( alterStatementChangeColPosition )? ( restrictOrCascade )? ) ;
	public final HiveParser.alterStatementSuffixRenameCol_return alterStatementSuffixRenameCol() throws RecognitionException {
		HiveParser.alterStatementSuffixRenameCol_return retval = new HiveParser.alterStatementSuffixRenameCol_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token comment=null;
		Token KW_CHANGE279=null;
		Token KW_COLUMN280=null;
		Token KW_COMMENT283=null;
		ParserRuleReturnScope oldName =null;
		ParserRuleReturnScope newName =null;
		ParserRuleReturnScope colType281 =null;
		ParserRuleReturnScope alterColumnConstraint282 =null;
		ParserRuleReturnScope alterStatementChangeColPosition284 =null;
		ParserRuleReturnScope restrictOrCascade285 =null;

		ASTNode comment_tree=null;
		ASTNode KW_CHANGE279_tree=null;
		ASTNode KW_COLUMN280_tree=null;
		ASTNode KW_COMMENT283_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
		RewriteRuleTokenStream stream_KW_COLUMN=new RewriteRuleTokenStream(adaptor,"token KW_COLUMN");
		RewriteRuleTokenStream stream_KW_CHANGE=new RewriteRuleTokenStream(adaptor,"token KW_CHANGE");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
		RewriteRuleSubtreeStream stream_alterStatementChangeColPosition=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementChangeColPosition");
		RewriteRuleSubtreeStream stream_restrictOrCascade=new RewriteRuleSubtreeStream(adaptor,"rule restrictOrCascade");
		RewriteRuleSubtreeStream stream_alterColumnConstraint=new RewriteRuleSubtreeStream(adaptor,"rule alterColumnConstraint");

		 pushMsg(retval.start,"rename column name", state); 
		try {
			// HiveParser.g:1286:5: ( KW_CHANGE ( KW_COLUMN )? oldName= identifier newName= identifier colType ( alterColumnConstraint[$newName.tree] )? ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )? ( restrictOrCascade )? -> ^( TOK_ALTERTABLE_RENAMECOL $oldName $newName colType ( $comment)? ( alterColumnConstraint )? ( alterStatementChangeColPosition )? ( restrictOrCascade )? ) )
			// HiveParser.g:1286:7: KW_CHANGE ( KW_COLUMN )? oldName= identifier newName= identifier colType ( alterColumnConstraint[$newName.tree] )? ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )? ( restrictOrCascade )?
			{
			KW_CHANGE279=(Token)match(input,KW_CHANGE,FOLLOW_KW_CHANGE_in_alterStatementSuffixRenameCol5284); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CHANGE.add(KW_CHANGE279);

			// HiveParser.g:1286:17: ( KW_COLUMN )?
			int alt76=2;
			int LA76_0 = input.LA(1);
			if ( (LA76_0==KW_COLUMN) ) {
				alt76=1;
			}
			switch (alt76) {
				case 1 :
					// HiveParser.g:1286:17: KW_COLUMN
					{
					KW_COLUMN280=(Token)match(input,KW_COLUMN,FOLLOW_KW_COLUMN_in_alterStatementSuffixRenameCol5286); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COLUMN.add(KW_COLUMN280);

					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_alterStatementSuffixRenameCol5291);
			oldName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(oldName.getTree());
			pushFollow(FOLLOW_identifier_in_alterStatementSuffixRenameCol5295);
			newName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(newName.getTree());
			pushFollow(FOLLOW_colType_in_alterStatementSuffixRenameCol5297);
			colType281=colType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_colType.add(colType281.getTree());
			// HiveParser.g:1286:74: ( alterColumnConstraint[$newName.tree] )?
			int alt77=2;
			int LA77_0 = input.LA(1);
			if ( (LA77_0==KW_CHECK||LA77_0==KW_CONSTRAINT||LA77_0==KW_DEFAULT||LA77_0==KW_NOT||LA77_0==KW_PRIMARY||LA77_0==KW_REFERENCES||LA77_0==KW_UNIQUE) ) {
				alt77=1;
			}
			switch (alt77) {
				case 1 :
					// HiveParser.g:1286:74: alterColumnConstraint[$newName.tree]
					{
					pushFollow(FOLLOW_alterColumnConstraint_in_alterStatementSuffixRenameCol5299);
					alterColumnConstraint282=alterColumnConstraint((newName!=null?((ASTNode)newName.getTree()):null));
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterColumnConstraint.add(alterColumnConstraint282.getTree());
					}
					break;

			}

			// HiveParser.g:1286:112: ( KW_COMMENT comment= StringLiteral )?
			int alt78=2;
			int LA78_0 = input.LA(1);
			if ( (LA78_0==KW_COMMENT) ) {
				alt78=1;
			}
			switch (alt78) {
				case 1 :
					// HiveParser.g:1286:113: KW_COMMENT comment= StringLiteral
					{
					KW_COMMENT283=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_alterStatementSuffixRenameCol5304); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT283);

					comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixRenameCol5308); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(comment);

					}
					break;

			}

			// HiveParser.g:1286:148: ( alterStatementChangeColPosition )?
			int alt79=2;
			int LA79_0 = input.LA(1);
			if ( (LA79_0==KW_AFTER||LA79_0==KW_FIRST) ) {
				alt79=1;
			}
			switch (alt79) {
				case 1 :
					// HiveParser.g:1286:148: alterStatementChangeColPosition
					{
					pushFollow(FOLLOW_alterStatementChangeColPosition_in_alterStatementSuffixRenameCol5312);
					alterStatementChangeColPosition284=alterStatementChangeColPosition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterStatementChangeColPosition.add(alterStatementChangeColPosition284.getTree());
					}
					break;

			}

			// HiveParser.g:1286:181: ( restrictOrCascade )?
			int alt80=2;
			int LA80_0 = input.LA(1);
			if ( (LA80_0==KW_CASCADE||LA80_0==KW_RESTRICT) ) {
				alt80=1;
			}
			switch (alt80) {
				case 1 :
					// HiveParser.g:1286:181: restrictOrCascade
					{
					pushFollow(FOLLOW_restrictOrCascade_in_alterStatementSuffixRenameCol5315);
					restrictOrCascade285=restrictOrCascade();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_restrictOrCascade.add(restrictOrCascade285.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: restrictOrCascade, colType, comment, newName, oldName, alterStatementChangeColPosition, alterColumnConstraint
			// token labels: comment
			// rule labels: newName, oldName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_newName=new RewriteRuleSubtreeStream(adaptor,"rule newName",newName!=null?newName.getTree():null);
			RewriteRuleSubtreeStream stream_oldName=new RewriteRuleSubtreeStream(adaptor,"rule oldName",oldName!=null?oldName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1287:5: -> ^( TOK_ALTERTABLE_RENAMECOL $oldName $newName colType ( $comment)? ( alterColumnConstraint )? ( alterStatementChangeColPosition )? ( restrictOrCascade )? )
			{
				// HiveParser.g:1287:7: ^( TOK_ALTERTABLE_RENAMECOL $oldName $newName colType ( $comment)? ( alterColumnConstraint )? ( alterStatementChangeColPosition )? ( restrictOrCascade )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_RENAMECOL, "TOK_ALTERTABLE_RENAMECOL"), root_1);
				adaptor.addChild(root_1, stream_oldName.nextTree());
				adaptor.addChild(root_1, stream_newName.nextTree());
				adaptor.addChild(root_1, stream_colType.nextTree());
				// HiveParser.g:1287:61: ( $comment)?
				if ( stream_comment.hasNext() ) {
					adaptor.addChild(root_1, stream_comment.nextNode());
				}
				stream_comment.reset();

				// HiveParser.g:1287:70: ( alterColumnConstraint )?
				if ( stream_alterColumnConstraint.hasNext() ) {
					adaptor.addChild(root_1, stream_alterColumnConstraint.nextTree());
				}
				stream_alterColumnConstraint.reset();

				// HiveParser.g:1287:93: ( alterStatementChangeColPosition )?
				if ( stream_alterStatementChangeColPosition.hasNext() ) {
					adaptor.addChild(root_1, stream_alterStatementChangeColPosition.nextTree());
				}
				stream_alterStatementChangeColPosition.reset();

				// HiveParser.g:1287:126: ( restrictOrCascade )?
				if ( stream_restrictOrCascade.hasNext() ) {
					adaptor.addChild(root_1, stream_restrictOrCascade.nextTree());
				}
				stream_restrictOrCascade.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixRenameCol"


	public static class alterStatementSuffixUpdateStatsCol_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixUpdateStatsCol"
	// HiveParser.g:1290:1: alterStatementSuffixUpdateStatsCol : KW_UPDATE KW_STATISTICS KW_FOR ( KW_COLUMN )? colName= identifier KW_SET tableProperties ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? ) ;
	public final HiveParser.alterStatementSuffixUpdateStatsCol_return alterStatementSuffixUpdateStatsCol() throws RecognitionException {
		HiveParser.alterStatementSuffixUpdateStatsCol_return retval = new HiveParser.alterStatementSuffixUpdateStatsCol_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token comment=null;
		Token KW_UPDATE286=null;
		Token KW_STATISTICS287=null;
		Token KW_FOR288=null;
		Token KW_COLUMN289=null;
		Token KW_SET290=null;
		Token KW_COMMENT292=null;
		ParserRuleReturnScope colName =null;
		ParserRuleReturnScope tableProperties291 =null;

		ASTNode comment_tree=null;
		ASTNode KW_UPDATE286_tree=null;
		ASTNode KW_STATISTICS287_tree=null;
		ASTNode KW_FOR288_tree=null;
		ASTNode KW_COLUMN289_tree=null;
		ASTNode KW_SET290_tree=null;
		ASTNode KW_COMMENT292_tree=null;
		RewriteRuleTokenStream stream_KW_STATISTICS=new RewriteRuleTokenStream(adaptor,"token KW_STATISTICS");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
		RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
		RewriteRuleTokenStream stream_KW_COLUMN=new RewriteRuleTokenStream(adaptor,"token KW_COLUMN");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");

		 pushMsg(retval.start,"update column statistics", state); 
		try {
			// HiveParser.g:1293:5: ( KW_UPDATE KW_STATISTICS KW_FOR ( KW_COLUMN )? colName= identifier KW_SET tableProperties ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? ) )
			// HiveParser.g:1293:7: KW_UPDATE KW_STATISTICS KW_FOR ( KW_COLUMN )? colName= identifier KW_SET tableProperties ( KW_COMMENT comment= StringLiteral )?
			{
			KW_UPDATE286=(Token)match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_alterStatementSuffixUpdateStatsCol5373); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_UPDATE.add(KW_UPDATE286);

			KW_STATISTICS287=(Token)match(input,KW_STATISTICS,FOLLOW_KW_STATISTICS_in_alterStatementSuffixUpdateStatsCol5375); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_STATISTICS.add(KW_STATISTICS287);

			KW_FOR288=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_alterStatementSuffixUpdateStatsCol5377); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FOR.add(KW_FOR288);

			// HiveParser.g:1293:38: ( KW_COLUMN )?
			int alt81=2;
			int LA81_0 = input.LA(1);
			if ( (LA81_0==KW_COLUMN) ) {
				alt81=1;
			}
			switch (alt81) {
				case 1 :
					// HiveParser.g:1293:38: KW_COLUMN
					{
					KW_COLUMN289=(Token)match(input,KW_COLUMN,FOLLOW_KW_COLUMN_in_alterStatementSuffixUpdateStatsCol5379); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COLUMN.add(KW_COLUMN289);

					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_alterStatementSuffixUpdateStatsCol5384);
			colName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(colName.getTree());
			KW_SET290=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixUpdateStatsCol5386); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET290);

			pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixUpdateStatsCol5388);
			tableProperties291=tableProperties();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties291.getTree());
			// HiveParser.g:1293:91: ( KW_COMMENT comment= StringLiteral )?
			int alt82=2;
			int LA82_0 = input.LA(1);
			if ( (LA82_0==KW_COMMENT) ) {
				alt82=1;
			}
			switch (alt82) {
				case 1 :
					// HiveParser.g:1293:92: KW_COMMENT comment= StringLiteral
					{
					KW_COMMENT292=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_alterStatementSuffixUpdateStatsCol5391); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT292);

					comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixUpdateStatsCol5395); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(comment);

					}
					break;

			}

			// AST REWRITE
			// elements: comment, colName, tableProperties
			// token labels: comment
			// rule labels: colName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1294:5: -> ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? )
			{
				// HiveParser.g:1294:7: ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_UPDATECOLSTATS, "TOK_ALTERTABLE_UPDATECOLSTATS"), root_1);
				adaptor.addChild(root_1, stream_colName.nextTree());
				adaptor.addChild(root_1, stream_tableProperties.nextTree());
				// HiveParser.g:1294:65: ( $comment)?
				if ( stream_comment.hasNext() ) {
					adaptor.addChild(root_1, stream_comment.nextNode());
				}
				stream_comment.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixUpdateStatsCol"


	public static class alterStatementSuffixUpdateStats_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixUpdateStats"
	// HiveParser.g:1297:1: alterStatementSuffixUpdateStats : KW_UPDATE KW_STATISTICS KW_SET tableProperties -> ^( TOK_ALTERTABLE_UPDATESTATS tableProperties ) ;
	public final HiveParser.alterStatementSuffixUpdateStats_return alterStatementSuffixUpdateStats() throws RecognitionException {
		HiveParser.alterStatementSuffixUpdateStats_return retval = new HiveParser.alterStatementSuffixUpdateStats_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_UPDATE293=null;
		Token KW_STATISTICS294=null;
		Token KW_SET295=null;
		ParserRuleReturnScope tableProperties296 =null;

		ASTNode KW_UPDATE293_tree=null;
		ASTNode KW_STATISTICS294_tree=null;
		ASTNode KW_SET295_tree=null;
		RewriteRuleTokenStream stream_KW_STATISTICS=new RewriteRuleTokenStream(adaptor,"token KW_STATISTICS");
		RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");

		 pushMsg(retval.start,"update basic statistics", state); 
		try {
			// HiveParser.g:1300:5: ( KW_UPDATE KW_STATISTICS KW_SET tableProperties -> ^( TOK_ALTERTABLE_UPDATESTATS tableProperties ) )
			// HiveParser.g:1300:7: KW_UPDATE KW_STATISTICS KW_SET tableProperties
			{
			KW_UPDATE293=(Token)match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_alterStatementSuffixUpdateStats5442); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_UPDATE.add(KW_UPDATE293);

			KW_STATISTICS294=(Token)match(input,KW_STATISTICS,FOLLOW_KW_STATISTICS_in_alterStatementSuffixUpdateStats5444); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_STATISTICS.add(KW_STATISTICS294);

			KW_SET295=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixUpdateStats5446); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET295);

			pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixUpdateStats5448);
			tableProperties296=tableProperties();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties296.getTree());
			// AST REWRITE
			// elements: tableProperties
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1301:5: -> ^( TOK_ALTERTABLE_UPDATESTATS tableProperties )
			{
				// HiveParser.g:1301:7: ^( TOK_ALTERTABLE_UPDATESTATS tableProperties )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_UPDATESTATS, "TOK_ALTERTABLE_UPDATESTATS"), root_1);
				adaptor.addChild(root_1, stream_tableProperties.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixUpdateStats"


	public static class alterStatementChangeColPosition_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementChangeColPosition"
	// HiveParser.g:1304:1: alterStatementChangeColPosition : (first= KW_FIRST | KW_AFTER afterCol= identifier -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION ) -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol) );
	public final HiveParser.alterStatementChangeColPosition_return alterStatementChangeColPosition() throws RecognitionException {
		HiveParser.alterStatementChangeColPosition_return retval = new HiveParser.alterStatementChangeColPosition_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token first=null;
		Token KW_AFTER297=null;
		ParserRuleReturnScope afterCol =null;

		ASTNode first_tree=null;
		ASTNode KW_AFTER297_tree=null;
		RewriteRuleTokenStream stream_KW_AFTER=new RewriteRuleTokenStream(adaptor,"token KW_AFTER");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		try {
			// HiveParser.g:1305:5: (first= KW_FIRST | KW_AFTER afterCol= identifier -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION ) -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol) )
			int alt83=2;
			int LA83_0 = input.LA(1);
			if ( (LA83_0==KW_FIRST) ) {
				alt83=1;
			}
			else if ( (LA83_0==KW_AFTER) ) {
				alt83=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 83, 0, input);
				throw nvae;
			}

			switch (alt83) {
				case 1 :
					// HiveParser.g:1305:7: first= KW_FIRST
					{
					root_0 = (ASTNode)adaptor.nil();


					first=(Token)match(input,KW_FIRST,FOLLOW_KW_FIRST_in_alterStatementChangeColPosition5478); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					first_tree = (ASTNode)adaptor.create(first);
					adaptor.addChild(root_0, first_tree);
					}

					}
					break;
				case 2 :
					// HiveParser.g:1305:22: KW_AFTER afterCol= identifier
					{
					KW_AFTER297=(Token)match(input,KW_AFTER,FOLLOW_KW_AFTER_in_alterStatementChangeColPosition5480); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_AFTER.add(KW_AFTER297);

					pushFollow(FOLLOW_identifier_in_alterStatementChangeColPosition5484);
					afterCol=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(afterCol.getTree());
					// AST REWRITE
					// elements: afterCol
					// token labels: 
					// rule labels: afterCol, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_afterCol=new RewriteRuleSubtreeStream(adaptor,"rule afterCol",afterCol!=null?afterCol.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1306:5: -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION )
					if (first != null) {
						// HiveParser.g:1306:25: ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION, "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}

					else // 1307:5: -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol)
					{
						// HiveParser.g:1307:8: ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol)
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION, "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION"), root_1);
						adaptor.addChild(root_1, stream_afterCol.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementChangeColPosition"


	public static class alterStatementSuffixAddPartitions_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixAddPartitions"
	// HiveParser.g:1310:1: alterStatementSuffixAddPartitions[boolean table] : KW_ADD ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ -> { table }? ^( TOK_ALTERTABLE_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ ) -> ^( TOK_ALTERVIEW_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ ) ;
	public final HiveParser.alterStatementSuffixAddPartitions_return alterStatementSuffixAddPartitions(boolean table) throws RecognitionException {
		HiveParser.alterStatementSuffixAddPartitions_return retval = new HiveParser.alterStatementSuffixAddPartitions_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_ADD298=null;
		ParserRuleReturnScope ifNotExists299 =null;
		ParserRuleReturnScope alterStatementSuffixAddPartitionsElement300 =null;

		ASTNode KW_ADD298_tree=null;
		RewriteRuleTokenStream stream_KW_ADD=new RewriteRuleTokenStream(adaptor,"token KW_ADD");
		RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
		RewriteRuleSubtreeStream stream_alterStatementSuffixAddPartitionsElement=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementSuffixAddPartitionsElement");

		 pushMsg(retval.start,"add partition statement", state); 
		try {
			// HiveParser.g:1313:5: ( KW_ADD ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ -> { table }? ^( TOK_ALTERTABLE_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ ) -> ^( TOK_ALTERVIEW_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ ) )
			// HiveParser.g:1313:7: KW_ADD ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+
			{
			KW_ADD298=(Token)match(input,KW_ADD,FOLLOW_KW_ADD_in_alterStatementSuffixAddPartitions5537); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ADD.add(KW_ADD298);

			// HiveParser.g:1313:14: ( ifNotExists )?
			int alt84=2;
			int LA84_0 = input.LA(1);
			if ( (LA84_0==KW_IF) ) {
				alt84=1;
			}
			switch (alt84) {
				case 1 :
					// HiveParser.g:1313:14: ifNotExists
					{
					pushFollow(FOLLOW_ifNotExists_in_alterStatementSuffixAddPartitions5539);
					ifNotExists299=ifNotExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifNotExists.add(ifNotExists299.getTree());
					}
					break;

			}

			// HiveParser.g:1313:27: ( alterStatementSuffixAddPartitionsElement )+
			int cnt85=0;
			loop85:
			while (true) {
				int alt85=2;
				int LA85_0 = input.LA(1);
				if ( (LA85_0==KW_PARTITION) ) {
					alt85=1;
				}

				switch (alt85) {
				case 1 :
					// HiveParser.g:1313:27: alterStatementSuffixAddPartitionsElement
					{
					pushFollow(FOLLOW_alterStatementSuffixAddPartitionsElement_in_alterStatementSuffixAddPartitions5542);
					alterStatementSuffixAddPartitionsElement300=alterStatementSuffixAddPartitionsElement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterStatementSuffixAddPartitionsElement.add(alterStatementSuffixAddPartitionsElement300.getTree());
					}
					break;

				default :
					if ( cnt85 >= 1 ) break loop85;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(85, input);
					throw eee;
				}
				cnt85++;
			}

			// AST REWRITE
			// elements: ifNotExists, alterStatementSuffixAddPartitionsElement, ifNotExists, alterStatementSuffixAddPartitionsElement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1314:5: -> { table }? ^( TOK_ALTERTABLE_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ )
			if ( table ) {
				// HiveParser.g:1314:19: ^( TOK_ALTERTABLE_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_ADDPARTS, "TOK_ALTERTABLE_ADDPARTS"), root_1);
				// HiveParser.g:1314:45: ( ifNotExists )?
				if ( stream_ifNotExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifNotExists.nextTree());
				}
				stream_ifNotExists.reset();

				if ( !(stream_alterStatementSuffixAddPartitionsElement.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_alterStatementSuffixAddPartitionsElement.hasNext() ) {
					adaptor.addChild(root_1, stream_alterStatementSuffixAddPartitionsElement.nextTree());
				}
				stream_alterStatementSuffixAddPartitionsElement.reset();

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1315:5: -> ^( TOK_ALTERVIEW_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ )
			{
				// HiveParser.g:1315:19: ^( TOK_ALTERVIEW_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERVIEW_ADDPARTS, "TOK_ALTERVIEW_ADDPARTS"), root_1);
				// HiveParser.g:1315:44: ( ifNotExists )?
				if ( stream_ifNotExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifNotExists.nextTree());
				}
				stream_ifNotExists.reset();

				if ( !(stream_alterStatementSuffixAddPartitionsElement.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_alterStatementSuffixAddPartitionsElement.hasNext() ) {
					adaptor.addChild(root_1, stream_alterStatementSuffixAddPartitionsElement.nextTree());
				}
				stream_alterStatementSuffixAddPartitionsElement.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixAddPartitions"


	public static class alterStatementSuffixAddPartitionsElement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixAddPartitionsElement"
	// HiveParser.g:1318:1: alterStatementSuffixAddPartitionsElement : partitionSpec ( partitionLocation )? ;
	public final HiveParser.alterStatementSuffixAddPartitionsElement_return alterStatementSuffixAddPartitionsElement() throws RecognitionException {
		HiveParser.alterStatementSuffixAddPartitionsElement_return retval = new HiveParser.alterStatementSuffixAddPartitionsElement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope partitionSpec301 =null;
		ParserRuleReturnScope partitionLocation302 =null;


		try {
			// HiveParser.g:1319:5: ( partitionSpec ( partitionLocation )? )
			// HiveParser.g:1319:7: partitionSpec ( partitionLocation )?
			{
			root_0 = (ASTNode)adaptor.nil();


			pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitionsElement5605);
			partitionSpec301=partitionSpec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, partitionSpec301.getTree());

			// HiveParser.g:1319:21: ( partitionLocation )?
			int alt86=2;
			int LA86_0 = input.LA(1);
			if ( (LA86_0==KW_LOCATION) ) {
				alt86=1;
			}
			switch (alt86) {
				case 1 :
					// HiveParser.g:1319:21: partitionLocation
					{
					pushFollow(FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitionsElement5607);
					partitionLocation302=partitionLocation();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partitionLocation302.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixAddPartitionsElement"


	public static class alterStatementSuffixTouch_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixTouch"
	// HiveParser.g:1322:1: alterStatementSuffixTouch : KW_TOUCH ( partitionSpec )* -> ^( TOK_ALTERTABLE_TOUCH ( partitionSpec )* ) ;
	public final HiveParser.alterStatementSuffixTouch_return alterStatementSuffixTouch() throws RecognitionException {
		HiveParser.alterStatementSuffixTouch_return retval = new HiveParser.alterStatementSuffixTouch_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_TOUCH303=null;
		ParserRuleReturnScope partitionSpec304 =null;

		ASTNode KW_TOUCH303_tree=null;
		RewriteRuleTokenStream stream_KW_TOUCH=new RewriteRuleTokenStream(adaptor,"token KW_TOUCH");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		 pushMsg(retval.start,"touch statement", state); 
		try {
			// HiveParser.g:1325:5: ( KW_TOUCH ( partitionSpec )* -> ^( TOK_ALTERTABLE_TOUCH ( partitionSpec )* ) )
			// HiveParser.g:1325:7: KW_TOUCH ( partitionSpec )*
			{
			KW_TOUCH303=(Token)match(input,KW_TOUCH,FOLLOW_KW_TOUCH_in_alterStatementSuffixTouch5635); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TOUCH.add(KW_TOUCH303);

			// HiveParser.g:1325:16: ( partitionSpec )*
			loop87:
			while (true) {
				int alt87=2;
				int LA87_0 = input.LA(1);
				if ( (LA87_0==KW_PARTITION) ) {
					alt87=1;
				}

				switch (alt87) {
				case 1 :
					// HiveParser.g:1325:17: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixTouch5638);
					partitionSpec304=partitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec304.getTree());
					}
					break;

				default :
					break loop87;
				}
			}

			// AST REWRITE
			// elements: partitionSpec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1326:5: -> ^( TOK_ALTERTABLE_TOUCH ( partitionSpec )* )
			{
				// HiveParser.g:1326:8: ^( TOK_ALTERTABLE_TOUCH ( partitionSpec )* )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_TOUCH, "TOK_ALTERTABLE_TOUCH"), root_1);
				// HiveParser.g:1326:31: ( partitionSpec )*
				while ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixTouch"


	public static class alterStatementSuffixArchive_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixArchive"
	// HiveParser.g:1329:1: alterStatementSuffixArchive : KW_ARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_ARCHIVE ( partitionSpec )* ) ;
	public final HiveParser.alterStatementSuffixArchive_return alterStatementSuffixArchive() throws RecognitionException {
		HiveParser.alterStatementSuffixArchive_return retval = new HiveParser.alterStatementSuffixArchive_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_ARCHIVE305=null;
		ParserRuleReturnScope partitionSpec306 =null;

		ASTNode KW_ARCHIVE305_tree=null;
		RewriteRuleTokenStream stream_KW_ARCHIVE=new RewriteRuleTokenStream(adaptor,"token KW_ARCHIVE");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		 pushMsg(retval.start,"archive statement", state); 
		try {
			// HiveParser.g:1332:5: ( KW_ARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_ARCHIVE ( partitionSpec )* ) )
			// HiveParser.g:1332:7: KW_ARCHIVE ( partitionSpec )*
			{
			KW_ARCHIVE305=(Token)match(input,KW_ARCHIVE,FOLLOW_KW_ARCHIVE_in_alterStatementSuffixArchive5682); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ARCHIVE.add(KW_ARCHIVE305);

			// HiveParser.g:1332:18: ( partitionSpec )*
			loop88:
			while (true) {
				int alt88=2;
				int LA88_0 = input.LA(1);
				if ( (LA88_0==KW_PARTITION) ) {
					alt88=1;
				}

				switch (alt88) {
				case 1 :
					// HiveParser.g:1332:19: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixArchive5685);
					partitionSpec306=partitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec306.getTree());
					}
					break;

				default :
					break loop88;
				}
			}

			// AST REWRITE
			// elements: partitionSpec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1333:5: -> ^( TOK_ALTERTABLE_ARCHIVE ( partitionSpec )* )
			{
				// HiveParser.g:1333:8: ^( TOK_ALTERTABLE_ARCHIVE ( partitionSpec )* )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_ARCHIVE, "TOK_ALTERTABLE_ARCHIVE"), root_1);
				// HiveParser.g:1333:33: ( partitionSpec )*
				while ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixArchive"


	public static class alterStatementSuffixUnArchive_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixUnArchive"
	// HiveParser.g:1336:1: alterStatementSuffixUnArchive : KW_UNARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_UNARCHIVE ( partitionSpec )* ) ;
	public final HiveParser.alterStatementSuffixUnArchive_return alterStatementSuffixUnArchive() throws RecognitionException {
		HiveParser.alterStatementSuffixUnArchive_return retval = new HiveParser.alterStatementSuffixUnArchive_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_UNARCHIVE307=null;
		ParserRuleReturnScope partitionSpec308 =null;

		ASTNode KW_UNARCHIVE307_tree=null;
		RewriteRuleTokenStream stream_KW_UNARCHIVE=new RewriteRuleTokenStream(adaptor,"token KW_UNARCHIVE");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		 pushMsg(retval.start,"unarchive statement", state); 
		try {
			// HiveParser.g:1339:5: ( KW_UNARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_UNARCHIVE ( partitionSpec )* ) )
			// HiveParser.g:1339:7: KW_UNARCHIVE ( partitionSpec )*
			{
			KW_UNARCHIVE307=(Token)match(input,KW_UNARCHIVE,FOLLOW_KW_UNARCHIVE_in_alterStatementSuffixUnArchive5729); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_UNARCHIVE.add(KW_UNARCHIVE307);

			// HiveParser.g:1339:20: ( partitionSpec )*
			loop89:
			while (true) {
				int alt89=2;
				int LA89_0 = input.LA(1);
				if ( (LA89_0==KW_PARTITION) ) {
					alt89=1;
				}

				switch (alt89) {
				case 1 :
					// HiveParser.g:1339:21: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixUnArchive5732);
					partitionSpec308=partitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec308.getTree());
					}
					break;

				default :
					break loop89;
				}
			}

			// AST REWRITE
			// elements: partitionSpec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1340:5: -> ^( TOK_ALTERTABLE_UNARCHIVE ( partitionSpec )* )
			{
				// HiveParser.g:1340:8: ^( TOK_ALTERTABLE_UNARCHIVE ( partitionSpec )* )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_UNARCHIVE, "TOK_ALTERTABLE_UNARCHIVE"), root_1);
				// HiveParser.g:1340:35: ( partitionSpec )*
				while ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixUnArchive"


	public static class partitionLocation_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "partitionLocation"
	// HiveParser.g:1343:1: partitionLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_PARTITIONLOCATION $locn) ;
	public final HiveParser.partitionLocation_return partitionLocation() throws RecognitionException {
		HiveParser.partitionLocation_return retval = new HiveParser.partitionLocation_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token locn=null;
		Token KW_LOCATION309=null;

		ASTNode locn_tree=null;
		ASTNode KW_LOCATION309_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

		 pushMsg(retval.start,"partition location", state); 
		try {
			// HiveParser.g:1346:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_PARTITIONLOCATION $locn) )
			// HiveParser.g:1347:7: KW_LOCATION locn= StringLiteral
			{
			KW_LOCATION309=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_partitionLocation5782); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LOCATION.add(KW_LOCATION309);

			locn=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_partitionLocation5786); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(locn);

			// AST REWRITE
			// elements: locn
			// token labels: locn
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1347:38: -> ^( TOK_PARTITIONLOCATION $locn)
			{
				// HiveParser.g:1347:41: ^( TOK_PARTITIONLOCATION $locn)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_PARTITIONLOCATION, "TOK_PARTITIONLOCATION"), root_1);
				adaptor.addChild(root_1, stream_locn.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partitionLocation"


	public static class alterStatementSuffixDropPartitions_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixDropPartitions"
	// HiveParser.g:1350:1: alterStatementSuffixDropPartitions[boolean table] : KW_DROP ( ifExists )? dropPartitionSpec ( COMMA dropPartitionSpec )* ( KW_PURGE )? ( replicationClause )? -> { table }? ^( TOK_ALTERTABLE_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( KW_PURGE )? ( replicationClause )? ) -> ^( TOK_ALTERVIEW_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( replicationClause )? ) ;
	public final HiveParser.alterStatementSuffixDropPartitions_return alterStatementSuffixDropPartitions(boolean table) throws RecognitionException {
		HiveParser.alterStatementSuffixDropPartitions_return retval = new HiveParser.alterStatementSuffixDropPartitions_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_DROP310=null;
		Token COMMA313=null;
		Token KW_PURGE315=null;
		ParserRuleReturnScope ifExists311 =null;
		ParserRuleReturnScope dropPartitionSpec312 =null;
		ParserRuleReturnScope dropPartitionSpec314 =null;
		ParserRuleReturnScope replicationClause316 =null;

		ASTNode KW_DROP310_tree=null;
		ASTNode COMMA313_tree=null;
		ASTNode KW_PURGE315_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_PURGE=new RewriteRuleTokenStream(adaptor,"token KW_PURGE");
		RewriteRuleSubtreeStream stream_dropPartitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule dropPartitionSpec");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
		RewriteRuleSubtreeStream stream_replicationClause=new RewriteRuleSubtreeStream(adaptor,"rule replicationClause");

		 pushMsg(retval.start,"drop partition statement", state); 
		try {
			// HiveParser.g:1353:5: ( KW_DROP ( ifExists )? dropPartitionSpec ( COMMA dropPartitionSpec )* ( KW_PURGE )? ( replicationClause )? -> { table }? ^( TOK_ALTERTABLE_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( KW_PURGE )? ( replicationClause )? ) -> ^( TOK_ALTERVIEW_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( replicationClause )? ) )
			// HiveParser.g:1353:7: KW_DROP ( ifExists )? dropPartitionSpec ( COMMA dropPartitionSpec )* ( KW_PURGE )? ( replicationClause )?
			{
			KW_DROP310=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_alterStatementSuffixDropPartitions5823); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP310);

			// HiveParser.g:1353:15: ( ifExists )?
			int alt90=2;
			int LA90_0 = input.LA(1);
			if ( (LA90_0==KW_IF) ) {
				alt90=1;
			}
			switch (alt90) {
				case 1 :
					// HiveParser.g:1353:15: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_alterStatementSuffixDropPartitions5825);
					ifExists311=ifExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifExists.add(ifExists311.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions5828);
			dropPartitionSpec312=dropPartitionSpec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_dropPartitionSpec.add(dropPartitionSpec312.getTree());
			// HiveParser.g:1353:43: ( COMMA dropPartitionSpec )*
			loop91:
			while (true) {
				int alt91=2;
				int LA91_0 = input.LA(1);
				if ( (LA91_0==COMMA) ) {
					alt91=1;
				}

				switch (alt91) {
				case 1 :
					// HiveParser.g:1353:44: COMMA dropPartitionSpec
					{
					COMMA313=(Token)match(input,COMMA,FOLLOW_COMMA_in_alterStatementSuffixDropPartitions5831); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA313);

					pushFollow(FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions5833);
					dropPartitionSpec314=dropPartitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_dropPartitionSpec.add(dropPartitionSpec314.getTree());
					}
					break;

				default :
					break loop91;
				}
			}

			// HiveParser.g:1353:70: ( KW_PURGE )?
			int alt92=2;
			int LA92_0 = input.LA(1);
			if ( (LA92_0==KW_PURGE) ) {
				alt92=1;
			}
			switch (alt92) {
				case 1 :
					// HiveParser.g:1353:70: KW_PURGE
					{
					KW_PURGE315=(Token)match(input,KW_PURGE,FOLLOW_KW_PURGE_in_alterStatementSuffixDropPartitions5837); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_PURGE.add(KW_PURGE315);

					}
					break;

			}

			// HiveParser.g:1353:80: ( replicationClause )?
			int alt93=2;
			int LA93_0 = input.LA(1);
			if ( (LA93_0==KW_FOR) ) {
				alt93=1;
			}
			switch (alt93) {
				case 1 :
					// HiveParser.g:1353:80: replicationClause
					{
					pushFollow(FOLLOW_replicationClause_in_alterStatementSuffixDropPartitions5840);
					replicationClause316=replicationClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_replicationClause.add(replicationClause316.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: ifExists, dropPartitionSpec, replicationClause, KW_PURGE, ifExists, replicationClause, dropPartitionSpec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1354:5: -> { table }? ^( TOK_ALTERTABLE_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( KW_PURGE )? ( replicationClause )? )
			if ( table ) {
				// HiveParser.g:1354:19: ^( TOK_ALTERTABLE_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( KW_PURGE )? ( replicationClause )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_DROPPARTS, "TOK_ALTERTABLE_DROPPARTS"), root_1);
				if ( !(stream_dropPartitionSpec.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_dropPartitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_dropPartitionSpec.nextTree());
				}
				stream_dropPartitionSpec.reset();

				// HiveParser.g:1354:65: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				// HiveParser.g:1354:75: ( KW_PURGE )?
				if ( stream_KW_PURGE.hasNext() ) {
					adaptor.addChild(root_1, stream_KW_PURGE.nextNode());
				}
				stream_KW_PURGE.reset();

				// HiveParser.g:1354:85: ( replicationClause )?
				if ( stream_replicationClause.hasNext() ) {
					adaptor.addChild(root_1, stream_replicationClause.nextTree());
				}
				stream_replicationClause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1355:5: -> ^( TOK_ALTERVIEW_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( replicationClause )? )
			{
				// HiveParser.g:1355:19: ^( TOK_ALTERVIEW_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( replicationClause )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERVIEW_DROPPARTS, "TOK_ALTERVIEW_DROPPARTS"), root_1);
				if ( !(stream_dropPartitionSpec.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_dropPartitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_dropPartitionSpec.nextTree());
				}
				stream_dropPartitionSpec.reset();

				// HiveParser.g:1355:64: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				// HiveParser.g:1355:74: ( replicationClause )?
				if ( stream_replicationClause.hasNext() ) {
					adaptor.addChild(root_1, stream_replicationClause.nextTree());
				}
				stream_replicationClause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixDropPartitions"


	public static class alterStatementSuffixProperties_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixProperties"
	// HiveParser.g:1358:1: alterStatementSuffixProperties : ( KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_PROPERTIES tableProperties ) | KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties -> ^( TOK_ALTERTABLE_DROPPROPERTIES tableProperties ( ifExists )? ) );
	public final HiveParser.alterStatementSuffixProperties_return alterStatementSuffixProperties() throws RecognitionException {
		HiveParser.alterStatementSuffixProperties_return retval = new HiveParser.alterStatementSuffixProperties_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_SET317=null;
		Token KW_TBLPROPERTIES318=null;
		Token KW_UNSET320=null;
		Token KW_TBLPROPERTIES321=null;
		ParserRuleReturnScope tableProperties319 =null;
		ParserRuleReturnScope ifExists322 =null;
		ParserRuleReturnScope tableProperties323 =null;

		ASTNode KW_SET317_tree=null;
		ASTNode KW_TBLPROPERTIES318_tree=null;
		ASTNode KW_UNSET320_tree=null;
		ASTNode KW_TBLPROPERTIES321_tree=null;
		RewriteRuleTokenStream stream_KW_UNSET=new RewriteRuleTokenStream(adaptor,"token KW_UNSET");
		RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");

		 pushMsg(retval.start,"alter properties statement", state); 
		try {
			// HiveParser.g:1361:5: ( KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_PROPERTIES tableProperties ) | KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties -> ^( TOK_ALTERTABLE_DROPPROPERTIES tableProperties ( ifExists )? ) )
			int alt95=2;
			int LA95_0 = input.LA(1);
			if ( (LA95_0==KW_SET) ) {
				alt95=1;
			}
			else if ( (LA95_0==KW_UNSET) ) {
				alt95=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 95, 0, input);
				throw nvae;
			}

			switch (alt95) {
				case 1 :
					// HiveParser.g:1361:7: KW_SET KW_TBLPROPERTIES tableProperties
					{
					KW_SET317=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixProperties5922); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET317);

					KW_TBLPROPERTIES318=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties5924); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES318);

					pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixProperties5926);
					tableProperties319=tableProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties319.getTree());
					// AST REWRITE
					// elements: tableProperties
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1362:5: -> ^( TOK_ALTERTABLE_PROPERTIES tableProperties )
					{
						// HiveParser.g:1362:8: ^( TOK_ALTERTABLE_PROPERTIES tableProperties )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_PROPERTIES, "TOK_ALTERTABLE_PROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_tableProperties.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:1363:7: KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties
					{
					KW_UNSET320=(Token)match(input,KW_UNSET,FOLLOW_KW_UNSET_in_alterStatementSuffixProperties5946); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_UNSET.add(KW_UNSET320);

					KW_TBLPROPERTIES321=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties5948); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES321);

					// HiveParser.g:1363:33: ( ifExists )?
					int alt94=2;
					int LA94_0 = input.LA(1);
					if ( (LA94_0==KW_IF) ) {
						alt94=1;
					}
					switch (alt94) {
						case 1 :
							// HiveParser.g:1363:33: ifExists
							{
							pushFollow(FOLLOW_ifExists_in_alterStatementSuffixProperties5950);
							ifExists322=ifExists();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_ifExists.add(ifExists322.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixProperties5953);
					tableProperties323=tableProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties323.getTree());
					// AST REWRITE
					// elements: ifExists, tableProperties
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1364:5: -> ^( TOK_ALTERTABLE_DROPPROPERTIES tableProperties ( ifExists )? )
					{
						// HiveParser.g:1364:8: ^( TOK_ALTERTABLE_DROPPROPERTIES tableProperties ( ifExists )? )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_DROPPROPERTIES, "TOK_ALTERTABLE_DROPPROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_tableProperties.nextTree());
						// HiveParser.g:1364:56: ( ifExists )?
						if ( stream_ifExists.hasNext() ) {
							adaptor.addChild(root_1, stream_ifExists.nextTree());
						}
						stream_ifExists.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixProperties"


	public static class alterViewSuffixProperties_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterViewSuffixProperties"
	// HiveParser.g:1367:1: alterViewSuffixProperties : ( KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERVIEW_PROPERTIES tableProperties ) | KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties -> ^( TOK_ALTERVIEW_DROPPROPERTIES tableProperties ( ifExists )? ) );
	public final HiveParser.alterViewSuffixProperties_return alterViewSuffixProperties() throws RecognitionException {
		HiveParser.alterViewSuffixProperties_return retval = new HiveParser.alterViewSuffixProperties_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_SET324=null;
		Token KW_TBLPROPERTIES325=null;
		Token KW_UNSET327=null;
		Token KW_TBLPROPERTIES328=null;
		ParserRuleReturnScope tableProperties326 =null;
		ParserRuleReturnScope ifExists329 =null;
		ParserRuleReturnScope tableProperties330 =null;

		ASTNode KW_SET324_tree=null;
		ASTNode KW_TBLPROPERTIES325_tree=null;
		ASTNode KW_UNSET327_tree=null;
		ASTNode KW_TBLPROPERTIES328_tree=null;
		RewriteRuleTokenStream stream_KW_UNSET=new RewriteRuleTokenStream(adaptor,"token KW_UNSET");
		RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");

		 pushMsg(retval.start,"alter view properties statement", state); 
		try {
			// HiveParser.g:1370:5: ( KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERVIEW_PROPERTIES tableProperties ) | KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties -> ^( TOK_ALTERVIEW_DROPPROPERTIES tableProperties ( ifExists )? ) )
			int alt97=2;
			int LA97_0 = input.LA(1);
			if ( (LA97_0==KW_SET) ) {
				alt97=1;
			}
			else if ( (LA97_0==KW_UNSET) ) {
				alt97=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 97, 0, input);
				throw nvae;
			}

			switch (alt97) {
				case 1 :
					// HiveParser.g:1370:7: KW_SET KW_TBLPROPERTIES tableProperties
					{
					KW_SET324=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterViewSuffixProperties5995); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET324);

					KW_TBLPROPERTIES325=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties5997); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES325);

					pushFollow(FOLLOW_tableProperties_in_alterViewSuffixProperties5999);
					tableProperties326=tableProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties326.getTree());
					// AST REWRITE
					// elements: tableProperties
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1371:5: -> ^( TOK_ALTERVIEW_PROPERTIES tableProperties )
					{
						// HiveParser.g:1371:8: ^( TOK_ALTERVIEW_PROPERTIES tableProperties )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERVIEW_PROPERTIES, "TOK_ALTERVIEW_PROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_tableProperties.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:1372:7: KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties
					{
					KW_UNSET327=(Token)match(input,KW_UNSET,FOLLOW_KW_UNSET_in_alterViewSuffixProperties6019); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_UNSET.add(KW_UNSET327);

					KW_TBLPROPERTIES328=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties6021); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES328);

					// HiveParser.g:1372:33: ( ifExists )?
					int alt96=2;
					int LA96_0 = input.LA(1);
					if ( (LA96_0==KW_IF) ) {
						alt96=1;
					}
					switch (alt96) {
						case 1 :
							// HiveParser.g:1372:33: ifExists
							{
							pushFollow(FOLLOW_ifExists_in_alterViewSuffixProperties6023);
							ifExists329=ifExists();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_ifExists.add(ifExists329.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_tableProperties_in_alterViewSuffixProperties6026);
					tableProperties330=tableProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties330.getTree());
					// AST REWRITE
					// elements: ifExists, tableProperties
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1373:5: -> ^( TOK_ALTERVIEW_DROPPROPERTIES tableProperties ( ifExists )? )
					{
						// HiveParser.g:1373:8: ^( TOK_ALTERVIEW_DROPPROPERTIES tableProperties ( ifExists )? )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERVIEW_DROPPROPERTIES, "TOK_ALTERVIEW_DROPPROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_tableProperties.nextTree());
						// HiveParser.g:1373:55: ( ifExists )?
						if ( stream_ifExists.hasNext() ) {
							adaptor.addChild(root_1, stream_ifExists.nextTree());
						}
						stream_ifExists.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterViewSuffixProperties"


	public static class alterMaterializedViewSuffixRewrite_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterMaterializedViewSuffixRewrite"
	// HiveParser.g:1376:1: alterMaterializedViewSuffixRewrite : (mvRewriteFlag= rewriteEnabled |mvRewriteFlag= rewriteDisabled ) -> ^( TOK_ALTER_MATERIALIZED_VIEW_REWRITE $mvRewriteFlag) ;
	public final HiveParser.alterMaterializedViewSuffixRewrite_return alterMaterializedViewSuffixRewrite() throws RecognitionException {
		HiveParser.alterMaterializedViewSuffixRewrite_return retval = new HiveParser.alterMaterializedViewSuffixRewrite_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope mvRewriteFlag =null;

		RewriteRuleSubtreeStream stream_rewriteEnabled=new RewriteRuleSubtreeStream(adaptor,"rule rewriteEnabled");
		RewriteRuleSubtreeStream stream_rewriteDisabled=new RewriteRuleSubtreeStream(adaptor,"rule rewriteDisabled");

		 pushMsg(retval.start,"alter materialized view rewrite statement", state); 
		try {
			// HiveParser.g:1379:5: ( (mvRewriteFlag= rewriteEnabled |mvRewriteFlag= rewriteDisabled ) -> ^( TOK_ALTER_MATERIALIZED_VIEW_REWRITE $mvRewriteFlag) )
			// HiveParser.g:1379:7: (mvRewriteFlag= rewriteEnabled |mvRewriteFlag= rewriteDisabled )
			{
			// HiveParser.g:1379:7: (mvRewriteFlag= rewriteEnabled |mvRewriteFlag= rewriteDisabled )
			int alt98=2;
			int LA98_0 = input.LA(1);
			if ( (LA98_0==KW_ENABLE) ) {
				alt98=1;
			}
			else if ( (LA98_0==KW_DISABLE) ) {
				alt98=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 98, 0, input);
				throw nvae;
			}

			switch (alt98) {
				case 1 :
					// HiveParser.g:1379:8: mvRewriteFlag= rewriteEnabled
					{
					pushFollow(FOLLOW_rewriteEnabled_in_alterMaterializedViewSuffixRewrite6071);
					mvRewriteFlag=rewriteEnabled();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_rewriteEnabled.add(mvRewriteFlag.getTree());
					}
					break;
				case 2 :
					// HiveParser.g:1379:39: mvRewriteFlag= rewriteDisabled
					{
					pushFollow(FOLLOW_rewriteDisabled_in_alterMaterializedViewSuffixRewrite6077);
					mvRewriteFlag=rewriteDisabled();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_rewriteDisabled.add(mvRewriteFlag.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: mvRewriteFlag
			// token labels: 
			// rule labels: mvRewriteFlag, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_mvRewriteFlag=new RewriteRuleSubtreeStream(adaptor,"rule mvRewriteFlag",mvRewriteFlag!=null?mvRewriteFlag.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1380:5: -> ^( TOK_ALTER_MATERIALIZED_VIEW_REWRITE $mvRewriteFlag)
			{
				// HiveParser.g:1380:8: ^( TOK_ALTER_MATERIALIZED_VIEW_REWRITE $mvRewriteFlag)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTER_MATERIALIZED_VIEW_REWRITE, "TOK_ALTER_MATERIALIZED_VIEW_REWRITE"), root_1);
				adaptor.addChild(root_1, stream_mvRewriteFlag.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterMaterializedViewSuffixRewrite"


	public static class alterMaterializedViewSuffixRebuild_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterMaterializedViewSuffixRebuild"
	// HiveParser.g:1383:1: alterMaterializedViewSuffixRebuild : KW_REBUILD -> ^( TOK_ALTER_MATERIALIZED_VIEW_REBUILD ) ;
	public final HiveParser.alterMaterializedViewSuffixRebuild_return alterMaterializedViewSuffixRebuild() throws RecognitionException {
		HiveParser.alterMaterializedViewSuffixRebuild_return retval = new HiveParser.alterMaterializedViewSuffixRebuild_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_REBUILD331=null;

		ASTNode KW_REBUILD331_tree=null;
		RewriteRuleTokenStream stream_KW_REBUILD=new RewriteRuleTokenStream(adaptor,"token KW_REBUILD");

		 pushMsg(retval.start,"alter materialized view rebuild statement", state); 
		try {
			// HiveParser.g:1386:5: ( KW_REBUILD -> ^( TOK_ALTER_MATERIALIZED_VIEW_REBUILD ) )
			// HiveParser.g:1386:7: KW_REBUILD
			{
			KW_REBUILD331=(Token)match(input,KW_REBUILD,FOLLOW_KW_REBUILD_in_alterMaterializedViewSuffixRebuild6118); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REBUILD.add(KW_REBUILD331);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1386:18: -> ^( TOK_ALTER_MATERIALIZED_VIEW_REBUILD )
			{
				// HiveParser.g:1386:21: ^( TOK_ALTER_MATERIALIZED_VIEW_REBUILD )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTER_MATERIALIZED_VIEW_REBUILD, "TOK_ALTER_MATERIALIZED_VIEW_REBUILD"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterMaterializedViewSuffixRebuild"


	public static class alterStatementSuffixSerdeProperties_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixSerdeProperties"
	// HiveParser.g:1389:1: alterStatementSuffixSerdeProperties : ( KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? ) | KW_SET KW_SERDEPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties ) );
	public final HiveParser.alterStatementSuffixSerdeProperties_return alterStatementSuffixSerdeProperties() throws RecognitionException {
		HiveParser.alterStatementSuffixSerdeProperties_return retval = new HiveParser.alterStatementSuffixSerdeProperties_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token serdeName=null;
		Token KW_SET332=null;
		Token KW_SERDE333=null;
		Token KW_WITH334=null;
		Token KW_SERDEPROPERTIES335=null;
		Token KW_SET337=null;
		Token KW_SERDEPROPERTIES338=null;
		ParserRuleReturnScope tableProperties336 =null;
		ParserRuleReturnScope tableProperties339 =null;

		ASTNode serdeName_tree=null;
		ASTNode KW_SET332_tree=null;
		ASTNode KW_SERDE333_tree=null;
		ASTNode KW_WITH334_tree=null;
		ASTNode KW_SERDEPROPERTIES335_tree=null;
		ASTNode KW_SET337_tree=null;
		ASTNode KW_SERDEPROPERTIES338_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
		RewriteRuleTokenStream stream_KW_SERDE=new RewriteRuleTokenStream(adaptor,"token KW_SERDE");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");

		 pushMsg(retval.start,"alter serdes statement", state); 
		try {
			// HiveParser.g:1392:5: ( KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? ) | KW_SET KW_SERDEPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties ) )
			int alt100=2;
			int LA100_0 = input.LA(1);
			if ( (LA100_0==KW_SET) ) {
				int LA100_1 = input.LA(2);
				if ( (LA100_1==KW_SERDE) ) {
					alt100=1;
				}
				else if ( (LA100_1==KW_SERDEPROPERTIES) ) {
					alt100=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 100, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 100, 0, input);
				throw nvae;
			}

			switch (alt100) {
				case 1 :
					// HiveParser.g:1392:7: KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )?
					{
					KW_SET332=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties6151); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET332);

					KW_SERDE333=(Token)match(input,KW_SERDE,FOLLOW_KW_SERDE_in_alterStatementSuffixSerdeProperties6153); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SERDE.add(KW_SERDE333);

					serdeName=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixSerdeProperties6157); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(serdeName);

					// HiveParser.g:1392:47: ( KW_WITH KW_SERDEPROPERTIES tableProperties )?
					int alt99=2;
					int LA99_0 = input.LA(1);
					if ( (LA99_0==KW_WITH) ) {
						alt99=1;
					}
					switch (alt99) {
						case 1 :
							// HiveParser.g:1392:48: KW_WITH KW_SERDEPROPERTIES tableProperties
							{
							KW_WITH334=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_alterStatementSuffixSerdeProperties6160); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH334);

							KW_SERDEPROPERTIES335=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties6162); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES335);

							pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties6164);
							tableProperties336=tableProperties();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties336.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: tableProperties, serdeName
					// token labels: serdeName
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_serdeName=new RewriteRuleTokenStream(adaptor,"token serdeName",serdeName);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1393:5: -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? )
					{
						// HiveParser.g:1393:8: ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_SERIALIZER, "TOK_ALTERTABLE_SERIALIZER"), root_1);
						adaptor.addChild(root_1, stream_serdeName.nextNode());
						// HiveParser.g:1393:47: ( tableProperties )?
						if ( stream_tableProperties.hasNext() ) {
							adaptor.addChild(root_1, stream_tableProperties.nextTree());
						}
						stream_tableProperties.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:1394:7: KW_SET KW_SERDEPROPERTIES tableProperties
					{
					KW_SET337=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties6190); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET337);

					KW_SERDEPROPERTIES338=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties6192); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES338);

					pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties6194);
					tableProperties339=tableProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties339.getTree());
					// AST REWRITE
					// elements: tableProperties
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1395:5: -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties )
					{
						// HiveParser.g:1395:8: ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_SERDEPROPERTIES, "TOK_ALTERTABLE_SERDEPROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_tableProperties.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixSerdeProperties"


	public static class tablePartitionPrefix_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "tablePartitionPrefix"
	// HiveParser.g:1398:1: tablePartitionPrefix : tableName ( partitionSpec )? -> ^( TOK_TABLE_PARTITION tableName ( partitionSpec )? ) ;
	public final HiveParser.tablePartitionPrefix_return tablePartitionPrefix() throws RecognitionException {
		HiveParser.tablePartitionPrefix_return retval = new HiveParser.tablePartitionPrefix_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope tableName340 =null;
		ParserRuleReturnScope partitionSpec341 =null;

		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		pushMsg(retval.start,"table partition prefix", state);
		try {
			// HiveParser.g:1401:3: ( tableName ( partitionSpec )? -> ^( TOK_TABLE_PARTITION tableName ( partitionSpec )? ) )
			// HiveParser.g:1401:5: tableName ( partitionSpec )?
			{
			pushFollow(FOLLOW_tableName_in_tablePartitionPrefix6231);
			tableName340=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tableName340.getTree());
			// HiveParser.g:1401:15: ( partitionSpec )?
			int alt101=2;
			int LA101_0 = input.LA(1);
			if ( (LA101_0==KW_PARTITION) ) {
				alt101=1;
			}
			switch (alt101) {
				case 1 :
					// HiveParser.g:1401:15: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_tablePartitionPrefix6233);
					partitionSpec341=partitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec341.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: partitionSpec, tableName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1402:3: -> ^( TOK_TABLE_PARTITION tableName ( partitionSpec )? )
			{
				// HiveParser.g:1402:5: ^( TOK_TABLE_PARTITION tableName ( partitionSpec )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABLE_PARTITION, "TOK_TABLE_PARTITION"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				// HiveParser.g:1402:37: ( partitionSpec )?
				if ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tablePartitionPrefix"


	public static class alterStatementSuffixFileFormat_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixFileFormat"
	// HiveParser.g:1405:1: alterStatementSuffixFileFormat : KW_SET KW_FILEFORMAT fileFormat -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat ) ;
	public final HiveParser.alterStatementSuffixFileFormat_return alterStatementSuffixFileFormat() throws RecognitionException {
		HiveParser.alterStatementSuffixFileFormat_return retval = new HiveParser.alterStatementSuffixFileFormat_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_SET342=null;
		Token KW_FILEFORMAT343=null;
		ParserRuleReturnScope fileFormat344 =null;

		ASTNode KW_SET342_tree=null;
		ASTNode KW_FILEFORMAT343_tree=null;
		RewriteRuleTokenStream stream_KW_FILEFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FILEFORMAT");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_fileFormat=new RewriteRuleSubtreeStream(adaptor,"rule fileFormat");

		pushMsg(retval.start,"alter fileformat statement", state); 
		try {
			// HiveParser.g:1408:2: ( KW_SET KW_FILEFORMAT fileFormat -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat ) )
			// HiveParser.g:1408:4: KW_SET KW_FILEFORMAT fileFormat
			{
			KW_SET342=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixFileFormat6268); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET342);

			KW_FILEFORMAT343=(Token)match(input,KW_FILEFORMAT,FOLLOW_KW_FILEFORMAT_in_alterStatementSuffixFileFormat6270); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FILEFORMAT.add(KW_FILEFORMAT343);

			pushFollow(FOLLOW_fileFormat_in_alterStatementSuffixFileFormat6272);
			fileFormat344=fileFormat();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_fileFormat.add(fileFormat344.getTree());
			// AST REWRITE
			// elements: fileFormat
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1409:2: -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat )
			{
				// HiveParser.g:1409:5: ^( TOK_ALTERTABLE_FILEFORMAT fileFormat )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_FILEFORMAT, "TOK_ALTERTABLE_FILEFORMAT"), root_1);
				adaptor.addChild(root_1, stream_fileFormat.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixFileFormat"


	public static class alterStatementSuffixClusterbySortby_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixClusterbySortby"
	// HiveParser.g:1412:1: alterStatementSuffixClusterbySortby : ( KW_NOT KW_CLUSTERED -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_CLUSTERED ) | KW_NOT KW_SORTED -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_SORTED ) | tableBuckets -> ^( TOK_ALTERTABLE_CLUSTER_SORT tableBuckets ) );
	public final HiveParser.alterStatementSuffixClusterbySortby_return alterStatementSuffixClusterbySortby() throws RecognitionException {
		HiveParser.alterStatementSuffixClusterbySortby_return retval = new HiveParser.alterStatementSuffixClusterbySortby_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_NOT345=null;
		Token KW_CLUSTERED346=null;
		Token KW_NOT347=null;
		Token KW_SORTED348=null;
		ParserRuleReturnScope tableBuckets349 =null;

		ASTNode KW_NOT345_tree=null;
		ASTNode KW_CLUSTERED346_tree=null;
		ASTNode KW_NOT347_tree=null;
		ASTNode KW_SORTED348_tree=null;
		RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
		RewriteRuleTokenStream stream_KW_SORTED=new RewriteRuleTokenStream(adaptor,"token KW_SORTED");
		RewriteRuleTokenStream stream_KW_CLUSTERED=new RewriteRuleTokenStream(adaptor,"token KW_CLUSTERED");
		RewriteRuleSubtreeStream stream_tableBuckets=new RewriteRuleSubtreeStream(adaptor,"rule tableBuckets");

		pushMsg(retval.start,"alter partition cluster by sort by statement", state);
		try {
			// HiveParser.g:1415:3: ( KW_NOT KW_CLUSTERED -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_CLUSTERED ) | KW_NOT KW_SORTED -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_SORTED ) | tableBuckets -> ^( TOK_ALTERTABLE_CLUSTER_SORT tableBuckets ) )
			int alt102=3;
			int LA102_0 = input.LA(1);
			if ( (LA102_0==KW_NOT) ) {
				int LA102_1 = input.LA(2);
				if ( (LA102_1==KW_CLUSTERED) ) {
					alt102=1;
				}
				else if ( (LA102_1==KW_SORTED) ) {
					alt102=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 102, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA102_0==KW_CLUSTERED) ) {
				alt102=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 102, 0, input);
				throw nvae;
			}

			switch (alt102) {
				case 1 :
					// HiveParser.g:1415:5: KW_NOT KW_CLUSTERED
					{
					KW_NOT345=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_alterStatementSuffixClusterbySortby6303); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT345);

					KW_CLUSTERED346=(Token)match(input,KW_CLUSTERED,FOLLOW_KW_CLUSTERED_in_alterStatementSuffixClusterbySortby6305); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CLUSTERED.add(KW_CLUSTERED346);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1415:25: -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_CLUSTERED )
					{
						// HiveParser.g:1415:28: ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_CLUSTERED )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_CLUSTER_SORT, "TOK_ALTERTABLE_CLUSTER_SORT"), root_1);
						adaptor.addChild(root_1, (ASTNode)adaptor.create(TOK_NOT_CLUSTERED, "TOK_NOT_CLUSTERED"));
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:1416:5: KW_NOT KW_SORTED
					{
					KW_NOT347=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_alterStatementSuffixClusterbySortby6319); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT347);

					KW_SORTED348=(Token)match(input,KW_SORTED,FOLLOW_KW_SORTED_in_alterStatementSuffixClusterbySortby6321); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SORTED.add(KW_SORTED348);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1416:22: -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_SORTED )
					{
						// HiveParser.g:1416:25: ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_SORTED )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_CLUSTER_SORT, "TOK_ALTERTABLE_CLUSTER_SORT"), root_1);
						adaptor.addChild(root_1, (ASTNode)adaptor.create(TOK_NOT_SORTED, "TOK_NOT_SORTED"));
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// HiveParser.g:1417:5: tableBuckets
					{
					pushFollow(FOLLOW_tableBuckets_in_alterStatementSuffixClusterbySortby6335);
					tableBuckets349=tableBuckets();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableBuckets.add(tableBuckets349.getTree());
					// AST REWRITE
					// elements: tableBuckets
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1417:18: -> ^( TOK_ALTERTABLE_CLUSTER_SORT tableBuckets )
					{
						// HiveParser.g:1417:21: ^( TOK_ALTERTABLE_CLUSTER_SORT tableBuckets )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_CLUSTER_SORT, "TOK_ALTERTABLE_CLUSTER_SORT"), root_1);
						adaptor.addChild(root_1, stream_tableBuckets.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixClusterbySortby"


	public static class alterTblPartitionStatementSuffixSkewedLocation_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterTblPartitionStatementSuffixSkewedLocation"
	// HiveParser.g:1420:1: alterTblPartitionStatementSuffixSkewedLocation : KW_SET KW_SKEWED KW_LOCATION skewedLocations -> ^( TOK_ALTERTABLE_SKEWED_LOCATION skewedLocations ) ;
	public final HiveParser.alterTblPartitionStatementSuffixSkewedLocation_return alterTblPartitionStatementSuffixSkewedLocation() throws RecognitionException {
		HiveParser.alterTblPartitionStatementSuffixSkewedLocation_return retval = new HiveParser.alterTblPartitionStatementSuffixSkewedLocation_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_SET350=null;
		Token KW_SKEWED351=null;
		Token KW_LOCATION352=null;
		ParserRuleReturnScope skewedLocations353 =null;

		ASTNode KW_SET350_tree=null;
		ASTNode KW_SKEWED351_tree=null;
		ASTNode KW_LOCATION352_tree=null;
		RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");
		RewriteRuleTokenStream stream_KW_SKEWED=new RewriteRuleTokenStream(adaptor,"token KW_SKEWED");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_skewedLocations=new RewriteRuleSubtreeStream(adaptor,"rule skewedLocations");

		pushMsg(retval.start,"alter partition skewed location", state);
		try {
			// HiveParser.g:1423:3: ( KW_SET KW_SKEWED KW_LOCATION skewedLocations -> ^( TOK_ALTERTABLE_SKEWED_LOCATION skewedLocations ) )
			// HiveParser.g:1423:5: KW_SET KW_SKEWED KW_LOCATION skewedLocations
			{
			KW_SET350=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterTblPartitionStatementSuffixSkewedLocation6366); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET350);

			KW_SKEWED351=(Token)match(input,KW_SKEWED,FOLLOW_KW_SKEWED_in_alterTblPartitionStatementSuffixSkewedLocation6368); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SKEWED.add(KW_SKEWED351);

			KW_LOCATION352=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_alterTblPartitionStatementSuffixSkewedLocation6370); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LOCATION.add(KW_LOCATION352);

			pushFollow(FOLLOW_skewedLocations_in_alterTblPartitionStatementSuffixSkewedLocation6372);
			skewedLocations353=skewedLocations();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_skewedLocations.add(skewedLocations353.getTree());
			// AST REWRITE
			// elements: skewedLocations
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1424:3: -> ^( TOK_ALTERTABLE_SKEWED_LOCATION skewedLocations )
			{
				// HiveParser.g:1424:6: ^( TOK_ALTERTABLE_SKEWED_LOCATION skewedLocations )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_SKEWED_LOCATION, "TOK_ALTERTABLE_SKEWED_LOCATION"), root_1);
				adaptor.addChild(root_1, stream_skewedLocations.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterTblPartitionStatementSuffixSkewedLocation"


	public static class skewedLocations_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "skewedLocations"
	// HiveParser.g:1427:1: skewedLocations : LPAREN skewedLocationsList RPAREN -> ^( TOK_SKEWED_LOCATIONS skewedLocationsList ) ;
	public final HiveParser.skewedLocations_return skewedLocations() throws RecognitionException {
		HiveParser.skewedLocations_return retval = new HiveParser.skewedLocations_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token LPAREN354=null;
		Token RPAREN356=null;
		ParserRuleReturnScope skewedLocationsList355 =null;

		ASTNode LPAREN354_tree=null;
		ASTNode RPAREN356_tree=null;
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_skewedLocationsList=new RewriteRuleSubtreeStream(adaptor,"rule skewedLocationsList");

		 pushMsg(retval.start,"skewed locations", state); 
		try {
			// HiveParser.g:1430:5: ( LPAREN skewedLocationsList RPAREN -> ^( TOK_SKEWED_LOCATIONS skewedLocationsList ) )
			// HiveParser.g:1431:7: LPAREN skewedLocationsList RPAREN
			{
			LPAREN354=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_skewedLocations6413); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN354);

			pushFollow(FOLLOW_skewedLocationsList_in_skewedLocations6415);
			skewedLocationsList355=skewedLocationsList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_skewedLocationsList.add(skewedLocationsList355.getTree());
			RPAREN356=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_skewedLocations6417); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN356);

			// AST REWRITE
			// elements: skewedLocationsList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1431:41: -> ^( TOK_SKEWED_LOCATIONS skewedLocationsList )
			{
				// HiveParser.g:1431:44: ^( TOK_SKEWED_LOCATIONS skewedLocationsList )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SKEWED_LOCATIONS, "TOK_SKEWED_LOCATIONS"), root_1);
				adaptor.addChild(root_1, stream_skewedLocationsList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedLocations"


	public static class skewedLocationsList_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "skewedLocationsList"
	// HiveParser.g:1434:1: skewedLocationsList : skewedLocationMap ( COMMA skewedLocationMap )* -> ^( TOK_SKEWED_LOCATION_LIST ( skewedLocationMap )+ ) ;
	public final HiveParser.skewedLocationsList_return skewedLocationsList() throws RecognitionException {
		HiveParser.skewedLocationsList_return retval = new HiveParser.skewedLocationsList_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token COMMA358=null;
		ParserRuleReturnScope skewedLocationMap357 =null;
		ParserRuleReturnScope skewedLocationMap359 =null;

		ASTNode COMMA358_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_skewedLocationMap=new RewriteRuleSubtreeStream(adaptor,"rule skewedLocationMap");

		 pushMsg(retval.start,"skewed locations list", state); 
		try {
			// HiveParser.g:1437:5: ( skewedLocationMap ( COMMA skewedLocationMap )* -> ^( TOK_SKEWED_LOCATION_LIST ( skewedLocationMap )+ ) )
			// HiveParser.g:1438:7: skewedLocationMap ( COMMA skewedLocationMap )*
			{
			pushFollow(FOLLOW_skewedLocationMap_in_skewedLocationsList6458);
			skewedLocationMap357=skewedLocationMap();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_skewedLocationMap.add(skewedLocationMap357.getTree());
			// HiveParser.g:1438:25: ( COMMA skewedLocationMap )*
			loop103:
			while (true) {
				int alt103=2;
				int LA103_0 = input.LA(1);
				if ( (LA103_0==COMMA) ) {
					alt103=1;
				}

				switch (alt103) {
				case 1 :
					// HiveParser.g:1438:26: COMMA skewedLocationMap
					{
					COMMA358=(Token)match(input,COMMA,FOLLOW_COMMA_in_skewedLocationsList6461); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA358);

					pushFollow(FOLLOW_skewedLocationMap_in_skewedLocationsList6463);
					skewedLocationMap359=skewedLocationMap();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_skewedLocationMap.add(skewedLocationMap359.getTree());
					}
					break;

				default :
					break loop103;
				}
			}

			// AST REWRITE
			// elements: skewedLocationMap
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1438:52: -> ^( TOK_SKEWED_LOCATION_LIST ( skewedLocationMap )+ )
			{
				// HiveParser.g:1438:55: ^( TOK_SKEWED_LOCATION_LIST ( skewedLocationMap )+ )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SKEWED_LOCATION_LIST, "TOK_SKEWED_LOCATION_LIST"), root_1);
				if ( !(stream_skewedLocationMap.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_skewedLocationMap.hasNext() ) {
					adaptor.addChild(root_1, stream_skewedLocationMap.nextTree());
				}
				stream_skewedLocationMap.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedLocationsList"


	public static class skewedLocationMap_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "skewedLocationMap"
	// HiveParser.g:1441:1: skewedLocationMap : key= skewedValueLocationElement EQUAL value= StringLiteral -> ^( TOK_SKEWED_LOCATION_MAP $key $value) ;
	public final HiveParser.skewedLocationMap_return skewedLocationMap() throws RecognitionException {
		HiveParser.skewedLocationMap_return retval = new HiveParser.skewedLocationMap_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token value=null;
		Token EQUAL360=null;
		ParserRuleReturnScope key =null;

		ASTNode value_tree=null;
		ASTNode EQUAL360_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
		RewriteRuleSubtreeStream stream_skewedValueLocationElement=new RewriteRuleSubtreeStream(adaptor,"rule skewedValueLocationElement");

		 pushMsg(retval.start,"specifying skewed location map", state); 
		try {
			// HiveParser.g:1444:5: (key= skewedValueLocationElement EQUAL value= StringLiteral -> ^( TOK_SKEWED_LOCATION_MAP $key $value) )
			// HiveParser.g:1445:7: key= skewedValueLocationElement EQUAL value= StringLiteral
			{
			pushFollow(FOLLOW_skewedValueLocationElement_in_skewedLocationMap6509);
			key=skewedValueLocationElement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_skewedValueLocationElement.add(key.getTree());
			EQUAL360=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_skewedLocationMap6511); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL360);

			value=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_skewedLocationMap6515); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(value);

			// AST REWRITE
			// elements: key, value
			// token labels: value
			// rule labels: key, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_value=new RewriteRuleTokenStream(adaptor,"token value",value);
			RewriteRuleSubtreeStream stream_key=new RewriteRuleSubtreeStream(adaptor,"rule key",key!=null?key.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1445:64: -> ^( TOK_SKEWED_LOCATION_MAP $key $value)
			{
				// HiveParser.g:1445:67: ^( TOK_SKEWED_LOCATION_MAP $key $value)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SKEWED_LOCATION_MAP, "TOK_SKEWED_LOCATION_MAP"), root_1);
				adaptor.addChild(root_1, stream_key.nextTree());
				adaptor.addChild(root_1, stream_value.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedLocationMap"


	public static class alterStatementSuffixLocation_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixLocation"
	// HiveParser.g:1448:1: alterStatementSuffixLocation : KW_SET KW_LOCATION newLoc= StringLiteral -> ^( TOK_ALTERTABLE_LOCATION $newLoc) ;
	public final HiveParser.alterStatementSuffixLocation_return alterStatementSuffixLocation() throws RecognitionException {
		HiveParser.alterStatementSuffixLocation_return retval = new HiveParser.alterStatementSuffixLocation_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token newLoc=null;
		Token KW_SET361=null;
		Token KW_LOCATION362=null;

		ASTNode newLoc_tree=null;
		ASTNode KW_SET361_tree=null;
		ASTNode KW_LOCATION362_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");

		pushMsg(retval.start,"alter location", state);
		try {
			// HiveParser.g:1451:3: ( KW_SET KW_LOCATION newLoc= StringLiteral -> ^( TOK_ALTERTABLE_LOCATION $newLoc) )
			// HiveParser.g:1451:5: KW_SET KW_LOCATION newLoc= StringLiteral
			{
			KW_SET361=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixLocation6552); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET361);

			KW_LOCATION362=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_alterStatementSuffixLocation6554); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LOCATION.add(KW_LOCATION362);

			newLoc=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixLocation6558); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(newLoc);

			// AST REWRITE
			// elements: newLoc
			// token labels: newLoc
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_newLoc=new RewriteRuleTokenStream(adaptor,"token newLoc",newLoc);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1452:3: -> ^( TOK_ALTERTABLE_LOCATION $newLoc)
			{
				// HiveParser.g:1452:6: ^( TOK_ALTERTABLE_LOCATION $newLoc)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_LOCATION, "TOK_ALTERTABLE_LOCATION"), root_1);
				adaptor.addChild(root_1, stream_newLoc.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixLocation"


	public static class alterStatementSuffixSkewedby_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixSkewedby"
	// HiveParser.g:1456:1: alterStatementSuffixSkewedby : ( tableSkewed -> ^( TOK_ALTERTABLE_SKEWED tableSkewed ) | KW_NOT KW_SKEWED -> ^( TOK_ALTERTABLE_SKEWED ) | KW_NOT storedAsDirs -> ^( TOK_ALTERTABLE_SKEWED storedAsDirs ) );
	public final HiveParser.alterStatementSuffixSkewedby_return alterStatementSuffixSkewedby() throws RecognitionException {
		HiveParser.alterStatementSuffixSkewedby_return retval = new HiveParser.alterStatementSuffixSkewedby_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_NOT364=null;
		Token KW_SKEWED365=null;
		Token KW_NOT366=null;
		ParserRuleReturnScope tableSkewed363 =null;
		ParserRuleReturnScope storedAsDirs367 =null;

		ASTNode KW_NOT364_tree=null;
		ASTNode KW_SKEWED365_tree=null;
		ASTNode KW_NOT366_tree=null;
		RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
		RewriteRuleTokenStream stream_KW_SKEWED=new RewriteRuleTokenStream(adaptor,"token KW_SKEWED");
		RewriteRuleSubtreeStream stream_tableSkewed=new RewriteRuleSubtreeStream(adaptor,"rule tableSkewed");
		RewriteRuleSubtreeStream stream_storedAsDirs=new RewriteRuleSubtreeStream(adaptor,"rule storedAsDirs");

		pushMsg(retval.start,"alter skewed by statement", state);
		try {
			// HiveParser.g:1459:2: ( tableSkewed -> ^( TOK_ALTERTABLE_SKEWED tableSkewed ) | KW_NOT KW_SKEWED -> ^( TOK_ALTERTABLE_SKEWED ) | KW_NOT storedAsDirs -> ^( TOK_ALTERTABLE_SKEWED storedAsDirs ) )
			int alt104=3;
			int LA104_0 = input.LA(1);
			if ( (LA104_0==KW_SKEWED) ) {
				alt104=1;
			}
			else if ( (LA104_0==KW_NOT) ) {
				int LA104_2 = input.LA(2);
				if ( (LA104_2==KW_SKEWED) ) {
					alt104=2;
				}
				else if ( (LA104_2==KW_STORED) ) {
					alt104=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 104, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 104, 0, input);
				throw nvae;
			}

			switch (alt104) {
				case 1 :
					// HiveParser.g:1459:4: tableSkewed
					{
					pushFollow(FOLLOW_tableSkewed_in_alterStatementSuffixSkewedby6591);
					tableSkewed363=tableSkewed();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableSkewed.add(tableSkewed363.getTree());
					// AST REWRITE
					// elements: tableSkewed
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1460:2: -> ^( TOK_ALTERTABLE_SKEWED tableSkewed )
					{
						// HiveParser.g:1460:4: ^( TOK_ALTERTABLE_SKEWED tableSkewed )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_SKEWED, "TOK_ALTERTABLE_SKEWED"), root_1);
						adaptor.addChild(root_1, stream_tableSkewed.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:1462:3: KW_NOT KW_SKEWED
					{
					KW_NOT364=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_alterStatementSuffixSkewedby6606); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT364);

					KW_SKEWED365=(Token)match(input,KW_SKEWED,FOLLOW_KW_SKEWED_in_alterStatementSuffixSkewedby6608); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SKEWED.add(KW_SKEWED365);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1463:2: -> ^( TOK_ALTERTABLE_SKEWED )
					{
						// HiveParser.g:1463:4: ^( TOK_ALTERTABLE_SKEWED )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_SKEWED, "TOK_ALTERTABLE_SKEWED"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// HiveParser.g:1465:3: KW_NOT storedAsDirs
					{
					KW_NOT366=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_alterStatementSuffixSkewedby6621); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT366);

					pushFollow(FOLLOW_storedAsDirs_in_alterStatementSuffixSkewedby6623);
					storedAsDirs367=storedAsDirs();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_storedAsDirs.add(storedAsDirs367.getTree());
					// AST REWRITE
					// elements: storedAsDirs
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1466:2: -> ^( TOK_ALTERTABLE_SKEWED storedAsDirs )
					{
						// HiveParser.g:1466:4: ^( TOK_ALTERTABLE_SKEWED storedAsDirs )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_SKEWED, "TOK_ALTERTABLE_SKEWED"), root_1);
						adaptor.addChild(root_1, stream_storedAsDirs.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixSkewedby"


	public static class alterStatementSuffixExchangePartition_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixExchangePartition"
	// HiveParser.g:1469:1: alterStatementSuffixExchangePartition : KW_EXCHANGE partitionSpec KW_WITH KW_TABLE exchangename= tableName -> ^( TOK_ALTERTABLE_EXCHANGEPARTITION partitionSpec $exchangename) ;
	public final HiveParser.alterStatementSuffixExchangePartition_return alterStatementSuffixExchangePartition() throws RecognitionException {
		HiveParser.alterStatementSuffixExchangePartition_return retval = new HiveParser.alterStatementSuffixExchangePartition_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_EXCHANGE368=null;
		Token KW_WITH370=null;
		Token KW_TABLE371=null;
		ParserRuleReturnScope exchangename =null;
		ParserRuleReturnScope partitionSpec369 =null;

		ASTNode KW_EXCHANGE368_tree=null;
		ASTNode KW_WITH370_tree=null;
		ASTNode KW_TABLE371_tree=null;
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_EXCHANGE=new RewriteRuleTokenStream(adaptor,"token KW_EXCHANGE");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		pushMsg(retval.start,"alter exchange partition", state);
		try {
			// HiveParser.g:1472:5: ( KW_EXCHANGE partitionSpec KW_WITH KW_TABLE exchangename= tableName -> ^( TOK_ALTERTABLE_EXCHANGEPARTITION partitionSpec $exchangename) )
			// HiveParser.g:1472:7: KW_EXCHANGE partitionSpec KW_WITH KW_TABLE exchangename= tableName
			{
			KW_EXCHANGE368=(Token)match(input,KW_EXCHANGE,FOLLOW_KW_EXCHANGE_in_alterStatementSuffixExchangePartition6654); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_EXCHANGE.add(KW_EXCHANGE368);

			pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixExchangePartition6656);
			partitionSpec369=partitionSpec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec369.getTree());
			KW_WITH370=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_alterStatementSuffixExchangePartition6658); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH370);

			KW_TABLE371=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_alterStatementSuffixExchangePartition6660); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE371);

			pushFollow(FOLLOW_tableName_in_alterStatementSuffixExchangePartition6664);
			exchangename=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(exchangename.getTree());
			// AST REWRITE
			// elements: partitionSpec, exchangename
			// token labels: 
			// rule labels: exchangename, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_exchangename=new RewriteRuleSubtreeStream(adaptor,"rule exchangename",exchangename!=null?exchangename.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1473:5: -> ^( TOK_ALTERTABLE_EXCHANGEPARTITION partitionSpec $exchangename)
			{
				// HiveParser.g:1473:8: ^( TOK_ALTERTABLE_EXCHANGEPARTITION partitionSpec $exchangename)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_EXCHANGEPARTITION, "TOK_ALTERTABLE_EXCHANGEPARTITION"), root_1);
				adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				adaptor.addChild(root_1, stream_exchangename.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixExchangePartition"


	public static class alterStatementSuffixRenamePart_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixRenamePart"
	// HiveParser.g:1476:1: alterStatementSuffixRenamePart : KW_RENAME KW_TO partitionSpec -> ^( TOK_ALTERTABLE_RENAMEPART partitionSpec ) ;
	public final HiveParser.alterStatementSuffixRenamePart_return alterStatementSuffixRenamePart() throws RecognitionException {
		HiveParser.alterStatementSuffixRenamePart_return retval = new HiveParser.alterStatementSuffixRenamePart_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_RENAME372=null;
		Token KW_TO373=null;
		ParserRuleReturnScope partitionSpec374 =null;

		ASTNode KW_RENAME372_tree=null;
		ASTNode KW_TO373_tree=null;
		RewriteRuleTokenStream stream_KW_RENAME=new RewriteRuleTokenStream(adaptor,"token KW_RENAME");
		RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		 pushMsg(retval.start,"alter table rename partition statement", state); 
		try {
			// HiveParser.g:1479:5: ( KW_RENAME KW_TO partitionSpec -> ^( TOK_ALTERTABLE_RENAMEPART partitionSpec ) )
			// HiveParser.g:1479:7: KW_RENAME KW_TO partitionSpec
			{
			KW_RENAME372=(Token)match(input,KW_RENAME,FOLLOW_KW_RENAME_in_alterStatementSuffixRenamePart6706); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_RENAME.add(KW_RENAME372);

			KW_TO373=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_alterStatementSuffixRenamePart6708); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TO.add(KW_TO373);

			pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixRenamePart6710);
			partitionSpec374=partitionSpec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec374.getTree());
			// AST REWRITE
			// elements: partitionSpec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1480:5: -> ^( TOK_ALTERTABLE_RENAMEPART partitionSpec )
			{
				// HiveParser.g:1480:7: ^( TOK_ALTERTABLE_RENAMEPART partitionSpec )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_RENAMEPART, "TOK_ALTERTABLE_RENAMEPART"), root_1);
				adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixRenamePart"


	public static class alterStatementSuffixStatsPart_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixStatsPart"
	// HiveParser.g:1483:1: alterStatementSuffixStatsPart : KW_UPDATE KW_STATISTICS KW_FOR ( KW_COLUMN )? colName= identifier KW_SET tableProperties ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? ) ;
	public final HiveParser.alterStatementSuffixStatsPart_return alterStatementSuffixStatsPart() throws RecognitionException {
		HiveParser.alterStatementSuffixStatsPart_return retval = new HiveParser.alterStatementSuffixStatsPart_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token comment=null;
		Token KW_UPDATE375=null;
		Token KW_STATISTICS376=null;
		Token KW_FOR377=null;
		Token KW_COLUMN378=null;
		Token KW_SET379=null;
		Token KW_COMMENT381=null;
		ParserRuleReturnScope colName =null;
		ParserRuleReturnScope tableProperties380 =null;

		ASTNode comment_tree=null;
		ASTNode KW_UPDATE375_tree=null;
		ASTNode KW_STATISTICS376_tree=null;
		ASTNode KW_FOR377_tree=null;
		ASTNode KW_COLUMN378_tree=null;
		ASTNode KW_SET379_tree=null;
		ASTNode KW_COMMENT381_tree=null;
		RewriteRuleTokenStream stream_KW_STATISTICS=new RewriteRuleTokenStream(adaptor,"token KW_STATISTICS");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
		RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
		RewriteRuleTokenStream stream_KW_COLUMN=new RewriteRuleTokenStream(adaptor,"token KW_COLUMN");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");

		 pushMsg(retval.start,"alter table stats partition statement", state); 
		try {
			// HiveParser.g:1486:5: ( KW_UPDATE KW_STATISTICS KW_FOR ( KW_COLUMN )? colName= identifier KW_SET tableProperties ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? ) )
			// HiveParser.g:1486:7: KW_UPDATE KW_STATISTICS KW_FOR ( KW_COLUMN )? colName= identifier KW_SET tableProperties ( KW_COMMENT comment= StringLiteral )?
			{
			KW_UPDATE375=(Token)match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_alterStatementSuffixStatsPart6748); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_UPDATE.add(KW_UPDATE375);

			KW_STATISTICS376=(Token)match(input,KW_STATISTICS,FOLLOW_KW_STATISTICS_in_alterStatementSuffixStatsPart6750); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_STATISTICS.add(KW_STATISTICS376);

			KW_FOR377=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_alterStatementSuffixStatsPart6752); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FOR.add(KW_FOR377);

			// HiveParser.g:1486:38: ( KW_COLUMN )?
			int alt105=2;
			int LA105_0 = input.LA(1);
			if ( (LA105_0==KW_COLUMN) ) {
				alt105=1;
			}
			switch (alt105) {
				case 1 :
					// HiveParser.g:1486:38: KW_COLUMN
					{
					KW_COLUMN378=(Token)match(input,KW_COLUMN,FOLLOW_KW_COLUMN_in_alterStatementSuffixStatsPart6754); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COLUMN.add(KW_COLUMN378);

					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_alterStatementSuffixStatsPart6759);
			colName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(colName.getTree());
			KW_SET379=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixStatsPart6761); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET379);

			pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixStatsPart6763);
			tableProperties380=tableProperties();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties380.getTree());
			// HiveParser.g:1486:91: ( KW_COMMENT comment= StringLiteral )?
			int alt106=2;
			int LA106_0 = input.LA(1);
			if ( (LA106_0==KW_COMMENT) ) {
				alt106=1;
			}
			switch (alt106) {
				case 1 :
					// HiveParser.g:1486:92: KW_COMMENT comment= StringLiteral
					{
					KW_COMMENT381=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_alterStatementSuffixStatsPart6766); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT381);

					comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixStatsPart6770); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(comment);

					}
					break;

			}

			// AST REWRITE
			// elements: tableProperties, colName, comment
			// token labels: comment
			// rule labels: colName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1487:5: -> ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? )
			{
				// HiveParser.g:1487:7: ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_UPDATECOLSTATS, "TOK_ALTERTABLE_UPDATECOLSTATS"), root_1);
				adaptor.addChild(root_1, stream_colName.nextTree());
				adaptor.addChild(root_1, stream_tableProperties.nextTree());
				// HiveParser.g:1487:65: ( $comment)?
				if ( stream_comment.hasNext() ) {
					adaptor.addChild(root_1, stream_comment.nextNode());
				}
				stream_comment.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixStatsPart"


	public static class alterStatementSuffixMergeFiles_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixMergeFiles"
	// HiveParser.g:1490:1: alterStatementSuffixMergeFiles : KW_CONCATENATE -> ^( TOK_ALTERTABLE_MERGEFILES ) ;
	public final HiveParser.alterStatementSuffixMergeFiles_return alterStatementSuffixMergeFiles() throws RecognitionException {
		HiveParser.alterStatementSuffixMergeFiles_return retval = new HiveParser.alterStatementSuffixMergeFiles_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_CONCATENATE382=null;

		ASTNode KW_CONCATENATE382_tree=null;
		RewriteRuleTokenStream stream_KW_CONCATENATE=new RewriteRuleTokenStream(adaptor,"token KW_CONCATENATE");

		 pushMsg(retval.start,"", state); 
		try {
			// HiveParser.g:1493:5: ( KW_CONCATENATE -> ^( TOK_ALTERTABLE_MERGEFILES ) )
			// HiveParser.g:1493:7: KW_CONCATENATE
			{
			KW_CONCATENATE382=(Token)match(input,KW_CONCATENATE,FOLLOW_KW_CONCATENATE_in_alterStatementSuffixMergeFiles6817); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CONCATENATE.add(KW_CONCATENATE382);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1494:5: -> ^( TOK_ALTERTABLE_MERGEFILES )
			{
				// HiveParser.g:1494:8: ^( TOK_ALTERTABLE_MERGEFILES )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_MERGEFILES, "TOK_ALTERTABLE_MERGEFILES"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixMergeFiles"


	public static class alterStatementSuffixBucketNum_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixBucketNum"
	// HiveParser.g:1497:1: alterStatementSuffixBucketNum : KW_INTO num= Number KW_BUCKETS -> ^( TOK_ALTERTABLE_BUCKETS $num) ;
	public final HiveParser.alterStatementSuffixBucketNum_return alterStatementSuffixBucketNum() throws RecognitionException {
		HiveParser.alterStatementSuffixBucketNum_return retval = new HiveParser.alterStatementSuffixBucketNum_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token num=null;
		Token KW_INTO383=null;
		Token KW_BUCKETS384=null;

		ASTNode num_tree=null;
		ASTNode KW_INTO383_tree=null;
		ASTNode KW_BUCKETS384_tree=null;
		RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
		RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
		RewriteRuleTokenStream stream_KW_BUCKETS=new RewriteRuleTokenStream(adaptor,"token KW_BUCKETS");

		 pushMsg(retval.start,"", state); 
		try {
			// HiveParser.g:1500:5: ( KW_INTO num= Number KW_BUCKETS -> ^( TOK_ALTERTABLE_BUCKETS $num) )
			// HiveParser.g:1500:7: KW_INTO num= Number KW_BUCKETS
			{
			KW_INTO383=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_alterStatementSuffixBucketNum6854); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_INTO.add(KW_INTO383);

			num=(Token)match(input,Number,FOLLOW_Number_in_alterStatementSuffixBucketNum6858); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_Number.add(num);

			KW_BUCKETS384=(Token)match(input,KW_BUCKETS,FOLLOW_KW_BUCKETS_in_alterStatementSuffixBucketNum6860); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_BUCKETS.add(KW_BUCKETS384);

			// AST REWRITE
			// elements: num
			// token labels: num
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1501:5: -> ^( TOK_ALTERTABLE_BUCKETS $num)
			{
				// HiveParser.g:1501:8: ^( TOK_ALTERTABLE_BUCKETS $num)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_BUCKETS, "TOK_ALTERTABLE_BUCKETS"), root_1);
				adaptor.addChild(root_1, stream_num.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixBucketNum"


	public static class blocking_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "blocking"
	// HiveParser.g:1504:1: blocking : KW_AND KW_WAIT -> TOK_BLOCKING ;
	public final HiveParser.blocking_return blocking() throws RecognitionException {
		HiveParser.blocking_return retval = new HiveParser.blocking_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_AND385=null;
		Token KW_WAIT386=null;

		ASTNode KW_AND385_tree=null;
		ASTNode KW_WAIT386_tree=null;
		RewriteRuleTokenStream stream_KW_WAIT=new RewriteRuleTokenStream(adaptor,"token KW_WAIT");
		RewriteRuleTokenStream stream_KW_AND=new RewriteRuleTokenStream(adaptor,"token KW_AND");

		try {
			// HiveParser.g:1505:3: ( KW_AND KW_WAIT -> TOK_BLOCKING )
			// HiveParser.g:1505:5: KW_AND KW_WAIT
			{
			KW_AND385=(Token)match(input,KW_AND,FOLLOW_KW_AND_in_blocking6888); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_AND.add(KW_AND385);

			KW_WAIT386=(Token)match(input,KW_WAIT,FOLLOW_KW_WAIT_in_blocking6890); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_WAIT.add(KW_WAIT386);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1506:3: -> TOK_BLOCKING
			{
				adaptor.addChild(root_0, (ASTNode)adaptor.create(TOK_BLOCKING, "TOK_BLOCKING"));
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "blocking"


	public static class alterStatementSuffixCompact_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixCompact"
	// HiveParser.g:1509:1: alterStatementSuffixCompact : KW_COMPACT compactType= StringLiteral ( blocking )? ( KW_WITH KW_OVERWRITE KW_TBLPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_COMPACT $compactType ( blocking )? ( tableProperties )? ) ;
	public final HiveParser.alterStatementSuffixCompact_return alterStatementSuffixCompact() throws RecognitionException {
		HiveParser.alterStatementSuffixCompact_return retval = new HiveParser.alterStatementSuffixCompact_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token compactType=null;
		Token KW_COMPACT387=null;
		Token KW_WITH389=null;
		Token KW_OVERWRITE390=null;
		Token KW_TBLPROPERTIES391=null;
		ParserRuleReturnScope blocking388 =null;
		ParserRuleReturnScope tableProperties392 =null;

		ASTNode compactType_tree=null;
		ASTNode KW_COMPACT387_tree=null;
		ASTNode KW_WITH389_tree=null;
		ASTNode KW_OVERWRITE390_tree=null;
		ASTNode KW_TBLPROPERTIES391_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_COMPACT=new RewriteRuleTokenStream(adaptor,"token KW_COMPACT");
		RewriteRuleTokenStream stream_KW_OVERWRITE=new RewriteRuleTokenStream(adaptor,"token KW_OVERWRITE");
		RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
		RewriteRuleSubtreeStream stream_blocking=new RewriteRuleSubtreeStream(adaptor,"rule blocking");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");

		 msgs.push("compaction request"); 
		try {
			// HiveParser.g:1512:5: ( KW_COMPACT compactType= StringLiteral ( blocking )? ( KW_WITH KW_OVERWRITE KW_TBLPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_COMPACT $compactType ( blocking )? ( tableProperties )? ) )
			// HiveParser.g:1512:7: KW_COMPACT compactType= StringLiteral ( blocking )? ( KW_WITH KW_OVERWRITE KW_TBLPROPERTIES tableProperties )?
			{
			KW_COMPACT387=(Token)match(input,KW_COMPACT,FOLLOW_KW_COMPACT_in_alterStatementSuffixCompact6921); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_COMPACT.add(KW_COMPACT387);

			compactType=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixCompact6925); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(compactType);

			// HiveParser.g:1512:44: ( blocking )?
			int alt107=2;
			int LA107_0 = input.LA(1);
			if ( (LA107_0==KW_AND) ) {
				alt107=1;
			}
			switch (alt107) {
				case 1 :
					// HiveParser.g:1512:44: blocking
					{
					pushFollow(FOLLOW_blocking_in_alterStatementSuffixCompact6927);
					blocking388=blocking();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_blocking.add(blocking388.getTree());
					}
					break;

			}

			// HiveParser.g:1512:54: ( KW_WITH KW_OVERWRITE KW_TBLPROPERTIES tableProperties )?
			int alt108=2;
			int LA108_0 = input.LA(1);
			if ( (LA108_0==KW_WITH) ) {
				alt108=1;
			}
			switch (alt108) {
				case 1 :
					// HiveParser.g:1512:55: KW_WITH KW_OVERWRITE KW_TBLPROPERTIES tableProperties
					{
					KW_WITH389=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_alterStatementSuffixCompact6931); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH389);

					KW_OVERWRITE390=(Token)match(input,KW_OVERWRITE,FOLLOW_KW_OVERWRITE_in_alterStatementSuffixCompact6933); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_OVERWRITE.add(KW_OVERWRITE390);

					KW_TBLPROPERTIES391=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixCompact6935); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES391);

					pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixCompact6937);
					tableProperties392=tableProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties392.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: compactType, tableProperties, blocking
			// token labels: compactType
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_compactType=new RewriteRuleTokenStream(adaptor,"token compactType",compactType);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1513:5: -> ^( TOK_ALTERTABLE_COMPACT $compactType ( blocking )? ( tableProperties )? )
			{
				// HiveParser.g:1513:8: ^( TOK_ALTERTABLE_COMPACT $compactType ( blocking )? ( tableProperties )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_COMPACT, "TOK_ALTERTABLE_COMPACT"), root_1);
				adaptor.addChild(root_1, stream_compactType.nextNode());
				// HiveParser.g:1513:46: ( blocking )?
				if ( stream_blocking.hasNext() ) {
					adaptor.addChild(root_1, stream_blocking.nextTree());
				}
				stream_blocking.reset();

				// HiveParser.g:1513:56: ( tableProperties )?
				if ( stream_tableProperties.hasNext() ) {
					adaptor.addChild(root_1, stream_tableProperties.nextTree());
				}
				stream_tableProperties.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { msgs.pop(); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixCompact"


	public static class alterStatementSuffixSetOwner_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixSetOwner"
	// HiveParser.g:1516:1: alterStatementSuffixSetOwner : KW_SET KW_OWNER principalName -> ^( TOK_ALTERTABLE_OWNER principalName ) ;
	public final HiveParser.alterStatementSuffixSetOwner_return alterStatementSuffixSetOwner() throws RecognitionException {
		HiveParser.alterStatementSuffixSetOwner_return retval = new HiveParser.alterStatementSuffixSetOwner_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_SET393=null;
		Token KW_OWNER394=null;
		ParserRuleReturnScope principalName395 =null;

		ASTNode KW_SET393_tree=null;
		ASTNode KW_OWNER394_tree=null;
		RewriteRuleTokenStream stream_KW_OWNER=new RewriteRuleTokenStream(adaptor,"token KW_OWNER");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");

		 pushMsg(retval.start,"alter table set owner", state); 
		try {
			// HiveParser.g:1519:5: ( KW_SET KW_OWNER principalName -> ^( TOK_ALTERTABLE_OWNER principalName ) )
			// HiveParser.g:1519:7: KW_SET KW_OWNER principalName
			{
			KW_SET393=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixSetOwner6985); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET393);

			KW_OWNER394=(Token)match(input,KW_OWNER,FOLLOW_KW_OWNER_in_alterStatementSuffixSetOwner6987); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_OWNER.add(KW_OWNER394);

			pushFollow(FOLLOW_principalName_in_alterStatementSuffixSetOwner6989);
			principalName395=principalName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_principalName.add(principalName395.getTree());
			// AST REWRITE
			// elements: principalName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1520:5: -> ^( TOK_ALTERTABLE_OWNER principalName )
			{
				// HiveParser.g:1520:8: ^( TOK_ALTERTABLE_OWNER principalName )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_OWNER, "TOK_ALTERTABLE_OWNER"), root_1);
				adaptor.addChild(root_1, stream_principalName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixSetOwner"


	public static class fileFormat_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "fileFormat"
	// HiveParser.g:1523:1: fileFormat : ( KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral KW_SERDE serdeCls= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt $serdeCls ( $inDriver)? ( $outDriver)? ) |genericSpec= identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) );
	public final HiveParser.fileFormat_return fileFormat() throws RecognitionException {
		HiveParser.fileFormat_return retval = new HiveParser.fileFormat_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token inFmt=null;
		Token outFmt=null;
		Token serdeCls=null;
		Token inDriver=null;
		Token outDriver=null;
		Token KW_INPUTFORMAT396=null;
		Token KW_OUTPUTFORMAT397=null;
		Token KW_SERDE398=null;
		Token KW_INPUTDRIVER399=null;
		Token KW_OUTPUTDRIVER400=null;
		ParserRuleReturnScope genericSpec =null;

		ASTNode inFmt_tree=null;
		ASTNode outFmt_tree=null;
		ASTNode serdeCls_tree=null;
		ASTNode inDriver_tree=null;
		ASTNode outDriver_tree=null;
		ASTNode KW_INPUTFORMAT396_tree=null;
		ASTNode KW_OUTPUTFORMAT397_tree=null;
		ASTNode KW_SERDE398_tree=null;
		ASTNode KW_INPUTDRIVER399_tree=null;
		ASTNode KW_OUTPUTDRIVER400_tree=null;
		RewriteRuleTokenStream stream_KW_INPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_INPUTFORMAT");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_INPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_INPUTDRIVER");
		RewriteRuleTokenStream stream_KW_SERDE=new RewriteRuleTokenStream(adaptor,"token KW_SERDE");
		RewriteRuleTokenStream stream_KW_OUTPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTFORMAT");
		RewriteRuleTokenStream stream_KW_OUTPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTDRIVER");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg(retval.start,"file format specification", state); 
		try {
			// HiveParser.g:1526:5: ( KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral KW_SERDE serdeCls= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt $serdeCls ( $inDriver)? ( $outDriver)? ) |genericSpec= identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) )
			int alt110=2;
			int LA110_0 = input.LA(1);
			if ( (LA110_0==KW_INPUTFORMAT) ) {
				int LA110_1 = input.LA(2);
				if ( (LA110_1==StringLiteral) ) {
					alt110=1;
				}
				else if ( (LA110_1==EOF) ) {
					alt110=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 110, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA110_0==Identifier||(LA110_0 >= KW_ABORT && LA110_0 <= KW_AFTER)||LA110_0==KW_ALLOC_FRACTION||LA110_0==KW_ANALYZE||LA110_0==KW_ARCHIVE||(LA110_0 >= KW_ASC && LA110_0 <= KW_AST)||(LA110_0 >= KW_AUTOCOMMIT && LA110_0 <= KW_BEFORE)||(LA110_0 >= KW_BUCKET && LA110_0 <= KW_BUCKETS)||(LA110_0 >= KW_CACHE && LA110_0 <= KW_CASCADE)||LA110_0==KW_CHANGE||(LA110_0 >= KW_CHECK && LA110_0 <= KW_COLLECTION)||(LA110_0 >= KW_COLUMNS && LA110_0 <= KW_COMMENT)||(LA110_0 >= KW_COMPACT && LA110_0 <= KW_CONCATENATE)||LA110_0==KW_CONTINUE||LA110_0==KW_DATA||(LA110_0 >= KW_DATABASES && LA110_0 <= KW_DEBUG)||(LA110_0 >= KW_DEFAULT && LA110_0 <= KW_DEFINED)||(LA110_0 >= KW_DELIMITED && LA110_0 <= KW_DESC)||(LA110_0 >= KW_DETAIL && LA110_0 <= KW_DISABLE)||(LA110_0 >= KW_DISTRIBUTE && LA110_0 <= KW_DO)||LA110_0==KW_DOW||(LA110_0 >= KW_DUMP && LA110_0 <= KW_ELEM_TYPE)||LA110_0==KW_ENABLE||(LA110_0 >= KW_ENFORCED && LA110_0 <= KW_ESCAPED)||LA110_0==KW_EXCLUSIVE||(LA110_0 >= KW_EXPLAIN && LA110_0 <= KW_EXPRESSION)||(LA110_0 >= KW_FIELDS && LA110_0 <= KW_FIRST)||(LA110_0 >= KW_FORMAT && LA110_0 <= KW_FORMATTED)||LA110_0==KW_FUNCTIONS||LA110_0==KW_GROUP||(LA110_0 >= KW_HOUR && LA110_0 <= KW_IDXPROPERTIES)||(LA110_0 >= KW_INDEX && LA110_0 <= KW_INDEXES)||(LA110_0 >= KW_INPATH && LA110_0 <= KW_INPUTDRIVER)||(LA110_0 >= KW_ISOLATION && LA110_0 <= KW_JAR)||(LA110_0 >= KW_KEY && LA110_0 <= KW_LAST)||LA110_0==KW_LEVEL||(LA110_0 >= KW_LIMIT && LA110_0 <= KW_LOAD)||(LA110_0 >= KW_LOCATION && LA110_0 <= KW_LONG)||LA110_0==KW_MANAGEMENT||(LA110_0 >= KW_MAPJOIN && LA110_0 <= KW_MATERIALIZED)||LA110_0==KW_METADATA||(LA110_0 >= KW_MINUTE && LA110_0 <= KW_MONTH)||(LA110_0 >= KW_MOVE && LA110_0 <= KW_MSCK)||(LA110_0 >= KW_NORELY && LA110_0 <= KW_NOSCAN)||LA110_0==KW_NOVALIDATE||LA110_0==KW_NULLS||LA110_0==KW_OFFSET||(LA110_0 >= KW_OPERATOR && LA110_0 <= KW_OPTION)||LA110_0==KW_ORDER||(LA110_0 >= KW_OUTPUTDRIVER && LA110_0 <= KW_OUTPUTFORMAT)||(LA110_0 >= KW_OVERWRITE && LA110_0 <= KW_OWNER)||(LA110_0 >= KW_PARTITIONED && LA110_0 <= KW_PATH)||(LA110_0 >= KW_PLAN && LA110_0 <= KW_POOL)||LA110_0==KW_PRINCIPALS||(LA110_0 >= KW_PURGE && LA110_0 <= KW_QUERY_PARALLELISM)||LA110_0==KW_READ||(LA110_0 >= KW_REBUILD && LA110_0 <= KW_RECORDWRITER)||(LA110_0 >= KW_RELOAD && LA110_0 <= KW_RESTRICT)||LA110_0==KW_REWRITE||(LA110_0 >= KW_ROLE && LA110_0 <= KW_ROLES)||(LA110_0 >= KW_SCHEDULING_POLICY && LA110_0 <= KW_SECOND)||(LA110_0 >= KW_SEMI && LA110_0 <= KW_SERVER)||(LA110_0 >= KW_SETS && LA110_0 <= KW_SKEWED)||(LA110_0 >= KW_SNAPSHOT && LA110_0 <= KW_SSL)||(LA110_0 >= KW_STATISTICS && LA110_0 <= KW_SUMMARY)||LA110_0==KW_TABLES||(LA110_0 >= KW_TBLPROPERTIES && LA110_0 <= KW_TERMINATED)||LA110_0==KW_TINYINT||(LA110_0 >= KW_TOUCH && LA110_0 <= KW_TRANSACTIONS)||LA110_0==KW_UNARCHIVE||LA110_0==KW_UNDO||LA110_0==KW_UNIONTYPE||(LA110_0 >= KW_UNKNOWN && LA110_0 <= KW_UNSIGNED)||(LA110_0 >= KW_URI && LA110_0 <= KW_USE)||(LA110_0 >= KW_UTC && LA110_0 <= KW_VALIDATE)||LA110_0==KW_VALUE_TYPE||(LA110_0 >= KW_VECTORIZATION && LA110_0 <= KW_WEEK)||LA110_0==KW_WHILE||(LA110_0 >= KW_WORK && LA110_0 <= KW_ZONE)||LA110_0==KW_BATCH||LA110_0==KW_DAYOFWEEK||LA110_0==KW_HOLD_DDLTIME||LA110_0==KW_IGNORE||LA110_0==KW_NO_DROP||LA110_0==KW_OFFLINE||LA110_0==KW_PROTECTION||LA110_0==KW_READONLY||LA110_0==KW_TIMESTAMPTZ) ) {
				alt110=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 110, 0, input);
				throw nvae;
			}

			switch (alt110) {
				case 1 :
					// HiveParser.g:1526:7: KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral KW_SERDE serdeCls= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
					{
					KW_INPUTFORMAT396=(Token)match(input,KW_INPUTFORMAT,FOLLOW_KW_INPUTFORMAT_in_fileFormat7028); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INPUTFORMAT.add(KW_INPUTFORMAT396);

					inFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat7032); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(inFmt);

					KW_OUTPUTFORMAT397=(Token)match(input,KW_OUTPUTFORMAT,FOLLOW_KW_OUTPUTFORMAT_in_fileFormat7034); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_OUTPUTFORMAT.add(KW_OUTPUTFORMAT397);

					outFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat7038); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(outFmt);

					KW_SERDE398=(Token)match(input,KW_SERDE,FOLLOW_KW_SERDE_in_fileFormat7040); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SERDE.add(KW_SERDE398);

					serdeCls=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat7044); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(serdeCls);

					// HiveParser.g:1526:111: ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
					int alt109=2;
					int LA109_0 = input.LA(1);
					if ( (LA109_0==KW_INPUTDRIVER) ) {
						alt109=1;
					}
					switch (alt109) {
						case 1 :
							// HiveParser.g:1526:112: KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral
							{
							KW_INPUTDRIVER399=(Token)match(input,KW_INPUTDRIVER,FOLLOW_KW_INPUTDRIVER_in_fileFormat7047); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_INPUTDRIVER.add(KW_INPUTDRIVER399);

							inDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat7051); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_StringLiteral.add(inDriver);

							KW_OUTPUTDRIVER400=(Token)match(input,KW_OUTPUTDRIVER,FOLLOW_KW_OUTPUTDRIVER_in_fileFormat7053); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_OUTPUTDRIVER.add(KW_OUTPUTDRIVER400);

							outDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat7057); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_StringLiteral.add(outDriver);

							}
							break;

					}

					// AST REWRITE
					// elements: serdeCls, inDriver, outDriver, outFmt, inFmt
					// token labels: inFmt, inDriver, serdeCls, outDriver, outFmt
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_inFmt=new RewriteRuleTokenStream(adaptor,"token inFmt",inFmt);
					RewriteRuleTokenStream stream_inDriver=new RewriteRuleTokenStream(adaptor,"token inDriver",inDriver);
					RewriteRuleTokenStream stream_serdeCls=new RewriteRuleTokenStream(adaptor,"token serdeCls",serdeCls);
					RewriteRuleTokenStream stream_outDriver=new RewriteRuleTokenStream(adaptor,"token outDriver",outDriver);
					RewriteRuleTokenStream stream_outFmt=new RewriteRuleTokenStream(adaptor,"token outFmt",outFmt);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1527:7: -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt $serdeCls ( $inDriver)? ( $outDriver)? )
					{
						// HiveParser.g:1527:10: ^( TOK_TABLEFILEFORMAT $inFmt $outFmt $serdeCls ( $inDriver)? ( $outDriver)? )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABLEFILEFORMAT, "TOK_TABLEFILEFORMAT"), root_1);
						adaptor.addChild(root_1, stream_inFmt.nextNode());
						adaptor.addChild(root_1, stream_outFmt.nextNode());
						adaptor.addChild(root_1, stream_serdeCls.nextNode());
						// HiveParser.g:1527:58: ( $inDriver)?
						if ( stream_inDriver.hasNext() ) {
							adaptor.addChild(root_1, stream_inDriver.nextNode());
						}
						stream_inDriver.reset();

						// HiveParser.g:1527:69: ( $outDriver)?
						if ( stream_outDriver.hasNext() ) {
							adaptor.addChild(root_1, stream_outDriver.nextNode());
						}
						stream_outDriver.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:1528:7: genericSpec= identifier
					{
					pushFollow(FOLLOW_identifier_in_fileFormat7098);
					genericSpec=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(genericSpec.getTree());
					// AST REWRITE
					// elements: genericSpec
					// token labels: 
					// rule labels: genericSpec, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_genericSpec=new RewriteRuleSubtreeStream(adaptor,"rule genericSpec",genericSpec!=null?genericSpec.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1528:30: -> ^( TOK_FILEFORMAT_GENERIC $genericSpec)
					{
						// HiveParser.g:1528:33: ^( TOK_FILEFORMAT_GENERIC $genericSpec)
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_FILEFORMAT_GENERIC, "TOK_FILEFORMAT_GENERIC"), root_1);
						adaptor.addChild(root_1, stream_genericSpec.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "fileFormat"


	public static class inputFileFormat_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "inputFileFormat"
	// HiveParser.g:1531:1: inputFileFormat : KW_INPUTFORMAT inFmt= StringLiteral KW_SERDE serdeCls= StringLiteral -> ^( TOK_INPUTFORMAT $inFmt $serdeCls) ;
	public final HiveParser.inputFileFormat_return inputFileFormat() throws RecognitionException {
		HiveParser.inputFileFormat_return retval = new HiveParser.inputFileFormat_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token inFmt=null;
		Token serdeCls=null;
		Token KW_INPUTFORMAT401=null;
		Token KW_SERDE402=null;

		ASTNode inFmt_tree=null;
		ASTNode serdeCls_tree=null;
		ASTNode KW_INPUTFORMAT401_tree=null;
		ASTNode KW_SERDE402_tree=null;
		RewriteRuleTokenStream stream_KW_INPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_INPUTFORMAT");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_SERDE=new RewriteRuleTokenStream(adaptor,"token KW_SERDE");

		 pushMsg(retval.start,"Load Data input file format specification", state); 
		try {
			// HiveParser.g:1534:5: ( KW_INPUTFORMAT inFmt= StringLiteral KW_SERDE serdeCls= StringLiteral -> ^( TOK_INPUTFORMAT $inFmt $serdeCls) )
			// HiveParser.g:1534:7: KW_INPUTFORMAT inFmt= StringLiteral KW_SERDE serdeCls= StringLiteral
			{
			KW_INPUTFORMAT401=(Token)match(input,KW_INPUTFORMAT,FOLLOW_KW_INPUTFORMAT_in_inputFileFormat7134); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_INPUTFORMAT.add(KW_INPUTFORMAT401);

			inFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_inputFileFormat7138); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(inFmt);

			KW_SERDE402=(Token)match(input,KW_SERDE,FOLLOW_KW_SERDE_in_inputFileFormat7140); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SERDE.add(KW_SERDE402);

			serdeCls=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_inputFileFormat7144); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(serdeCls);

			// AST REWRITE
			// elements: serdeCls, inFmt
			// token labels: inFmt, serdeCls
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_inFmt=new RewriteRuleTokenStream(adaptor,"token inFmt",inFmt);
			RewriteRuleTokenStream stream_serdeCls=new RewriteRuleTokenStream(adaptor,"token serdeCls",serdeCls);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1535:7: -> ^( TOK_INPUTFORMAT $inFmt $serdeCls)
			{
				// HiveParser.g:1535:10: ^( TOK_INPUTFORMAT $inFmt $serdeCls)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_INPUTFORMAT, "TOK_INPUTFORMAT"), root_1);
				adaptor.addChild(root_1, stream_inFmt.nextNode());
				adaptor.addChild(root_1, stream_serdeCls.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "inputFileFormat"


	public static class tabTypeExpr_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "tabTypeExpr"
	// HiveParser.g:1538:1: tabTypeExpr : identifier ( DOT ^ identifier )? ( identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )* )? ;
	public final HiveParser.tabTypeExpr_return tabTypeExpr() throws RecognitionException {
		HiveParser.tabTypeExpr_return retval = new HiveParser.tabTypeExpr_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token DOT404=null;
		Token DOT407=null;
		Token KW_ELEM_TYPE408=null;
		Token KW_KEY_TYPE409=null;
		Token KW_VALUE_TYPE410=null;
		ParserRuleReturnScope identifier403 =null;
		ParserRuleReturnScope identifier405 =null;
		ParserRuleReturnScope identifier406 =null;
		ParserRuleReturnScope identifier411 =null;

		ASTNode DOT404_tree=null;
		ASTNode DOT407_tree=null;
		ASTNode KW_ELEM_TYPE408_tree=null;
		ASTNode KW_KEY_TYPE409_tree=null;
		ASTNode KW_VALUE_TYPE410_tree=null;

		 pushMsg(retval.start,"specifying table types", state); 
		try {
			// HiveParser.g:1541:4: ( identifier ( DOT ^ identifier )? ( identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )* )? )
			// HiveParser.g:1541:6: identifier ( DOT ^ identifier )? ( identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )* )?
			{
			root_0 = (ASTNode)adaptor.nil();


			pushFollow(FOLLOW_identifier_in_tabTypeExpr7188);
			identifier403=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier403.getTree());

			// HiveParser.g:1541:17: ( DOT ^ identifier )?
			int alt111=2;
			int LA111_0 = input.LA(1);
			if ( (LA111_0==DOT) ) {
				alt111=1;
			}
			switch (alt111) {
				case 1 :
					// HiveParser.g:1541:18: DOT ^ identifier
					{
					DOT404=(Token)match(input,DOT,FOLLOW_DOT_in_tabTypeExpr7191); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOT404_tree = (ASTNode)adaptor.create(DOT404);
					root_0 = (ASTNode)adaptor.becomeRoot(DOT404_tree, root_0);
					}

					pushFollow(FOLLOW_identifier_in_tabTypeExpr7194);
					identifier405=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier405.getTree());

					}
					break;

			}

			// HiveParser.g:1542:4: ( identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )* )?
			int alt114=2;
			int LA114_0 = input.LA(1);
			if ( (LA114_0==Identifier||(LA114_0 >= KW_ABORT && LA114_0 <= KW_AFTER)||LA114_0==KW_ALLOC_FRACTION||LA114_0==KW_ANALYZE||LA114_0==KW_ARCHIVE||(LA114_0 >= KW_ASC && LA114_0 <= KW_AST)||(LA114_0 >= KW_AUTOCOMMIT && LA114_0 <= KW_BEFORE)||(LA114_0 >= KW_BUCKET && LA114_0 <= KW_BUCKETS)||(LA114_0 >= KW_CACHE && LA114_0 <= KW_CASCADE)||LA114_0==KW_CHANGE||(LA114_0 >= KW_CHECK && LA114_0 <= KW_COLLECTION)||(LA114_0 >= KW_COLUMNS && LA114_0 <= KW_COMMENT)||(LA114_0 >= KW_COMPACT && LA114_0 <= KW_CONCATENATE)||LA114_0==KW_CONTINUE||LA114_0==KW_DATA||(LA114_0 >= KW_DATABASES && LA114_0 <= KW_DEBUG)||(LA114_0 >= KW_DEFAULT && LA114_0 <= KW_DEFINED)||(LA114_0 >= KW_DELIMITED && LA114_0 <= KW_DESC)||(LA114_0 >= KW_DETAIL && LA114_0 <= KW_DISABLE)||(LA114_0 >= KW_DISTRIBUTE && LA114_0 <= KW_DO)||LA114_0==KW_DOW||(LA114_0 >= KW_DUMP && LA114_0 <= KW_ELEM_TYPE)||LA114_0==KW_ENABLE||(LA114_0 >= KW_ENFORCED && LA114_0 <= KW_ESCAPED)||LA114_0==KW_EXCLUSIVE||(LA114_0 >= KW_EXPLAIN && LA114_0 <= KW_EXPRESSION)||(LA114_0 >= KW_FIELDS && LA114_0 <= KW_FIRST)||(LA114_0 >= KW_FORMAT && LA114_0 <= KW_FORMATTED)||LA114_0==KW_FUNCTIONS||LA114_0==KW_GROUP||(LA114_0 >= KW_HOUR && LA114_0 <= KW_IDXPROPERTIES)||(LA114_0 >= KW_INDEX && LA114_0 <= KW_INDEXES)||(LA114_0 >= KW_INPATH && LA114_0 <= KW_INPUTFORMAT)||(LA114_0 >= KW_ISOLATION && LA114_0 <= KW_JAR)||(LA114_0 >= KW_KEY && LA114_0 <= KW_LAST)||LA114_0==KW_LEVEL||(LA114_0 >= KW_LIMIT && LA114_0 <= KW_LOAD)||(LA114_0 >= KW_LOCATION && LA114_0 <= KW_LONG)||LA114_0==KW_MANAGEMENT||(LA114_0 >= KW_MAPJOIN && LA114_0 <= KW_MATERIALIZED)||LA114_0==KW_METADATA||(LA114_0 >= KW_MINUTE && LA114_0 <= KW_MONTH)||(LA114_0 >= KW_MOVE && LA114_0 <= KW_MSCK)||(LA114_0 >= KW_NORELY && LA114_0 <= KW_NOSCAN)||LA114_0==KW_NOVALIDATE||LA114_0==KW_NULLS||LA114_0==KW_OFFSET||(LA114_0 >= KW_OPERATOR && LA114_0 <= KW_OPTION)||LA114_0==KW_ORDER||(LA114_0 >= KW_OUTPUTDRIVER && LA114_0 <= KW_OUTPUTFORMAT)||(LA114_0 >= KW_OVERWRITE && LA114_0 <= KW_OWNER)||(LA114_0 >= KW_PARTITIONED && LA114_0 <= KW_PATH)||(LA114_0 >= KW_PLAN && LA114_0 <= KW_POOL)||LA114_0==KW_PRINCIPALS||(LA114_0 >= KW_PURGE && LA114_0 <= KW_QUERY_PARALLELISM)||LA114_0==KW_READ||(LA114_0 >= KW_REBUILD && LA114_0 <= KW_RECORDWRITER)||(LA114_0 >= KW_RELOAD && LA114_0 <= KW_RESTRICT)||LA114_0==KW_REWRITE||(LA114_0 >= KW_ROLE && LA114_0 <= KW_ROLES)||(LA114_0 >= KW_SCHEDULING_POLICY && LA114_0 <= KW_SECOND)||(LA114_0 >= KW_SEMI && LA114_0 <= KW_SERVER)||(LA114_0 >= KW_SETS && LA114_0 <= KW_SKEWED)||(LA114_0 >= KW_SNAPSHOT && LA114_0 <= KW_SSL)||(LA114_0 >= KW_STATISTICS && LA114_0 <= KW_SUMMARY)||LA114_0==KW_TABLES||(LA114_0 >= KW_TBLPROPERTIES && LA114_0 <= KW_TERMINATED)||LA114_0==KW_TINYINT||(LA114_0 >= KW_TOUCH && LA114_0 <= KW_TRANSACTIONS)||LA114_0==KW_UNARCHIVE||LA114_0==KW_UNDO||LA114_0==KW_UNIONTYPE||(LA114_0 >= KW_UNKNOWN && LA114_0 <= KW_UNSIGNED)||(LA114_0 >= KW_URI && LA114_0 <= KW_USE)||(LA114_0 >= KW_UTC && LA114_0 <= KW_VALIDATE)||LA114_0==KW_VALUE_TYPE||(LA114_0 >= KW_VECTORIZATION && LA114_0 <= KW_WEEK)||LA114_0==KW_WHILE||(LA114_0 >= KW_WORK && LA114_0 <= KW_ZONE)||LA114_0==KW_BATCH||LA114_0==KW_DAYOFWEEK||LA114_0==KW_HOLD_DDLTIME||LA114_0==KW_IGNORE||LA114_0==KW_NO_DROP||LA114_0==KW_OFFLINE||LA114_0==KW_PROTECTION||LA114_0==KW_READONLY||LA114_0==KW_TIMESTAMPTZ) ) {
				alt114=1;
			}
			switch (alt114) {
				case 1 :
					// HiveParser.g:1542:5: identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )*
					{
					pushFollow(FOLLOW_identifier_in_tabTypeExpr7202);
					identifier406=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier406.getTree());

					// HiveParser.g:1542:16: ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )*
					loop113:
					while (true) {
						int alt113=2;
						int LA113_0 = input.LA(1);
						if ( (LA113_0==DOT) ) {
							alt113=1;
						}

						switch (alt113) {
						case 1 :
							// HiveParser.g:1542:17: DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier )
							{
							DOT407=(Token)match(input,DOT,FOLLOW_DOT_in_tabTypeExpr7205); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DOT407_tree = (ASTNode)adaptor.create(DOT407);
							root_0 = (ASTNode)adaptor.becomeRoot(DOT407_tree, root_0);
							}

							// HiveParser.g:1543:4: ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier )
							int alt112=4;
							switch ( input.LA(1) ) {
							case KW_ELEM_TYPE:
								{
								int LA112_1 = input.LA(2);
								if ( (synpred4_HiveParser()) ) {
									alt112=1;
								}
								else if ( (true) ) {
									alt112=4;
								}

								}
								break;
							case KW_KEY_TYPE:
								{
								int LA112_2 = input.LA(2);
								if ( (synpred5_HiveParser()) ) {
									alt112=2;
								}
								else if ( (true) ) {
									alt112=4;
								}

								}
								break;
							case KW_VALUE_TYPE:
								{
								int LA112_3 = input.LA(2);
								if ( (synpred6_HiveParser()) ) {
									alt112=3;
								}
								else if ( (true) ) {
									alt112=4;
								}

								}
								break;
							case Identifier:
							case KW_ABORT:
							case KW_ACTIVATE:
							case KW_ACTIVE:
							case KW_ADD:
							case KW_ADMIN:
							case KW_AFTER:
							case KW_ALLOC_FRACTION:
							case KW_ANALYZE:
							case KW_ARCHIVE:
							case KW_ASC:
							case KW_AST:
							case KW_AUTOCOMMIT:
							case KW_BEFORE:
							case KW_BUCKET:
							case KW_BUCKETS:
							case KW_CACHE:
							case KW_CASCADE:
							case KW_CHANGE:
							case KW_CHECK:
							case KW_CLUSTER:
							case KW_CLUSTERED:
							case KW_CLUSTERSTATUS:
							case KW_COLLECTION:
							case KW_COLUMNS:
							case KW_COMMENT:
							case KW_COMPACT:
							case KW_COMPACTIONS:
							case KW_COMPUTE:
							case KW_CONCATENATE:
							case KW_CONTINUE:
							case KW_DATA:
							case KW_DATABASES:
							case KW_DATE:
							case KW_DATETIME:
							case KW_DAY:
							case KW_DBPROPERTIES:
							case KW_DEBUG:
							case KW_DEFAULT:
							case KW_DEFERRED:
							case KW_DEFINED:
							case KW_DELIMITED:
							case KW_DEPENDENCY:
							case KW_DESC:
							case KW_DETAIL:
							case KW_DIRECTORIES:
							case KW_DIRECTORY:
							case KW_DISABLE:
							case KW_DISTRIBUTE:
							case KW_DO:
							case KW_DOW:
							case KW_DUMP:
							case KW_ENABLE:
							case KW_ENFORCED:
							case KW_ESCAPED:
							case KW_EXCLUSIVE:
							case KW_EXPLAIN:
							case KW_EXPORT:
							case KW_EXPRESSION:
							case KW_FIELDS:
							case KW_FILE:
							case KW_FILEFORMAT:
							case KW_FIRST:
							case KW_FORMAT:
							case KW_FORMATTED:
							case KW_FUNCTIONS:
							case KW_GROUP:
							case KW_HOUR:
							case KW_IDXPROPERTIES:
							case KW_INDEX:
							case KW_INDEXES:
							case KW_INPATH:
							case KW_INPUTDRIVER:
							case KW_INPUTFORMAT:
							case KW_ISOLATION:
							case KW_ITEMS:
							case KW_JAR:
							case KW_KEY:
							case KW_KEYS:
							case KW_KILL:
							case KW_LAST:
							case KW_LEVEL:
							case KW_LIMIT:
							case KW_LINES:
							case KW_LOAD:
							case KW_LOCATION:
							case KW_LOCK:
							case KW_LOCKS:
							case KW_LOGICAL:
							case KW_LONG:
							case KW_MANAGEMENT:
							case KW_MAPJOIN:
							case KW_MAPPING:
							case KW_MATCHED:
							case KW_MATERIALIZED:
							case KW_METADATA:
							case KW_MINUTE:
							case KW_MONTH:
							case KW_MOVE:
							case KW_MSCK:
							case KW_NORELY:
							case KW_NOSCAN:
							case KW_NOVALIDATE:
							case KW_NULLS:
							case KW_OFFSET:
							case KW_OPERATOR:
							case KW_OPTION:
							case KW_ORDER:
							case KW_OUTPUTDRIVER:
							case KW_OUTPUTFORMAT:
							case KW_OVERWRITE:
							case KW_OWNER:
							case KW_PARTITIONED:
							case KW_PARTITIONS:
							case KW_PATH:
							case KW_PLAN:
							case KW_PLANS:
							case KW_PLUS:
							case KW_POOL:
							case KW_PRINCIPALS:
							case KW_PURGE:
							case KW_QUARTER:
							case KW_QUERY:
							case KW_QUERY_PARALLELISM:
							case KW_READ:
							case KW_REBUILD:
							case KW_RECORDREADER:
							case KW_RECORDWRITER:
							case KW_RELOAD:
							case KW_RELY:
							case KW_RENAME:
							case KW_REOPTIMIZATION:
							case KW_REPAIR:
							case KW_REPL:
							case KW_REPLACE:
							case KW_REPLICATION:
							case KW_RESOURCE:
							case KW_RESTRICT:
							case KW_REWRITE:
							case KW_ROLE:
							case KW_ROLES:
							case KW_SCHEDULING_POLICY:
							case KW_SCHEMA:
							case KW_SCHEMAS:
							case KW_SECOND:
							case KW_SEMI:
							case KW_SERDE:
							case KW_SERDEPROPERTIES:
							case KW_SERVER:
							case KW_SETS:
							case KW_SHARED:
							case KW_SHOW:
							case KW_SHOW_DATABASE:
							case KW_SKEWED:
							case KW_SNAPSHOT:
							case KW_SORT:
							case KW_SORTED:
							case KW_SSL:
							case KW_STATISTICS:
							case KW_STATUS:
							case KW_STORED:
							case KW_STREAMTABLE:
							case KW_STRING:
							case KW_STRUCT:
							case KW_SUMMARY:
							case KW_TABLES:
							case KW_TBLPROPERTIES:
							case KW_TEMPORARY:
							case KW_TERMINATED:
							case KW_TINYINT:
							case KW_TOUCH:
							case KW_TRANSACTION:
							case KW_TRANSACTIONAL:
							case KW_TRANSACTIONS:
							case KW_UNARCHIVE:
							case KW_UNDO:
							case KW_UNIONTYPE:
							case KW_UNKNOWN:
							case KW_UNLOCK:
							case KW_UNMANAGED:
							case KW_UNSET:
							case KW_UNSIGNED:
							case KW_URI:
							case KW_USE:
							case KW_UTC:
							case KW_UTCTIMESTAMP:
							case KW_VALIDATE:
							case KW_VECTORIZATION:
							case KW_VIEW:
							case KW_VIEWS:
							case KW_WAIT:
							case KW_WEEK:
							case KW_WHILE:
							case KW_WORK:
							case KW_WORKLOAD:
							case KW_WRITE:
							case KW_YEAR:
							case KW_ZONE:
							case KW_BATCH:
							case KW_DAYOFWEEK:
							case KW_HOLD_DDLTIME:
							case KW_IGNORE:
							case KW_NO_DROP:
							case KW_OFFLINE:
							case KW_PROTECTION:
							case KW_READONLY:
							case KW_TIMESTAMPTZ:
								{
								alt112=4;
								}
								break;
							default:
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 112, 0, input);
								throw nvae;
							}
							switch (alt112) {
								case 1 :
									// HiveParser.g:1544:4: ( KW_ELEM_TYPE )=> KW_ELEM_TYPE
									{
									KW_ELEM_TYPE408=(Token)match(input,KW_ELEM_TYPE,FOLLOW_KW_ELEM_TYPE_in_tabTypeExpr7222); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									KW_ELEM_TYPE408_tree = (ASTNode)adaptor.create(KW_ELEM_TYPE408);
									adaptor.addChild(root_0, KW_ELEM_TYPE408_tree);
									}

									}
									break;
								case 2 :
									// HiveParser.g:1546:4: ( KW_KEY_TYPE )=> KW_KEY_TYPE
									{
									KW_KEY_TYPE409=(Token)match(input,KW_KEY_TYPE,FOLLOW_KW_KEY_TYPE_in_tabTypeExpr7238); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									KW_KEY_TYPE409_tree = (ASTNode)adaptor.create(KW_KEY_TYPE409);
									adaptor.addChild(root_0, KW_KEY_TYPE409_tree);
									}

									}
									break;
								case 3 :
									// HiveParser.g:1548:4: ( KW_VALUE_TYPE )=> KW_VALUE_TYPE
									{
									KW_VALUE_TYPE410=(Token)match(input,KW_VALUE_TYPE,FOLLOW_KW_VALUE_TYPE_in_tabTypeExpr7254); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									KW_VALUE_TYPE410_tree = (ASTNode)adaptor.create(KW_VALUE_TYPE410);
									adaptor.addChild(root_0, KW_VALUE_TYPE410_tree);
									}

									}
									break;
								case 4 :
									// HiveParser.g:1549:6: identifier
									{
									pushFollow(FOLLOW_identifier_in_tabTypeExpr7261);
									identifier411=identifier();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier411.getTree());

									}
									break;

							}

							}
							break;

						default :
							break loop113;
						}
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tabTypeExpr"


	public static class partTypeExpr_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "partTypeExpr"
	// HiveParser.g:1554:1: partTypeExpr : tabTypeExpr ( partitionSpec )? -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? ) ;
	public final HiveParser.partTypeExpr_return partTypeExpr() throws RecognitionException {
		HiveParser.partTypeExpr_return retval = new HiveParser.partTypeExpr_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope tabTypeExpr412 =null;
		ParserRuleReturnScope partitionSpec413 =null;

		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tabTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule tabTypeExpr");

		 pushMsg(retval.start,"specifying table partitions", state); 
		try {
			// HiveParser.g:1557:5: ( tabTypeExpr ( partitionSpec )? -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? ) )
			// HiveParser.g:1557:8: tabTypeExpr ( partitionSpec )?
			{
			pushFollow(FOLLOW_tabTypeExpr_in_partTypeExpr7301);
			tabTypeExpr412=tabTypeExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tabTypeExpr.add(tabTypeExpr412.getTree());
			// HiveParser.g:1557:20: ( partitionSpec )?
			int alt115=2;
			int LA115_0 = input.LA(1);
			if ( (LA115_0==KW_PARTITION) ) {
				alt115=1;
			}
			switch (alt115) {
				case 1 :
					// HiveParser.g:1557:20: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_partTypeExpr7303);
					partitionSpec413=partitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec413.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: partitionSpec, tabTypeExpr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1557:35: -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? )
			{
				// HiveParser.g:1557:38: ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABTYPE, "TOK_TABTYPE"), root_1);
				adaptor.addChild(root_1, stream_tabTypeExpr.nextTree());
				// HiveParser.g:1557:64: ( partitionSpec )?
				if ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partTypeExpr"


	public static class tabPartColTypeExpr_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "tabPartColTypeExpr"
	// HiveParser.g:1560:1: tabPartColTypeExpr : tableName ( partitionSpec )? ( extColumnName )? -> ^( TOK_TABTYPE tableName ( partitionSpec )? ( extColumnName )? ) ;
	public final HiveParser.tabPartColTypeExpr_return tabPartColTypeExpr() throws RecognitionException {
		HiveParser.tabPartColTypeExpr_return retval = new HiveParser.tabPartColTypeExpr_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope tableName414 =null;
		ParserRuleReturnScope partitionSpec415 =null;
		ParserRuleReturnScope extColumnName416 =null;

		RewriteRuleSubtreeStream stream_extColumnName=new RewriteRuleSubtreeStream(adaptor,"rule extColumnName");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg(retval.start,"specifying table partitions columnName", state); 
		try {
			// HiveParser.g:1563:5: ( tableName ( partitionSpec )? ( extColumnName )? -> ^( TOK_TABTYPE tableName ( partitionSpec )? ( extColumnName )? ) )
			// HiveParser.g:1563:8: tableName ( partitionSpec )? ( extColumnName )?
			{
			pushFollow(FOLLOW_tableName_in_tabPartColTypeExpr7343);
			tableName414=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tableName414.getTree());
			// HiveParser.g:1563:18: ( partitionSpec )?
			int alt116=2;
			int LA116_0 = input.LA(1);
			if ( (LA116_0==KW_PARTITION) ) {
				alt116=1;
			}
			switch (alt116) {
				case 1 :
					// HiveParser.g:1563:18: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_tabPartColTypeExpr7345);
					partitionSpec415=partitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec415.getTree());
					}
					break;

			}

			// HiveParser.g:1563:33: ( extColumnName )?
			int alt117=2;
			int LA117_0 = input.LA(1);
			if ( (LA117_0==Identifier||(LA117_0 >= KW_ABORT && LA117_0 <= KW_AFTER)||LA117_0==KW_ALLOC_FRACTION||LA117_0==KW_ANALYZE||LA117_0==KW_ARCHIVE||(LA117_0 >= KW_ASC && LA117_0 <= KW_AST)||(LA117_0 >= KW_AUTOCOMMIT && LA117_0 <= KW_BEFORE)||(LA117_0 >= KW_BUCKET && LA117_0 <= KW_BUCKETS)||(LA117_0 >= KW_CACHE && LA117_0 <= KW_CASCADE)||LA117_0==KW_CHANGE||(LA117_0 >= KW_CHECK && LA117_0 <= KW_COLLECTION)||(LA117_0 >= KW_COLUMNS && LA117_0 <= KW_COMMENT)||(LA117_0 >= KW_COMPACT && LA117_0 <= KW_CONCATENATE)||LA117_0==KW_CONTINUE||LA117_0==KW_DATA||(LA117_0 >= KW_DATABASES && LA117_0 <= KW_DEBUG)||(LA117_0 >= KW_DEFAULT && LA117_0 <= KW_DEFINED)||(LA117_0 >= KW_DELIMITED && LA117_0 <= KW_DESC)||(LA117_0 >= KW_DETAIL && LA117_0 <= KW_DISABLE)||(LA117_0 >= KW_DISTRIBUTE && LA117_0 <= KW_DO)||LA117_0==KW_DOW||(LA117_0 >= KW_DUMP && LA117_0 <= KW_ELEM_TYPE)||LA117_0==KW_ENABLE||(LA117_0 >= KW_ENFORCED && LA117_0 <= KW_ESCAPED)||LA117_0==KW_EXCLUSIVE||(LA117_0 >= KW_EXPLAIN && LA117_0 <= KW_EXPRESSION)||(LA117_0 >= KW_FIELDS && LA117_0 <= KW_FIRST)||(LA117_0 >= KW_FORMAT && LA117_0 <= KW_FORMATTED)||LA117_0==KW_FUNCTIONS||LA117_0==KW_GROUP||(LA117_0 >= KW_HOUR && LA117_0 <= KW_IDXPROPERTIES)||(LA117_0 >= KW_INDEX && LA117_0 <= KW_INDEXES)||(LA117_0 >= KW_INPATH && LA117_0 <= KW_INPUTFORMAT)||(LA117_0 >= KW_ISOLATION && LA117_0 <= KW_JAR)||(LA117_0 >= KW_KEY && LA117_0 <= KW_LAST)||LA117_0==KW_LEVEL||(LA117_0 >= KW_LIMIT && LA117_0 <= KW_LOAD)||(LA117_0 >= KW_LOCATION && LA117_0 <= KW_LONG)||LA117_0==KW_MANAGEMENT||(LA117_0 >= KW_MAPJOIN && LA117_0 <= KW_MATERIALIZED)||LA117_0==KW_METADATA||(LA117_0 >= KW_MINUTE && LA117_0 <= KW_MONTH)||(LA117_0 >= KW_MOVE && LA117_0 <= KW_MSCK)||(LA117_0 >= KW_NORELY && LA117_0 <= KW_NOSCAN)||LA117_0==KW_NOVALIDATE||LA117_0==KW_NULLS||LA117_0==KW_OFFSET||(LA117_0 >= KW_OPERATOR && LA117_0 <= KW_OPTION)||LA117_0==KW_ORDER||(LA117_0 >= KW_OUTPUTDRIVER && LA117_0 <= KW_OUTPUTFORMAT)||(LA117_0 >= KW_OVERWRITE && LA117_0 <= KW_OWNER)||(LA117_0 >= KW_PARTITIONED && LA117_0 <= KW_PATH)||(LA117_0 >= KW_PLAN && LA117_0 <= KW_POOL)||LA117_0==KW_PRINCIPALS||(LA117_0 >= KW_PURGE && LA117_0 <= KW_QUERY_PARALLELISM)||LA117_0==KW_READ||(LA117_0 >= KW_REBUILD && LA117_0 <= KW_RECORDWRITER)||(LA117_0 >= KW_RELOAD && LA117_0 <= KW_RESTRICT)||LA117_0==KW_REWRITE||(LA117_0 >= KW_ROLE && LA117_0 <= KW_ROLES)||(LA117_0 >= KW_SCHEDULING_POLICY && LA117_0 <= KW_SECOND)||(LA117_0 >= KW_SEMI && LA117_0 <= KW_SERVER)||(LA117_0 >= KW_SETS && LA117_0 <= KW_SKEWED)||(LA117_0 >= KW_SNAPSHOT && LA117_0 <= KW_SSL)||(LA117_0 >= KW_STATISTICS && LA117_0 <= KW_SUMMARY)||LA117_0==KW_TABLES||(LA117_0 >= KW_TBLPROPERTIES && LA117_0 <= KW_TERMINATED)||LA117_0==KW_TINYINT||(LA117_0 >= KW_TOUCH && LA117_0 <= KW_TRANSACTIONS)||LA117_0==KW_UNARCHIVE||LA117_0==KW_UNDO||LA117_0==KW_UNIONTYPE||(LA117_0 >= KW_UNKNOWN && LA117_0 <= KW_UNSIGNED)||(LA117_0 >= KW_URI && LA117_0 <= KW_USE)||(LA117_0 >= KW_UTC && LA117_0 <= KW_VALIDATE)||LA117_0==KW_VALUE_TYPE||(LA117_0 >= KW_VECTORIZATION && LA117_0 <= KW_WEEK)||LA117_0==KW_WHILE||(LA117_0 >= KW_WORK && LA117_0 <= KW_ZONE)||LA117_0==KW_BATCH||LA117_0==KW_DAYOFWEEK||LA117_0==KW_HOLD_DDLTIME||LA117_0==KW_IGNORE||LA117_0==KW_NO_DROP||LA117_0==KW_OFFLINE||LA117_0==KW_PROTECTION||LA117_0==KW_READONLY||LA117_0==KW_TIMESTAMPTZ) ) {
				alt117=1;
			}
			switch (alt117) {
				case 1 :
					// HiveParser.g:1563:33: extColumnName
					{
					pushFollow(FOLLOW_extColumnName_in_tabPartColTypeExpr7348);
					extColumnName416=extColumnName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_extColumnName.add(extColumnName416.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: tableName, partitionSpec, extColumnName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1563:48: -> ^( TOK_TABTYPE tableName ( partitionSpec )? ( extColumnName )? )
			{
				// HiveParser.g:1563:51: ^( TOK_TABTYPE tableName ( partitionSpec )? ( extColumnName )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABTYPE, "TOK_TABTYPE"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				// HiveParser.g:1563:75: ( partitionSpec )?
				if ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				// HiveParser.g:1563:90: ( extColumnName )?
				if ( stream_extColumnName.hasNext() ) {
					adaptor.addChild(root_1, stream_extColumnName.nextTree());
				}
				stream_extColumnName.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tabPartColTypeExpr"


	public static class descStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "descStatement"
	// HiveParser.g:1566:1: descStatement : ( KW_DESCRIBE | KW_DESC ) ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) ( KW_EXTENDED )? (dbName= identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) | ( KW_FUNCTION )=> KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_FORMATTED | KW_EXTENDED )=> ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED ) parttype= tabPartColTypeExpr ) -> ^( TOK_DESCTABLE $parttype $descOptions) |parttype= tabPartColTypeExpr -> ^( TOK_DESCTABLE $parttype) ) ;
	public final HiveParser.descStatement_return descStatement() throws RecognitionException {
		HiveParser.descStatement_return retval = new HiveParser.descStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token descOptions=null;
		Token KW_DESCRIBE417=null;
		Token KW_DESC418=null;
		Token KW_DATABASE419=null;
		Token KW_SCHEMA420=null;
		Token KW_EXTENDED421=null;
		Token KW_FUNCTION422=null;
		Token KW_EXTENDED423=null;
		ParserRuleReturnScope dbName =null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope parttype =null;

		ASTNode descOptions_tree=null;
		ASTNode KW_DESCRIBE417_tree=null;
		ASTNode KW_DESC418_tree=null;
		ASTNode KW_DATABASE419_tree=null;
		ASTNode KW_SCHEMA420_tree=null;
		ASTNode KW_EXTENDED421_tree=null;
		ASTNode KW_FUNCTION422_tree=null;
		ASTNode KW_EXTENDED423_tree=null;
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
		RewriteRuleTokenStream stream_KW_DESC=new RewriteRuleTokenStream(adaptor,"token KW_DESC");
		RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
		RewriteRuleTokenStream stream_KW_FORMATTED=new RewriteRuleTokenStream(adaptor,"token KW_FORMATTED");
		RewriteRuleTokenStream stream_KW_DESCRIBE=new RewriteRuleTokenStream(adaptor,"token KW_DESCRIBE");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_tabPartColTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule tabPartColTypeExpr");
		RewriteRuleSubtreeStream stream_descFuncNames=new RewriteRuleSubtreeStream(adaptor,"rule descFuncNames");

		 pushMsg(retval.start,"describe statement", state); 
		try {
			// HiveParser.g:1569:5: ( ( KW_DESCRIBE | KW_DESC ) ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) ( KW_EXTENDED )? (dbName= identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) | ( KW_FUNCTION )=> KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_FORMATTED | KW_EXTENDED )=> ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED ) parttype= tabPartColTypeExpr ) -> ^( TOK_DESCTABLE $parttype $descOptions) |parttype= tabPartColTypeExpr -> ^( TOK_DESCTABLE $parttype) ) )
			// HiveParser.g:1570:5: ( KW_DESCRIBE | KW_DESC ) ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) ( KW_EXTENDED )? (dbName= identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) | ( KW_FUNCTION )=> KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_FORMATTED | KW_EXTENDED )=> ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED ) parttype= tabPartColTypeExpr ) -> ^( TOK_DESCTABLE $parttype $descOptions) |parttype= tabPartColTypeExpr -> ^( TOK_DESCTABLE $parttype) )
			{
			// HiveParser.g:1570:5: ( KW_DESCRIBE | KW_DESC )
			int alt118=2;
			int LA118_0 = input.LA(1);
			if ( (LA118_0==KW_DESCRIBE) ) {
				alt118=1;
			}
			else if ( (LA118_0==KW_DESC) ) {
				alt118=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 118, 0, input);
				throw nvae;
			}

			switch (alt118) {
				case 1 :
					// HiveParser.g:1570:6: KW_DESCRIBE
					{
					KW_DESCRIBE417=(Token)match(input,KW_DESCRIBE,FOLLOW_KW_DESCRIBE_in_descStatement7395); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DESCRIBE.add(KW_DESCRIBE417);

					}
					break;
				case 2 :
					// HiveParser.g:1570:18: KW_DESC
					{
					KW_DESC418=(Token)match(input,KW_DESC,FOLLOW_KW_DESC_in_descStatement7397); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DESC.add(KW_DESC418);

					}
					break;

			}

			// HiveParser.g:1571:5: ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) ( KW_EXTENDED )? (dbName= identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) | ( KW_FUNCTION )=> KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_FORMATTED | KW_EXTENDED )=> ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED ) parttype= tabPartColTypeExpr ) -> ^( TOK_DESCTABLE $parttype $descOptions) |parttype= tabPartColTypeExpr -> ^( TOK_DESCTABLE $parttype) )
			int alt123=4;
			int LA123_0 = input.LA(1);
			if ( (LA123_0==KW_DATABASE) && (synpred7_HiveParser())) {
				alt123=1;
			}
			else if ( (LA123_0==KW_SCHEMA) ) {
				int LA123_2 = input.LA(2);
				if ( (LA123_2==KW_EXTENDED) && (synpred7_HiveParser())) {
					alt123=1;
				}
				else if ( (LA123_2==Identifier) ) {
					int LA123_9 = input.LA(3);
					if ( (synpred7_HiveParser()) ) {
						alt123=1;
					}
					else if ( (true) ) {
						alt123=4;
					}

				}
				else if ( ((LA123_2 >= KW_ABORT && LA123_2 <= KW_AFTER)||LA123_2==KW_ALLOC_FRACTION||LA123_2==KW_ANALYZE||LA123_2==KW_ARCHIVE||(LA123_2 >= KW_ASC && LA123_2 <= KW_AST)||(LA123_2 >= KW_AUTOCOMMIT && LA123_2 <= KW_BEFORE)||(LA123_2 >= KW_BUCKET && LA123_2 <= KW_BUCKETS)||(LA123_2 >= KW_CACHE && LA123_2 <= KW_CASCADE)||LA123_2==KW_CHANGE||(LA123_2 >= KW_CHECK && LA123_2 <= KW_COLLECTION)||(LA123_2 >= KW_COLUMNS && LA123_2 <= KW_COMMENT)||(LA123_2 >= KW_COMPACT && LA123_2 <= KW_CONCATENATE)||LA123_2==KW_CONTINUE||LA123_2==KW_DATA||(LA123_2 >= KW_DATABASES && LA123_2 <= KW_DEBUG)||(LA123_2 >= KW_DEFAULT && LA123_2 <= KW_DEFINED)||(LA123_2 >= KW_DELIMITED && LA123_2 <= KW_DESC)||(LA123_2 >= KW_DETAIL && LA123_2 <= KW_DISABLE)||(LA123_2 >= KW_DISTRIBUTE && LA123_2 <= KW_DO)||LA123_2==KW_DOW||(LA123_2 >= KW_DUMP && LA123_2 <= KW_ELEM_TYPE)||LA123_2==KW_ENABLE||(LA123_2 >= KW_ENFORCED && LA123_2 <= KW_ESCAPED)||LA123_2==KW_EXCLUSIVE||(LA123_2 >= KW_EXPLAIN && LA123_2 <= KW_EXPRESSION)||(LA123_2 >= KW_FIELDS && LA123_2 <= KW_FIRST)||(LA123_2 >= KW_FORMAT && LA123_2 <= KW_FORMATTED)||LA123_2==KW_FUNCTIONS||LA123_2==KW_GROUP||(LA123_2 >= KW_HOUR && LA123_2 <= KW_IDXPROPERTIES)||(LA123_2 >= KW_INDEX && LA123_2 <= KW_INDEXES)||(LA123_2 >= KW_INPATH && LA123_2 <= KW_INPUTFORMAT)||(LA123_2 >= KW_ISOLATION && LA123_2 <= KW_JAR)||(LA123_2 >= KW_KEY && LA123_2 <= KW_LAST)||LA123_2==KW_LEVEL||(LA123_2 >= KW_LIMIT && LA123_2 <= KW_LOAD)||(LA123_2 >= KW_LOCATION && LA123_2 <= KW_LONG)||LA123_2==KW_MANAGEMENT||(LA123_2 >= KW_MAPJOIN && LA123_2 <= KW_MATERIALIZED)||LA123_2==KW_METADATA||(LA123_2 >= KW_MINUTE && LA123_2 <= KW_MONTH)||(LA123_2 >= KW_MOVE && LA123_2 <= KW_MSCK)||(LA123_2 >= KW_NORELY && LA123_2 <= KW_NOSCAN)||LA123_2==KW_NOVALIDATE||LA123_2==KW_NULLS||LA123_2==KW_OFFSET||(LA123_2 >= KW_OPERATOR && LA123_2 <= KW_OPTION)||LA123_2==KW_ORDER||(LA123_2 >= KW_OUTPUTDRIVER && LA123_2 <= KW_OUTPUTFORMAT)||(LA123_2 >= KW_OVERWRITE && LA123_2 <= KW_OWNER)||(LA123_2 >= KW_PARTITIONED && LA123_2 <= KW_PATH)||(LA123_2 >= KW_PLAN && LA123_2 <= KW_POOL)||LA123_2==KW_PRINCIPALS||(LA123_2 >= KW_PURGE && LA123_2 <= KW_QUERY_PARALLELISM)||LA123_2==KW_READ||(LA123_2 >= KW_REBUILD && LA123_2 <= KW_RECORDWRITER)||(LA123_2 >= KW_RELOAD && LA123_2 <= KW_RESTRICT)||LA123_2==KW_REWRITE||(LA123_2 >= KW_ROLE && LA123_2 <= KW_ROLES)||(LA123_2 >= KW_SCHEDULING_POLICY && LA123_2 <= KW_SECOND)||(LA123_2 >= KW_SEMI && LA123_2 <= KW_SERVER)||(LA123_2 >= KW_SETS && LA123_2 <= KW_SKEWED)||(LA123_2 >= KW_SNAPSHOT && LA123_2 <= KW_SSL)||(LA123_2 >= KW_STATISTICS && LA123_2 <= KW_SUMMARY)||LA123_2==KW_TABLES||(LA123_2 >= KW_TBLPROPERTIES && LA123_2 <= KW_TERMINATED)||LA123_2==KW_TINYINT||(LA123_2 >= KW_TOUCH && LA123_2 <= KW_TRANSACTIONS)||LA123_2==KW_UNARCHIVE||LA123_2==KW_UNDO||LA123_2==KW_UNIONTYPE||(LA123_2 >= KW_UNKNOWN && LA123_2 <= KW_UNSIGNED)||(LA123_2 >= KW_URI && LA123_2 <= KW_USE)||(LA123_2 >= KW_UTC && LA123_2 <= KW_VALIDATE)||LA123_2==KW_VALUE_TYPE||(LA123_2 >= KW_VECTORIZATION && LA123_2 <= KW_WEEK)||LA123_2==KW_WHILE||(LA123_2 >= KW_WORK && LA123_2 <= KW_ZONE)||LA123_2==KW_BATCH||LA123_2==KW_DAYOFWEEK||LA123_2==KW_HOLD_DDLTIME||LA123_2==KW_IGNORE||LA123_2==KW_NO_DROP||LA123_2==KW_OFFLINE||LA123_2==KW_PROTECTION||LA123_2==KW_READONLY||LA123_2==KW_TIMESTAMPTZ) ) {
					int LA123_10 = input.LA(3);
					if ( (synpred7_HiveParser()) ) {
						alt123=1;
					}
					else if ( (true) ) {
						alt123=4;
					}

				}
				else if ( (LA123_2==EOF||LA123_2==DOT||LA123_2==KW_PARTITION) ) {
					alt123=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 123, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA123_0==KW_FUNCTION) && (synpred8_HiveParser())) {
				alt123=2;
			}
			else if ( (LA123_0==KW_FORMATTED) ) {
				switch ( input.LA(2) ) {
				case Identifier:
					{
					int LA123_14 = input.LA(3);
					if ( (synpred9_HiveParser()) ) {
						alt123=3;
					}
					else if ( (true) ) {
						alt123=4;
					}

					}
					break;
				case KW_ABORT:
				case KW_ACTIVATE:
				case KW_ACTIVE:
				case KW_ADD:
				case KW_ADMIN:
				case KW_AFTER:
				case KW_ALLOC_FRACTION:
				case KW_ANALYZE:
				case KW_ARCHIVE:
				case KW_ASC:
				case KW_AST:
				case KW_AUTOCOMMIT:
				case KW_BEFORE:
				case KW_BUCKET:
				case KW_BUCKETS:
				case KW_CACHE:
				case KW_CASCADE:
				case KW_CHANGE:
				case KW_CHECK:
				case KW_CLUSTER:
				case KW_CLUSTERED:
				case KW_CLUSTERSTATUS:
				case KW_COLLECTION:
				case KW_COLUMNS:
				case KW_COMMENT:
				case KW_COMPACT:
				case KW_COMPACTIONS:
				case KW_COMPUTE:
				case KW_CONCATENATE:
				case KW_CONTINUE:
				case KW_DATA:
				case KW_DATABASES:
				case KW_DATE:
				case KW_DATETIME:
				case KW_DAY:
				case KW_DBPROPERTIES:
				case KW_DEBUG:
				case KW_DEFAULT:
				case KW_DEFERRED:
				case KW_DEFINED:
				case KW_DELIMITED:
				case KW_DEPENDENCY:
				case KW_DESC:
				case KW_DETAIL:
				case KW_DIRECTORIES:
				case KW_DIRECTORY:
				case KW_DISABLE:
				case KW_DISTRIBUTE:
				case KW_DO:
				case KW_DOW:
				case KW_DUMP:
				case KW_ELEM_TYPE:
				case KW_ENABLE:
				case KW_ENFORCED:
				case KW_ESCAPED:
				case KW_EXCLUSIVE:
				case KW_EXPLAIN:
				case KW_EXPORT:
				case KW_EXPRESSION:
				case KW_FIELDS:
				case KW_FILE:
				case KW_FILEFORMAT:
				case KW_FIRST:
				case KW_FORMAT:
				case KW_FORMATTED:
				case KW_FUNCTIONS:
				case KW_GROUP:
				case KW_HOUR:
				case KW_IDXPROPERTIES:
				case KW_INDEX:
				case KW_INDEXES:
				case KW_INPATH:
				case KW_INPUTDRIVER:
				case KW_INPUTFORMAT:
				case KW_ISOLATION:
				case KW_ITEMS:
				case KW_JAR:
				case KW_KEY:
				case KW_KEYS:
				case KW_KEY_TYPE:
				case KW_KILL:
				case KW_LAST:
				case KW_LEVEL:
				case KW_LIMIT:
				case KW_LINES:
				case KW_LOAD:
				case KW_LOCATION:
				case KW_LOCK:
				case KW_LOCKS:
				case KW_LOGICAL:
				case KW_LONG:
				case KW_MANAGEMENT:
				case KW_MAPJOIN:
				case KW_MAPPING:
				case KW_MATCHED:
				case KW_MATERIALIZED:
				case KW_METADATA:
				case KW_MINUTE:
				case KW_MONTH:
				case KW_MOVE:
				case KW_MSCK:
				case KW_NORELY:
				case KW_NOSCAN:
				case KW_NOVALIDATE:
				case KW_NULLS:
				case KW_OFFSET:
				case KW_OPERATOR:
				case KW_OPTION:
				case KW_ORDER:
				case KW_OUTPUTDRIVER:
				case KW_OUTPUTFORMAT:
				case KW_OVERWRITE:
				case KW_OWNER:
				case KW_PARTITIONED:
				case KW_PARTITIONS:
				case KW_PATH:
				case KW_PLAN:
				case KW_PLANS:
				case KW_PLUS:
				case KW_POOL:
				case KW_PRINCIPALS:
				case KW_PURGE:
				case KW_QUARTER:
				case KW_QUERY:
				case KW_QUERY_PARALLELISM:
				case KW_READ:
				case KW_REBUILD:
				case KW_RECORDREADER:
				case KW_RECORDWRITER:
				case KW_RELOAD:
				case KW_RELY:
				case KW_RENAME:
				case KW_REOPTIMIZATION:
				case KW_REPAIR:
				case KW_REPL:
				case KW_REPLACE:
				case KW_REPLICATION:
				case KW_RESOURCE:
				case KW_RESTRICT:
				case KW_REWRITE:
				case KW_ROLE:
				case KW_ROLES:
				case KW_SCHEDULING_POLICY:
				case KW_SCHEMA:
				case KW_SCHEMAS:
				case KW_SECOND:
				case KW_SEMI:
				case KW_SERDE:
				case KW_SERDEPROPERTIES:
				case KW_SERVER:
				case KW_SETS:
				case KW_SHARED:
				case KW_SHOW:
				case KW_SHOW_DATABASE:
				case KW_SKEWED:
				case KW_SNAPSHOT:
				case KW_SORT:
				case KW_SORTED:
				case KW_SSL:
				case KW_STATISTICS:
				case KW_STATUS:
				case KW_STORED:
				case KW_STREAMTABLE:
				case KW_STRING:
				case KW_STRUCT:
				case KW_SUMMARY:
				case KW_TABLES:
				case KW_TBLPROPERTIES:
				case KW_TEMPORARY:
				case KW_TERMINATED:
				case KW_TINYINT:
				case KW_TOUCH:
				case KW_TRANSACTION:
				case KW_TRANSACTIONAL:
				case KW_TRANSACTIONS:
				case KW_UNARCHIVE:
				case KW_UNDO:
				case KW_UNIONTYPE:
				case KW_UNKNOWN:
				case KW_UNLOCK:
				case KW_UNMANAGED:
				case KW_UNSET:
				case KW_UNSIGNED:
				case KW_URI:
				case KW_USE:
				case KW_UTC:
				case KW_UTCTIMESTAMP:
				case KW_VALIDATE:
				case KW_VALUE_TYPE:
				case KW_VECTORIZATION:
				case KW_VIEW:
				case KW_VIEWS:
				case KW_WAIT:
				case KW_WEEK:
				case KW_WHILE:
				case KW_WORK:
				case KW_WORKLOAD:
				case KW_WRITE:
				case KW_YEAR:
				case KW_ZONE:
				case KW_BATCH:
				case KW_DAYOFWEEK:
				case KW_HOLD_DDLTIME:
				case KW_IGNORE:
				case KW_NO_DROP:
				case KW_OFFLINE:
				case KW_PROTECTION:
				case KW_READONLY:
				case KW_TIMESTAMPTZ:
					{
					int LA123_15 = input.LA(3);
					if ( (synpred9_HiveParser()) ) {
						alt123=3;
					}
					else if ( (true) ) {
						alt123=4;
					}

					}
					break;
				case EOF:
				case DOT:
				case KW_PARTITION:
					{
					alt123=4;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 123, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}
			else if ( (LA123_0==KW_EXTENDED) && (synpred9_HiveParser())) {
				alt123=3;
			}
			else if ( (LA123_0==Identifier||(LA123_0 >= KW_ABORT && LA123_0 <= KW_AFTER)||LA123_0==KW_ALLOC_FRACTION||LA123_0==KW_ANALYZE||LA123_0==KW_ARCHIVE||(LA123_0 >= KW_ASC && LA123_0 <= KW_AST)||(LA123_0 >= KW_AUTOCOMMIT && LA123_0 <= KW_BEFORE)||(LA123_0 >= KW_BUCKET && LA123_0 <= KW_BUCKETS)||(LA123_0 >= KW_CACHE && LA123_0 <= KW_CASCADE)||LA123_0==KW_CHANGE||(LA123_0 >= KW_CHECK && LA123_0 <= KW_COLLECTION)||(LA123_0 >= KW_COLUMNS && LA123_0 <= KW_COMMENT)||(LA123_0 >= KW_COMPACT && LA123_0 <= KW_CONCATENATE)||LA123_0==KW_CONTINUE||LA123_0==KW_DATA||(LA123_0 >= KW_DATABASES && LA123_0 <= KW_DEBUG)||(LA123_0 >= KW_DEFAULT && LA123_0 <= KW_DEFINED)||(LA123_0 >= KW_DELIMITED && LA123_0 <= KW_DESC)||(LA123_0 >= KW_DETAIL && LA123_0 <= KW_DISABLE)||(LA123_0 >= KW_DISTRIBUTE && LA123_0 <= KW_DO)||LA123_0==KW_DOW||(LA123_0 >= KW_DUMP && LA123_0 <= KW_ELEM_TYPE)||LA123_0==KW_ENABLE||(LA123_0 >= KW_ENFORCED && LA123_0 <= KW_ESCAPED)||LA123_0==KW_EXCLUSIVE||(LA123_0 >= KW_EXPLAIN && LA123_0 <= KW_EXPRESSION)||(LA123_0 >= KW_FIELDS && LA123_0 <= KW_FIRST)||LA123_0==KW_FORMAT||LA123_0==KW_FUNCTIONS||LA123_0==KW_GROUP||(LA123_0 >= KW_HOUR && LA123_0 <= KW_IDXPROPERTIES)||(LA123_0 >= KW_INDEX && LA123_0 <= KW_INDEXES)||(LA123_0 >= KW_INPATH && LA123_0 <= KW_INPUTFORMAT)||(LA123_0 >= KW_ISOLATION && LA123_0 <= KW_JAR)||(LA123_0 >= KW_KEY && LA123_0 <= KW_LAST)||LA123_0==KW_LEVEL||(LA123_0 >= KW_LIMIT && LA123_0 <= KW_LOAD)||(LA123_0 >= KW_LOCATION && LA123_0 <= KW_LONG)||LA123_0==KW_MANAGEMENT||(LA123_0 >= KW_MAPJOIN && LA123_0 <= KW_MATERIALIZED)||LA123_0==KW_METADATA||(LA123_0 >= KW_MINUTE && LA123_0 <= KW_MONTH)||(LA123_0 >= KW_MOVE && LA123_0 <= KW_MSCK)||(LA123_0 >= KW_NORELY && LA123_0 <= KW_NOSCAN)||LA123_0==KW_NOVALIDATE||LA123_0==KW_NULLS||LA123_0==KW_OFFSET||(LA123_0 >= KW_OPERATOR && LA123_0 <= KW_OPTION)||LA123_0==KW_ORDER||(LA123_0 >= KW_OUTPUTDRIVER && LA123_0 <= KW_OUTPUTFORMAT)||(LA123_0 >= KW_OVERWRITE && LA123_0 <= KW_OWNER)||(LA123_0 >= KW_PARTITIONED && LA123_0 <= KW_PATH)||(LA123_0 >= KW_PLAN && LA123_0 <= KW_POOL)||LA123_0==KW_PRINCIPALS||(LA123_0 >= KW_PURGE && LA123_0 <= KW_QUERY_PARALLELISM)||LA123_0==KW_READ||(LA123_0 >= KW_REBUILD && LA123_0 <= KW_RECORDWRITER)||(LA123_0 >= KW_RELOAD && LA123_0 <= KW_RESTRICT)||LA123_0==KW_REWRITE||(LA123_0 >= KW_ROLE && LA123_0 <= KW_ROLES)||LA123_0==KW_SCHEDULING_POLICY||(LA123_0 >= KW_SCHEMAS && LA123_0 <= KW_SECOND)||(LA123_0 >= KW_SEMI && LA123_0 <= KW_SERVER)||(LA123_0 >= KW_SETS && LA123_0 <= KW_SKEWED)||(LA123_0 >= KW_SNAPSHOT && LA123_0 <= KW_SSL)||(LA123_0 >= KW_STATISTICS && LA123_0 <= KW_SUMMARY)||LA123_0==KW_TABLES||(LA123_0 >= KW_TBLPROPERTIES && LA123_0 <= KW_TERMINATED)||LA123_0==KW_TINYINT||(LA123_0 >= KW_TOUCH && LA123_0 <= KW_TRANSACTIONS)||LA123_0==KW_UNARCHIVE||LA123_0==KW_UNDO||LA123_0==KW_UNIONTYPE||(LA123_0 >= KW_UNKNOWN && LA123_0 <= KW_UNSIGNED)||(LA123_0 >= KW_URI && LA123_0 <= KW_USE)||(LA123_0 >= KW_UTC && LA123_0 <= KW_VALIDATE)||LA123_0==KW_VALUE_TYPE||(LA123_0 >= KW_VECTORIZATION && LA123_0 <= KW_WEEK)||LA123_0==KW_WHILE||(LA123_0 >= KW_WORK && LA123_0 <= KW_ZONE)||LA123_0==KW_BATCH||LA123_0==KW_DAYOFWEEK||LA123_0==KW_HOLD_DDLTIME||LA123_0==KW_IGNORE||LA123_0==KW_NO_DROP||LA123_0==KW_OFFLINE||LA123_0==KW_PROTECTION||LA123_0==KW_READONLY||LA123_0==KW_TIMESTAMPTZ) ) {
				alt123=4;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 123, 0, input);
				throw nvae;
			}

			switch (alt123) {
				case 1 :
					// HiveParser.g:1572:5: ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) ( KW_EXTENDED )? (dbName= identifier )
					{
					// HiveParser.g:1572:32: ( KW_DATABASE | KW_SCHEMA )
					int alt119=2;
					int LA119_0 = input.LA(1);
					if ( (LA119_0==KW_DATABASE) ) {
						alt119=1;
					}
					else if ( (LA119_0==KW_SCHEMA) ) {
						alt119=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 119, 0, input);
						throw nvae;
					}

					switch (alt119) {
						case 1 :
							// HiveParser.g:1572:33: KW_DATABASE
							{
							KW_DATABASE419=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_descStatement7419); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE419);

							}
							break;
						case 2 :
							// HiveParser.g:1572:45: KW_SCHEMA
							{
							KW_SCHEMA420=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_descStatement7421); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA420);

							}
							break;

					}

					// HiveParser.g:1572:56: ( KW_EXTENDED )?
					int alt120=2;
					int LA120_0 = input.LA(1);
					if ( (LA120_0==KW_EXTENDED) ) {
						alt120=1;
					}
					switch (alt120) {
						case 1 :
							// HiveParser.g:1572:56: KW_EXTENDED
							{
							KW_EXTENDED421=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement7424); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_EXTENDED.add(KW_EXTENDED421);

							}
							break;

					}

					// HiveParser.g:1572:69: (dbName= identifier )
					// HiveParser.g:1572:70: dbName= identifier
					{
					pushFollow(FOLLOW_identifier_in_descStatement7430);
					dbName=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(dbName.getTree());
					}

					// AST REWRITE
					// elements: dbName, KW_EXTENDED
					// token labels: 
					// rule labels: dbName, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_dbName=new RewriteRuleSubtreeStream(adaptor,"rule dbName",dbName!=null?dbName.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1572:89: -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? )
					{
						// HiveParser.g:1572:92: ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DESCDATABASE, "TOK_DESCDATABASE"), root_1);
						adaptor.addChild(root_1, stream_dbName.nextTree());
						// HiveParser.g:1572:119: ( KW_EXTENDED )?
						if ( stream_KW_EXTENDED.hasNext() ) {
							adaptor.addChild(root_1, stream_KW_EXTENDED.nextNode());
						}
						stream_KW_EXTENDED.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:1574:5: ( KW_FUNCTION )=> KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames )
					{
					KW_FUNCTION422=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_descStatement7461); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_FUNCTION.add(KW_FUNCTION422);

					// HiveParser.g:1574:34: ( KW_EXTENDED )?
					int alt121=2;
					int LA121_0 = input.LA(1);
					if ( (LA121_0==KW_EXTENDED) ) {
						alt121=1;
					}
					switch (alt121) {
						case 1 :
							// HiveParser.g:1574:34: KW_EXTENDED
							{
							KW_EXTENDED423=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement7463); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_EXTENDED.add(KW_EXTENDED423);

							}
							break;

					}

					// HiveParser.g:1574:47: (name= descFuncNames )
					// HiveParser.g:1574:48: name= descFuncNames
					{
					pushFollow(FOLLOW_descFuncNames_in_descStatement7469);
					name=descFuncNames();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_descFuncNames.add(name.getTree());
					}

					// AST REWRITE
					// elements: name, KW_EXTENDED
					// token labels: 
					// rule labels: name, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1574:68: -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? )
					{
						// HiveParser.g:1574:71: ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DESCFUNCTION, "TOK_DESCFUNCTION"), root_1);
						adaptor.addChild(root_1, stream_name.nextTree());
						// HiveParser.g:1574:96: ( KW_EXTENDED )?
						if ( stream_KW_EXTENDED.hasNext() ) {
							adaptor.addChild(root_1, stream_KW_EXTENDED.nextNode());
						}
						stream_KW_EXTENDED.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// HiveParser.g:1576:5: ( KW_FORMATTED | KW_EXTENDED )=> ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED ) parttype= tabPartColTypeExpr )
					{
					// HiveParser.g:1576:35: ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED ) parttype= tabPartColTypeExpr )
					// HiveParser.g:1576:36: (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED ) parttype= tabPartColTypeExpr
					{
					// HiveParser.g:1576:36: (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED )
					int alt122=2;
					int LA122_0 = input.LA(1);
					if ( (LA122_0==KW_FORMATTED) ) {
						alt122=1;
					}
					else if ( (LA122_0==KW_EXTENDED) ) {
						alt122=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 122, 0, input);
						throw nvae;
					}

					switch (alt122) {
						case 1 :
							// HiveParser.g:1576:37: descOptions= KW_FORMATTED
							{
							descOptions=(Token)match(input,KW_FORMATTED,FOLLOW_KW_FORMATTED_in_descStatement7506); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_FORMATTED.add(descOptions);

							}
							break;
						case 2 :
							// HiveParser.g:1576:62: descOptions= KW_EXTENDED
							{
							descOptions=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement7510); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_EXTENDED.add(descOptions);

							}
							break;

					}

					pushFollow(FOLLOW_tabPartColTypeExpr_in_descStatement7515);
					parttype=tabPartColTypeExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tabPartColTypeExpr.add(parttype.getTree());
					}

					// AST REWRITE
					// elements: descOptions, parttype
					// token labels: descOptions
					// rule labels: parttype, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_descOptions=new RewriteRuleTokenStream(adaptor,"token descOptions",descOptions);
					RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1576:116: -> ^( TOK_DESCTABLE $parttype $descOptions)
					{
						// HiveParser.g:1576:119: ^( TOK_DESCTABLE $parttype $descOptions)
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DESCTABLE, "TOK_DESCTABLE"), root_1);
						adaptor.addChild(root_1, stream_parttype.nextTree());
						adaptor.addChild(root_1, stream_descOptions.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// HiveParser.g:1578:5: parttype= tabPartColTypeExpr
					{
					pushFollow(FOLLOW_tabPartColTypeExpr_in_descStatement7542);
					parttype=tabPartColTypeExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tabPartColTypeExpr.add(parttype.getTree());
					// AST REWRITE
					// elements: parttype
					// token labels: 
					// rule labels: parttype, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1578:33: -> ^( TOK_DESCTABLE $parttype)
					{
						// HiveParser.g:1578:36: ^( TOK_DESCTABLE $parttype)
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DESCTABLE, "TOK_DESCTABLE"), root_1);
						adaptor.addChild(root_1, stream_parttype.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "descStatement"


	public static class analyzeStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "analyzeStatement"
	// HiveParser.g:1582:1: analyzeStatement : KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) ( ( KW_COMPUTE )=> KW_COMPUTE KW_STATISTICS ( (noscan= KW_NOSCAN ) | ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? ) )? -> ^( TOK_ANALYZE $parttype ( $noscan)? ( KW_COLUMNS )? ( $statsColumnName)? ) | ( KW_CACHE )=> KW_CACHE KW_METADATA -> ^( TOK_CACHE_METADATA $parttype) ) ;
	public final HiveParser.analyzeStatement_return analyzeStatement() throws RecognitionException {
		HiveParser.analyzeStatement_return retval = new HiveParser.analyzeStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token noscan=null;
		Token KW_ANALYZE424=null;
		Token KW_TABLE425=null;
		Token KW_COMPUTE426=null;
		Token KW_STATISTICS427=null;
		Token KW_FOR428=null;
		Token KW_COLUMNS429=null;
		Token KW_CACHE430=null;
		Token KW_METADATA431=null;
		ParserRuleReturnScope parttype =null;
		ParserRuleReturnScope statsColumnName =null;

		ASTNode noscan_tree=null;
		ASTNode KW_ANALYZE424_tree=null;
		ASTNode KW_TABLE425_tree=null;
		ASTNode KW_COMPUTE426_tree=null;
		ASTNode KW_STATISTICS427_tree=null;
		ASTNode KW_FOR428_tree=null;
		ASTNode KW_COLUMNS429_tree=null;
		ASTNode KW_CACHE430_tree=null;
		ASTNode KW_METADATA431_tree=null;
		RewriteRuleTokenStream stream_KW_STATISTICS=new RewriteRuleTokenStream(adaptor,"token KW_STATISTICS");
		RewriteRuleTokenStream stream_KW_ANALYZE=new RewriteRuleTokenStream(adaptor,"token KW_ANALYZE");
		RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
		RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_COMPUTE=new RewriteRuleTokenStream(adaptor,"token KW_COMPUTE");
		RewriteRuleTokenStream stream_KW_METADATA=new RewriteRuleTokenStream(adaptor,"token KW_METADATA");
		RewriteRuleTokenStream stream_KW_NOSCAN=new RewriteRuleTokenStream(adaptor,"token KW_NOSCAN");
		RewriteRuleTokenStream stream_KW_CACHE=new RewriteRuleTokenStream(adaptor,"token KW_CACHE");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");

		 pushMsg(retval.start,"analyze statement", state); 
		try {
			// HiveParser.g:1585:5: ( KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) ( ( KW_COMPUTE )=> KW_COMPUTE KW_STATISTICS ( (noscan= KW_NOSCAN ) | ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? ) )? -> ^( TOK_ANALYZE $parttype ( $noscan)? ( KW_COLUMNS )? ( $statsColumnName)? ) | ( KW_CACHE )=> KW_CACHE KW_METADATA -> ^( TOK_CACHE_METADATA $parttype) ) )
			// HiveParser.g:1585:7: KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) ( ( KW_COMPUTE )=> KW_COMPUTE KW_STATISTICS ( (noscan= KW_NOSCAN ) | ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? ) )? -> ^( TOK_ANALYZE $parttype ( $noscan)? ( KW_COLUMNS )? ( $statsColumnName)? ) | ( KW_CACHE )=> KW_CACHE KW_METADATA -> ^( TOK_CACHE_METADATA $parttype) )
			{
			KW_ANALYZE424=(Token)match(input,KW_ANALYZE,FOLLOW_KW_ANALYZE_in_analyzeStatement7584); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ANALYZE.add(KW_ANALYZE424);

			KW_TABLE425=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_analyzeStatement7586); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE425);

			// HiveParser.g:1585:27: (parttype= tableOrPartition )
			// HiveParser.g:1585:28: parttype= tableOrPartition
			{
			pushFollow(FOLLOW_tableOrPartition_in_analyzeStatement7591);
			parttype=tableOrPartition();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableOrPartition.add(parttype.getTree());
			}

			// HiveParser.g:1586:7: ( ( KW_COMPUTE )=> KW_COMPUTE KW_STATISTICS ( (noscan= KW_NOSCAN ) | ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? ) )? -> ^( TOK_ANALYZE $parttype ( $noscan)? ( KW_COLUMNS )? ( $statsColumnName)? ) | ( KW_CACHE )=> KW_CACHE KW_METADATA -> ^( TOK_CACHE_METADATA $parttype) )
			int alt126=2;
			int LA126_0 = input.LA(1);
			if ( (LA126_0==KW_COMPUTE) && (synpred10_HiveParser())) {
				alt126=1;
			}
			else if ( (LA126_0==KW_CACHE) && (synpred11_HiveParser())) {
				alt126=2;
			}

			switch (alt126) {
				case 1 :
					// HiveParser.g:1587:7: ( KW_COMPUTE )=> KW_COMPUTE KW_STATISTICS ( (noscan= KW_NOSCAN ) | ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? ) )?
					{
					KW_COMPUTE426=(Token)match(input,KW_COMPUTE,FOLLOW_KW_COMPUTE_in_analyzeStatement7614); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COMPUTE.add(KW_COMPUTE426);

					KW_STATISTICS427=(Token)match(input,KW_STATISTICS,FOLLOW_KW_STATISTICS_in_analyzeStatement7616); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_STATISTICS.add(KW_STATISTICS427);

					// HiveParser.g:1587:48: ( (noscan= KW_NOSCAN ) | ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? ) )?
					int alt125=3;
					int LA125_0 = input.LA(1);
					if ( (LA125_0==KW_NOSCAN) ) {
						alt125=1;
					}
					else if ( (LA125_0==KW_FOR) ) {
						alt125=2;
					}
					switch (alt125) {
						case 1 :
							// HiveParser.g:1587:49: (noscan= KW_NOSCAN )
							{
							// HiveParser.g:1587:49: (noscan= KW_NOSCAN )
							// HiveParser.g:1587:50: noscan= KW_NOSCAN
							{
							noscan=(Token)match(input,KW_NOSCAN,FOLLOW_KW_NOSCAN_in_analyzeStatement7622); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_NOSCAN.add(noscan);

							}

							}
							break;
						case 2 :
							// HiveParser.g:1588:57: ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? )
							{
							// HiveParser.g:1588:57: ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? )
							// HiveParser.g:1588:58: KW_FOR KW_COLUMNS (statsColumnName= columnNameList )?
							{
							KW_FOR428=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_analyzeStatement7682); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_FOR.add(KW_FOR428);

							KW_COLUMNS429=(Token)match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_analyzeStatement7684); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_COLUMNS.add(KW_COLUMNS429);

							// HiveParser.g:1588:76: (statsColumnName= columnNameList )?
							int alt124=2;
							int LA124_0 = input.LA(1);
							if ( (LA124_0==Identifier||(LA124_0 >= KW_ABORT && LA124_0 <= KW_AFTER)||LA124_0==KW_ALLOC_FRACTION||LA124_0==KW_ANALYZE||LA124_0==KW_ARCHIVE||(LA124_0 >= KW_ASC && LA124_0 <= KW_AST)||(LA124_0 >= KW_AUTOCOMMIT && LA124_0 <= KW_BEFORE)||(LA124_0 >= KW_BUCKET && LA124_0 <= KW_BUCKETS)||(LA124_0 >= KW_CACHE && LA124_0 <= KW_CASCADE)||LA124_0==KW_CHANGE||(LA124_0 >= KW_CHECK && LA124_0 <= KW_COLLECTION)||(LA124_0 >= KW_COLUMNS && LA124_0 <= KW_COMMENT)||(LA124_0 >= KW_COMPACT && LA124_0 <= KW_CONCATENATE)||LA124_0==KW_CONTINUE||LA124_0==KW_DATA||(LA124_0 >= KW_DATABASES && LA124_0 <= KW_DEBUG)||(LA124_0 >= KW_DEFAULT && LA124_0 <= KW_DEFINED)||(LA124_0 >= KW_DELIMITED && LA124_0 <= KW_DESC)||(LA124_0 >= KW_DETAIL && LA124_0 <= KW_DISABLE)||(LA124_0 >= KW_DISTRIBUTE && LA124_0 <= KW_DO)||LA124_0==KW_DOW||(LA124_0 >= KW_DUMP && LA124_0 <= KW_ELEM_TYPE)||LA124_0==KW_ENABLE||(LA124_0 >= KW_ENFORCED && LA124_0 <= KW_ESCAPED)||LA124_0==KW_EXCLUSIVE||(LA124_0 >= KW_EXPLAIN && LA124_0 <= KW_EXPRESSION)||(LA124_0 >= KW_FIELDS && LA124_0 <= KW_FIRST)||(LA124_0 >= KW_FORMAT && LA124_0 <= KW_FORMATTED)||LA124_0==KW_FUNCTIONS||LA124_0==KW_GROUP||(LA124_0 >= KW_HOUR && LA124_0 <= KW_IDXPROPERTIES)||(LA124_0 >= KW_INDEX && LA124_0 <= KW_INDEXES)||(LA124_0 >= KW_INPATH && LA124_0 <= KW_INPUTFORMAT)||(LA124_0 >= KW_ISOLATION && LA124_0 <= KW_JAR)||(LA124_0 >= KW_KEY && LA124_0 <= KW_LAST)||LA124_0==KW_LEVEL||(LA124_0 >= KW_LIMIT && LA124_0 <= KW_LOAD)||(LA124_0 >= KW_LOCATION && LA124_0 <= KW_LONG)||LA124_0==KW_MANAGEMENT||(LA124_0 >= KW_MAPJOIN && LA124_0 <= KW_MATERIALIZED)||LA124_0==KW_METADATA||(LA124_0 >= KW_MINUTE && LA124_0 <= KW_MONTH)||(LA124_0 >= KW_MOVE && LA124_0 <= KW_MSCK)||(LA124_0 >= KW_NORELY && LA124_0 <= KW_NOSCAN)||LA124_0==KW_NOVALIDATE||LA124_0==KW_NULLS||LA124_0==KW_OFFSET||(LA124_0 >= KW_OPERATOR && LA124_0 <= KW_OPTION)||LA124_0==KW_ORDER||(LA124_0 >= KW_OUTPUTDRIVER && LA124_0 <= KW_OUTPUTFORMAT)||(LA124_0 >= KW_OVERWRITE && LA124_0 <= KW_OWNER)||(LA124_0 >= KW_PARTITIONED && LA124_0 <= KW_PATH)||(LA124_0 >= KW_PLAN && LA124_0 <= KW_POOL)||LA124_0==KW_PRINCIPALS||(LA124_0 >= KW_PURGE && LA124_0 <= KW_QUERY_PARALLELISM)||LA124_0==KW_READ||(LA124_0 >= KW_REBUILD && LA124_0 <= KW_RECORDWRITER)||(LA124_0 >= KW_RELOAD && LA124_0 <= KW_RESTRICT)||LA124_0==KW_REWRITE||(LA124_0 >= KW_ROLE && LA124_0 <= KW_ROLES)||(LA124_0 >= KW_SCHEDULING_POLICY && LA124_0 <= KW_SECOND)||(LA124_0 >= KW_SEMI && LA124_0 <= KW_SERVER)||(LA124_0 >= KW_SETS && LA124_0 <= KW_SKEWED)||(LA124_0 >= KW_SNAPSHOT && LA124_0 <= KW_SSL)||(LA124_0 >= KW_STATISTICS && LA124_0 <= KW_SUMMARY)||LA124_0==KW_TABLES||(LA124_0 >= KW_TBLPROPERTIES && LA124_0 <= KW_TERMINATED)||LA124_0==KW_TINYINT||(LA124_0 >= KW_TOUCH && LA124_0 <= KW_TRANSACTIONS)||LA124_0==KW_UNARCHIVE||LA124_0==KW_UNDO||LA124_0==KW_UNIONTYPE||(LA124_0 >= KW_UNKNOWN && LA124_0 <= KW_UNSIGNED)||(LA124_0 >= KW_URI && LA124_0 <= KW_USE)||(LA124_0 >= KW_UTC && LA124_0 <= KW_VALIDATE)||LA124_0==KW_VALUE_TYPE||(LA124_0 >= KW_VECTORIZATION && LA124_0 <= KW_WEEK)||LA124_0==KW_WHILE||(LA124_0 >= KW_WORK && LA124_0 <= KW_ZONE)||LA124_0==KW_BATCH||LA124_0==KW_DAYOFWEEK||LA124_0==KW_HOLD_DDLTIME||LA124_0==KW_IGNORE||LA124_0==KW_NO_DROP||LA124_0==KW_OFFLINE||LA124_0==KW_PROTECTION||LA124_0==KW_READONLY||LA124_0==KW_TIMESTAMPTZ) ) {
								alt124=1;
							}
							switch (alt124) {
								case 1 :
									// HiveParser.g:1588:77: statsColumnName= columnNameList
									{
									pushFollow(FOLLOW_columnNameList_in_analyzeStatement7689);
									statsColumnName=columnNameList();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_columnNameList.add(statsColumnName.getTree());
									}
									break;

							}

							}

							}
							break;

					}

					// AST REWRITE
					// elements: parttype, noscan, statsColumnName, KW_COLUMNS
					// token labels: noscan
					// rule labels: statsColumnName, parttype, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_noscan=new RewriteRuleTokenStream(adaptor,"token noscan",noscan);
					RewriteRuleSubtreeStream stream_statsColumnName=new RewriteRuleSubtreeStream(adaptor,"rule statsColumnName",statsColumnName!=null?statsColumnName.getTree():null);
					RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1589:7: -> ^( TOK_ANALYZE $parttype ( $noscan)? ( KW_COLUMNS )? ( $statsColumnName)? )
					{
						// HiveParser.g:1589:10: ^( TOK_ANALYZE $parttype ( $noscan)? ( KW_COLUMNS )? ( $statsColumnName)? )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ANALYZE, "TOK_ANALYZE"), root_1);
						adaptor.addChild(root_1, stream_parttype.nextTree());
						// HiveParser.g:1589:35: ( $noscan)?
						if ( stream_noscan.hasNext() ) {
							adaptor.addChild(root_1, stream_noscan.nextNode());
						}
						stream_noscan.reset();

						// HiveParser.g:1589:43: ( KW_COLUMNS )?
						if ( stream_KW_COLUMNS.hasNext() ) {
							adaptor.addChild(root_1, stream_KW_COLUMNS.nextNode());
						}
						stream_KW_COLUMNS.reset();

						// HiveParser.g:1589:56: ( $statsColumnName)?
						if ( stream_statsColumnName.hasNext() ) {
							adaptor.addChild(root_1, stream_statsColumnName.nextTree());
						}
						stream_statsColumnName.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:1591:7: ( KW_CACHE )=> KW_CACHE KW_METADATA
					{
					KW_CACHE430=(Token)match(input,KW_CACHE,FOLLOW_KW_CACHE_in_analyzeStatement7742); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CACHE.add(KW_CACHE430);

					KW_METADATA431=(Token)match(input,KW_METADATA,FOLLOW_KW_METADATA_in_analyzeStatement7744); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_METADATA.add(KW_METADATA431);

					// AST REWRITE
					// elements: parttype
					// token labels: 
					// rule labels: parttype, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1591:42: -> ^( TOK_CACHE_METADATA $parttype)
					{
						// HiveParser.g:1591:45: ^( TOK_CACHE_METADATA $parttype)
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_CACHE_METADATA, "TOK_CACHE_METADATA"), root_1);
						adaptor.addChild(root_1, stream_parttype.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "analyzeStatement"


	public static class showStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "showStatement"
	// HiveParser.g:1595:1: showStatement : ( KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )? -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? ) | KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_VIEWS ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWVIEWS ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_MATERIALIZED KW_VIEWS ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWMATERIALIZEDVIEWS ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_COLUMNS ( KW_FROM | KW_IN ) tableName ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWCOLUMNS tableName ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_FUNCTIONS ( KW_LIKE showFunctionIdentifier | showFunctionIdentifier )? -> ^( TOK_SHOWFUNCTIONS ( KW_LIKE )? ( showFunctionIdentifier )? ) | KW_SHOW KW_PARTITIONS tabName= tableName ( partitionSpec )? -> ^( TOK_SHOWPARTITIONS $tabName ( partitionSpec )? ) | KW_SHOW KW_CREATE ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) db_name= identifier -> ^( TOK_SHOW_CREATEDATABASE $db_name) | KW_TABLE tabName= tableName -> ^( TOK_SHOW_CREATETABLE $tabName) ) | KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )? -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? ) | KW_SHOW KW_TBLPROPERTIES tableName ( LPAREN prptyName= StringLiteral RPAREN )? -> ^( TOK_SHOW_TBLPROPERTIES tableName ( $prptyName)? ) | KW_SHOW KW_LOCKS ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= identifier ) (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? ) | (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) ) | KW_SHOW KW_COMPACTIONS -> ^( TOK_SHOW_COMPACTIONS ) | KW_SHOW KW_TRANSACTIONS -> ^( TOK_SHOW_TRANSACTIONS ) | KW_SHOW KW_CONF StringLiteral -> ^( TOK_SHOWCONF StringLiteral ) | KW_SHOW KW_RESOURCE ( ( KW_PLAN rp_name= identifier -> ^( TOK_SHOW_RP $rp_name) ) | ( KW_PLANS -> ^( TOK_SHOW_RP ) ) ) );
	public final HiveParser.showStatement_return showStatement() throws RecognitionException {
		HiveParser.showStatement_return retval = new HiveParser.showStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token prptyName=null;
		Token isExtended=null;
		Token KW_SHOW432=null;
		Token KW_DATABASES433=null;
		Token KW_SCHEMAS434=null;
		Token KW_LIKE435=null;
		Token KW_SHOW437=null;
		Token KW_TABLES438=null;
		Token KW_FROM439=null;
		Token KW_IN440=null;
		Token KW_LIKE441=null;
		Token KW_SHOW444=null;
		Token KW_VIEWS445=null;
		Token KW_FROM446=null;
		Token KW_IN447=null;
		Token KW_LIKE448=null;
		Token KW_SHOW451=null;
		Token KW_MATERIALIZED452=null;
		Token KW_VIEWS453=null;
		Token KW_FROM454=null;
		Token KW_IN455=null;
		Token KW_LIKE456=null;
		Token KW_SHOW459=null;
		Token KW_COLUMNS460=null;
		Token KW_FROM461=null;
		Token KW_IN462=null;
		Token KW_FROM464=null;
		Token KW_IN465=null;
		Token KW_LIKE466=null;
		Token KW_SHOW469=null;
		Token KW_FUNCTIONS470=null;
		Token KW_LIKE471=null;
		Token KW_SHOW474=null;
		Token KW_PARTITIONS475=null;
		Token KW_SHOW477=null;
		Token KW_CREATE478=null;
		Token KW_DATABASE479=null;
		Token KW_SCHEMA480=null;
		Token KW_TABLE481=null;
		Token KW_SHOW482=null;
		Token KW_TABLE483=null;
		Token KW_EXTENDED484=null;
		Token KW_FROM485=null;
		Token KW_IN486=null;
		Token KW_LIKE487=null;
		Token KW_SHOW490=null;
		Token KW_TBLPROPERTIES491=null;
		Token LPAREN493=null;
		Token RPAREN494=null;
		Token KW_SHOW495=null;
		Token KW_LOCKS496=null;
		Token KW_DATABASE497=null;
		Token KW_SCHEMA498=null;
		Token KW_SHOW499=null;
		Token KW_COMPACTIONS500=null;
		Token KW_SHOW501=null;
		Token KW_TRANSACTIONS502=null;
		Token KW_SHOW503=null;
		Token KW_CONF504=null;
		Token StringLiteral505=null;
		Token KW_SHOW506=null;
		Token KW_RESOURCE507=null;
		Token KW_PLAN508=null;
		Token KW_PLANS509=null;
		ParserRuleReturnScope db_name =null;
		ParserRuleReturnScope tabName =null;
		ParserRuleReturnScope dbName =null;
		ParserRuleReturnScope parttype =null;
		ParserRuleReturnScope rp_name =null;
		ParserRuleReturnScope showStmtIdentifier436 =null;
		ParserRuleReturnScope showStmtIdentifier442 =null;
		ParserRuleReturnScope showStmtIdentifier443 =null;
		ParserRuleReturnScope showStmtIdentifier449 =null;
		ParserRuleReturnScope showStmtIdentifier450 =null;
		ParserRuleReturnScope showStmtIdentifier457 =null;
		ParserRuleReturnScope showStmtIdentifier458 =null;
		ParserRuleReturnScope tableName463 =null;
		ParserRuleReturnScope showStmtIdentifier467 =null;
		ParserRuleReturnScope showStmtIdentifier468 =null;
		ParserRuleReturnScope showFunctionIdentifier472 =null;
		ParserRuleReturnScope showFunctionIdentifier473 =null;
		ParserRuleReturnScope partitionSpec476 =null;
		ParserRuleReturnScope showStmtIdentifier488 =null;
		ParserRuleReturnScope partitionSpec489 =null;
		ParserRuleReturnScope tableName492 =null;

		ASTNode prptyName_tree=null;
		ASTNode isExtended_tree=null;
		ASTNode KW_SHOW432_tree=null;
		ASTNode KW_DATABASES433_tree=null;
		ASTNode KW_SCHEMAS434_tree=null;
		ASTNode KW_LIKE435_tree=null;
		ASTNode KW_SHOW437_tree=null;
		ASTNode KW_TABLES438_tree=null;
		ASTNode KW_FROM439_tree=null;
		ASTNode KW_IN440_tree=null;
		ASTNode KW_LIKE441_tree=null;
		ASTNode KW_SHOW444_tree=null;
		ASTNode KW_VIEWS445_tree=null;
		ASTNode KW_FROM446_tree=null;
		ASTNode KW_IN447_tree=null;
		ASTNode KW_LIKE448_tree=null;
		ASTNode KW_SHOW451_tree=null;
		ASTNode KW_MATERIALIZED452_tree=null;
		ASTNode KW_VIEWS453_tree=null;
		ASTNode KW_FROM454_tree=null;
		ASTNode KW_IN455_tree=null;
		ASTNode KW_LIKE456_tree=null;
		ASTNode KW_SHOW459_tree=null;
		ASTNode KW_COLUMNS460_tree=null;
		ASTNode KW_FROM461_tree=null;
		ASTNode KW_IN462_tree=null;
		ASTNode KW_FROM464_tree=null;
		ASTNode KW_IN465_tree=null;
		ASTNode KW_LIKE466_tree=null;
		ASTNode KW_SHOW469_tree=null;
		ASTNode KW_FUNCTIONS470_tree=null;
		ASTNode KW_LIKE471_tree=null;
		ASTNode KW_SHOW474_tree=null;
		ASTNode KW_PARTITIONS475_tree=null;
		ASTNode KW_SHOW477_tree=null;
		ASTNode KW_CREATE478_tree=null;
		ASTNode KW_DATABASE479_tree=null;
		ASTNode KW_SCHEMA480_tree=null;
		ASTNode KW_TABLE481_tree=null;
		ASTNode KW_SHOW482_tree=null;
		ASTNode KW_TABLE483_tree=null;
		ASTNode KW_EXTENDED484_tree=null;
		ASTNode KW_FROM485_tree=null;
		ASTNode KW_IN486_tree=null;
		ASTNode KW_LIKE487_tree=null;
		ASTNode KW_SHOW490_tree=null;
		ASTNode KW_TBLPROPERTIES491_tree=null;
		ASTNode LPAREN493_tree=null;
		ASTNode RPAREN494_tree=null;
		ASTNode KW_SHOW495_tree=null;
		ASTNode KW_LOCKS496_tree=null;
		ASTNode KW_DATABASE497_tree=null;
		ASTNode KW_SCHEMA498_tree=null;
		ASTNode KW_SHOW499_tree=null;
		ASTNode KW_COMPACTIONS500_tree=null;
		ASTNode KW_SHOW501_tree=null;
		ASTNode KW_TRANSACTIONS502_tree=null;
		ASTNode KW_SHOW503_tree=null;
		ASTNode KW_CONF504_tree=null;
		ASTNode StringLiteral505_tree=null;
		ASTNode KW_SHOW506_tree=null;
		ASTNode KW_RESOURCE507_tree=null;
		ASTNode KW_PLAN508_tree=null;
		ASTNode KW_PLANS509_tree=null;
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_KW_VIEWS=new RewriteRuleTokenStream(adaptor,"token KW_VIEWS");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_LIKE=new RewriteRuleTokenStream(adaptor,"token KW_LIKE");
		RewriteRuleTokenStream stream_KW_PARTITIONS=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONS");
		RewriteRuleTokenStream stream_KW_IN=new RewriteRuleTokenStream(adaptor,"token KW_IN");
		RewriteRuleTokenStream stream_KW_LOCKS=new RewriteRuleTokenStream(adaptor,"token KW_LOCKS");
		RewriteRuleTokenStream stream_KW_TABLES=new RewriteRuleTokenStream(adaptor,"token KW_TABLES");
		RewriteRuleTokenStream stream_KW_FUNCTIONS=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTIONS");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
		RewriteRuleTokenStream stream_KW_CONF=new RewriteRuleTokenStream(adaptor,"token KW_CONF");
		RewriteRuleTokenStream stream_KW_PLAN=new RewriteRuleTokenStream(adaptor,"token KW_PLAN");
		RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
		RewriteRuleTokenStream stream_KW_TRANSACTIONS=new RewriteRuleTokenStream(adaptor,"token KW_TRANSACTIONS");
		RewriteRuleTokenStream stream_KW_SCHEMAS=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMAS");
		RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_COMPACTIONS=new RewriteRuleTokenStream(adaptor,"token KW_COMPACTIONS");
		RewriteRuleTokenStream stream_KW_PLANS=new RewriteRuleTokenStream(adaptor,"token KW_PLANS");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_RESOURCE=new RewriteRuleTokenStream(adaptor,"token KW_RESOURCE");
		RewriteRuleTokenStream stream_KW_DATABASES=new RewriteRuleTokenStream(adaptor,"token KW_DATABASES");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
		RewriteRuleTokenStream stream_KW_MATERIALIZED=new RewriteRuleTokenStream(adaptor,"token KW_MATERIALIZED");
		RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
		RewriteRuleSubtreeStream stream_showStmtIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule showStmtIdentifier");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_showFunctionIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule showFunctionIdentifier");
		RewriteRuleSubtreeStream stream_partTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule partTypeExpr");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg(retval.start,"show statement", state); 
		try {
			// HiveParser.g:1598:5: ( KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )? -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? ) | KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_VIEWS ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWVIEWS ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_MATERIALIZED KW_VIEWS ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWMATERIALIZEDVIEWS ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_COLUMNS ( KW_FROM | KW_IN ) tableName ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWCOLUMNS tableName ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_FUNCTIONS ( KW_LIKE showFunctionIdentifier | showFunctionIdentifier )? -> ^( TOK_SHOWFUNCTIONS ( KW_LIKE )? ( showFunctionIdentifier )? ) | KW_SHOW KW_PARTITIONS tabName= tableName ( partitionSpec )? -> ^( TOK_SHOWPARTITIONS $tabName ( partitionSpec )? ) | KW_SHOW KW_CREATE ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) db_name= identifier -> ^( TOK_SHOW_CREATEDATABASE $db_name) | KW_TABLE tabName= tableName -> ^( TOK_SHOW_CREATETABLE $tabName) ) | KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )? -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? ) | KW_SHOW KW_TBLPROPERTIES tableName ( LPAREN prptyName= StringLiteral RPAREN )? -> ^( TOK_SHOW_TBLPROPERTIES tableName ( $prptyName)? ) | KW_SHOW KW_LOCKS ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= identifier ) (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? ) | (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) ) | KW_SHOW KW_COMPACTIONS -> ^( TOK_SHOW_COMPACTIONS ) | KW_SHOW KW_TRANSACTIONS -> ^( TOK_SHOW_TRANSACTIONS ) | KW_SHOW KW_CONF StringLiteral -> ^( TOK_SHOWCONF StringLiteral ) | KW_SHOW KW_RESOURCE ( ( KW_PLAN rp_name= identifier -> ^( TOK_SHOW_RP $rp_name) ) | ( KW_PLANS -> ^( TOK_SHOW_RP ) ) ) )
			int alt156=15;
			int LA156_0 = input.LA(1);
			if ( (LA156_0==KW_SHOW) ) {
				switch ( input.LA(2) ) {
				case KW_TABLES:
					{
					alt156=2;
					}
					break;
				case KW_VIEWS:
					{
					alt156=3;
					}
					break;
				case KW_MATERIALIZED:
					{
					alt156=4;
					}
					break;
				case KW_COLUMNS:
					{
					alt156=5;
					}
					break;
				case KW_FUNCTIONS:
					{
					alt156=6;
					}
					break;
				case KW_PARTITIONS:
					{
					alt156=7;
					}
					break;
				case KW_CREATE:
					{
					alt156=8;
					}
					break;
				case KW_TABLE:
					{
					alt156=9;
					}
					break;
				case KW_TBLPROPERTIES:
					{
					alt156=10;
					}
					break;
				case KW_LOCKS:
					{
					alt156=11;
					}
					break;
				case KW_COMPACTIONS:
					{
					alt156=12;
					}
					break;
				case KW_TRANSACTIONS:
					{
					alt156=13;
					}
					break;
				case KW_CONF:
					{
					alt156=14;
					}
					break;
				case KW_RESOURCE:
					{
					alt156=15;
					}
					break;
				case KW_DATABASES:
				case KW_SCHEMAS:
					{
					alt156=1;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 156, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 156, 0, input);
				throw nvae;
			}

			switch (alt156) {
				case 1 :
					// HiveParser.g:1598:7: KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )?
					{
					KW_SHOW432=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7788); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW432);

					// HiveParser.g:1598:15: ( KW_DATABASES | KW_SCHEMAS )
					int alt127=2;
					int LA127_0 = input.LA(1);
					if ( (LA127_0==KW_DATABASES) ) {
						alt127=1;
					}
					else if ( (LA127_0==KW_SCHEMAS) ) {
						alt127=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 127, 0, input);
						throw nvae;
					}

					switch (alt127) {
						case 1 :
							// HiveParser.g:1598:16: KW_DATABASES
							{
							KW_DATABASES433=(Token)match(input,KW_DATABASES,FOLLOW_KW_DATABASES_in_showStatement7791); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_DATABASES.add(KW_DATABASES433);

							}
							break;
						case 2 :
							// HiveParser.g:1598:29: KW_SCHEMAS
							{
							KW_SCHEMAS434=(Token)match(input,KW_SCHEMAS,FOLLOW_KW_SCHEMAS_in_showStatement7793); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_SCHEMAS.add(KW_SCHEMAS434);

							}
							break;

					}

					// HiveParser.g:1598:41: ( KW_LIKE showStmtIdentifier )?
					int alt128=2;
					int LA128_0 = input.LA(1);
					if ( (LA128_0==KW_LIKE) ) {
						alt128=1;
					}
					switch (alt128) {
						case 1 :
							// HiveParser.g:1598:42: KW_LIKE showStmtIdentifier
							{
							KW_LIKE435=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement7797); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_LIKE.add(KW_LIKE435);

							pushFollow(FOLLOW_showStmtIdentifier_in_showStatement7799);
							showStmtIdentifier436=showStmtIdentifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier436.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: showStmtIdentifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1598:71: -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? )
					{
						// HiveParser.g:1598:74: ^( TOK_SHOWDATABASES ( showStmtIdentifier )? )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SHOWDATABASES, "TOK_SHOWDATABASES"), root_1);
						// HiveParser.g:1598:94: ( showStmtIdentifier )?
						if ( stream_showStmtIdentifier.hasNext() ) {
							adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());
						}
						stream_showStmtIdentifier.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:1599:7: KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
					{
					KW_SHOW437=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7818); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW437);

					KW_TABLES438=(Token)match(input,KW_TABLES,FOLLOW_KW_TABLES_in_showStatement7820); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TABLES.add(KW_TABLES438);

					// HiveParser.g:1599:25: ( ( KW_FROM | KW_IN ) db_name= identifier )?
					int alt130=2;
					int LA130_0 = input.LA(1);
					if ( (LA130_0==KW_FROM||LA130_0==KW_IN) ) {
						alt130=1;
					}
					switch (alt130) {
						case 1 :
							// HiveParser.g:1599:26: ( KW_FROM | KW_IN ) db_name= identifier
							{
							// HiveParser.g:1599:26: ( KW_FROM | KW_IN )
							int alt129=2;
							int LA129_0 = input.LA(1);
							if ( (LA129_0==KW_FROM) ) {
								alt129=1;
							}
							else if ( (LA129_0==KW_IN) ) {
								alt129=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 129, 0, input);
								throw nvae;
							}

							switch (alt129) {
								case 1 :
									// HiveParser.g:1599:27: KW_FROM
									{
									KW_FROM439=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement7824); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM439);

									}
									break;
								case 2 :
									// HiveParser.g:1599:35: KW_IN
									{
									KW_IN440=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement7826); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN440);

									}
									break;

							}

							pushFollow(FOLLOW_identifier_in_showStatement7831);
							db_name=identifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_identifier.add(db_name.getTree());
							}
							break;

					}

					// HiveParser.g:1599:63: ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
					int alt131=3;
					int LA131_0 = input.LA(1);
					if ( (LA131_0==KW_LIKE) ) {
						alt131=1;
					}
					else if ( (LA131_0==Identifier||(LA131_0 >= KW_ABORT && LA131_0 <= KW_AFTER)||LA131_0==KW_ALLOC_FRACTION||LA131_0==KW_ANALYZE||LA131_0==KW_ARCHIVE||(LA131_0 >= KW_ASC && LA131_0 <= KW_AST)||(LA131_0 >= KW_AUTOCOMMIT && LA131_0 <= KW_BEFORE)||(LA131_0 >= KW_BUCKET && LA131_0 <= KW_BUCKETS)||(LA131_0 >= KW_CACHE && LA131_0 <= KW_CASCADE)||LA131_0==KW_CHANGE||(LA131_0 >= KW_CHECK && LA131_0 <= KW_COLLECTION)||(LA131_0 >= KW_COLUMNS && LA131_0 <= KW_COMMENT)||(LA131_0 >= KW_COMPACT && LA131_0 <= KW_CONCATENATE)||LA131_0==KW_CONTINUE||LA131_0==KW_DATA||(LA131_0 >= KW_DATABASES && LA131_0 <= KW_DEBUG)||(LA131_0 >= KW_DEFAULT && LA131_0 <= KW_DEFINED)||(LA131_0 >= KW_DELIMITED && LA131_0 <= KW_DESC)||(LA131_0 >= KW_DETAIL && LA131_0 <= KW_DISABLE)||(LA131_0 >= KW_DISTRIBUTE && LA131_0 <= KW_DO)||LA131_0==KW_DOW||(LA131_0 >= KW_DUMP && LA131_0 <= KW_ELEM_TYPE)||LA131_0==KW_ENABLE||(LA131_0 >= KW_ENFORCED && LA131_0 <= KW_ESCAPED)||LA131_0==KW_EXCLUSIVE||(LA131_0 >= KW_EXPLAIN && LA131_0 <= KW_EXPRESSION)||(LA131_0 >= KW_FIELDS && LA131_0 <= KW_FIRST)||(LA131_0 >= KW_FORMAT && LA131_0 <= KW_FORMATTED)||LA131_0==KW_FUNCTIONS||LA131_0==KW_GROUP||(LA131_0 >= KW_HOUR && LA131_0 <= KW_IDXPROPERTIES)||(LA131_0 >= KW_INDEX && LA131_0 <= KW_INDEXES)||(LA131_0 >= KW_INPATH && LA131_0 <= KW_INPUTFORMAT)||(LA131_0 >= KW_ISOLATION && LA131_0 <= KW_JAR)||(LA131_0 >= KW_KEY && LA131_0 <= KW_LAST)||LA131_0==KW_LEVEL||(LA131_0 >= KW_LIMIT && LA131_0 <= KW_LOAD)||(LA131_0 >= KW_LOCATION && LA131_0 <= KW_LONG)||LA131_0==KW_MANAGEMENT||(LA131_0 >= KW_MAPJOIN && LA131_0 <= KW_MATERIALIZED)||LA131_0==KW_METADATA||(LA131_0 >= KW_MINUTE && LA131_0 <= KW_MONTH)||(LA131_0 >= KW_MOVE && LA131_0 <= KW_MSCK)||(LA131_0 >= KW_NORELY && LA131_0 <= KW_NOSCAN)||LA131_0==KW_NOVALIDATE||LA131_0==KW_NULLS||LA131_0==KW_OFFSET||(LA131_0 >= KW_OPERATOR && LA131_0 <= KW_OPTION)||LA131_0==KW_ORDER||(LA131_0 >= KW_OUTPUTDRIVER && LA131_0 <= KW_OUTPUTFORMAT)||(LA131_0 >= KW_OVERWRITE && LA131_0 <= KW_OWNER)||(LA131_0 >= KW_PARTITIONED && LA131_0 <= KW_PATH)||(LA131_0 >= KW_PLAN && LA131_0 <= KW_POOL)||LA131_0==KW_PRINCIPALS||(LA131_0 >= KW_PURGE && LA131_0 <= KW_QUERY_PARALLELISM)||LA131_0==KW_READ||(LA131_0 >= KW_REBUILD && LA131_0 <= KW_RECORDWRITER)||(LA131_0 >= KW_RELOAD && LA131_0 <= KW_RESTRICT)||LA131_0==KW_REWRITE||(LA131_0 >= KW_ROLE && LA131_0 <= KW_ROLES)||(LA131_0 >= KW_SCHEDULING_POLICY && LA131_0 <= KW_SECOND)||(LA131_0 >= KW_SEMI && LA131_0 <= KW_SERVER)||(LA131_0 >= KW_SETS && LA131_0 <= KW_SKEWED)||(LA131_0 >= KW_SNAPSHOT && LA131_0 <= KW_SSL)||(LA131_0 >= KW_STATISTICS && LA131_0 <= KW_SUMMARY)||LA131_0==KW_TABLES||(LA131_0 >= KW_TBLPROPERTIES && LA131_0 <= KW_TERMINATED)||LA131_0==KW_TINYINT||(LA131_0 >= KW_TOUCH && LA131_0 <= KW_TRANSACTIONS)||LA131_0==KW_UNARCHIVE||LA131_0==KW_UNDO||LA131_0==KW_UNIONTYPE||(LA131_0 >= KW_UNKNOWN && LA131_0 <= KW_UNSIGNED)||(LA131_0 >= KW_URI && LA131_0 <= KW_USE)||(LA131_0 >= KW_UTC && LA131_0 <= KW_VALIDATE)||LA131_0==KW_VALUE_TYPE||(LA131_0 >= KW_VECTORIZATION && LA131_0 <= KW_WEEK)||LA131_0==KW_WHILE||(LA131_0 >= KW_WORK && LA131_0 <= KW_ZONE)||LA131_0==StringLiteral||LA131_0==KW_BATCH||LA131_0==KW_DAYOFWEEK||LA131_0==KW_HOLD_DDLTIME||LA131_0==KW_IGNORE||LA131_0==KW_NO_DROP||LA131_0==KW_OFFLINE||LA131_0==KW_PROTECTION||LA131_0==KW_READONLY||LA131_0==KW_TIMESTAMPTZ) ) {
						alt131=2;
					}
					switch (alt131) {
						case 1 :
							// HiveParser.g:1599:64: KW_LIKE showStmtIdentifier
							{
							KW_LIKE441=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement7836); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_LIKE.add(KW_LIKE441);

							pushFollow(FOLLOW_showStmtIdentifier_in_showStatement7838);
							showStmtIdentifier442=showStmtIdentifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier442.getTree());
							}
							break;
						case 2 :
							// HiveParser.g:1599:91: showStmtIdentifier
							{
							pushFollow(FOLLOW_showStmtIdentifier_in_showStatement7840);
							showStmtIdentifier443=showStmtIdentifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier443.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: showStmtIdentifier, db_name
					// token labels: 
					// rule labels: db_name, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1599:113: -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
					{
						// HiveParser.g:1599:116: ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SHOWTABLES, "TOK_SHOWTABLES"), root_1);
						// HiveParser.g:1599:133: ( TOK_FROM $db_name)?
						if ( stream_db_name.hasNext() ) {
							adaptor.addChild(root_1, (ASTNode)adaptor.create(TOK_FROM, "TOK_FROM"));
							adaptor.addChild(root_1, stream_db_name.nextTree());
						}
						stream_db_name.reset();

						// HiveParser.g:1599:154: ( showStmtIdentifier )?
						if ( stream_showStmtIdentifier.hasNext() ) {
							adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());
						}
						stream_showStmtIdentifier.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// HiveParser.g:1600:7: KW_SHOW KW_VIEWS ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
					{
					KW_SHOW444=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7868); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW444);

					KW_VIEWS445=(Token)match(input,KW_VIEWS,FOLLOW_KW_VIEWS_in_showStatement7870); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_VIEWS.add(KW_VIEWS445);

					// HiveParser.g:1600:24: ( ( KW_FROM | KW_IN ) db_name= identifier )?
					int alt133=2;
					int LA133_0 = input.LA(1);
					if ( (LA133_0==KW_FROM||LA133_0==KW_IN) ) {
						alt133=1;
					}
					switch (alt133) {
						case 1 :
							// HiveParser.g:1600:25: ( KW_FROM | KW_IN ) db_name= identifier
							{
							// HiveParser.g:1600:25: ( KW_FROM | KW_IN )
							int alt132=2;
							int LA132_0 = input.LA(1);
							if ( (LA132_0==KW_FROM) ) {
								alt132=1;
							}
							else if ( (LA132_0==KW_IN) ) {
								alt132=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 132, 0, input);
								throw nvae;
							}

							switch (alt132) {
								case 1 :
									// HiveParser.g:1600:26: KW_FROM
									{
									KW_FROM446=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement7874); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM446);

									}
									break;
								case 2 :
									// HiveParser.g:1600:34: KW_IN
									{
									KW_IN447=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement7876); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN447);

									}
									break;

							}

							pushFollow(FOLLOW_identifier_in_showStatement7881);
							db_name=identifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_identifier.add(db_name.getTree());
							}
							break;

					}

					// HiveParser.g:1600:62: ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
					int alt134=3;
					int LA134_0 = input.LA(1);
					if ( (LA134_0==KW_LIKE) ) {
						alt134=1;
					}
					else if ( (LA134_0==Identifier||(LA134_0 >= KW_ABORT && LA134_0 <= KW_AFTER)||LA134_0==KW_ALLOC_FRACTION||LA134_0==KW_ANALYZE||LA134_0==KW_ARCHIVE||(LA134_0 >= KW_ASC && LA134_0 <= KW_AST)||(LA134_0 >= KW_AUTOCOMMIT && LA134_0 <= KW_BEFORE)||(LA134_0 >= KW_BUCKET && LA134_0 <= KW_BUCKETS)||(LA134_0 >= KW_CACHE && LA134_0 <= KW_CASCADE)||LA134_0==KW_CHANGE||(LA134_0 >= KW_CHECK && LA134_0 <= KW_COLLECTION)||(LA134_0 >= KW_COLUMNS && LA134_0 <= KW_COMMENT)||(LA134_0 >= KW_COMPACT && LA134_0 <= KW_CONCATENATE)||LA134_0==KW_CONTINUE||LA134_0==KW_DATA||(LA134_0 >= KW_DATABASES && LA134_0 <= KW_DEBUG)||(LA134_0 >= KW_DEFAULT && LA134_0 <= KW_DEFINED)||(LA134_0 >= KW_DELIMITED && LA134_0 <= KW_DESC)||(LA134_0 >= KW_DETAIL && LA134_0 <= KW_DISABLE)||(LA134_0 >= KW_DISTRIBUTE && LA134_0 <= KW_DO)||LA134_0==KW_DOW||(LA134_0 >= KW_DUMP && LA134_0 <= KW_ELEM_TYPE)||LA134_0==KW_ENABLE||(LA134_0 >= KW_ENFORCED && LA134_0 <= KW_ESCAPED)||LA134_0==KW_EXCLUSIVE||(LA134_0 >= KW_EXPLAIN && LA134_0 <= KW_EXPRESSION)||(LA134_0 >= KW_FIELDS && LA134_0 <= KW_FIRST)||(LA134_0 >= KW_FORMAT && LA134_0 <= KW_FORMATTED)||LA134_0==KW_FUNCTIONS||LA134_0==KW_GROUP||(LA134_0 >= KW_HOUR && LA134_0 <= KW_IDXPROPERTIES)||(LA134_0 >= KW_INDEX && LA134_0 <= KW_INDEXES)||(LA134_0 >= KW_INPATH && LA134_0 <= KW_INPUTFORMAT)||(LA134_0 >= KW_ISOLATION && LA134_0 <= KW_JAR)||(LA134_0 >= KW_KEY && LA134_0 <= KW_LAST)||LA134_0==KW_LEVEL||(LA134_0 >= KW_LIMIT && LA134_0 <= KW_LOAD)||(LA134_0 >= KW_LOCATION && LA134_0 <= KW_LONG)||LA134_0==KW_MANAGEMENT||(LA134_0 >= KW_MAPJOIN && LA134_0 <= KW_MATERIALIZED)||LA134_0==KW_METADATA||(LA134_0 >= KW_MINUTE && LA134_0 <= KW_MONTH)||(LA134_0 >= KW_MOVE && LA134_0 <= KW_MSCK)||(LA134_0 >= KW_NORELY && LA134_0 <= KW_NOSCAN)||LA134_0==KW_NOVALIDATE||LA134_0==KW_NULLS||LA134_0==KW_OFFSET||(LA134_0 >= KW_OPERATOR && LA134_0 <= KW_OPTION)||LA134_0==KW_ORDER||(LA134_0 >= KW_OUTPUTDRIVER && LA134_0 <= KW_OUTPUTFORMAT)||(LA134_0 >= KW_OVERWRITE && LA134_0 <= KW_OWNER)||(LA134_0 >= KW_PARTITIONED && LA134_0 <= KW_PATH)||(LA134_0 >= KW_PLAN && LA134_0 <= KW_POOL)||LA134_0==KW_PRINCIPALS||(LA134_0 >= KW_PURGE && LA134_0 <= KW_QUERY_PARALLELISM)||LA134_0==KW_READ||(LA134_0 >= KW_REBUILD && LA134_0 <= KW_RECORDWRITER)||(LA134_0 >= KW_RELOAD && LA134_0 <= KW_RESTRICT)||LA134_0==KW_REWRITE||(LA134_0 >= KW_ROLE && LA134_0 <= KW_ROLES)||(LA134_0 >= KW_SCHEDULING_POLICY && LA134_0 <= KW_SECOND)||(LA134_0 >= KW_SEMI && LA134_0 <= KW_SERVER)||(LA134_0 >= KW_SETS && LA134_0 <= KW_SKEWED)||(LA134_0 >= KW_SNAPSHOT && LA134_0 <= KW_SSL)||(LA134_0 >= KW_STATISTICS && LA134_0 <= KW_SUMMARY)||LA134_0==KW_TABLES||(LA134_0 >= KW_TBLPROPERTIES && LA134_0 <= KW_TERMINATED)||LA134_0==KW_TINYINT||(LA134_0 >= KW_TOUCH && LA134_0 <= KW_TRANSACTIONS)||LA134_0==KW_UNARCHIVE||LA134_0==KW_UNDO||LA134_0==KW_UNIONTYPE||(LA134_0 >= KW_UNKNOWN && LA134_0 <= KW_UNSIGNED)||(LA134_0 >= KW_URI && LA134_0 <= KW_USE)||(LA134_0 >= KW_UTC && LA134_0 <= KW_VALIDATE)||LA134_0==KW_VALUE_TYPE||(LA134_0 >= KW_VECTORIZATION && LA134_0 <= KW_WEEK)||LA134_0==KW_WHILE||(LA134_0 >= KW_WORK && LA134_0 <= KW_ZONE)||LA134_0==StringLiteral||LA134_0==KW_BATCH||LA134_0==KW_DAYOFWEEK||LA134_0==KW_HOLD_DDLTIME||LA134_0==KW_IGNORE||LA134_0==KW_NO_DROP||LA134_0==KW_OFFLINE||LA134_0==KW_PROTECTION||LA134_0==KW_READONLY||LA134_0==KW_TIMESTAMPTZ) ) {
						alt134=2;
					}
					switch (alt134) {
						case 1 :
							// HiveParser.g:1600:63: KW_LIKE showStmtIdentifier
							{
							KW_LIKE448=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement7886); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_LIKE.add(KW_LIKE448);

							pushFollow(FOLLOW_showStmtIdentifier_in_showStatement7888);
							showStmtIdentifier449=showStmtIdentifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier449.getTree());
							}
							break;
						case 2 :
							// HiveParser.g:1600:90: showStmtIdentifier
							{
							pushFollow(FOLLOW_showStmtIdentifier_in_showStatement7890);
							showStmtIdentifier450=showStmtIdentifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier450.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: showStmtIdentifier, db_name
					// token labels: 
					// rule labels: db_name, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1600:112: -> ^( TOK_SHOWVIEWS ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
					{
						// HiveParser.g:1600:115: ^( TOK_SHOWVIEWS ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SHOWVIEWS, "TOK_SHOWVIEWS"), root_1);
						// HiveParser.g:1600:131: ( TOK_FROM $db_name)?
						if ( stream_db_name.hasNext() ) {
							adaptor.addChild(root_1, (ASTNode)adaptor.create(TOK_FROM, "TOK_FROM"));
							adaptor.addChild(root_1, stream_db_name.nextTree());
						}
						stream_db_name.reset();

						// HiveParser.g:1600:152: ( showStmtIdentifier )?
						if ( stream_showStmtIdentifier.hasNext() ) {
							adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());
						}
						stream_showStmtIdentifier.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// HiveParser.g:1601:7: KW_SHOW KW_MATERIALIZED KW_VIEWS ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
					{
					KW_SHOW451=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7918); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW451);

					KW_MATERIALIZED452=(Token)match(input,KW_MATERIALIZED,FOLLOW_KW_MATERIALIZED_in_showStatement7920); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_MATERIALIZED.add(KW_MATERIALIZED452);

					KW_VIEWS453=(Token)match(input,KW_VIEWS,FOLLOW_KW_VIEWS_in_showStatement7922); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_VIEWS.add(KW_VIEWS453);

					// HiveParser.g:1601:40: ( ( KW_FROM | KW_IN ) db_name= identifier )?
					int alt136=2;
					int LA136_0 = input.LA(1);
					if ( (LA136_0==KW_FROM||LA136_0==KW_IN) ) {
						alt136=1;
					}
					switch (alt136) {
						case 1 :
							// HiveParser.g:1601:41: ( KW_FROM | KW_IN ) db_name= identifier
							{
							// HiveParser.g:1601:41: ( KW_FROM | KW_IN )
							int alt135=2;
							int LA135_0 = input.LA(1);
							if ( (LA135_0==KW_FROM) ) {
								alt135=1;
							}
							else if ( (LA135_0==KW_IN) ) {
								alt135=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 135, 0, input);
								throw nvae;
							}

							switch (alt135) {
								case 1 :
									// HiveParser.g:1601:42: KW_FROM
									{
									KW_FROM454=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement7926); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM454);

									}
									break;
								case 2 :
									// HiveParser.g:1601:50: KW_IN
									{
									KW_IN455=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement7928); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN455);

									}
									break;

							}

							pushFollow(FOLLOW_identifier_in_showStatement7933);
							db_name=identifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_identifier.add(db_name.getTree());
							}
							break;

					}

					// HiveParser.g:1601:78: ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
					int alt137=3;
					int LA137_0 = input.LA(1);
					if ( (LA137_0==KW_LIKE) ) {
						alt137=1;
					}
					else if ( (LA137_0==Identifier||(LA137_0 >= KW_ABORT && LA137_0 <= KW_AFTER)||LA137_0==KW_ALLOC_FRACTION||LA137_0==KW_ANALYZE||LA137_0==KW_ARCHIVE||(LA137_0 >= KW_ASC && LA137_0 <= KW_AST)||(LA137_0 >= KW_AUTOCOMMIT && LA137_0 <= KW_BEFORE)||(LA137_0 >= KW_BUCKET && LA137_0 <= KW_BUCKETS)||(LA137_0 >= KW_CACHE && LA137_0 <= KW_CASCADE)||LA137_0==KW_CHANGE||(LA137_0 >= KW_CHECK && LA137_0 <= KW_COLLECTION)||(LA137_0 >= KW_COLUMNS && LA137_0 <= KW_COMMENT)||(LA137_0 >= KW_COMPACT && LA137_0 <= KW_CONCATENATE)||LA137_0==KW_CONTINUE||LA137_0==KW_DATA||(LA137_0 >= KW_DATABASES && LA137_0 <= KW_DEBUG)||(LA137_0 >= KW_DEFAULT && LA137_0 <= KW_DEFINED)||(LA137_0 >= KW_DELIMITED && LA137_0 <= KW_DESC)||(LA137_0 >= KW_DETAIL && LA137_0 <= KW_DISABLE)||(LA137_0 >= KW_DISTRIBUTE && LA137_0 <= KW_DO)||LA137_0==KW_DOW||(LA137_0 >= KW_DUMP && LA137_0 <= KW_ELEM_TYPE)||LA137_0==KW_ENABLE||(LA137_0 >= KW_ENFORCED && LA137_0 <= KW_ESCAPED)||LA137_0==KW_EXCLUSIVE||(LA137_0 >= KW_EXPLAIN && LA137_0 <= KW_EXPRESSION)||(LA137_0 >= KW_FIELDS && LA137_0 <= KW_FIRST)||(LA137_0 >= KW_FORMAT && LA137_0 <= KW_FORMATTED)||LA137_0==KW_FUNCTIONS||LA137_0==KW_GROUP||(LA137_0 >= KW_HOUR && LA137_0 <= KW_IDXPROPERTIES)||(LA137_0 >= KW_INDEX && LA137_0 <= KW_INDEXES)||(LA137_0 >= KW_INPATH && LA137_0 <= KW_INPUTFORMAT)||(LA137_0 >= KW_ISOLATION && LA137_0 <= KW_JAR)||(LA137_0 >= KW_KEY && LA137_0 <= KW_LAST)||LA137_0==KW_LEVEL||(LA137_0 >= KW_LIMIT && LA137_0 <= KW_LOAD)||(LA137_0 >= KW_LOCATION && LA137_0 <= KW_LONG)||LA137_0==KW_MANAGEMENT||(LA137_0 >= KW_MAPJOIN && LA137_0 <= KW_MATERIALIZED)||LA137_0==KW_METADATA||(LA137_0 >= KW_MINUTE && LA137_0 <= KW_MONTH)||(LA137_0 >= KW_MOVE && LA137_0 <= KW_MSCK)||(LA137_0 >= KW_NORELY && LA137_0 <= KW_NOSCAN)||LA137_0==KW_NOVALIDATE||LA137_0==KW_NULLS||LA137_0==KW_OFFSET||(LA137_0 >= KW_OPERATOR && LA137_0 <= KW_OPTION)||LA137_0==KW_ORDER||(LA137_0 >= KW_OUTPUTDRIVER && LA137_0 <= KW_OUTPUTFORMAT)||(LA137_0 >= KW_OVERWRITE && LA137_0 <= KW_OWNER)||(LA137_0 >= KW_PARTITIONED && LA137_0 <= KW_PATH)||(LA137_0 >= KW_PLAN && LA137_0 <= KW_POOL)||LA137_0==KW_PRINCIPALS||(LA137_0 >= KW_PURGE && LA137_0 <= KW_QUERY_PARALLELISM)||LA137_0==KW_READ||(LA137_0 >= KW_REBUILD && LA137_0 <= KW_RECORDWRITER)||(LA137_0 >= KW_RELOAD && LA137_0 <= KW_RESTRICT)||LA137_0==KW_REWRITE||(LA137_0 >= KW_ROLE && LA137_0 <= KW_ROLES)||(LA137_0 >= KW_SCHEDULING_POLICY && LA137_0 <= KW_SECOND)||(LA137_0 >= KW_SEMI && LA137_0 <= KW_SERVER)||(LA137_0 >= KW_SETS && LA137_0 <= KW_SKEWED)||(LA137_0 >= KW_SNAPSHOT && LA137_0 <= KW_SSL)||(LA137_0 >= KW_STATISTICS && LA137_0 <= KW_SUMMARY)||LA137_0==KW_TABLES||(LA137_0 >= KW_TBLPROPERTIES && LA137_0 <= KW_TERMINATED)||LA137_0==KW_TINYINT||(LA137_0 >= KW_TOUCH && LA137_0 <= KW_TRANSACTIONS)||LA137_0==KW_UNARCHIVE||LA137_0==KW_UNDO||LA137_0==KW_UNIONTYPE||(LA137_0 >= KW_UNKNOWN && LA137_0 <= KW_UNSIGNED)||(LA137_0 >= KW_URI && LA137_0 <= KW_USE)||(LA137_0 >= KW_UTC && LA137_0 <= KW_VALIDATE)||LA137_0==KW_VALUE_TYPE||(LA137_0 >= KW_VECTORIZATION && LA137_0 <= KW_WEEK)||LA137_0==KW_WHILE||(LA137_0 >= KW_WORK && LA137_0 <= KW_ZONE)||LA137_0==StringLiteral||LA137_0==KW_BATCH||LA137_0==KW_DAYOFWEEK||LA137_0==KW_HOLD_DDLTIME||LA137_0==KW_IGNORE||LA137_0==KW_NO_DROP||LA137_0==KW_OFFLINE||LA137_0==KW_PROTECTION||LA137_0==KW_READONLY||LA137_0==KW_TIMESTAMPTZ) ) {
						alt137=2;
					}
					switch (alt137) {
						case 1 :
							// HiveParser.g:1601:79: KW_LIKE showStmtIdentifier
							{
							KW_LIKE456=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement7938); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_LIKE.add(KW_LIKE456);

							pushFollow(FOLLOW_showStmtIdentifier_in_showStatement7940);
							showStmtIdentifier457=showStmtIdentifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier457.getTree());
							}
							break;
						case 2 :
							// HiveParser.g:1601:106: showStmtIdentifier
							{
							pushFollow(FOLLOW_showStmtIdentifier_in_showStatement7942);
							showStmtIdentifier458=showStmtIdentifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier458.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: showStmtIdentifier, db_name
					// token labels: 
					// rule labels: db_name, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1601:128: -> ^( TOK_SHOWMATERIALIZEDVIEWS ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
					{
						// HiveParser.g:1601:131: ^( TOK_SHOWMATERIALIZEDVIEWS ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SHOWMATERIALIZEDVIEWS, "TOK_SHOWMATERIALIZEDVIEWS"), root_1);
						// HiveParser.g:1601:159: ( TOK_FROM $db_name)?
						if ( stream_db_name.hasNext() ) {
							adaptor.addChild(root_1, (ASTNode)adaptor.create(TOK_FROM, "TOK_FROM"));
							adaptor.addChild(root_1, stream_db_name.nextTree());
						}
						stream_db_name.reset();

						// HiveParser.g:1601:180: ( showStmtIdentifier )?
						if ( stream_showStmtIdentifier.hasNext() ) {
							adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());
						}
						stream_showStmtIdentifier.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// HiveParser.g:1602:7: KW_SHOW KW_COLUMNS ( KW_FROM | KW_IN ) tableName ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
					{
					KW_SHOW459=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7970); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW459);

					KW_COLUMNS460=(Token)match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_showStatement7972); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COLUMNS.add(KW_COLUMNS460);

					// HiveParser.g:1602:26: ( KW_FROM | KW_IN )
					int alt138=2;
					int LA138_0 = input.LA(1);
					if ( (LA138_0==KW_FROM) ) {
						alt138=1;
					}
					else if ( (LA138_0==KW_IN) ) {
						alt138=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 138, 0, input);
						throw nvae;
					}

					switch (alt138) {
						case 1 :
							// HiveParser.g:1602:27: KW_FROM
							{
							KW_FROM461=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement7975); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM461);

							}
							break;
						case 2 :
							// HiveParser.g:1602:35: KW_IN
							{
							KW_IN462=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement7977); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN462);

							}
							break;

					}

					pushFollow(FOLLOW_tableName_in_showStatement7980);
					tableName463=tableName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableName.add(tableName463.getTree());
					// HiveParser.g:1602:52: ( ( KW_FROM | KW_IN ) db_name= identifier )?
					int alt140=2;
					int LA140_0 = input.LA(1);
					if ( (LA140_0==KW_FROM||LA140_0==KW_IN) ) {
						alt140=1;
					}
					switch (alt140) {
						case 1 :
							// HiveParser.g:1602:53: ( KW_FROM | KW_IN ) db_name= identifier
							{
							// HiveParser.g:1602:53: ( KW_FROM | KW_IN )
							int alt139=2;
							int LA139_0 = input.LA(1);
							if ( (LA139_0==KW_FROM) ) {
								alt139=1;
							}
							else if ( (LA139_0==KW_IN) ) {
								alt139=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 139, 0, input);
								throw nvae;
							}

							switch (alt139) {
								case 1 :
									// HiveParser.g:1602:54: KW_FROM
									{
									KW_FROM464=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement7984); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM464);

									}
									break;
								case 2 :
									// HiveParser.g:1602:62: KW_IN
									{
									KW_IN465=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement7986); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN465);

									}
									break;

							}

							pushFollow(FOLLOW_identifier_in_showStatement7991);
							db_name=identifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_identifier.add(db_name.getTree());
							}
							break;

					}

					// HiveParser.g:1602:90: ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
					int alt141=3;
					int LA141_0 = input.LA(1);
					if ( (LA141_0==KW_LIKE) ) {
						alt141=1;
					}
					else if ( (LA141_0==Identifier||(LA141_0 >= KW_ABORT && LA141_0 <= KW_AFTER)||LA141_0==KW_ALLOC_FRACTION||LA141_0==KW_ANALYZE||LA141_0==KW_ARCHIVE||(LA141_0 >= KW_ASC && LA141_0 <= KW_AST)||(LA141_0 >= KW_AUTOCOMMIT && LA141_0 <= KW_BEFORE)||(LA141_0 >= KW_BUCKET && LA141_0 <= KW_BUCKETS)||(LA141_0 >= KW_CACHE && LA141_0 <= KW_CASCADE)||LA141_0==KW_CHANGE||(LA141_0 >= KW_CHECK && LA141_0 <= KW_COLLECTION)||(LA141_0 >= KW_COLUMNS && LA141_0 <= KW_COMMENT)||(LA141_0 >= KW_COMPACT && LA141_0 <= KW_CONCATENATE)||LA141_0==KW_CONTINUE||LA141_0==KW_DATA||(LA141_0 >= KW_DATABASES && LA141_0 <= KW_DEBUG)||(LA141_0 >= KW_DEFAULT && LA141_0 <= KW_DEFINED)||(LA141_0 >= KW_DELIMITED && LA141_0 <= KW_DESC)||(LA141_0 >= KW_DETAIL && LA141_0 <= KW_DISABLE)||(LA141_0 >= KW_DISTRIBUTE && LA141_0 <= KW_DO)||LA141_0==KW_DOW||(LA141_0 >= KW_DUMP && LA141_0 <= KW_ELEM_TYPE)||LA141_0==KW_ENABLE||(LA141_0 >= KW_ENFORCED && LA141_0 <= KW_ESCAPED)||LA141_0==KW_EXCLUSIVE||(LA141_0 >= KW_EXPLAIN && LA141_0 <= KW_EXPRESSION)||(LA141_0 >= KW_FIELDS && LA141_0 <= KW_FIRST)||(LA141_0 >= KW_FORMAT && LA141_0 <= KW_FORMATTED)||LA141_0==KW_FUNCTIONS||LA141_0==KW_GROUP||(LA141_0 >= KW_HOUR && LA141_0 <= KW_IDXPROPERTIES)||(LA141_0 >= KW_INDEX && LA141_0 <= KW_INDEXES)||(LA141_0 >= KW_INPATH && LA141_0 <= KW_INPUTFORMAT)||(LA141_0 >= KW_ISOLATION && LA141_0 <= KW_JAR)||(LA141_0 >= KW_KEY && LA141_0 <= KW_LAST)||LA141_0==KW_LEVEL||(LA141_0 >= KW_LIMIT && LA141_0 <= KW_LOAD)||(LA141_0 >= KW_LOCATION && LA141_0 <= KW_LONG)||LA141_0==KW_MANAGEMENT||(LA141_0 >= KW_MAPJOIN && LA141_0 <= KW_MATERIALIZED)||LA141_0==KW_METADATA||(LA141_0 >= KW_MINUTE && LA141_0 <= KW_MONTH)||(LA141_0 >= KW_MOVE && LA141_0 <= KW_MSCK)||(LA141_0 >= KW_NORELY && LA141_0 <= KW_NOSCAN)||LA141_0==KW_NOVALIDATE||LA141_0==KW_NULLS||LA141_0==KW_OFFSET||(LA141_0 >= KW_OPERATOR && LA141_0 <= KW_OPTION)||LA141_0==KW_ORDER||(LA141_0 >= KW_OUTPUTDRIVER && LA141_0 <= KW_OUTPUTFORMAT)||(LA141_0 >= KW_OVERWRITE && LA141_0 <= KW_OWNER)||(LA141_0 >= KW_PARTITIONED && LA141_0 <= KW_PATH)||(LA141_0 >= KW_PLAN && LA141_0 <= KW_POOL)||LA141_0==KW_PRINCIPALS||(LA141_0 >= KW_PURGE && LA141_0 <= KW_QUERY_PARALLELISM)||LA141_0==KW_READ||(LA141_0 >= KW_REBUILD && LA141_0 <= KW_RECORDWRITER)||(LA141_0 >= KW_RELOAD && LA141_0 <= KW_RESTRICT)||LA141_0==KW_REWRITE||(LA141_0 >= KW_ROLE && LA141_0 <= KW_ROLES)||(LA141_0 >= KW_SCHEDULING_POLICY && LA141_0 <= KW_SECOND)||(LA141_0 >= KW_SEMI && LA141_0 <= KW_SERVER)||(LA141_0 >= KW_SETS && LA141_0 <= KW_SKEWED)||(LA141_0 >= KW_SNAPSHOT && LA141_0 <= KW_SSL)||(LA141_0 >= KW_STATISTICS && LA141_0 <= KW_SUMMARY)||LA141_0==KW_TABLES||(LA141_0 >= KW_TBLPROPERTIES && LA141_0 <= KW_TERMINATED)||LA141_0==KW_TINYINT||(LA141_0 >= KW_TOUCH && LA141_0 <= KW_TRANSACTIONS)||LA141_0==KW_UNARCHIVE||LA141_0==KW_UNDO||LA141_0==KW_UNIONTYPE||(LA141_0 >= KW_UNKNOWN && LA141_0 <= KW_UNSIGNED)||(LA141_0 >= KW_URI && LA141_0 <= KW_USE)||(LA141_0 >= KW_UTC && LA141_0 <= KW_VALIDATE)||LA141_0==KW_VALUE_TYPE||(LA141_0 >= KW_VECTORIZATION && LA141_0 <= KW_WEEK)||LA141_0==KW_WHILE||(LA141_0 >= KW_WORK && LA141_0 <= KW_ZONE)||LA141_0==StringLiteral||LA141_0==KW_BATCH||LA141_0==KW_DAYOFWEEK||LA141_0==KW_HOLD_DDLTIME||LA141_0==KW_IGNORE||LA141_0==KW_NO_DROP||LA141_0==KW_OFFLINE||LA141_0==KW_PROTECTION||LA141_0==KW_READONLY||LA141_0==KW_TIMESTAMPTZ) ) {
						alt141=2;
					}
					switch (alt141) {
						case 1 :
							// HiveParser.g:1602:91: KW_LIKE showStmtIdentifier
							{
							KW_LIKE466=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement7996); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_LIKE.add(KW_LIKE466);

							pushFollow(FOLLOW_showStmtIdentifier_in_showStatement7998);
							showStmtIdentifier467=showStmtIdentifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier467.getTree());
							}
							break;
						case 2 :
							// HiveParser.g:1602:118: showStmtIdentifier
							{
							pushFollow(FOLLOW_showStmtIdentifier_in_showStatement8000);
							showStmtIdentifier468=showStmtIdentifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier468.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: showStmtIdentifier, tableName, db_name
					// token labels: 
					// rule labels: db_name, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1603:5: -> ^( TOK_SHOWCOLUMNS tableName ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
					{
						// HiveParser.g:1603:8: ^( TOK_SHOWCOLUMNS tableName ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SHOWCOLUMNS, "TOK_SHOWCOLUMNS"), root_1);
						adaptor.addChild(root_1, stream_tableName.nextTree());
						// HiveParser.g:1603:36: ( TOK_FROM $db_name)?
						if ( stream_db_name.hasNext() ) {
							adaptor.addChild(root_1, (ASTNode)adaptor.create(TOK_FROM, "TOK_FROM"));
							adaptor.addChild(root_1, stream_db_name.nextTree());
						}
						stream_db_name.reset();

						// HiveParser.g:1603:57: ( showStmtIdentifier )?
						if ( stream_showStmtIdentifier.hasNext() ) {
							adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());
						}
						stream_showStmtIdentifier.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 6 :
					// HiveParser.g:1604:7: KW_SHOW KW_FUNCTIONS ( KW_LIKE showFunctionIdentifier | showFunctionIdentifier )?
					{
					KW_SHOW469=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement8033); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW469);

					KW_FUNCTIONS470=(Token)match(input,KW_FUNCTIONS,FOLLOW_KW_FUNCTIONS_in_showStatement8035); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_FUNCTIONS.add(KW_FUNCTIONS470);

					// HiveParser.g:1604:28: ( KW_LIKE showFunctionIdentifier | showFunctionIdentifier )?
					int alt142=3;
					int LA142_0 = input.LA(1);
					if ( (LA142_0==KW_LIKE) ) {
						alt142=1;
					}
					else if ( (LA142_0==Identifier||(LA142_0 >= KW_ABORT && LA142_0 <= KW_AFTER)||LA142_0==KW_ALLOC_FRACTION||LA142_0==KW_ANALYZE||LA142_0==KW_ARCHIVE||(LA142_0 >= KW_ASC && LA142_0 <= KW_AST)||(LA142_0 >= KW_AUTOCOMMIT && LA142_0 <= KW_BEFORE)||(LA142_0 >= KW_BUCKET && LA142_0 <= KW_BUCKETS)||(LA142_0 >= KW_CACHE && LA142_0 <= KW_CASCADE)||LA142_0==KW_CHANGE||(LA142_0 >= KW_CHECK && LA142_0 <= KW_COLLECTION)||(LA142_0 >= KW_COLUMNS && LA142_0 <= KW_COMMENT)||(LA142_0 >= KW_COMPACT && LA142_0 <= KW_CONCATENATE)||LA142_0==KW_CONTINUE||LA142_0==KW_DATA||(LA142_0 >= KW_DATABASES && LA142_0 <= KW_DEBUG)||(LA142_0 >= KW_DEFAULT && LA142_0 <= KW_DEFINED)||(LA142_0 >= KW_DELIMITED && LA142_0 <= KW_DESC)||(LA142_0 >= KW_DETAIL && LA142_0 <= KW_DISABLE)||(LA142_0 >= KW_DISTRIBUTE && LA142_0 <= KW_DO)||LA142_0==KW_DOW||(LA142_0 >= KW_DUMP && LA142_0 <= KW_ELEM_TYPE)||LA142_0==KW_ENABLE||(LA142_0 >= KW_ENFORCED && LA142_0 <= KW_ESCAPED)||LA142_0==KW_EXCLUSIVE||(LA142_0 >= KW_EXPLAIN && LA142_0 <= KW_EXPRESSION)||(LA142_0 >= KW_FIELDS && LA142_0 <= KW_FIRST)||(LA142_0 >= KW_FORMAT && LA142_0 <= KW_FORMATTED)||LA142_0==KW_FUNCTIONS||LA142_0==KW_GROUP||(LA142_0 >= KW_HOUR && LA142_0 <= KW_IDXPROPERTIES)||(LA142_0 >= KW_INDEX && LA142_0 <= KW_INDEXES)||(LA142_0 >= KW_INPATH && LA142_0 <= KW_INPUTFORMAT)||(LA142_0 >= KW_ISOLATION && LA142_0 <= KW_JAR)||(LA142_0 >= KW_KEY && LA142_0 <= KW_LAST)||LA142_0==KW_LEVEL||(LA142_0 >= KW_LIMIT && LA142_0 <= KW_LOAD)||(LA142_0 >= KW_LOCATION && LA142_0 <= KW_LONG)||LA142_0==KW_MANAGEMENT||(LA142_0 >= KW_MAPJOIN && LA142_0 <= KW_MATERIALIZED)||LA142_0==KW_METADATA||(LA142_0 >= KW_MINUTE && LA142_0 <= KW_MONTH)||(LA142_0 >= KW_MOVE && LA142_0 <= KW_MSCK)||(LA142_0 >= KW_NORELY && LA142_0 <= KW_NOSCAN)||LA142_0==KW_NOVALIDATE||LA142_0==KW_NULLS||LA142_0==KW_OFFSET||(LA142_0 >= KW_OPERATOR && LA142_0 <= KW_OPTION)||LA142_0==KW_ORDER||(LA142_0 >= KW_OUTPUTDRIVER && LA142_0 <= KW_OUTPUTFORMAT)||(LA142_0 >= KW_OVERWRITE && LA142_0 <= KW_OWNER)||(LA142_0 >= KW_PARTITIONED && LA142_0 <= KW_PATH)||(LA142_0 >= KW_PLAN && LA142_0 <= KW_POOL)||LA142_0==KW_PRINCIPALS||(LA142_0 >= KW_PURGE && LA142_0 <= KW_QUERY_PARALLELISM)||LA142_0==KW_READ||(LA142_0 >= KW_REBUILD && LA142_0 <= KW_RECORDWRITER)||(LA142_0 >= KW_RELOAD && LA142_0 <= KW_RESTRICT)||LA142_0==KW_REWRITE||(LA142_0 >= KW_ROLE && LA142_0 <= KW_ROLES)||(LA142_0 >= KW_SCHEDULING_POLICY && LA142_0 <= KW_SECOND)||(LA142_0 >= KW_SEMI && LA142_0 <= KW_SERVER)||(LA142_0 >= KW_SETS && LA142_0 <= KW_SKEWED)||(LA142_0 >= KW_SNAPSHOT && LA142_0 <= KW_SSL)||(LA142_0 >= KW_STATISTICS && LA142_0 <= KW_SUMMARY)||LA142_0==KW_TABLES||(LA142_0 >= KW_TBLPROPERTIES && LA142_0 <= KW_TERMINATED)||LA142_0==KW_TINYINT||(LA142_0 >= KW_TOUCH && LA142_0 <= KW_TRANSACTIONS)||LA142_0==KW_UNARCHIVE||LA142_0==KW_UNDO||LA142_0==KW_UNIONTYPE||(LA142_0 >= KW_UNKNOWN && LA142_0 <= KW_UNSIGNED)||(LA142_0 >= KW_URI && LA142_0 <= KW_USE)||(LA142_0 >= KW_UTC && LA142_0 <= KW_VALIDATE)||LA142_0==KW_VALUE_TYPE||(LA142_0 >= KW_VECTORIZATION && LA142_0 <= KW_WEEK)||LA142_0==KW_WHILE||(LA142_0 >= KW_WORK && LA142_0 <= KW_ZONE)||LA142_0==StringLiteral||LA142_0==KW_BATCH||LA142_0==KW_DAYOFWEEK||LA142_0==KW_HOLD_DDLTIME||LA142_0==KW_IGNORE||LA142_0==KW_NO_DROP||LA142_0==KW_OFFLINE||LA142_0==KW_PROTECTION||LA142_0==KW_READONLY||LA142_0==KW_TIMESTAMPTZ) ) {
						alt142=2;
					}
					switch (alt142) {
						case 1 :
							// HiveParser.g:1604:29: KW_LIKE showFunctionIdentifier
							{
							KW_LIKE471=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement8038); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_LIKE.add(KW_LIKE471);

							pushFollow(FOLLOW_showFunctionIdentifier_in_showStatement8040);
							showFunctionIdentifier472=showFunctionIdentifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_showFunctionIdentifier.add(showFunctionIdentifier472.getTree());
							}
							break;
						case 2 :
							// HiveParser.g:1604:60: showFunctionIdentifier
							{
							pushFollow(FOLLOW_showFunctionIdentifier_in_showStatement8042);
							showFunctionIdentifier473=showFunctionIdentifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_showFunctionIdentifier.add(showFunctionIdentifier473.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: KW_LIKE, showFunctionIdentifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1604:86: -> ^( TOK_SHOWFUNCTIONS ( KW_LIKE )? ( showFunctionIdentifier )? )
					{
						// HiveParser.g:1604:89: ^( TOK_SHOWFUNCTIONS ( KW_LIKE )? ( showFunctionIdentifier )? )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SHOWFUNCTIONS, "TOK_SHOWFUNCTIONS"), root_1);
						// HiveParser.g:1604:109: ( KW_LIKE )?
						if ( stream_KW_LIKE.hasNext() ) {
							adaptor.addChild(root_1, stream_KW_LIKE.nextNode());
						}
						stream_KW_LIKE.reset();

						// HiveParser.g:1604:118: ( showFunctionIdentifier )?
						if ( stream_showFunctionIdentifier.hasNext() ) {
							adaptor.addChild(root_1, stream_showFunctionIdentifier.nextTree());
						}
						stream_showFunctionIdentifier.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 7 :
					// HiveParser.g:1605:7: KW_SHOW KW_PARTITIONS tabName= tableName ( partitionSpec )?
					{
					KW_SHOW474=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement8065); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW474);

					KW_PARTITIONS475=(Token)match(input,KW_PARTITIONS,FOLLOW_KW_PARTITIONS_in_showStatement8067); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_PARTITIONS.add(KW_PARTITIONS475);

					pushFollow(FOLLOW_tableName_in_showStatement8071);
					tabName=tableName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableName.add(tabName.getTree());
					// HiveParser.g:1605:47: ( partitionSpec )?
					int alt143=2;
					int LA143_0 = input.LA(1);
					if ( (LA143_0==KW_PARTITION) ) {
						alt143=1;
					}
					switch (alt143) {
						case 1 :
							// HiveParser.g:1605:47: partitionSpec
							{
							pushFollow(FOLLOW_partitionSpec_in_showStatement8073);
							partitionSpec476=partitionSpec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec476.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: tabName, partitionSpec
					// token labels: 
					// rule labels: tabName, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_tabName=new RewriteRuleSubtreeStream(adaptor,"rule tabName",tabName!=null?tabName.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1605:62: -> ^( TOK_SHOWPARTITIONS $tabName ( partitionSpec )? )
					{
						// HiveParser.g:1605:65: ^( TOK_SHOWPARTITIONS $tabName ( partitionSpec )? )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SHOWPARTITIONS, "TOK_SHOWPARTITIONS"), root_1);
						adaptor.addChild(root_1, stream_tabName.nextTree());
						// HiveParser.g:1605:95: ( partitionSpec )?
						if ( stream_partitionSpec.hasNext() ) {
							adaptor.addChild(root_1, stream_partitionSpec.nextTree());
						}
						stream_partitionSpec.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 8 :
					// HiveParser.g:1606:7: KW_SHOW KW_CREATE ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) db_name= identifier -> ^( TOK_SHOW_CREATEDATABASE $db_name) | KW_TABLE tabName= tableName -> ^( TOK_SHOW_CREATETABLE $tabName) )
					{
					KW_SHOW477=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement8094); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW477);

					KW_CREATE478=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_showStatement8096); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE478);

					// HiveParser.g:1606:25: ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) db_name= identifier -> ^( TOK_SHOW_CREATEDATABASE $db_name) | KW_TABLE tabName= tableName -> ^( TOK_SHOW_CREATETABLE $tabName) )
					int alt145=2;
					int LA145_0 = input.LA(1);
					if ( (LA145_0==KW_DATABASE) && (synpred12_HiveParser())) {
						alt145=1;
					}
					else if ( (LA145_0==KW_SCHEMA) && (synpred12_HiveParser())) {
						alt145=1;
					}
					else if ( (LA145_0==KW_TABLE) ) {
						alt145=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 145, 0, input);
						throw nvae;
					}

					switch (alt145) {
						case 1 :
							// HiveParser.g:1607:9: ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) db_name= identifier
							{
							// HiveParser.g:1607:36: ( KW_DATABASE | KW_SCHEMA )
							int alt144=2;
							int LA144_0 = input.LA(1);
							if ( (LA144_0==KW_DATABASE) ) {
								alt144=1;
							}
							else if ( (LA144_0==KW_SCHEMA) ) {
								alt144=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 144, 0, input);
								throw nvae;
							}

							switch (alt144) {
								case 1 :
									// HiveParser.g:1607:37: KW_DATABASE
									{
									KW_DATABASE479=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_showStatement8117); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE479);

									}
									break;
								case 2 :
									// HiveParser.g:1607:49: KW_SCHEMA
									{
									KW_SCHEMA480=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_showStatement8119); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA480);

									}
									break;

							}

							pushFollow(FOLLOW_identifier_in_showStatement8124);
							db_name=identifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_identifier.add(db_name.getTree());
							// AST REWRITE
							// elements: db_name
							// token labels: 
							// rule labels: db_name, retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.getTree():null);
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

							root_0 = (ASTNode)adaptor.nil();
							// 1607:79: -> ^( TOK_SHOW_CREATEDATABASE $db_name)
							{
								// HiveParser.g:1607:82: ^( TOK_SHOW_CREATEDATABASE $db_name)
								{
								ASTNode root_1 = (ASTNode)adaptor.nil();
								root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SHOW_CREATEDATABASE, "TOK_SHOW_CREATEDATABASE"), root_1);
								adaptor.addChild(root_1, stream_db_name.nextTree());
								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;
						case 2 :
							// HiveParser.g:1609:9: KW_TABLE tabName= tableName
							{
							KW_TABLE481=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_showStatement8153); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE481);

							pushFollow(FOLLOW_tableName_in_showStatement8157);
							tabName=tableName();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableName.add(tabName.getTree());
							// AST REWRITE
							// elements: tabName
							// token labels: 
							// rule labels: tabName, retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_tabName=new RewriteRuleSubtreeStream(adaptor,"rule tabName",tabName!=null?tabName.getTree():null);
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

							root_0 = (ASTNode)adaptor.nil();
							// 1609:36: -> ^( TOK_SHOW_CREATETABLE $tabName)
							{
								// HiveParser.g:1609:39: ^( TOK_SHOW_CREATETABLE $tabName)
								{
								ASTNode root_1 = (ASTNode)adaptor.nil();
								root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SHOW_CREATETABLE, "TOK_SHOW_CREATETABLE"), root_1);
								adaptor.addChild(root_1, stream_tabName.nextTree());
								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;

					}

					}
					break;
				case 9 :
					// HiveParser.g:1611:7: KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )?
					{
					KW_SHOW482=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement8182); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW482);

					KW_TABLE483=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_showStatement8184); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE483);

					KW_EXTENDED484=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_showStatement8186); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_EXTENDED.add(KW_EXTENDED484);

					// HiveParser.g:1611:36: ( ( KW_FROM | KW_IN ) db_name= identifier )?
					int alt147=2;
					int LA147_0 = input.LA(1);
					if ( (LA147_0==KW_FROM||LA147_0==KW_IN) ) {
						alt147=1;
					}
					switch (alt147) {
						case 1 :
							// HiveParser.g:1611:37: ( KW_FROM | KW_IN ) db_name= identifier
							{
							// HiveParser.g:1611:37: ( KW_FROM | KW_IN )
							int alt146=2;
							int LA146_0 = input.LA(1);
							if ( (LA146_0==KW_FROM) ) {
								alt146=1;
							}
							else if ( (LA146_0==KW_IN) ) {
								alt146=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 146, 0, input);
								throw nvae;
							}

							switch (alt146) {
								case 1 :
									// HiveParser.g:1611:38: KW_FROM
									{
									KW_FROM485=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement8190); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM485);

									}
									break;
								case 2 :
									// HiveParser.g:1611:46: KW_IN
									{
									KW_IN486=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement8192); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN486);

									}
									break;

							}

							pushFollow(FOLLOW_identifier_in_showStatement8197);
							db_name=identifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_identifier.add(db_name.getTree());
							}
							break;

					}

					KW_LIKE487=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement8201); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_LIKE.add(KW_LIKE487);

					pushFollow(FOLLOW_showStmtIdentifier_in_showStatement8203);
					showStmtIdentifier488=showStmtIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier488.getTree());
					// HiveParser.g:1611:101: ( partitionSpec )?
					int alt148=2;
					int LA148_0 = input.LA(1);
					if ( (LA148_0==KW_PARTITION) ) {
						alt148=1;
					}
					switch (alt148) {
						case 1 :
							// HiveParser.g:1611:101: partitionSpec
							{
							pushFollow(FOLLOW_partitionSpec_in_showStatement8205);
							partitionSpec489=partitionSpec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec489.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: db_name, partitionSpec, showStmtIdentifier
					// token labels: 
					// rule labels: db_name, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1612:5: -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? )
					{
						// HiveParser.g:1612:8: ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SHOW_TABLESTATUS, "TOK_SHOW_TABLESTATUS"), root_1);
						adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());
						// HiveParser.g:1612:51: ( $db_name)?
						if ( stream_db_name.hasNext() ) {
							adaptor.addChild(root_1, stream_db_name.nextTree());
						}
						stream_db_name.reset();

						// HiveParser.g:1612:60: ( partitionSpec )?
						if ( stream_partitionSpec.hasNext() ) {
							adaptor.addChild(root_1, stream_partitionSpec.nextTree());
						}
						stream_partitionSpec.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 10 :
					// HiveParser.g:1613:7: KW_SHOW KW_TBLPROPERTIES tableName ( LPAREN prptyName= StringLiteral RPAREN )?
					{
					KW_SHOW490=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement8233); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW490);

					KW_TBLPROPERTIES491=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_showStatement8235); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES491);

					pushFollow(FOLLOW_tableName_in_showStatement8237);
					tableName492=tableName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableName.add(tableName492.getTree());
					// HiveParser.g:1613:42: ( LPAREN prptyName= StringLiteral RPAREN )?
					int alt149=2;
					int LA149_0 = input.LA(1);
					if ( (LA149_0==LPAREN) ) {
						alt149=1;
					}
					switch (alt149) {
						case 1 :
							// HiveParser.g:1613:43: LPAREN prptyName= StringLiteral RPAREN
							{
							LPAREN493=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_showStatement8240); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN493);

							prptyName=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_showStatement8244); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_StringLiteral.add(prptyName);

							RPAREN494=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_showStatement8246); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN494);

							}
							break;

					}

					// AST REWRITE
					// elements: tableName, prptyName
					// token labels: prptyName
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_prptyName=new RewriteRuleTokenStream(adaptor,"token prptyName",prptyName);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1613:83: -> ^( TOK_SHOW_TBLPROPERTIES tableName ( $prptyName)? )
					{
						// HiveParser.g:1613:86: ^( TOK_SHOW_TBLPROPERTIES tableName ( $prptyName)? )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SHOW_TBLPROPERTIES, "TOK_SHOW_TBLPROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_tableName.nextTree());
						// HiveParser.g:1613:122: ( $prptyName)?
						if ( stream_prptyName.hasNext() ) {
							adaptor.addChild(root_1, stream_prptyName.nextNode());
						}
						stream_prptyName.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 11 :
					// HiveParser.g:1614:7: KW_SHOW KW_LOCKS ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= identifier ) (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? ) | (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) )
					{
					KW_SHOW495=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement8268); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW495);

					KW_LOCKS496=(Token)match(input,KW_LOCKS,FOLLOW_KW_LOCKS_in_showStatement8270); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_LOCKS.add(KW_LOCKS496);

					// HiveParser.g:1615:7: ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= identifier ) (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? ) | (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) )
					int alt154=2;
					int LA154_0 = input.LA(1);
					if ( (LA154_0==KW_DATABASE) && (synpred13_HiveParser())) {
						alt154=1;
					}
					else if ( (LA154_0==KW_SCHEMA) ) {
						switch ( input.LA(2) ) {
						case Identifier:
							{
							int LA154_7 = input.LA(3);
							if ( (synpred13_HiveParser()) ) {
								alt154=1;
							}
							else if ( (true) ) {
								alt154=2;
							}

							}
							break;
						case KW_ABORT:
						case KW_ACTIVATE:
						case KW_ACTIVE:
						case KW_ADD:
						case KW_ADMIN:
						case KW_AFTER:
						case KW_ALLOC_FRACTION:
						case KW_ANALYZE:
						case KW_ARCHIVE:
						case KW_ASC:
						case KW_AST:
						case KW_AUTOCOMMIT:
						case KW_BEFORE:
						case KW_BUCKET:
						case KW_BUCKETS:
						case KW_CACHE:
						case KW_CASCADE:
						case KW_CHANGE:
						case KW_CHECK:
						case KW_CLUSTER:
						case KW_CLUSTERED:
						case KW_CLUSTERSTATUS:
						case KW_COLLECTION:
						case KW_COLUMNS:
						case KW_COMMENT:
						case KW_COMPACT:
						case KW_COMPACTIONS:
						case KW_COMPUTE:
						case KW_CONCATENATE:
						case KW_CONTINUE:
						case KW_DATA:
						case KW_DATABASES:
						case KW_DATE:
						case KW_DATETIME:
						case KW_DAY:
						case KW_DBPROPERTIES:
						case KW_DEBUG:
						case KW_DEFAULT:
						case KW_DEFERRED:
						case KW_DEFINED:
						case KW_DELIMITED:
						case KW_DEPENDENCY:
						case KW_DESC:
						case KW_DETAIL:
						case KW_DIRECTORIES:
						case KW_DIRECTORY:
						case KW_DISABLE:
						case KW_DISTRIBUTE:
						case KW_DO:
						case KW_DOW:
						case KW_DUMP:
						case KW_ELEM_TYPE:
						case KW_ENABLE:
						case KW_ENFORCED:
						case KW_ESCAPED:
						case KW_EXCLUSIVE:
						case KW_EXPLAIN:
						case KW_EXPORT:
						case KW_EXPRESSION:
						case KW_FIELDS:
						case KW_FILE:
						case KW_FILEFORMAT:
						case KW_FIRST:
						case KW_FORMAT:
						case KW_FORMATTED:
						case KW_FUNCTIONS:
						case KW_GROUP:
						case KW_HOUR:
						case KW_IDXPROPERTIES:
						case KW_INDEX:
						case KW_INDEXES:
						case KW_INPATH:
						case KW_INPUTDRIVER:
						case KW_INPUTFORMAT:
						case KW_ISOLATION:
						case KW_ITEMS:
						case KW_JAR:
						case KW_KEY:
						case KW_KEYS:
						case KW_KEY_TYPE:
						case KW_KILL:
						case KW_LAST:
						case KW_LEVEL:
						case KW_LIMIT:
						case KW_LINES:
						case KW_LOAD:
						case KW_LOCATION:
						case KW_LOCK:
						case KW_LOCKS:
						case KW_LOGICAL:
						case KW_LONG:
						case KW_MANAGEMENT:
						case KW_MAPJOIN:
						case KW_MAPPING:
						case KW_MATCHED:
						case KW_MATERIALIZED:
						case KW_METADATA:
						case KW_MINUTE:
						case KW_MONTH:
						case KW_MOVE:
						case KW_MSCK:
						case KW_NORELY:
						case KW_NOSCAN:
						case KW_NOVALIDATE:
						case KW_NULLS:
						case KW_OFFSET:
						case KW_OPERATOR:
						case KW_OPTION:
						case KW_ORDER:
						case KW_OUTPUTDRIVER:
						case KW_OUTPUTFORMAT:
						case KW_OVERWRITE:
						case KW_OWNER:
						case KW_PARTITIONED:
						case KW_PARTITIONS:
						case KW_PATH:
						case KW_PLAN:
						case KW_PLANS:
						case KW_PLUS:
						case KW_POOL:
						case KW_PRINCIPALS:
						case KW_PURGE:
						case KW_QUARTER:
						case KW_QUERY:
						case KW_QUERY_PARALLELISM:
						case KW_READ:
						case KW_REBUILD:
						case KW_RECORDREADER:
						case KW_RECORDWRITER:
						case KW_RELOAD:
						case KW_RELY:
						case KW_RENAME:
						case KW_REOPTIMIZATION:
						case KW_REPAIR:
						case KW_REPL:
						case KW_REPLACE:
						case KW_REPLICATION:
						case KW_RESOURCE:
						case KW_RESTRICT:
						case KW_REWRITE:
						case KW_ROLE:
						case KW_ROLES:
						case KW_SCHEDULING_POLICY:
						case KW_SCHEMA:
						case KW_SCHEMAS:
						case KW_SECOND:
						case KW_SEMI:
						case KW_SERDE:
						case KW_SERDEPROPERTIES:
						case KW_SERVER:
						case KW_SETS:
						case KW_SHARED:
						case KW_SHOW:
						case KW_SHOW_DATABASE:
						case KW_SKEWED:
						case KW_SNAPSHOT:
						case KW_SORT:
						case KW_SORTED:
						case KW_SSL:
						case KW_STATISTICS:
						case KW_STATUS:
						case KW_STORED:
						case KW_STREAMTABLE:
						case KW_STRING:
						case KW_STRUCT:
						case KW_SUMMARY:
						case KW_TABLES:
						case KW_TBLPROPERTIES:
						case KW_TEMPORARY:
						case KW_TERMINATED:
						case KW_TINYINT:
						case KW_TOUCH:
						case KW_TRANSACTION:
						case KW_TRANSACTIONAL:
						case KW_TRANSACTIONS:
						case KW_UNARCHIVE:
						case KW_UNDO:
						case KW_UNIONTYPE:
						case KW_UNKNOWN:
						case KW_UNLOCK:
						case KW_UNMANAGED:
						case KW_UNSET:
						case KW_UNSIGNED:
						case KW_URI:
						case KW_USE:
						case KW_UTC:
						case KW_UTCTIMESTAMP:
						case KW_VALIDATE:
						case KW_VALUE_TYPE:
						case KW_VECTORIZATION:
						case KW_VIEW:
						case KW_VIEWS:
						case KW_WAIT:
						case KW_WEEK:
						case KW_WHILE:
						case KW_WORK:
						case KW_WORKLOAD:
						case KW_WRITE:
						case KW_YEAR:
						case KW_ZONE:
						case KW_BATCH:
						case KW_DAYOFWEEK:
						case KW_HOLD_DDLTIME:
						case KW_IGNORE:
						case KW_NO_DROP:
						case KW_OFFLINE:
						case KW_PROTECTION:
						case KW_READONLY:
						case KW_TIMESTAMPTZ:
							{
							int LA154_8 = input.LA(3);
							if ( (synpred13_HiveParser()) ) {
								alt154=1;
							}
							else if ( (true) ) {
								alt154=2;
							}

							}
							break;
						case EOF:
						case DOT:
						case KW_EXTENDED:
						case KW_PARTITION:
							{
							alt154=2;
							}
							break;
						default:
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 154, 2, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}
					}
					else if ( (LA154_0==EOF||LA154_0==Identifier||(LA154_0 >= KW_ABORT && LA154_0 <= KW_AFTER)||LA154_0==KW_ALLOC_FRACTION||LA154_0==KW_ANALYZE||LA154_0==KW_ARCHIVE||(LA154_0 >= KW_ASC && LA154_0 <= KW_AST)||(LA154_0 >= KW_AUTOCOMMIT && LA154_0 <= KW_BEFORE)||(LA154_0 >= KW_BUCKET && LA154_0 <= KW_BUCKETS)||(LA154_0 >= KW_CACHE && LA154_0 <= KW_CASCADE)||LA154_0==KW_CHANGE||(LA154_0 >= KW_CHECK && LA154_0 <= KW_COLLECTION)||(LA154_0 >= KW_COLUMNS && LA154_0 <= KW_COMMENT)||(LA154_0 >= KW_COMPACT && LA154_0 <= KW_CONCATENATE)||LA154_0==KW_CONTINUE||LA154_0==KW_DATA||(LA154_0 >= KW_DATABASES && LA154_0 <= KW_DEBUG)||(LA154_0 >= KW_DEFAULT && LA154_0 <= KW_DEFINED)||(LA154_0 >= KW_DELIMITED && LA154_0 <= KW_DESC)||(LA154_0 >= KW_DETAIL && LA154_0 <= KW_DISABLE)||(LA154_0 >= KW_DISTRIBUTE && LA154_0 <= KW_DO)||LA154_0==KW_DOW||(LA154_0 >= KW_DUMP && LA154_0 <= KW_ELEM_TYPE)||LA154_0==KW_ENABLE||(LA154_0 >= KW_ENFORCED && LA154_0 <= KW_ESCAPED)||LA154_0==KW_EXCLUSIVE||(LA154_0 >= KW_EXPLAIN && LA154_0 <= KW_EXTENDED)||(LA154_0 >= KW_FIELDS && LA154_0 <= KW_FIRST)||(LA154_0 >= KW_FORMAT && LA154_0 <= KW_FORMATTED)||LA154_0==KW_FUNCTIONS||LA154_0==KW_GROUP||(LA154_0 >= KW_HOUR && LA154_0 <= KW_IDXPROPERTIES)||(LA154_0 >= KW_INDEX && LA154_0 <= KW_INDEXES)||(LA154_0 >= KW_INPATH && LA154_0 <= KW_INPUTFORMAT)||(LA154_0 >= KW_ISOLATION && LA154_0 <= KW_JAR)||(LA154_0 >= KW_KEY && LA154_0 <= KW_LAST)||LA154_0==KW_LEVEL||(LA154_0 >= KW_LIMIT && LA154_0 <= KW_LOAD)||(LA154_0 >= KW_LOCATION && LA154_0 <= KW_LONG)||LA154_0==KW_MANAGEMENT||(LA154_0 >= KW_MAPJOIN && LA154_0 <= KW_MATERIALIZED)||LA154_0==KW_METADATA||(LA154_0 >= KW_MINUTE && LA154_0 <= KW_MONTH)||(LA154_0 >= KW_MOVE && LA154_0 <= KW_MSCK)||(LA154_0 >= KW_NORELY && LA154_0 <= KW_NOSCAN)||LA154_0==KW_NOVALIDATE||LA154_0==KW_NULLS||LA154_0==KW_OFFSET||(LA154_0 >= KW_OPERATOR && LA154_0 <= KW_OPTION)||LA154_0==KW_ORDER||(LA154_0 >= KW_OUTPUTDRIVER && LA154_0 <= KW_OUTPUTFORMAT)||(LA154_0 >= KW_OVERWRITE && LA154_0 <= KW_OWNER)||(LA154_0 >= KW_PARTITIONED && LA154_0 <= KW_PATH)||(LA154_0 >= KW_PLAN && LA154_0 <= KW_POOL)||LA154_0==KW_PRINCIPALS||(LA154_0 >= KW_PURGE && LA154_0 <= KW_QUERY_PARALLELISM)||LA154_0==KW_READ||(LA154_0 >= KW_REBUILD && LA154_0 <= KW_RECORDWRITER)||(LA154_0 >= KW_RELOAD && LA154_0 <= KW_RESTRICT)||LA154_0==KW_REWRITE||(LA154_0 >= KW_ROLE && LA154_0 <= KW_ROLES)||LA154_0==KW_SCHEDULING_POLICY||(LA154_0 >= KW_SCHEMAS && LA154_0 <= KW_SECOND)||(LA154_0 >= KW_SEMI && LA154_0 <= KW_SERVER)||(LA154_0 >= KW_SETS && LA154_0 <= KW_SKEWED)||(LA154_0 >= KW_SNAPSHOT && LA154_0 <= KW_SSL)||(LA154_0 >= KW_STATISTICS && LA154_0 <= KW_SUMMARY)||LA154_0==KW_TABLES||(LA154_0 >= KW_TBLPROPERTIES && LA154_0 <= KW_TERMINATED)||LA154_0==KW_TINYINT||(LA154_0 >= KW_TOUCH && LA154_0 <= KW_TRANSACTIONS)||LA154_0==KW_UNARCHIVE||LA154_0==KW_UNDO||LA154_0==KW_UNIONTYPE||(LA154_0 >= KW_UNKNOWN && LA154_0 <= KW_UNSIGNED)||(LA154_0 >= KW_URI && LA154_0 <= KW_USE)||(LA154_0 >= KW_UTC && LA154_0 <= KW_VALIDATE)||LA154_0==KW_VALUE_TYPE||(LA154_0 >= KW_VECTORIZATION && LA154_0 <= KW_WEEK)||LA154_0==KW_WHILE||(LA154_0 >= KW_WORK && LA154_0 <= KW_ZONE)||LA154_0==KW_BATCH||LA154_0==KW_DAYOFWEEK||LA154_0==KW_HOLD_DDLTIME||LA154_0==KW_IGNORE||LA154_0==KW_NO_DROP||LA154_0==KW_OFFLINE||LA154_0==KW_PROTECTION||LA154_0==KW_READONLY||LA154_0==KW_TIMESTAMPTZ) ) {
						alt154=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 154, 0, input);
						throw nvae;
					}

					switch (alt154) {
						case 1 :
							// HiveParser.g:1616:7: ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= identifier ) (isExtended= KW_EXTENDED )?
							{
							// HiveParser.g:1616:34: ( KW_DATABASE | KW_SCHEMA )
							int alt150=2;
							int LA150_0 = input.LA(1);
							if ( (LA150_0==KW_DATABASE) ) {
								alt150=1;
							}
							else if ( (LA150_0==KW_SCHEMA) ) {
								alt150=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 150, 0, input);
								throw nvae;
							}

							switch (alt150) {
								case 1 :
									// HiveParser.g:1616:35: KW_DATABASE
									{
									KW_DATABASE497=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_showStatement8295); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE497);

									}
									break;
								case 2 :
									// HiveParser.g:1616:47: KW_SCHEMA
									{
									KW_SCHEMA498=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_showStatement8297); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA498);

									}
									break;

							}

							// HiveParser.g:1616:58: (dbName= identifier )
							// HiveParser.g:1616:59: dbName= identifier
							{
							pushFollow(FOLLOW_identifier_in_showStatement8303);
							dbName=identifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_identifier.add(dbName.getTree());
							}

							// HiveParser.g:1616:78: (isExtended= KW_EXTENDED )?
							int alt151=2;
							int LA151_0 = input.LA(1);
							if ( (LA151_0==KW_EXTENDED) ) {
								alt151=1;
							}
							switch (alt151) {
								case 1 :
									// HiveParser.g:1616:79: isExtended= KW_EXTENDED
									{
									isExtended=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_showStatement8309); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_EXTENDED.add(isExtended);

									}
									break;

							}

							// AST REWRITE
							// elements: isExtended, dbName
							// token labels: isExtended
							// rule labels: dbName, retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleTokenStream stream_isExtended=new RewriteRuleTokenStream(adaptor,"token isExtended",isExtended);
							RewriteRuleSubtreeStream stream_dbName=new RewriteRuleSubtreeStream(adaptor,"rule dbName",dbName!=null?dbName.getTree():null);
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

							root_0 = (ASTNode)adaptor.nil();
							// 1616:104: -> ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? )
							{
								// HiveParser.g:1616:107: ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? )
								{
								ASTNode root_1 = (ASTNode)adaptor.nil();
								root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SHOWDBLOCKS, "TOK_SHOWDBLOCKS"), root_1);
								adaptor.addChild(root_1, stream_dbName.nextTree());
								// HiveParser.g:1616:134: ( $isExtended)?
								if ( stream_isExtended.hasNext() ) {
									adaptor.addChild(root_1, stream_isExtended.nextNode());
								}
								stream_isExtended.reset();

								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;
						case 2 :
							// HiveParser.g:1618:7: (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )?
							{
							// HiveParser.g:1618:7: (parttype= partTypeExpr )?
							int alt152=2;
							int LA152_0 = input.LA(1);
							if ( (LA152_0==Identifier||(LA152_0 >= KW_ABORT && LA152_0 <= KW_AFTER)||LA152_0==KW_ALLOC_FRACTION||LA152_0==KW_ANALYZE||LA152_0==KW_ARCHIVE||(LA152_0 >= KW_ASC && LA152_0 <= KW_AST)||(LA152_0 >= KW_AUTOCOMMIT && LA152_0 <= KW_BEFORE)||(LA152_0 >= KW_BUCKET && LA152_0 <= KW_BUCKETS)||(LA152_0 >= KW_CACHE && LA152_0 <= KW_CASCADE)||LA152_0==KW_CHANGE||(LA152_0 >= KW_CHECK && LA152_0 <= KW_COLLECTION)||(LA152_0 >= KW_COLUMNS && LA152_0 <= KW_COMMENT)||(LA152_0 >= KW_COMPACT && LA152_0 <= KW_CONCATENATE)||LA152_0==KW_CONTINUE||LA152_0==KW_DATA||(LA152_0 >= KW_DATABASES && LA152_0 <= KW_DEBUG)||(LA152_0 >= KW_DEFAULT && LA152_0 <= KW_DEFINED)||(LA152_0 >= KW_DELIMITED && LA152_0 <= KW_DESC)||(LA152_0 >= KW_DETAIL && LA152_0 <= KW_DISABLE)||(LA152_0 >= KW_DISTRIBUTE && LA152_0 <= KW_DO)||LA152_0==KW_DOW||(LA152_0 >= KW_DUMP && LA152_0 <= KW_ELEM_TYPE)||LA152_0==KW_ENABLE||(LA152_0 >= KW_ENFORCED && LA152_0 <= KW_ESCAPED)||LA152_0==KW_EXCLUSIVE||(LA152_0 >= KW_EXPLAIN && LA152_0 <= KW_EXPRESSION)||(LA152_0 >= KW_FIELDS && LA152_0 <= KW_FIRST)||(LA152_0 >= KW_FORMAT && LA152_0 <= KW_FORMATTED)||LA152_0==KW_FUNCTIONS||LA152_0==KW_GROUP||(LA152_0 >= KW_HOUR && LA152_0 <= KW_IDXPROPERTIES)||(LA152_0 >= KW_INDEX && LA152_0 <= KW_INDEXES)||(LA152_0 >= KW_INPATH && LA152_0 <= KW_INPUTFORMAT)||(LA152_0 >= KW_ISOLATION && LA152_0 <= KW_JAR)||(LA152_0 >= KW_KEY && LA152_0 <= KW_LAST)||LA152_0==KW_LEVEL||(LA152_0 >= KW_LIMIT && LA152_0 <= KW_LOAD)||(LA152_0 >= KW_LOCATION && LA152_0 <= KW_LONG)||LA152_0==KW_MANAGEMENT||(LA152_0 >= KW_MAPJOIN && LA152_0 <= KW_MATERIALIZED)||LA152_0==KW_METADATA||(LA152_0 >= KW_MINUTE && LA152_0 <= KW_MONTH)||(LA152_0 >= KW_MOVE && LA152_0 <= KW_MSCK)||(LA152_0 >= KW_NORELY && LA152_0 <= KW_NOSCAN)||LA152_0==KW_NOVALIDATE||LA152_0==KW_NULLS||LA152_0==KW_OFFSET||(LA152_0 >= KW_OPERATOR && LA152_0 <= KW_OPTION)||LA152_0==KW_ORDER||(LA152_0 >= KW_OUTPUTDRIVER && LA152_0 <= KW_OUTPUTFORMAT)||(LA152_0 >= KW_OVERWRITE && LA152_0 <= KW_OWNER)||(LA152_0 >= KW_PARTITIONED && LA152_0 <= KW_PATH)||(LA152_0 >= KW_PLAN && LA152_0 <= KW_POOL)||LA152_0==KW_PRINCIPALS||(LA152_0 >= KW_PURGE && LA152_0 <= KW_QUERY_PARALLELISM)||LA152_0==KW_READ||(LA152_0 >= KW_REBUILD && LA152_0 <= KW_RECORDWRITER)||(LA152_0 >= KW_RELOAD && LA152_0 <= KW_RESTRICT)||LA152_0==KW_REWRITE||(LA152_0 >= KW_ROLE && LA152_0 <= KW_ROLES)||(LA152_0 >= KW_SCHEDULING_POLICY && LA152_0 <= KW_SECOND)||(LA152_0 >= KW_SEMI && LA152_0 <= KW_SERVER)||(LA152_0 >= KW_SETS && LA152_0 <= KW_SKEWED)||(LA152_0 >= KW_SNAPSHOT && LA152_0 <= KW_SSL)||(LA152_0 >= KW_STATISTICS && LA152_0 <= KW_SUMMARY)||LA152_0==KW_TABLES||(LA152_0 >= KW_TBLPROPERTIES && LA152_0 <= KW_TERMINATED)||LA152_0==KW_TINYINT||(LA152_0 >= KW_TOUCH && LA152_0 <= KW_TRANSACTIONS)||LA152_0==KW_UNARCHIVE||LA152_0==KW_UNDO||LA152_0==KW_UNIONTYPE||(LA152_0 >= KW_UNKNOWN && LA152_0 <= KW_UNSIGNED)||(LA152_0 >= KW_URI && LA152_0 <= KW_USE)||(LA152_0 >= KW_UTC && LA152_0 <= KW_VALIDATE)||LA152_0==KW_VALUE_TYPE||(LA152_0 >= KW_VECTORIZATION && LA152_0 <= KW_WEEK)||LA152_0==KW_WHILE||(LA152_0 >= KW_WORK && LA152_0 <= KW_ZONE)||LA152_0==KW_BATCH||LA152_0==KW_DAYOFWEEK||LA152_0==KW_HOLD_DDLTIME||LA152_0==KW_IGNORE||LA152_0==KW_NO_DROP||LA152_0==KW_OFFLINE||LA152_0==KW_PROTECTION||LA152_0==KW_READONLY||LA152_0==KW_TIMESTAMPTZ) ) {
								alt152=1;
							}
							switch (alt152) {
								case 1 :
									// HiveParser.g:1618:8: parttype= partTypeExpr
									{
									pushFollow(FOLLOW_partTypeExpr_in_showStatement8343);
									parttype=partTypeExpr();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_partTypeExpr.add(parttype.getTree());
									}
									break;

							}

							// HiveParser.g:1618:32: (isExtended= KW_EXTENDED )?
							int alt153=2;
							int LA153_0 = input.LA(1);
							if ( (LA153_0==KW_EXTENDED) ) {
								alt153=1;
							}
							switch (alt153) {
								case 1 :
									// HiveParser.g:1618:33: isExtended= KW_EXTENDED
									{
									isExtended=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_showStatement8350); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_EXTENDED.add(isExtended);

									}
									break;

							}

							// AST REWRITE
							// elements: parttype, isExtended
							// token labels: isExtended
							// rule labels: parttype, retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleTokenStream stream_isExtended=new RewriteRuleTokenStream(adaptor,"token isExtended",isExtended);
							RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.getTree():null);
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

							root_0 = (ASTNode)adaptor.nil();
							// 1618:58: -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? )
							{
								// HiveParser.g:1618:61: ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? )
								{
								ASTNode root_1 = (ASTNode)adaptor.nil();
								root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SHOWLOCKS, "TOK_SHOWLOCKS"), root_1);
								// HiveParser.g:1618:78: ( $parttype)?
								if ( stream_parttype.hasNext() ) {
									adaptor.addChild(root_1, stream_parttype.nextTree());
								}
								stream_parttype.reset();

								// HiveParser.g:1618:89: ( $isExtended)?
								if ( stream_isExtended.hasNext() ) {
									adaptor.addChild(root_1, stream_isExtended.nextNode());
								}
								stream_isExtended.reset();

								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;

					}

					}
					break;
				case 12 :
					// HiveParser.g:1620:7: KW_SHOW KW_COMPACTIONS
					{
					KW_SHOW499=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement8382); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW499);

					KW_COMPACTIONS500=(Token)match(input,KW_COMPACTIONS,FOLLOW_KW_COMPACTIONS_in_showStatement8384); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COMPACTIONS.add(KW_COMPACTIONS500);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1620:30: -> ^( TOK_SHOW_COMPACTIONS )
					{
						// HiveParser.g:1620:33: ^( TOK_SHOW_COMPACTIONS )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SHOW_COMPACTIONS, "TOK_SHOW_COMPACTIONS"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 13 :
					// HiveParser.g:1621:7: KW_SHOW KW_TRANSACTIONS
					{
					KW_SHOW501=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement8398); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW501);

					KW_TRANSACTIONS502=(Token)match(input,KW_TRANSACTIONS,FOLLOW_KW_TRANSACTIONS_in_showStatement8400); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TRANSACTIONS.add(KW_TRANSACTIONS502);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1621:31: -> ^( TOK_SHOW_TRANSACTIONS )
					{
						// HiveParser.g:1621:34: ^( TOK_SHOW_TRANSACTIONS )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SHOW_TRANSACTIONS, "TOK_SHOW_TRANSACTIONS"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 14 :
					// HiveParser.g:1622:7: KW_SHOW KW_CONF StringLiteral
					{
					KW_SHOW503=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement8414); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW503);

					KW_CONF504=(Token)match(input,KW_CONF,FOLLOW_KW_CONF_in_showStatement8416); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CONF.add(KW_CONF504);

					StringLiteral505=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_showStatement8418); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral505);

					// AST REWRITE
					// elements: StringLiteral
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1622:37: -> ^( TOK_SHOWCONF StringLiteral )
					{
						// HiveParser.g:1622:40: ^( TOK_SHOWCONF StringLiteral )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SHOWCONF, "TOK_SHOWCONF"), root_1);
						adaptor.addChild(root_1, stream_StringLiteral.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 15 :
					// HiveParser.g:1623:7: KW_SHOW KW_RESOURCE ( ( KW_PLAN rp_name= identifier -> ^( TOK_SHOW_RP $rp_name) ) | ( KW_PLANS -> ^( TOK_SHOW_RP ) ) )
					{
					KW_SHOW506=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement8434); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW506);

					KW_RESOURCE507=(Token)match(input,KW_RESOURCE,FOLLOW_KW_RESOURCE_in_showStatement8436); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_RESOURCE.add(KW_RESOURCE507);

					// HiveParser.g:1624:7: ( ( KW_PLAN rp_name= identifier -> ^( TOK_SHOW_RP $rp_name) ) | ( KW_PLANS -> ^( TOK_SHOW_RP ) ) )
					int alt155=2;
					int LA155_0 = input.LA(1);
					if ( (LA155_0==KW_PLAN) ) {
						alt155=1;
					}
					else if ( (LA155_0==KW_PLANS) ) {
						alt155=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 155, 0, input);
						throw nvae;
					}

					switch (alt155) {
						case 1 :
							// HiveParser.g:1625:9: ( KW_PLAN rp_name= identifier -> ^( TOK_SHOW_RP $rp_name) )
							{
							// HiveParser.g:1625:9: ( KW_PLAN rp_name= identifier -> ^( TOK_SHOW_RP $rp_name) )
							// HiveParser.g:1625:10: KW_PLAN rp_name= identifier
							{
							KW_PLAN508=(Token)match(input,KW_PLAN,FOLLOW_KW_PLAN_in_showStatement8455); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_PLAN.add(KW_PLAN508);

							pushFollow(FOLLOW_identifier_in_showStatement8459);
							rp_name=identifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_identifier.add(rp_name.getTree());
							// AST REWRITE
							// elements: rp_name
							// token labels: 
							// rule labels: retval, rp_name
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
							RewriteRuleSubtreeStream stream_rp_name=new RewriteRuleSubtreeStream(adaptor,"rule rp_name",rp_name!=null?rp_name.getTree():null);

							root_0 = (ASTNode)adaptor.nil();
							// 1625:37: -> ^( TOK_SHOW_RP $rp_name)
							{
								// HiveParser.g:1625:40: ^( TOK_SHOW_RP $rp_name)
								{
								ASTNode root_1 = (ASTNode)adaptor.nil();
								root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SHOW_RP, "TOK_SHOW_RP"), root_1);
								adaptor.addChild(root_1, stream_rp_name.nextTree());
								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}

							}
							break;
						case 2 :
							// HiveParser.g:1626:11: ( KW_PLANS -> ^( TOK_SHOW_RP ) )
							{
							// HiveParser.g:1626:11: ( KW_PLANS -> ^( TOK_SHOW_RP ) )
							// HiveParser.g:1626:12: KW_PLANS
							{
							KW_PLANS509=(Token)match(input,KW_PLANS,FOLLOW_KW_PLANS_in_showStatement8482); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_PLANS.add(KW_PLANS509);

							// AST REWRITE
							// elements: 
							// token labels: 
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

							root_0 = (ASTNode)adaptor.nil();
							// 1626:21: -> ^( TOK_SHOW_RP )
							{
								// HiveParser.g:1626:24: ^( TOK_SHOW_RP )
								{
								ASTNode root_1 = (ASTNode)adaptor.nil();
								root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SHOW_RP, "TOK_SHOW_RP"), root_1);
								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}

							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showStatement"


	public static class lockStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "lockStatement"
	// HiveParser.g:1630:1: lockStatement : KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? ) ;
	public final HiveParser.lockStatement_return lockStatement() throws RecognitionException {
		HiveParser.lockStatement_return retval = new HiveParser.lockStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_LOCK510=null;
		Token KW_TABLE511=null;
		ParserRuleReturnScope tableName512 =null;
		ParserRuleReturnScope partitionSpec513 =null;
		ParserRuleReturnScope lockMode514 =null;

		ASTNode KW_LOCK510_tree=null;
		ASTNode KW_TABLE511_tree=null;
		RewriteRuleTokenStream stream_KW_LOCK=new RewriteRuleTokenStream(adaptor,"token KW_LOCK");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_lockMode=new RewriteRuleSubtreeStream(adaptor,"rule lockMode");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg(retval.start,"lock statement", state); 
		try {
			// HiveParser.g:1633:5: ( KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? ) )
			// HiveParser.g:1633:7: KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode
			{
			KW_LOCK510=(Token)match(input,KW_LOCK,FOLLOW_KW_LOCK_in_lockStatement8524); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LOCK.add(KW_LOCK510);

			KW_TABLE511=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_lockStatement8526); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE511);

			pushFollow(FOLLOW_tableName_in_lockStatement8528);
			tableName512=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tableName512.getTree());
			// HiveParser.g:1633:34: ( partitionSpec )?
			int alt157=2;
			int LA157_0 = input.LA(1);
			if ( (LA157_0==KW_PARTITION) ) {
				alt157=1;
			}
			switch (alt157) {
				case 1 :
					// HiveParser.g:1633:34: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_lockStatement8530);
					partitionSpec513=partitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec513.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_lockMode_in_lockStatement8533);
			lockMode514=lockMode();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_lockMode.add(lockMode514.getTree());
			// AST REWRITE
			// elements: lockMode, tableName, partitionSpec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1633:58: -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? )
			{
				// HiveParser.g:1633:61: ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_LOCKTABLE, "TOK_LOCKTABLE"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				adaptor.addChild(root_1, stream_lockMode.nextTree());
				// HiveParser.g:1633:96: ( partitionSpec )?
				if ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lockStatement"


	public static class lockDatabase_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "lockDatabase"
	// HiveParser.g:1636:1: lockDatabase : KW_LOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= identifier ) lockMode -> ^( TOK_LOCKDB $dbName lockMode ) ;
	public final HiveParser.lockDatabase_return lockDatabase() throws RecognitionException {
		HiveParser.lockDatabase_return retval = new HiveParser.lockDatabase_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_LOCK515=null;
		Token KW_DATABASE516=null;
		Token KW_SCHEMA517=null;
		ParserRuleReturnScope dbName =null;
		ParserRuleReturnScope lockMode518 =null;

		ASTNode KW_LOCK515_tree=null;
		ASTNode KW_DATABASE516_tree=null;
		ASTNode KW_SCHEMA517_tree=null;
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_KW_LOCK=new RewriteRuleTokenStream(adaptor,"token KW_LOCK");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_lockMode=new RewriteRuleSubtreeStream(adaptor,"rule lockMode");

		 pushMsg(retval.start,"lock database statement", state); 
		try {
			// HiveParser.g:1639:5: ( KW_LOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= identifier ) lockMode -> ^( TOK_LOCKDB $dbName lockMode ) )
			// HiveParser.g:1639:7: KW_LOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= identifier ) lockMode
			{
			KW_LOCK515=(Token)match(input,KW_LOCK,FOLLOW_KW_LOCK_in_lockDatabase8573); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LOCK.add(KW_LOCK515);

			// HiveParser.g:1639:15: ( KW_DATABASE | KW_SCHEMA )
			int alt158=2;
			int LA158_0 = input.LA(1);
			if ( (LA158_0==KW_DATABASE) ) {
				alt158=1;
			}
			else if ( (LA158_0==KW_SCHEMA) ) {
				alt158=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 158, 0, input);
				throw nvae;
			}

			switch (alt158) {
				case 1 :
					// HiveParser.g:1639:16: KW_DATABASE
					{
					KW_DATABASE516=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_lockDatabase8576); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE516);

					}
					break;
				case 2 :
					// HiveParser.g:1639:28: KW_SCHEMA
					{
					KW_SCHEMA517=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_lockDatabase8578); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA517);

					}
					break;

			}

			// HiveParser.g:1639:39: (dbName= identifier )
			// HiveParser.g:1639:40: dbName= identifier
			{
			pushFollow(FOLLOW_identifier_in_lockDatabase8584);
			dbName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(dbName.getTree());
			}

			pushFollow(FOLLOW_lockMode_in_lockDatabase8587);
			lockMode518=lockMode();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_lockMode.add(lockMode518.getTree());
			// AST REWRITE
			// elements: lockMode, dbName
			// token labels: 
			// rule labels: dbName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_dbName=new RewriteRuleSubtreeStream(adaptor,"rule dbName",dbName!=null?dbName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1639:68: -> ^( TOK_LOCKDB $dbName lockMode )
			{
				// HiveParser.g:1639:71: ^( TOK_LOCKDB $dbName lockMode )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_LOCKDB, "TOK_LOCKDB"), root_1);
				adaptor.addChild(root_1, stream_dbName.nextTree());
				adaptor.addChild(root_1, stream_lockMode.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lockDatabase"


	public static class lockMode_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "lockMode"
	// HiveParser.g:1642:1: lockMode : ( KW_SHARED | KW_EXCLUSIVE );
	public final HiveParser.lockMode_return lockMode() throws RecognitionException {
		HiveParser.lockMode_return retval = new HiveParser.lockMode_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token set519=null;

		ASTNode set519_tree=null;

		 pushMsg(retval.start,"lock mode", state); 
		try {
			// HiveParser.g:1645:5: ( KW_SHARED | KW_EXCLUSIVE )
			// HiveParser.g:
			{
			root_0 = (ASTNode)adaptor.nil();


			set519=input.LT(1);
			if ( input.LA(1)==KW_EXCLUSIVE||input.LA(1)==KW_SHARED ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (ASTNode)adaptor.create(set519));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lockMode"


	public static class unlockStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "unlockStatement"
	// HiveParser.g:1648:1: unlockStatement : KW_UNLOCK KW_TABLE tableName ( partitionSpec )? -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? ) ;
	public final HiveParser.unlockStatement_return unlockStatement() throws RecognitionException {
		HiveParser.unlockStatement_return retval = new HiveParser.unlockStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_UNLOCK520=null;
		Token KW_TABLE521=null;
		ParserRuleReturnScope tableName522 =null;
		ParserRuleReturnScope partitionSpec523 =null;

		ASTNode KW_UNLOCK520_tree=null;
		ASTNode KW_TABLE521_tree=null;
		RewriteRuleTokenStream stream_KW_UNLOCK=new RewriteRuleTokenStream(adaptor,"token KW_UNLOCK");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg(retval.start,"unlock statement", state); 
		try {
			// HiveParser.g:1651:5: ( KW_UNLOCK KW_TABLE tableName ( partitionSpec )? -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? ) )
			// HiveParser.g:1651:7: KW_UNLOCK KW_TABLE tableName ( partitionSpec )?
			{
			KW_UNLOCK520=(Token)match(input,KW_UNLOCK,FOLLOW_KW_UNLOCK_in_unlockStatement8656); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_UNLOCK.add(KW_UNLOCK520);

			KW_TABLE521=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_unlockStatement8658); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE521);

			pushFollow(FOLLOW_tableName_in_unlockStatement8660);
			tableName522=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tableName522.getTree());
			// HiveParser.g:1651:36: ( partitionSpec )?
			int alt159=2;
			int LA159_0 = input.LA(1);
			if ( (LA159_0==KW_PARTITION) ) {
				alt159=1;
			}
			switch (alt159) {
				case 1 :
					// HiveParser.g:1651:36: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_unlockStatement8662);
					partitionSpec523=partitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec523.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: partitionSpec, tableName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1651:52: -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? )
			{
				// HiveParser.g:1651:55: ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_UNLOCKTABLE, "TOK_UNLOCKTABLE"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				// HiveParser.g:1651:83: ( partitionSpec )?
				if ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unlockStatement"


	public static class unlockDatabase_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "unlockDatabase"
	// HiveParser.g:1654:1: unlockDatabase : KW_UNLOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= identifier ) -> ^( TOK_UNLOCKDB $dbName) ;
	public final HiveParser.unlockDatabase_return unlockDatabase() throws RecognitionException {
		HiveParser.unlockDatabase_return retval = new HiveParser.unlockDatabase_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_UNLOCK524=null;
		Token KW_DATABASE525=null;
		Token KW_SCHEMA526=null;
		ParserRuleReturnScope dbName =null;

		ASTNode KW_UNLOCK524_tree=null;
		ASTNode KW_DATABASE525_tree=null;
		ASTNode KW_SCHEMA526_tree=null;
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_KW_UNLOCK=new RewriteRuleTokenStream(adaptor,"token KW_UNLOCK");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg(retval.start,"unlock database statement", state); 
		try {
			// HiveParser.g:1657:5: ( KW_UNLOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= identifier ) -> ^( TOK_UNLOCKDB $dbName) )
			// HiveParser.g:1657:7: KW_UNLOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= identifier )
			{
			KW_UNLOCK524=(Token)match(input,KW_UNLOCK,FOLLOW_KW_UNLOCK_in_unlockDatabase8702); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_UNLOCK.add(KW_UNLOCK524);

			// HiveParser.g:1657:17: ( KW_DATABASE | KW_SCHEMA )
			int alt160=2;
			int LA160_0 = input.LA(1);
			if ( (LA160_0==KW_DATABASE) ) {
				alt160=1;
			}
			else if ( (LA160_0==KW_SCHEMA) ) {
				alt160=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 160, 0, input);
				throw nvae;
			}

			switch (alt160) {
				case 1 :
					// HiveParser.g:1657:18: KW_DATABASE
					{
					KW_DATABASE525=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_unlockDatabase8705); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE525);

					}
					break;
				case 2 :
					// HiveParser.g:1657:30: KW_SCHEMA
					{
					KW_SCHEMA526=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_unlockDatabase8707); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA526);

					}
					break;

			}

			// HiveParser.g:1657:41: (dbName= identifier )
			// HiveParser.g:1657:42: dbName= identifier
			{
			pushFollow(FOLLOW_identifier_in_unlockDatabase8713);
			dbName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(dbName.getTree());
			}

			// AST REWRITE
			// elements: dbName
			// token labels: 
			// rule labels: dbName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_dbName=new RewriteRuleSubtreeStream(adaptor,"rule dbName",dbName!=null?dbName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1657:61: -> ^( TOK_UNLOCKDB $dbName)
			{
				// HiveParser.g:1657:64: ^( TOK_UNLOCKDB $dbName)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_UNLOCKDB, "TOK_UNLOCKDB"), root_1);
				adaptor.addChild(root_1, stream_dbName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unlockDatabase"


	public static class createRoleStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "createRoleStatement"
	// HiveParser.g:1660:1: createRoleStatement : KW_CREATE KW_ROLE roleName= identifier -> ^( TOK_CREATEROLE $roleName) ;
	public final HiveParser.createRoleStatement_return createRoleStatement() throws RecognitionException {
		HiveParser.createRoleStatement_return retval = new HiveParser.createRoleStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_CREATE527=null;
		Token KW_ROLE528=null;
		ParserRuleReturnScope roleName =null;

		ASTNode KW_CREATE527_tree=null;
		ASTNode KW_ROLE528_tree=null;
		RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg(retval.start,"create role", state); 
		try {
			// HiveParser.g:1663:5: ( KW_CREATE KW_ROLE roleName= identifier -> ^( TOK_CREATEROLE $roleName) )
			// HiveParser.g:1663:7: KW_CREATE KW_ROLE roleName= identifier
			{
			KW_CREATE527=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createRoleStatement8750); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE527);

			KW_ROLE528=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_createRoleStatement8752); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE528);

			pushFollow(FOLLOW_identifier_in_createRoleStatement8756);
			roleName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(roleName.getTree());
			// AST REWRITE
			// elements: roleName
			// token labels: 
			// rule labels: roleName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_roleName=new RewriteRuleSubtreeStream(adaptor,"rule roleName",roleName!=null?roleName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1664:5: -> ^( TOK_CREATEROLE $roleName)
			{
				// HiveParser.g:1664:8: ^( TOK_CREATEROLE $roleName)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_CREATEROLE, "TOK_CREATEROLE"), root_1);
				adaptor.addChild(root_1, stream_roleName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createRoleStatement"


	public static class dropRoleStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "dropRoleStatement"
	// HiveParser.g:1667:1: dropRoleStatement : KW_DROP KW_ROLE roleName= identifier -> ^( TOK_DROPROLE $roleName) ;
	public final HiveParser.dropRoleStatement_return dropRoleStatement() throws RecognitionException {
		HiveParser.dropRoleStatement_return retval = new HiveParser.dropRoleStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_DROP529=null;
		Token KW_ROLE530=null;
		ParserRuleReturnScope roleName =null;

		ASTNode KW_DROP529_tree=null;
		ASTNode KW_ROLE530_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		pushMsg(retval.start,"drop role", state);
		try {
			// HiveParser.g:1670:5: ( KW_DROP KW_ROLE roleName= identifier -> ^( TOK_DROPROLE $roleName) )
			// HiveParser.g:1670:7: KW_DROP KW_ROLE roleName= identifier
			{
			KW_DROP529=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropRoleStatement8796); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP529);

			KW_ROLE530=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_dropRoleStatement8798); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE530);

			pushFollow(FOLLOW_identifier_in_dropRoleStatement8802);
			roleName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(roleName.getTree());
			// AST REWRITE
			// elements: roleName
			// token labels: 
			// rule labels: roleName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_roleName=new RewriteRuleSubtreeStream(adaptor,"rule roleName",roleName!=null?roleName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1671:5: -> ^( TOK_DROPROLE $roleName)
			{
				// HiveParser.g:1671:8: ^( TOK_DROPROLE $roleName)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DROPROLE, "TOK_DROPROLE"), root_1);
				adaptor.addChild(root_1, stream_roleName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropRoleStatement"


	public static class grantPrivileges_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "grantPrivileges"
	// HiveParser.g:1674:1: grantPrivileges : KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( withGrantOption )? -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withGrantOption )? ) ;
	public final HiveParser.grantPrivileges_return grantPrivileges() throws RecognitionException {
		HiveParser.grantPrivileges_return retval = new HiveParser.grantPrivileges_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_GRANT531=null;
		Token KW_TO533=null;
		ParserRuleReturnScope privList =null;
		ParserRuleReturnScope privilegeObject532 =null;
		ParserRuleReturnScope principalSpecification534 =null;
		ParserRuleReturnScope withGrantOption535 =null;

		ASTNode KW_GRANT531_tree=null;
		ASTNode KW_TO533_tree=null;
		RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
		RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
		RewriteRuleSubtreeStream stream_withGrantOption=new RewriteRuleSubtreeStream(adaptor,"rule withGrantOption");
		RewriteRuleSubtreeStream stream_privilegeList=new RewriteRuleSubtreeStream(adaptor,"rule privilegeList");
		RewriteRuleSubtreeStream stream_privilegeObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeObject");
		RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");

		pushMsg(retval.start,"grant privileges", state);
		try {
			// HiveParser.g:1677:5: ( KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( withGrantOption )? -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withGrantOption )? ) )
			// HiveParser.g:1677:7: KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( withGrantOption )?
			{
			KW_GRANT531=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_grantPrivileges8842); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT531);

			pushFollow(FOLLOW_privilegeList_in_grantPrivileges8846);
			privList=privilegeList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_privilegeList.add(privList.getTree());
			// HiveParser.g:1678:7: ( privilegeObject )?
			int alt161=2;
			int LA161_0 = input.LA(1);
			if ( (LA161_0==KW_ON) ) {
				alt161=1;
			}
			switch (alt161) {
				case 1 :
					// HiveParser.g:1678:7: privilegeObject
					{
					pushFollow(FOLLOW_privilegeObject_in_grantPrivileges8854);
					privilegeObject532=privilegeObject();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_privilegeObject.add(privilegeObject532.getTree());
					}
					break;

			}

			KW_TO533=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_grantPrivileges8863); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TO.add(KW_TO533);

			pushFollow(FOLLOW_principalSpecification_in_grantPrivileges8865);
			principalSpecification534=principalSpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_principalSpecification.add(principalSpecification534.getTree());
			// HiveParser.g:1680:7: ( withGrantOption )?
			int alt162=2;
			int LA162_0 = input.LA(1);
			if ( (LA162_0==KW_WITH) ) {
				alt162=1;
			}
			switch (alt162) {
				case 1 :
					// HiveParser.g:1680:7: withGrantOption
					{
					pushFollow(FOLLOW_withGrantOption_in_grantPrivileges8873);
					withGrantOption535=withGrantOption();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_withGrantOption.add(withGrantOption535.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: privilegeObject, principalSpecification, privList, withGrantOption
			// token labels: 
			// rule labels: privList, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_privList=new RewriteRuleSubtreeStream(adaptor,"rule privList",privList!=null?privList.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1681:5: -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withGrantOption )? )
			{
				// HiveParser.g:1681:8: ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withGrantOption )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_GRANT, "TOK_GRANT"), root_1);
				adaptor.addChild(root_1, stream_privList.nextTree());
				adaptor.addChild(root_1, stream_principalSpecification.nextTree());
				// HiveParser.g:1681:53: ( privilegeObject )?
				if ( stream_privilegeObject.hasNext() ) {
					adaptor.addChild(root_1, stream_privilegeObject.nextTree());
				}
				stream_privilegeObject.reset();

				// HiveParser.g:1681:70: ( withGrantOption )?
				if ( stream_withGrantOption.hasNext() ) {
					adaptor.addChild(root_1, stream_withGrantOption.nextTree());
				}
				stream_withGrantOption.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "grantPrivileges"


	public static class revokePrivileges_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "revokePrivileges"
	// HiveParser.g:1684:1: revokePrivileges : KW_REVOKE ( grantOptionFor )? privilegeList ( privilegeObject )? KW_FROM principalSpecification -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ( grantOptionFor )? ) ;
	public final HiveParser.revokePrivileges_return revokePrivileges() throws RecognitionException {
		HiveParser.revokePrivileges_return retval = new HiveParser.revokePrivileges_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_REVOKE536=null;
		Token KW_FROM540=null;
		ParserRuleReturnScope grantOptionFor537 =null;
		ParserRuleReturnScope privilegeList538 =null;
		ParserRuleReturnScope privilegeObject539 =null;
		ParserRuleReturnScope principalSpecification541 =null;

		ASTNode KW_REVOKE536_tree=null;
		ASTNode KW_FROM540_tree=null;
		RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
		RewriteRuleTokenStream stream_KW_REVOKE=new RewriteRuleTokenStream(adaptor,"token KW_REVOKE");
		RewriteRuleSubtreeStream stream_grantOptionFor=new RewriteRuleSubtreeStream(adaptor,"rule grantOptionFor");
		RewriteRuleSubtreeStream stream_privilegeList=new RewriteRuleSubtreeStream(adaptor,"rule privilegeList");
		RewriteRuleSubtreeStream stream_privilegeObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeObject");
		RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");

		pushMsg(retval.start,"revoke privileges", state);
		try {
			// HiveParser.g:1687:5: ( KW_REVOKE ( grantOptionFor )? privilegeList ( privilegeObject )? KW_FROM principalSpecification -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ( grantOptionFor )? ) )
			// HiveParser.g:1687:7: KW_REVOKE ( grantOptionFor )? privilegeList ( privilegeObject )? KW_FROM principalSpecification
			{
			KW_REVOKE536=(Token)match(input,KW_REVOKE,FOLLOW_KW_REVOKE_in_revokePrivileges8922); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REVOKE.add(KW_REVOKE536);

			// HiveParser.g:1687:17: ( grantOptionFor )?
			int alt163=2;
			int LA163_0 = input.LA(1);
			if ( (LA163_0==KW_GRANT) ) {
				alt163=1;
			}
			switch (alt163) {
				case 1 :
					// HiveParser.g:1687:17: grantOptionFor
					{
					pushFollow(FOLLOW_grantOptionFor_in_revokePrivileges8924);
					grantOptionFor537=grantOptionFor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_grantOptionFor.add(grantOptionFor537.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_privilegeList_in_revokePrivileges8927);
			privilegeList538=privilegeList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_privilegeList.add(privilegeList538.getTree());
			// HiveParser.g:1687:47: ( privilegeObject )?
			int alt164=2;
			int LA164_0 = input.LA(1);
			if ( (LA164_0==KW_ON) ) {
				alt164=1;
			}
			switch (alt164) {
				case 1 :
					// HiveParser.g:1687:47: privilegeObject
					{
					pushFollow(FOLLOW_privilegeObject_in_revokePrivileges8929);
					privilegeObject539=privilegeObject();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_privilegeObject.add(privilegeObject539.getTree());
					}
					break;

			}

			KW_FROM540=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_revokePrivileges8932); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM540);

			pushFollow(FOLLOW_principalSpecification_in_revokePrivileges8934);
			principalSpecification541=principalSpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_principalSpecification.add(principalSpecification541.getTree());
			// AST REWRITE
			// elements: principalSpecification, privilegeList, grantOptionFor, privilegeObject
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1688:5: -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ( grantOptionFor )? )
			{
				// HiveParser.g:1688:8: ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ( grantOptionFor )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_REVOKE, "TOK_REVOKE"), root_1);
				adaptor.addChild(root_1, stream_privilegeList.nextTree());
				adaptor.addChild(root_1, stream_principalSpecification.nextTree());
				// HiveParser.g:1688:58: ( privilegeObject )?
				if ( stream_privilegeObject.hasNext() ) {
					adaptor.addChild(root_1, stream_privilegeObject.nextTree());
				}
				stream_privilegeObject.reset();

				// HiveParser.g:1688:75: ( grantOptionFor )?
				if ( stream_grantOptionFor.hasNext() ) {
					adaptor.addChild(root_1, stream_grantOptionFor.nextTree());
				}
				stream_grantOptionFor.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "revokePrivileges"


	public static class grantRole_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "grantRole"
	// HiveParser.g:1691:1: grantRole : KW_GRANT ( KW_ROLE )? identifier ( COMMA identifier )* KW_TO principalSpecification ( withAdminOption )? -> ^( TOK_GRANT_ROLE principalSpecification ( withAdminOption )? ( identifier )+ ) ;
	public final HiveParser.grantRole_return grantRole() throws RecognitionException {
		HiveParser.grantRole_return retval = new HiveParser.grantRole_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_GRANT542=null;
		Token KW_ROLE543=null;
		Token COMMA545=null;
		Token KW_TO547=null;
		ParserRuleReturnScope identifier544 =null;
		ParserRuleReturnScope identifier546 =null;
		ParserRuleReturnScope principalSpecification548 =null;
		ParserRuleReturnScope withAdminOption549 =null;

		ASTNode KW_GRANT542_tree=null;
		ASTNode KW_ROLE543_tree=null;
		ASTNode COMMA545_tree=null;
		ASTNode KW_TO547_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
		RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
		RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_withAdminOption=new RewriteRuleSubtreeStream(adaptor,"rule withAdminOption");
		RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");

		pushMsg(retval.start,"grant role", state);
		try {
			// HiveParser.g:1694:5: ( KW_GRANT ( KW_ROLE )? identifier ( COMMA identifier )* KW_TO principalSpecification ( withAdminOption )? -> ^( TOK_GRANT_ROLE principalSpecification ( withAdminOption )? ( identifier )+ ) )
			// HiveParser.g:1694:7: KW_GRANT ( KW_ROLE )? identifier ( COMMA identifier )* KW_TO principalSpecification ( withAdminOption )?
			{
			KW_GRANT542=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_grantRole8981); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT542);

			// HiveParser.g:1694:16: ( KW_ROLE )?
			int alt165=2;
			int LA165_0 = input.LA(1);
			if ( (LA165_0==KW_ROLE) ) {
				int LA165_1 = input.LA(2);
				if ( (LA165_1==Identifier||(LA165_1 >= KW_ABORT && LA165_1 <= KW_AFTER)||LA165_1==KW_ALLOC_FRACTION||LA165_1==KW_ANALYZE||LA165_1==KW_ARCHIVE||(LA165_1 >= KW_ASC && LA165_1 <= KW_AST)||(LA165_1 >= KW_AUTOCOMMIT && LA165_1 <= KW_BEFORE)||(LA165_1 >= KW_BUCKET && LA165_1 <= KW_BUCKETS)||(LA165_1 >= KW_CACHE && LA165_1 <= KW_CASCADE)||LA165_1==KW_CHANGE||(LA165_1 >= KW_CHECK && LA165_1 <= KW_COLLECTION)||(LA165_1 >= KW_COLUMNS && LA165_1 <= KW_COMMENT)||(LA165_1 >= KW_COMPACT && LA165_1 <= KW_CONCATENATE)||LA165_1==KW_CONTINUE||LA165_1==KW_DATA||(LA165_1 >= KW_DATABASES && LA165_1 <= KW_DEBUG)||(LA165_1 >= KW_DEFAULT && LA165_1 <= KW_DEFINED)||(LA165_1 >= KW_DELIMITED && LA165_1 <= KW_DESC)||(LA165_1 >= KW_DETAIL && LA165_1 <= KW_DISABLE)||(LA165_1 >= KW_DISTRIBUTE && LA165_1 <= KW_DO)||LA165_1==KW_DOW||(LA165_1 >= KW_DUMP && LA165_1 <= KW_ELEM_TYPE)||LA165_1==KW_ENABLE||(LA165_1 >= KW_ENFORCED && LA165_1 <= KW_ESCAPED)||LA165_1==KW_EXCLUSIVE||(LA165_1 >= KW_EXPLAIN && LA165_1 <= KW_EXPRESSION)||(LA165_1 >= KW_FIELDS && LA165_1 <= KW_FIRST)||(LA165_1 >= KW_FORMAT && LA165_1 <= KW_FORMATTED)||LA165_1==KW_FUNCTIONS||LA165_1==KW_GROUP||(LA165_1 >= KW_HOUR && LA165_1 <= KW_IDXPROPERTIES)||(LA165_1 >= KW_INDEX && LA165_1 <= KW_INDEXES)||(LA165_1 >= KW_INPATH && LA165_1 <= KW_INPUTFORMAT)||(LA165_1 >= KW_ISOLATION && LA165_1 <= KW_JAR)||(LA165_1 >= KW_KEY && LA165_1 <= KW_LAST)||LA165_1==KW_LEVEL||(LA165_1 >= KW_LIMIT && LA165_1 <= KW_LOAD)||(LA165_1 >= KW_LOCATION && LA165_1 <= KW_LONG)||LA165_1==KW_MANAGEMENT||(LA165_1 >= KW_MAPJOIN && LA165_1 <= KW_MATERIALIZED)||LA165_1==KW_METADATA||(LA165_1 >= KW_MINUTE && LA165_1 <= KW_MONTH)||(LA165_1 >= KW_MOVE && LA165_1 <= KW_MSCK)||(LA165_1 >= KW_NORELY && LA165_1 <= KW_NOSCAN)||LA165_1==KW_NOVALIDATE||LA165_1==KW_NULLS||LA165_1==KW_OFFSET||(LA165_1 >= KW_OPERATOR && LA165_1 <= KW_OPTION)||LA165_1==KW_ORDER||(LA165_1 >= KW_OUTPUTDRIVER && LA165_1 <= KW_OUTPUTFORMAT)||(LA165_1 >= KW_OVERWRITE && LA165_1 <= KW_OWNER)||(LA165_1 >= KW_PARTITIONED && LA165_1 <= KW_PATH)||(LA165_1 >= KW_PLAN && LA165_1 <= KW_POOL)||LA165_1==KW_PRINCIPALS||(LA165_1 >= KW_PURGE && LA165_1 <= KW_QUERY_PARALLELISM)||LA165_1==KW_READ||(LA165_1 >= KW_REBUILD && LA165_1 <= KW_RECORDWRITER)||(LA165_1 >= KW_RELOAD && LA165_1 <= KW_RESTRICT)||LA165_1==KW_REWRITE||(LA165_1 >= KW_ROLE && LA165_1 <= KW_ROLES)||(LA165_1 >= KW_SCHEDULING_POLICY && LA165_1 <= KW_SECOND)||(LA165_1 >= KW_SEMI && LA165_1 <= KW_SERVER)||(LA165_1 >= KW_SETS && LA165_1 <= KW_SKEWED)||(LA165_1 >= KW_SNAPSHOT && LA165_1 <= KW_SSL)||(LA165_1 >= KW_STATISTICS && LA165_1 <= KW_SUMMARY)||LA165_1==KW_TABLES||(LA165_1 >= KW_TBLPROPERTIES && LA165_1 <= KW_TERMINATED)||LA165_1==KW_TINYINT||(LA165_1 >= KW_TOUCH && LA165_1 <= KW_TRANSACTIONS)||LA165_1==KW_UNARCHIVE||LA165_1==KW_UNDO||LA165_1==KW_UNIONTYPE||(LA165_1 >= KW_UNKNOWN && LA165_1 <= KW_UNSIGNED)||(LA165_1 >= KW_URI && LA165_1 <= KW_USE)||(LA165_1 >= KW_UTC && LA165_1 <= KW_VALIDATE)||LA165_1==KW_VALUE_TYPE||(LA165_1 >= KW_VECTORIZATION && LA165_1 <= KW_WEEK)||LA165_1==KW_WHILE||(LA165_1 >= KW_WORK && LA165_1 <= KW_ZONE)||LA165_1==KW_BATCH||LA165_1==KW_DAYOFWEEK||LA165_1==KW_HOLD_DDLTIME||LA165_1==KW_IGNORE||LA165_1==KW_NO_DROP||LA165_1==KW_OFFLINE||LA165_1==KW_PROTECTION||LA165_1==KW_READONLY||LA165_1==KW_TIMESTAMPTZ) ) {
					alt165=1;
				}
			}
			switch (alt165) {
				case 1 :
					// HiveParser.g:1694:16: KW_ROLE
					{
					KW_ROLE543=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_grantRole8983); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE543);

					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_grantRole8986);
			identifier544=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(identifier544.getTree());
			// HiveParser.g:1694:36: ( COMMA identifier )*
			loop166:
			while (true) {
				int alt166=2;
				int LA166_0 = input.LA(1);
				if ( (LA166_0==COMMA) ) {
					alt166=1;
				}

				switch (alt166) {
				case 1 :
					// HiveParser.g:1694:37: COMMA identifier
					{
					COMMA545=(Token)match(input,COMMA,FOLLOW_COMMA_in_grantRole8989); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA545);

					pushFollow(FOLLOW_identifier_in_grantRole8991);
					identifier546=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(identifier546.getTree());
					}
					break;

				default :
					break loop166;
				}
			}

			KW_TO547=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_grantRole8995); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TO.add(KW_TO547);

			pushFollow(FOLLOW_principalSpecification_in_grantRole8997);
			principalSpecification548=principalSpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_principalSpecification.add(principalSpecification548.getTree());
			// HiveParser.g:1694:85: ( withAdminOption )?
			int alt167=2;
			int LA167_0 = input.LA(1);
			if ( (LA167_0==KW_WITH) ) {
				alt167=1;
			}
			switch (alt167) {
				case 1 :
					// HiveParser.g:1694:85: withAdminOption
					{
					pushFollow(FOLLOW_withAdminOption_in_grantRole8999);
					withAdminOption549=withAdminOption();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_withAdminOption.add(withAdminOption549.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: withAdminOption, identifier, principalSpecification
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1695:5: -> ^( TOK_GRANT_ROLE principalSpecification ( withAdminOption )? ( identifier )+ )
			{
				// HiveParser.g:1695:8: ^( TOK_GRANT_ROLE principalSpecification ( withAdminOption )? ( identifier )+ )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_GRANT_ROLE, "TOK_GRANT_ROLE"), root_1);
				adaptor.addChild(root_1, stream_principalSpecification.nextTree());
				// HiveParser.g:1695:48: ( withAdminOption )?
				if ( stream_withAdminOption.hasNext() ) {
					adaptor.addChild(root_1, stream_withAdminOption.nextTree());
				}
				stream_withAdminOption.reset();

				if ( !(stream_identifier.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_identifier.hasNext() ) {
					adaptor.addChild(root_1, stream_identifier.nextTree());
				}
				stream_identifier.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "grantRole"


	public static class revokeRole_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "revokeRole"
	// HiveParser.g:1698:1: revokeRole : KW_REVOKE ( adminOptionFor )? ( KW_ROLE )? identifier ( COMMA identifier )* KW_FROM principalSpecification -> ^( TOK_REVOKE_ROLE principalSpecification ( adminOptionFor )? ( identifier )+ ) ;
	public final HiveParser.revokeRole_return revokeRole() throws RecognitionException {
		HiveParser.revokeRole_return retval = new HiveParser.revokeRole_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_REVOKE550=null;
		Token KW_ROLE552=null;
		Token COMMA554=null;
		Token KW_FROM556=null;
		ParserRuleReturnScope adminOptionFor551 =null;
		ParserRuleReturnScope identifier553 =null;
		ParserRuleReturnScope identifier555 =null;
		ParserRuleReturnScope principalSpecification557 =null;

		ASTNode KW_REVOKE550_tree=null;
		ASTNode KW_ROLE552_tree=null;
		ASTNode COMMA554_tree=null;
		ASTNode KW_FROM556_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
		RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
		RewriteRuleTokenStream stream_KW_REVOKE=new RewriteRuleTokenStream(adaptor,"token KW_REVOKE");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_adminOptionFor=new RewriteRuleSubtreeStream(adaptor,"rule adminOptionFor");
		RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");

		pushMsg(retval.start,"revoke role", state);
		try {
			// HiveParser.g:1701:5: ( KW_REVOKE ( adminOptionFor )? ( KW_ROLE )? identifier ( COMMA identifier )* KW_FROM principalSpecification -> ^( TOK_REVOKE_ROLE principalSpecification ( adminOptionFor )? ( identifier )+ ) )
			// HiveParser.g:1701:7: KW_REVOKE ( adminOptionFor )? ( KW_ROLE )? identifier ( COMMA identifier )* KW_FROM principalSpecification
			{
			KW_REVOKE550=(Token)match(input,KW_REVOKE,FOLLOW_KW_REVOKE_in_revokeRole9045); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REVOKE.add(KW_REVOKE550);

			// HiveParser.g:1701:17: ( adminOptionFor )?
			int alt168=2;
			int LA168_0 = input.LA(1);
			if ( (LA168_0==KW_ADMIN) ) {
				int LA168_1 = input.LA(2);
				if ( (LA168_1==KW_OPTION) ) {
					alt168=1;
				}
			}
			switch (alt168) {
				case 1 :
					// HiveParser.g:1701:17: adminOptionFor
					{
					pushFollow(FOLLOW_adminOptionFor_in_revokeRole9047);
					adminOptionFor551=adminOptionFor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_adminOptionFor.add(adminOptionFor551.getTree());
					}
					break;

			}

			// HiveParser.g:1701:33: ( KW_ROLE )?
			int alt169=2;
			int LA169_0 = input.LA(1);
			if ( (LA169_0==KW_ROLE) ) {
				int LA169_1 = input.LA(2);
				if ( (LA169_1==Identifier||(LA169_1 >= KW_ABORT && LA169_1 <= KW_AFTER)||LA169_1==KW_ALLOC_FRACTION||LA169_1==KW_ANALYZE||LA169_1==KW_ARCHIVE||(LA169_1 >= KW_ASC && LA169_1 <= KW_AST)||(LA169_1 >= KW_AUTOCOMMIT && LA169_1 <= KW_BEFORE)||(LA169_1 >= KW_BUCKET && LA169_1 <= KW_BUCKETS)||(LA169_1 >= KW_CACHE && LA169_1 <= KW_CASCADE)||LA169_1==KW_CHANGE||(LA169_1 >= KW_CHECK && LA169_1 <= KW_COLLECTION)||(LA169_1 >= KW_COLUMNS && LA169_1 <= KW_COMMENT)||(LA169_1 >= KW_COMPACT && LA169_1 <= KW_CONCATENATE)||LA169_1==KW_CONTINUE||LA169_1==KW_DATA||(LA169_1 >= KW_DATABASES && LA169_1 <= KW_DEBUG)||(LA169_1 >= KW_DEFAULT && LA169_1 <= KW_DEFINED)||(LA169_1 >= KW_DELIMITED && LA169_1 <= KW_DESC)||(LA169_1 >= KW_DETAIL && LA169_1 <= KW_DISABLE)||(LA169_1 >= KW_DISTRIBUTE && LA169_1 <= KW_DO)||LA169_1==KW_DOW||(LA169_1 >= KW_DUMP && LA169_1 <= KW_ELEM_TYPE)||LA169_1==KW_ENABLE||(LA169_1 >= KW_ENFORCED && LA169_1 <= KW_ESCAPED)||LA169_1==KW_EXCLUSIVE||(LA169_1 >= KW_EXPLAIN && LA169_1 <= KW_EXPRESSION)||(LA169_1 >= KW_FIELDS && LA169_1 <= KW_FIRST)||(LA169_1 >= KW_FORMAT && LA169_1 <= KW_FORMATTED)||LA169_1==KW_FUNCTIONS||LA169_1==KW_GROUP||(LA169_1 >= KW_HOUR && LA169_1 <= KW_IDXPROPERTIES)||(LA169_1 >= KW_INDEX && LA169_1 <= KW_INDEXES)||(LA169_1 >= KW_INPATH && LA169_1 <= KW_INPUTFORMAT)||(LA169_1 >= KW_ISOLATION && LA169_1 <= KW_JAR)||(LA169_1 >= KW_KEY && LA169_1 <= KW_LAST)||LA169_1==KW_LEVEL||(LA169_1 >= KW_LIMIT && LA169_1 <= KW_LOAD)||(LA169_1 >= KW_LOCATION && LA169_1 <= KW_LONG)||LA169_1==KW_MANAGEMENT||(LA169_1 >= KW_MAPJOIN && LA169_1 <= KW_MATERIALIZED)||LA169_1==KW_METADATA||(LA169_1 >= KW_MINUTE && LA169_1 <= KW_MONTH)||(LA169_1 >= KW_MOVE && LA169_1 <= KW_MSCK)||(LA169_1 >= KW_NORELY && LA169_1 <= KW_NOSCAN)||LA169_1==KW_NOVALIDATE||LA169_1==KW_NULLS||LA169_1==KW_OFFSET||(LA169_1 >= KW_OPERATOR && LA169_1 <= KW_OPTION)||LA169_1==KW_ORDER||(LA169_1 >= KW_OUTPUTDRIVER && LA169_1 <= KW_OUTPUTFORMAT)||(LA169_1 >= KW_OVERWRITE && LA169_1 <= KW_OWNER)||(LA169_1 >= KW_PARTITIONED && LA169_1 <= KW_PATH)||(LA169_1 >= KW_PLAN && LA169_1 <= KW_POOL)||LA169_1==KW_PRINCIPALS||(LA169_1 >= KW_PURGE && LA169_1 <= KW_QUERY_PARALLELISM)||LA169_1==KW_READ||(LA169_1 >= KW_REBUILD && LA169_1 <= KW_RECORDWRITER)||(LA169_1 >= KW_RELOAD && LA169_1 <= KW_RESTRICT)||LA169_1==KW_REWRITE||(LA169_1 >= KW_ROLE && LA169_1 <= KW_ROLES)||(LA169_1 >= KW_SCHEDULING_POLICY && LA169_1 <= KW_SECOND)||(LA169_1 >= KW_SEMI && LA169_1 <= KW_SERVER)||(LA169_1 >= KW_SETS && LA169_1 <= KW_SKEWED)||(LA169_1 >= KW_SNAPSHOT && LA169_1 <= KW_SSL)||(LA169_1 >= KW_STATISTICS && LA169_1 <= KW_SUMMARY)||LA169_1==KW_TABLES||(LA169_1 >= KW_TBLPROPERTIES && LA169_1 <= KW_TERMINATED)||LA169_1==KW_TINYINT||(LA169_1 >= KW_TOUCH && LA169_1 <= KW_TRANSACTIONS)||LA169_1==KW_UNARCHIVE||LA169_1==KW_UNDO||LA169_1==KW_UNIONTYPE||(LA169_1 >= KW_UNKNOWN && LA169_1 <= KW_UNSIGNED)||(LA169_1 >= KW_URI && LA169_1 <= KW_USE)||(LA169_1 >= KW_UTC && LA169_1 <= KW_VALIDATE)||LA169_1==KW_VALUE_TYPE||(LA169_1 >= KW_VECTORIZATION && LA169_1 <= KW_WEEK)||LA169_1==KW_WHILE||(LA169_1 >= KW_WORK && LA169_1 <= KW_ZONE)||LA169_1==KW_BATCH||LA169_1==KW_DAYOFWEEK||LA169_1==KW_HOLD_DDLTIME||LA169_1==KW_IGNORE||LA169_1==KW_NO_DROP||LA169_1==KW_OFFLINE||LA169_1==KW_PROTECTION||LA169_1==KW_READONLY||LA169_1==KW_TIMESTAMPTZ) ) {
					alt169=1;
				}
			}
			switch (alt169) {
				case 1 :
					// HiveParser.g:1701:33: KW_ROLE
					{
					KW_ROLE552=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_revokeRole9050); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE552);

					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_revokeRole9053);
			identifier553=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(identifier553.getTree());
			// HiveParser.g:1701:53: ( COMMA identifier )*
			loop170:
			while (true) {
				int alt170=2;
				int LA170_0 = input.LA(1);
				if ( (LA170_0==COMMA) ) {
					alt170=1;
				}

				switch (alt170) {
				case 1 :
					// HiveParser.g:1701:54: COMMA identifier
					{
					COMMA554=(Token)match(input,COMMA,FOLLOW_COMMA_in_revokeRole9056); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA554);

					pushFollow(FOLLOW_identifier_in_revokeRole9058);
					identifier555=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(identifier555.getTree());
					}
					break;

				default :
					break loop170;
				}
			}

			KW_FROM556=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_revokeRole9062); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM556);

			pushFollow(FOLLOW_principalSpecification_in_revokeRole9064);
			principalSpecification557=principalSpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_principalSpecification.add(principalSpecification557.getTree());
			// AST REWRITE
			// elements: identifier, principalSpecification, adminOptionFor
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1702:5: -> ^( TOK_REVOKE_ROLE principalSpecification ( adminOptionFor )? ( identifier )+ )
			{
				// HiveParser.g:1702:8: ^( TOK_REVOKE_ROLE principalSpecification ( adminOptionFor )? ( identifier )+ )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_REVOKE_ROLE, "TOK_REVOKE_ROLE"), root_1);
				adaptor.addChild(root_1, stream_principalSpecification.nextTree());
				// HiveParser.g:1702:49: ( adminOptionFor )?
				if ( stream_adminOptionFor.hasNext() ) {
					adaptor.addChild(root_1, stream_adminOptionFor.nextTree());
				}
				stream_adminOptionFor.reset();

				if ( !(stream_identifier.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_identifier.hasNext() ) {
					adaptor.addChild(root_1, stream_identifier.nextTree());
				}
				stream_identifier.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "revokeRole"


	public static class showRoleGrants_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "showRoleGrants"
	// HiveParser.g:1705:1: showRoleGrants : KW_SHOW KW_ROLE KW_GRANT principalName -> ^( TOK_SHOW_ROLE_GRANT principalName ) ;
	public final HiveParser.showRoleGrants_return showRoleGrants() throws RecognitionException {
		HiveParser.showRoleGrants_return retval = new HiveParser.showRoleGrants_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_SHOW558=null;
		Token KW_ROLE559=null;
		Token KW_GRANT560=null;
		ParserRuleReturnScope principalName561 =null;

		ASTNode KW_SHOW558_tree=null;
		ASTNode KW_ROLE559_tree=null;
		ASTNode KW_GRANT560_tree=null;
		RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
		RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
		RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
		RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");

		pushMsg(retval.start,"show role grants", state);
		try {
			// HiveParser.g:1708:5: ( KW_SHOW KW_ROLE KW_GRANT principalName -> ^( TOK_SHOW_ROLE_GRANT principalName ) )
			// HiveParser.g:1708:7: KW_SHOW KW_ROLE KW_GRANT principalName
			{
			KW_SHOW558=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showRoleGrants9109); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW558);

			KW_ROLE559=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_showRoleGrants9111); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE559);

			KW_GRANT560=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_showRoleGrants9113); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT560);

			pushFollow(FOLLOW_principalName_in_showRoleGrants9115);
			principalName561=principalName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_principalName.add(principalName561.getTree());
			// AST REWRITE
			// elements: principalName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1709:5: -> ^( TOK_SHOW_ROLE_GRANT principalName )
			{
				// HiveParser.g:1709:8: ^( TOK_SHOW_ROLE_GRANT principalName )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SHOW_ROLE_GRANT, "TOK_SHOW_ROLE_GRANT"), root_1);
				adaptor.addChild(root_1, stream_principalName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showRoleGrants"


	public static class showRoles_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "showRoles"
	// HiveParser.g:1713:1: showRoles : KW_SHOW KW_ROLES -> ^( TOK_SHOW_ROLES ) ;
	public final HiveParser.showRoles_return showRoles() throws RecognitionException {
		HiveParser.showRoles_return retval = new HiveParser.showRoles_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_SHOW562=null;
		Token KW_ROLES563=null;

		ASTNode KW_SHOW562_tree=null;
		ASTNode KW_ROLES563_tree=null;
		RewriteRuleTokenStream stream_KW_ROLES=new RewriteRuleTokenStream(adaptor,"token KW_ROLES");
		RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");

		pushMsg(retval.start,"show roles", state);
		try {
			// HiveParser.g:1716:5: ( KW_SHOW KW_ROLES -> ^( TOK_SHOW_ROLES ) )
			// HiveParser.g:1716:7: KW_SHOW KW_ROLES
			{
			KW_SHOW562=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showRoles9155); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW562);

			KW_ROLES563=(Token)match(input,KW_ROLES,FOLLOW_KW_ROLES_in_showRoles9157); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ROLES.add(KW_ROLES563);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1717:5: -> ^( TOK_SHOW_ROLES )
			{
				// HiveParser.g:1717:8: ^( TOK_SHOW_ROLES )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SHOW_ROLES, "TOK_SHOW_ROLES"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showRoles"


	public static class showCurrentRole_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "showCurrentRole"
	// HiveParser.g:1720:1: showCurrentRole : KW_SHOW KW_CURRENT KW_ROLES -> ^( TOK_SHOW_SET_ROLE ) ;
	public final HiveParser.showCurrentRole_return showCurrentRole() throws RecognitionException {
		HiveParser.showCurrentRole_return retval = new HiveParser.showCurrentRole_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_SHOW564=null;
		Token KW_CURRENT565=null;
		Token KW_ROLES566=null;

		ASTNode KW_SHOW564_tree=null;
		ASTNode KW_CURRENT565_tree=null;
		ASTNode KW_ROLES566_tree=null;
		RewriteRuleTokenStream stream_KW_ROLES=new RewriteRuleTokenStream(adaptor,"token KW_ROLES");
		RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
		RewriteRuleTokenStream stream_KW_CURRENT=new RewriteRuleTokenStream(adaptor,"token KW_CURRENT");

		pushMsg(retval.start,"show current role", state);
		try {
			// HiveParser.g:1723:5: ( KW_SHOW KW_CURRENT KW_ROLES -> ^( TOK_SHOW_SET_ROLE ) )
			// HiveParser.g:1723:7: KW_SHOW KW_CURRENT KW_ROLES
			{
			KW_SHOW564=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showCurrentRole9194); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW564);

			KW_CURRENT565=(Token)match(input,KW_CURRENT,FOLLOW_KW_CURRENT_in_showCurrentRole9196); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CURRENT.add(KW_CURRENT565);

			KW_ROLES566=(Token)match(input,KW_ROLES,FOLLOW_KW_ROLES_in_showCurrentRole9198); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ROLES.add(KW_ROLES566);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1724:5: -> ^( TOK_SHOW_SET_ROLE )
			{
				// HiveParser.g:1724:8: ^( TOK_SHOW_SET_ROLE )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SHOW_SET_ROLE, "TOK_SHOW_SET_ROLE"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showCurrentRole"


	public static class setRole_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "setRole"
	// HiveParser.g:1727:1: setRole : KW_SET KW_ROLE ( ( KW_ALL )=> (all= KW_ALL ) -> ^( TOK_SHOW_SET_ROLE Identifier[$all.text] ) | ( KW_NONE )=> (none= KW_NONE ) -> ^( TOK_SHOW_SET_ROLE Identifier[$none.text] ) | identifier -> ^( TOK_SHOW_SET_ROLE identifier ) ) ;
	public final HiveParser.setRole_return setRole() throws RecognitionException {
		HiveParser.setRole_return retval = new HiveParser.setRole_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token all=null;
		Token none=null;
		Token KW_SET567=null;
		Token KW_ROLE568=null;
		ParserRuleReturnScope identifier569 =null;

		ASTNode all_tree=null;
		ASTNode none_tree=null;
		ASTNode KW_SET567_tree=null;
		ASTNode KW_ROLE568_tree=null;
		RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
		RewriteRuleTokenStream stream_KW_NONE=new RewriteRuleTokenStream(adaptor,"token KW_NONE");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		pushMsg(retval.start,"set role", state);
		try {
			// HiveParser.g:1730:5: ( KW_SET KW_ROLE ( ( KW_ALL )=> (all= KW_ALL ) -> ^( TOK_SHOW_SET_ROLE Identifier[$all.text] ) | ( KW_NONE )=> (none= KW_NONE ) -> ^( TOK_SHOW_SET_ROLE Identifier[$none.text] ) | identifier -> ^( TOK_SHOW_SET_ROLE identifier ) ) )
			// HiveParser.g:1730:7: KW_SET KW_ROLE ( ( KW_ALL )=> (all= KW_ALL ) -> ^( TOK_SHOW_SET_ROLE Identifier[$all.text] ) | ( KW_NONE )=> (none= KW_NONE ) -> ^( TOK_SHOW_SET_ROLE Identifier[$none.text] ) | identifier -> ^( TOK_SHOW_SET_ROLE identifier ) )
			{
			KW_SET567=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_setRole9235); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET567);

			KW_ROLE568=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_setRole9237); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE568);

			// HiveParser.g:1731:5: ( ( KW_ALL )=> (all= KW_ALL ) -> ^( TOK_SHOW_SET_ROLE Identifier[$all.text] ) | ( KW_NONE )=> (none= KW_NONE ) -> ^( TOK_SHOW_SET_ROLE Identifier[$none.text] ) | identifier -> ^( TOK_SHOW_SET_ROLE identifier ) )
			int alt171=3;
			int LA171_0 = input.LA(1);
			if ( (LA171_0==KW_ALL) && (synpred14_HiveParser())) {
				alt171=1;
			}
			else if ( (LA171_0==KW_NONE) && (synpred15_HiveParser())) {
				alt171=2;
			}
			else if ( (LA171_0==Identifier||(LA171_0 >= KW_ABORT && LA171_0 <= KW_AFTER)||LA171_0==KW_ALLOC_FRACTION||LA171_0==KW_ANALYZE||LA171_0==KW_ARCHIVE||(LA171_0 >= KW_ASC && LA171_0 <= KW_AST)||(LA171_0 >= KW_AUTOCOMMIT && LA171_0 <= KW_BEFORE)||(LA171_0 >= KW_BUCKET && LA171_0 <= KW_BUCKETS)||(LA171_0 >= KW_CACHE && LA171_0 <= KW_CASCADE)||LA171_0==KW_CHANGE||(LA171_0 >= KW_CHECK && LA171_0 <= KW_COLLECTION)||(LA171_0 >= KW_COLUMNS && LA171_0 <= KW_COMMENT)||(LA171_0 >= KW_COMPACT && LA171_0 <= KW_CONCATENATE)||LA171_0==KW_CONTINUE||LA171_0==KW_DATA||(LA171_0 >= KW_DATABASES && LA171_0 <= KW_DEBUG)||(LA171_0 >= KW_DEFAULT && LA171_0 <= KW_DEFINED)||(LA171_0 >= KW_DELIMITED && LA171_0 <= KW_DESC)||(LA171_0 >= KW_DETAIL && LA171_0 <= KW_DISABLE)||(LA171_0 >= KW_DISTRIBUTE && LA171_0 <= KW_DO)||LA171_0==KW_DOW||(LA171_0 >= KW_DUMP && LA171_0 <= KW_ELEM_TYPE)||LA171_0==KW_ENABLE||(LA171_0 >= KW_ENFORCED && LA171_0 <= KW_ESCAPED)||LA171_0==KW_EXCLUSIVE||(LA171_0 >= KW_EXPLAIN && LA171_0 <= KW_EXPRESSION)||(LA171_0 >= KW_FIELDS && LA171_0 <= KW_FIRST)||(LA171_0 >= KW_FORMAT && LA171_0 <= KW_FORMATTED)||LA171_0==KW_FUNCTIONS||LA171_0==KW_GROUP||(LA171_0 >= KW_HOUR && LA171_0 <= KW_IDXPROPERTIES)||(LA171_0 >= KW_INDEX && LA171_0 <= KW_INDEXES)||(LA171_0 >= KW_INPATH && LA171_0 <= KW_INPUTFORMAT)||(LA171_0 >= KW_ISOLATION && LA171_0 <= KW_JAR)||(LA171_0 >= KW_KEY && LA171_0 <= KW_LAST)||LA171_0==KW_LEVEL||(LA171_0 >= KW_LIMIT && LA171_0 <= KW_LOAD)||(LA171_0 >= KW_LOCATION && LA171_0 <= KW_LONG)||LA171_0==KW_MANAGEMENT||(LA171_0 >= KW_MAPJOIN && LA171_0 <= KW_MATERIALIZED)||LA171_0==KW_METADATA||(LA171_0 >= KW_MINUTE && LA171_0 <= KW_MONTH)||(LA171_0 >= KW_MOVE && LA171_0 <= KW_MSCK)||(LA171_0 >= KW_NORELY && LA171_0 <= KW_NOSCAN)||LA171_0==KW_NOVALIDATE||LA171_0==KW_NULLS||LA171_0==KW_OFFSET||(LA171_0 >= KW_OPERATOR && LA171_0 <= KW_OPTION)||LA171_0==KW_ORDER||(LA171_0 >= KW_OUTPUTDRIVER && LA171_0 <= KW_OUTPUTFORMAT)||(LA171_0 >= KW_OVERWRITE && LA171_0 <= KW_OWNER)||(LA171_0 >= KW_PARTITIONED && LA171_0 <= KW_PATH)||(LA171_0 >= KW_PLAN && LA171_0 <= KW_POOL)||LA171_0==KW_PRINCIPALS||(LA171_0 >= KW_PURGE && LA171_0 <= KW_QUERY_PARALLELISM)||LA171_0==KW_READ||(LA171_0 >= KW_REBUILD && LA171_0 <= KW_RECORDWRITER)||(LA171_0 >= KW_RELOAD && LA171_0 <= KW_RESTRICT)||LA171_0==KW_REWRITE||(LA171_0 >= KW_ROLE && LA171_0 <= KW_ROLES)||(LA171_0 >= KW_SCHEDULING_POLICY && LA171_0 <= KW_SECOND)||(LA171_0 >= KW_SEMI && LA171_0 <= KW_SERVER)||(LA171_0 >= KW_SETS && LA171_0 <= KW_SKEWED)||(LA171_0 >= KW_SNAPSHOT && LA171_0 <= KW_SSL)||(LA171_0 >= KW_STATISTICS && LA171_0 <= KW_SUMMARY)||LA171_0==KW_TABLES||(LA171_0 >= KW_TBLPROPERTIES && LA171_0 <= KW_TERMINATED)||LA171_0==KW_TINYINT||(LA171_0 >= KW_TOUCH && LA171_0 <= KW_TRANSACTIONS)||LA171_0==KW_UNARCHIVE||LA171_0==KW_UNDO||LA171_0==KW_UNIONTYPE||(LA171_0 >= KW_UNKNOWN && LA171_0 <= KW_UNSIGNED)||(LA171_0 >= KW_URI && LA171_0 <= KW_USE)||(LA171_0 >= KW_UTC && LA171_0 <= KW_VALIDATE)||LA171_0==KW_VALUE_TYPE||(LA171_0 >= KW_VECTORIZATION && LA171_0 <= KW_WEEK)||LA171_0==KW_WHILE||(LA171_0 >= KW_WORK && LA171_0 <= KW_ZONE)||LA171_0==KW_BATCH||LA171_0==KW_DAYOFWEEK||LA171_0==KW_HOLD_DDLTIME||LA171_0==KW_IGNORE||LA171_0==KW_NO_DROP||LA171_0==KW_OFFLINE||LA171_0==KW_PROTECTION||LA171_0==KW_READONLY||LA171_0==KW_TIMESTAMPTZ) ) {
				alt171=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 171, 0, input);
				throw nvae;
			}

			switch (alt171) {
				case 1 :
					// HiveParser.g:1732:5: ( KW_ALL )=> (all= KW_ALL )
					{
					// HiveParser.g:1732:17: (all= KW_ALL )
					// HiveParser.g:1732:18: all= KW_ALL
					{
					all=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_setRole9258); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALL.add(all);

					}

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1732:30: -> ^( TOK_SHOW_SET_ROLE Identifier[$all.text] )
					{
						// HiveParser.g:1732:33: ^( TOK_SHOW_SET_ROLE Identifier[$all.text] )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SHOW_SET_ROLE, "TOK_SHOW_SET_ROLE"), root_1);
						adaptor.addChild(root_1, (ASTNode)adaptor.create(Identifier, (all!=null?all.getText():null)));
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:1734:5: ( KW_NONE )=> (none= KW_NONE )
					{
					// HiveParser.g:1734:18: (none= KW_NONE )
					// HiveParser.g:1734:19: none= KW_NONE
					{
					none=(Token)match(input,KW_NONE,FOLLOW_KW_NONE_in_setRole9289); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NONE.add(none);

					}

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1734:33: -> ^( TOK_SHOW_SET_ROLE Identifier[$none.text] )
					{
						// HiveParser.g:1734:36: ^( TOK_SHOW_SET_ROLE Identifier[$none.text] )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SHOW_SET_ROLE, "TOK_SHOW_SET_ROLE"), root_1);
						adaptor.addChild(root_1, (ASTNode)adaptor.create(Identifier, (none!=null?none.getText():null)));
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// HiveParser.g:1736:5: identifier
					{
					pushFollow(FOLLOW_identifier_in_setRole9311);
					identifier569=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(identifier569.getTree());
					// AST REWRITE
					// elements: identifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1736:16: -> ^( TOK_SHOW_SET_ROLE identifier )
					{
						// HiveParser.g:1736:19: ^( TOK_SHOW_SET_ROLE identifier )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SHOW_SET_ROLE, "TOK_SHOW_SET_ROLE"), root_1);
						adaptor.addChild(root_1, stream_identifier.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "setRole"


	public static class showGrants_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "showGrants"
	// HiveParser.g:1740:1: showGrants : KW_SHOW KW_GRANT ( principalName )? ( KW_ON privilegeIncludeColObject )? -> ^( TOK_SHOW_GRANT ( principalName )? ( privilegeIncludeColObject )? ) ;
	public final HiveParser.showGrants_return showGrants() throws RecognitionException {
		HiveParser.showGrants_return retval = new HiveParser.showGrants_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_SHOW570=null;
		Token KW_GRANT571=null;
		Token KW_ON573=null;
		ParserRuleReturnScope principalName572 =null;
		ParserRuleReturnScope privilegeIncludeColObject574 =null;

		ASTNode KW_SHOW570_tree=null;
		ASTNode KW_GRANT571_tree=null;
		ASTNode KW_ON573_tree=null;
		RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
		RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleSubtreeStream stream_privilegeIncludeColObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeIncludeColObject");
		RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");

		pushMsg(retval.start,"show grants", state);
		try {
			// HiveParser.g:1743:5: ( KW_SHOW KW_GRANT ( principalName )? ( KW_ON privilegeIncludeColObject )? -> ^( TOK_SHOW_GRANT ( principalName )? ( privilegeIncludeColObject )? ) )
			// HiveParser.g:1743:7: KW_SHOW KW_GRANT ( principalName )? ( KW_ON privilegeIncludeColObject )?
			{
			KW_SHOW570=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showGrants9352); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW570);

			KW_GRANT571=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_showGrants9354); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT571);

			// HiveParser.g:1743:24: ( principalName )?
			int alt172=2;
			int LA172_0 = input.LA(1);
			if ( (LA172_0==KW_GROUP||LA172_0==KW_ROLE||LA172_0==KW_USER) ) {
				alt172=1;
			}
			switch (alt172) {
				case 1 :
					// HiveParser.g:1743:24: principalName
					{
					pushFollow(FOLLOW_principalName_in_showGrants9356);
					principalName572=principalName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_principalName.add(principalName572.getTree());
					}
					break;

			}

			// HiveParser.g:1743:39: ( KW_ON privilegeIncludeColObject )?
			int alt173=2;
			int LA173_0 = input.LA(1);
			if ( (LA173_0==KW_ON) ) {
				alt173=1;
			}
			switch (alt173) {
				case 1 :
					// HiveParser.g:1743:40: KW_ON privilegeIncludeColObject
					{
					KW_ON573=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_showGrants9360); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON573);

					pushFollow(FOLLOW_privilegeIncludeColObject_in_showGrants9362);
					privilegeIncludeColObject574=privilegeIncludeColObject();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_privilegeIncludeColObject.add(privilegeIncludeColObject574.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: principalName, privilegeIncludeColObject
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1744:5: -> ^( TOK_SHOW_GRANT ( principalName )? ( privilegeIncludeColObject )? )
			{
				// HiveParser.g:1744:8: ^( TOK_SHOW_GRANT ( principalName )? ( privilegeIncludeColObject )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SHOW_GRANT, "TOK_SHOW_GRANT"), root_1);
				// HiveParser.g:1744:25: ( principalName )?
				if ( stream_principalName.hasNext() ) {
					adaptor.addChild(root_1, stream_principalName.nextTree());
				}
				stream_principalName.reset();

				// HiveParser.g:1744:40: ( privilegeIncludeColObject )?
				if ( stream_privilegeIncludeColObject.hasNext() ) {
					adaptor.addChild(root_1, stream_privilegeIncludeColObject.nextTree());
				}
				stream_privilegeIncludeColObject.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showGrants"


	public static class showRolePrincipals_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "showRolePrincipals"
	// HiveParser.g:1747:1: showRolePrincipals : KW_SHOW KW_PRINCIPALS roleName= identifier -> ^( TOK_SHOW_ROLE_PRINCIPALS $roleName) ;
	public final HiveParser.showRolePrincipals_return showRolePrincipals() throws RecognitionException {
		HiveParser.showRolePrincipals_return retval = new HiveParser.showRolePrincipals_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_SHOW575=null;
		Token KW_PRINCIPALS576=null;
		ParserRuleReturnScope roleName =null;

		ASTNode KW_SHOW575_tree=null;
		ASTNode KW_PRINCIPALS576_tree=null;
		RewriteRuleTokenStream stream_KW_PRINCIPALS=new RewriteRuleTokenStream(adaptor,"token KW_PRINCIPALS");
		RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		pushMsg(retval.start,"show role principals", state);
		try {
			// HiveParser.g:1750:5: ( KW_SHOW KW_PRINCIPALS roleName= identifier -> ^( TOK_SHOW_ROLE_PRINCIPALS $roleName) )
			// HiveParser.g:1750:7: KW_SHOW KW_PRINCIPALS roleName= identifier
			{
			KW_SHOW575=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showRolePrincipals9407); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW575);

			KW_PRINCIPALS576=(Token)match(input,KW_PRINCIPALS,FOLLOW_KW_PRINCIPALS_in_showRolePrincipals9409); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_PRINCIPALS.add(KW_PRINCIPALS576);

			pushFollow(FOLLOW_identifier_in_showRolePrincipals9413);
			roleName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(roleName.getTree());
			// AST REWRITE
			// elements: roleName
			// token labels: 
			// rule labels: roleName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_roleName=new RewriteRuleSubtreeStream(adaptor,"rule roleName",roleName!=null?roleName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1751:5: -> ^( TOK_SHOW_ROLE_PRINCIPALS $roleName)
			{
				// HiveParser.g:1751:8: ^( TOK_SHOW_ROLE_PRINCIPALS $roleName)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SHOW_ROLE_PRINCIPALS, "TOK_SHOW_ROLE_PRINCIPALS"), root_1);
				adaptor.addChild(root_1, stream_roleName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showRolePrincipals"


	public static class privilegeIncludeColObject_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "privilegeIncludeColObject"
	// HiveParser.g:1755:1: privilegeIncludeColObject : ( ( KW_ALL )=> KW_ALL -> ^( TOK_RESOURCE_ALL ) | privObjectCols -> ^( TOK_PRIV_OBJECT_COL privObjectCols ) );
	public final HiveParser.privilegeIncludeColObject_return privilegeIncludeColObject() throws RecognitionException {
		HiveParser.privilegeIncludeColObject_return retval = new HiveParser.privilegeIncludeColObject_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_ALL577=null;
		ParserRuleReturnScope privObjectCols578 =null;

		ASTNode KW_ALL577_tree=null;
		RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
		RewriteRuleSubtreeStream stream_privObjectCols=new RewriteRuleSubtreeStream(adaptor,"rule privObjectCols");

		pushMsg(retval.start,"privilege object including columns", state);
		try {
			// HiveParser.g:1758:5: ( ( KW_ALL )=> KW_ALL -> ^( TOK_RESOURCE_ALL ) | privObjectCols -> ^( TOK_PRIV_OBJECT_COL privObjectCols ) )
			int alt174=2;
			int LA174_0 = input.LA(1);
			if ( (LA174_0==KW_ALL) && (synpred16_HiveParser())) {
				alt174=1;
			}
			else if ( (LA174_0==Identifier||(LA174_0 >= KW_ABORT && LA174_0 <= KW_AFTER)||LA174_0==KW_ALLOC_FRACTION||LA174_0==KW_ANALYZE||LA174_0==KW_ARCHIVE||(LA174_0 >= KW_ASC && LA174_0 <= KW_AST)||(LA174_0 >= KW_AUTOCOMMIT && LA174_0 <= KW_BEFORE)||(LA174_0 >= KW_BUCKET && LA174_0 <= KW_BUCKETS)||(LA174_0 >= KW_CACHE && LA174_0 <= KW_CASCADE)||LA174_0==KW_CHANGE||(LA174_0 >= KW_CHECK && LA174_0 <= KW_COLLECTION)||(LA174_0 >= KW_COLUMNS && LA174_0 <= KW_COMMENT)||(LA174_0 >= KW_COMPACT && LA174_0 <= KW_CONCATENATE)||LA174_0==KW_CONTINUE||(LA174_0 >= KW_DATA && LA174_0 <= KW_DEBUG)||(LA174_0 >= KW_DEFAULT && LA174_0 <= KW_DEFINED)||(LA174_0 >= KW_DELIMITED && LA174_0 <= KW_DESC)||(LA174_0 >= KW_DETAIL && LA174_0 <= KW_DISABLE)||(LA174_0 >= KW_DISTRIBUTE && LA174_0 <= KW_DO)||LA174_0==KW_DOW||(LA174_0 >= KW_DUMP && LA174_0 <= KW_ELEM_TYPE)||LA174_0==KW_ENABLE||(LA174_0 >= KW_ENFORCED && LA174_0 <= KW_ESCAPED)||LA174_0==KW_EXCLUSIVE||(LA174_0 >= KW_EXPLAIN && LA174_0 <= KW_EXPRESSION)||(LA174_0 >= KW_FIELDS && LA174_0 <= KW_FIRST)||(LA174_0 >= KW_FORMAT && LA174_0 <= KW_FORMATTED)||LA174_0==KW_FUNCTIONS||LA174_0==KW_GROUP||(LA174_0 >= KW_HOUR && LA174_0 <= KW_IDXPROPERTIES)||(LA174_0 >= KW_INDEX && LA174_0 <= KW_INDEXES)||(LA174_0 >= KW_INPATH && LA174_0 <= KW_INPUTFORMAT)||(LA174_0 >= KW_ISOLATION && LA174_0 <= KW_JAR)||(LA174_0 >= KW_KEY && LA174_0 <= KW_LAST)||LA174_0==KW_LEVEL||(LA174_0 >= KW_LIMIT && LA174_0 <= KW_LOAD)||(LA174_0 >= KW_LOCATION && LA174_0 <= KW_LONG)||LA174_0==KW_MANAGEMENT||(LA174_0 >= KW_MAPJOIN && LA174_0 <= KW_MATERIALIZED)||LA174_0==KW_METADATA||(LA174_0 >= KW_MINUTE && LA174_0 <= KW_MONTH)||(LA174_0 >= KW_MOVE && LA174_0 <= KW_MSCK)||(LA174_0 >= KW_NORELY && LA174_0 <= KW_NOSCAN)||LA174_0==KW_NOVALIDATE||LA174_0==KW_NULLS||LA174_0==KW_OFFSET||(LA174_0 >= KW_OPERATOR && LA174_0 <= KW_OPTION)||LA174_0==KW_ORDER||(LA174_0 >= KW_OUTPUTDRIVER && LA174_0 <= KW_OUTPUTFORMAT)||(LA174_0 >= KW_OVERWRITE && LA174_0 <= KW_OWNER)||(LA174_0 >= KW_PARTITIONED && LA174_0 <= KW_PATH)||(LA174_0 >= KW_PLAN && LA174_0 <= KW_POOL)||LA174_0==KW_PRINCIPALS||(LA174_0 >= KW_PURGE && LA174_0 <= KW_QUERY_PARALLELISM)||LA174_0==KW_READ||(LA174_0 >= KW_REBUILD && LA174_0 <= KW_RECORDWRITER)||(LA174_0 >= KW_RELOAD && LA174_0 <= KW_RESTRICT)||LA174_0==KW_REWRITE||(LA174_0 >= KW_ROLE && LA174_0 <= KW_ROLES)||(LA174_0 >= KW_SCHEDULING_POLICY && LA174_0 <= KW_SECOND)||(LA174_0 >= KW_SEMI && LA174_0 <= KW_SERVER)||(LA174_0 >= KW_SETS && LA174_0 <= KW_SKEWED)||(LA174_0 >= KW_SNAPSHOT && LA174_0 <= KW_SSL)||(LA174_0 >= KW_STATISTICS && LA174_0 <= KW_SUMMARY)||(LA174_0 >= KW_TABLE && LA174_0 <= KW_TABLES)||(LA174_0 >= KW_TBLPROPERTIES && LA174_0 <= KW_TERMINATED)||LA174_0==KW_TINYINT||(LA174_0 >= KW_TOUCH && LA174_0 <= KW_TRANSACTIONS)||LA174_0==KW_UNARCHIVE||LA174_0==KW_UNDO||LA174_0==KW_UNIONTYPE||(LA174_0 >= KW_UNKNOWN && LA174_0 <= KW_UNSIGNED)||(LA174_0 >= KW_URI && LA174_0 <= KW_USE)||(LA174_0 >= KW_UTC && LA174_0 <= KW_VALIDATE)||LA174_0==KW_VALUE_TYPE||(LA174_0 >= KW_VECTORIZATION && LA174_0 <= KW_WEEK)||LA174_0==KW_WHILE||(LA174_0 >= KW_WORK && LA174_0 <= KW_ZONE)||LA174_0==KW_BATCH||LA174_0==KW_DAYOFWEEK||LA174_0==KW_HOLD_DDLTIME||LA174_0==KW_IGNORE||LA174_0==KW_NO_DROP||LA174_0==KW_OFFLINE||LA174_0==KW_PROTECTION||LA174_0==KW_READONLY||LA174_0==KW_TIMESTAMPTZ) ) {
				alt174=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 174, 0, input);
				throw nvae;
			}

			switch (alt174) {
				case 1 :
					// HiveParser.g:1758:7: ( KW_ALL )=> KW_ALL
					{
					KW_ALL577=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_privilegeIncludeColObject9460); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALL.add(KW_ALL577);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1758:26: -> ^( TOK_RESOURCE_ALL )
					{
						// HiveParser.g:1758:29: ^( TOK_RESOURCE_ALL )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_RESOURCE_ALL, "TOK_RESOURCE_ALL"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:1759:7: privObjectCols
					{
					pushFollow(FOLLOW_privObjectCols_in_privilegeIncludeColObject9474);
					privObjectCols578=privObjectCols();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_privObjectCols.add(privObjectCols578.getTree());
					// AST REWRITE
					// elements: privObjectCols
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1759:22: -> ^( TOK_PRIV_OBJECT_COL privObjectCols )
					{
						// HiveParser.g:1759:25: ^( TOK_PRIV_OBJECT_COL privObjectCols )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_PRIV_OBJECT_COL, "TOK_PRIV_OBJECT_COL"), root_1);
						adaptor.addChild(root_1, stream_privObjectCols.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privilegeIncludeColObject"


	public static class privilegeObject_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "privilegeObject"
	// HiveParser.g:1762:1: privilegeObject : KW_ON privObject -> ^( TOK_PRIV_OBJECT privObject ) ;
	public final HiveParser.privilegeObject_return privilegeObject() throws RecognitionException {
		HiveParser.privilegeObject_return retval = new HiveParser.privilegeObject_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_ON579=null;
		ParserRuleReturnScope privObject580 =null;

		ASTNode KW_ON579_tree=null;
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleSubtreeStream stream_privObject=new RewriteRuleSubtreeStream(adaptor,"rule privObject");

		pushMsg(retval.start,"privilege object", state);
		try {
			// HiveParser.g:1765:5: ( KW_ON privObject -> ^( TOK_PRIV_OBJECT privObject ) )
			// HiveParser.g:1765:7: KW_ON privObject
			{
			KW_ON579=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_privilegeObject9509); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON579);

			pushFollow(FOLLOW_privObject_in_privilegeObject9511);
			privObject580=privObject();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_privObject.add(privObject580.getTree());
			// AST REWRITE
			// elements: privObject
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1765:24: -> ^( TOK_PRIV_OBJECT privObject )
			{
				// HiveParser.g:1765:27: ^( TOK_PRIV_OBJECT privObject )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_PRIV_OBJECT, "TOK_PRIV_OBJECT"), root_1);
				adaptor.addChild(root_1, stream_privObject.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privilegeObject"


	public static class privObject_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "privObject"
	// HiveParser.g:1769:1: privObject : ( ( KW_DATABASE | KW_SCHEMA ) identifier -> ^( TOK_DB_TYPE identifier ) | ( KW_TABLE )? tableName ( partitionSpec )? -> ^( TOK_TABLE_TYPE tableName ( partitionSpec )? ) | KW_URI (path= StringLiteral ) -> ^( TOK_URI_TYPE $path) | KW_SERVER identifier -> ^( TOK_SERVER_TYPE identifier ) );
	public final HiveParser.privObject_return privObject() throws RecognitionException {
		HiveParser.privObject_return retval = new HiveParser.privObject_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token path=null;
		Token KW_DATABASE581=null;
		Token KW_SCHEMA582=null;
		Token KW_TABLE584=null;
		Token KW_URI587=null;
		Token KW_SERVER588=null;
		ParserRuleReturnScope identifier583 =null;
		ParserRuleReturnScope tableName585 =null;
		ParserRuleReturnScope partitionSpec586 =null;
		ParserRuleReturnScope identifier589 =null;

		ASTNode path_tree=null;
		ASTNode KW_DATABASE581_tree=null;
		ASTNode KW_SCHEMA582_tree=null;
		ASTNode KW_TABLE584_tree=null;
		ASTNode KW_URI587_tree=null;
		ASTNode KW_SERVER588_tree=null;
		RewriteRuleTokenStream stream_KW_SERVER=new RewriteRuleTokenStream(adaptor,"token KW_SERVER");
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_URI=new RewriteRuleTokenStream(adaptor,"token KW_URI");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		try {
			// HiveParser.g:1770:5: ( ( KW_DATABASE | KW_SCHEMA ) identifier -> ^( TOK_DB_TYPE identifier ) | ( KW_TABLE )? tableName ( partitionSpec )? -> ^( TOK_TABLE_TYPE tableName ( partitionSpec )? ) | KW_URI (path= StringLiteral ) -> ^( TOK_URI_TYPE $path) | KW_SERVER identifier -> ^( TOK_SERVER_TYPE identifier ) )
			int alt178=4;
			switch ( input.LA(1) ) {
			case KW_DATABASE:
				{
				alt178=1;
				}
				break;
			case KW_SCHEMA:
				{
				int LA178_2 = input.LA(2);
				if ( (LA178_2==Identifier||(LA178_2 >= KW_ABORT && LA178_2 <= KW_AFTER)||LA178_2==KW_ALLOC_FRACTION||LA178_2==KW_ANALYZE||LA178_2==KW_ARCHIVE||(LA178_2 >= KW_ASC && LA178_2 <= KW_AST)||(LA178_2 >= KW_AUTOCOMMIT && LA178_2 <= KW_BEFORE)||(LA178_2 >= KW_BUCKET && LA178_2 <= KW_BUCKETS)||(LA178_2 >= KW_CACHE && LA178_2 <= KW_CASCADE)||LA178_2==KW_CHANGE||(LA178_2 >= KW_CHECK && LA178_2 <= KW_COLLECTION)||(LA178_2 >= KW_COLUMNS && LA178_2 <= KW_COMMENT)||(LA178_2 >= KW_COMPACT && LA178_2 <= KW_CONCATENATE)||LA178_2==KW_CONTINUE||LA178_2==KW_DATA||(LA178_2 >= KW_DATABASES && LA178_2 <= KW_DEBUG)||(LA178_2 >= KW_DEFAULT && LA178_2 <= KW_DEFINED)||(LA178_2 >= KW_DELIMITED && LA178_2 <= KW_DESC)||(LA178_2 >= KW_DETAIL && LA178_2 <= KW_DISABLE)||(LA178_2 >= KW_DISTRIBUTE && LA178_2 <= KW_DO)||LA178_2==KW_DOW||(LA178_2 >= KW_DUMP && LA178_2 <= KW_ELEM_TYPE)||LA178_2==KW_ENABLE||(LA178_2 >= KW_ENFORCED && LA178_2 <= KW_ESCAPED)||LA178_2==KW_EXCLUSIVE||(LA178_2 >= KW_EXPLAIN && LA178_2 <= KW_EXPRESSION)||(LA178_2 >= KW_FIELDS && LA178_2 <= KW_FIRST)||(LA178_2 >= KW_FORMAT && LA178_2 <= KW_FORMATTED)||LA178_2==KW_FUNCTIONS||LA178_2==KW_GROUP||(LA178_2 >= KW_HOUR && LA178_2 <= KW_IDXPROPERTIES)||(LA178_2 >= KW_INDEX && LA178_2 <= KW_INDEXES)||(LA178_2 >= KW_INPATH && LA178_2 <= KW_INPUTFORMAT)||(LA178_2 >= KW_ISOLATION && LA178_2 <= KW_JAR)||(LA178_2 >= KW_KEY && LA178_2 <= KW_LAST)||LA178_2==KW_LEVEL||(LA178_2 >= KW_LIMIT && LA178_2 <= KW_LOAD)||(LA178_2 >= KW_LOCATION && LA178_2 <= KW_LONG)||LA178_2==KW_MANAGEMENT||(LA178_2 >= KW_MAPJOIN && LA178_2 <= KW_MATERIALIZED)||LA178_2==KW_METADATA||(LA178_2 >= KW_MINUTE && LA178_2 <= KW_MONTH)||(LA178_2 >= KW_MOVE && LA178_2 <= KW_MSCK)||(LA178_2 >= KW_NORELY && LA178_2 <= KW_NOSCAN)||LA178_2==KW_NOVALIDATE||LA178_2==KW_NULLS||LA178_2==KW_OFFSET||(LA178_2 >= KW_OPERATOR && LA178_2 <= KW_OPTION)||LA178_2==KW_ORDER||(LA178_2 >= KW_OUTPUTDRIVER && LA178_2 <= KW_OUTPUTFORMAT)||(LA178_2 >= KW_OVERWRITE && LA178_2 <= KW_OWNER)||(LA178_2 >= KW_PARTITIONED && LA178_2 <= KW_PATH)||(LA178_2 >= KW_PLAN && LA178_2 <= KW_POOL)||LA178_2==KW_PRINCIPALS||(LA178_2 >= KW_PURGE && LA178_2 <= KW_QUERY_PARALLELISM)||LA178_2==KW_READ||(LA178_2 >= KW_REBUILD && LA178_2 <= KW_RECORDWRITER)||(LA178_2 >= KW_RELOAD && LA178_2 <= KW_RESTRICT)||LA178_2==KW_REWRITE||(LA178_2 >= KW_ROLE && LA178_2 <= KW_ROLES)||(LA178_2 >= KW_SCHEDULING_POLICY && LA178_2 <= KW_SECOND)||(LA178_2 >= KW_SEMI && LA178_2 <= KW_SERVER)||(LA178_2 >= KW_SETS && LA178_2 <= KW_SKEWED)||(LA178_2 >= KW_SNAPSHOT && LA178_2 <= KW_SSL)||(LA178_2 >= KW_STATISTICS && LA178_2 <= KW_SUMMARY)||LA178_2==KW_TABLES||(LA178_2 >= KW_TBLPROPERTIES && LA178_2 <= KW_TERMINATED)||LA178_2==KW_TINYINT||(LA178_2 >= KW_TOUCH && LA178_2 <= KW_TRANSACTIONS)||LA178_2==KW_UNARCHIVE||LA178_2==KW_UNDO||LA178_2==KW_UNIONTYPE||(LA178_2 >= KW_UNKNOWN && LA178_2 <= KW_UNSIGNED)||(LA178_2 >= KW_URI && LA178_2 <= KW_USE)||(LA178_2 >= KW_UTC && LA178_2 <= KW_VALIDATE)||LA178_2==KW_VALUE_TYPE||(LA178_2 >= KW_VECTORIZATION && LA178_2 <= KW_WEEK)||LA178_2==KW_WHILE||(LA178_2 >= KW_WORK && LA178_2 <= KW_ZONE)||LA178_2==KW_BATCH||LA178_2==KW_DAYOFWEEK||LA178_2==KW_HOLD_DDLTIME||LA178_2==KW_IGNORE||LA178_2==KW_NO_DROP||LA178_2==KW_OFFLINE||LA178_2==KW_PROTECTION||LA178_2==KW_READONLY||LA178_2==KW_TIMESTAMPTZ) ) {
					alt178=1;
				}
				else if ( (LA178_2==DOT||LA178_2==KW_FROM||LA178_2==KW_PARTITION||LA178_2==KW_TO) ) {
					alt178=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 178, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case Identifier:
			case KW_ABORT:
			case KW_ACTIVATE:
			case KW_ACTIVE:
			case KW_ADD:
			case KW_ADMIN:
			case KW_AFTER:
			case KW_ALLOC_FRACTION:
			case KW_ANALYZE:
			case KW_ARCHIVE:
			case KW_ASC:
			case KW_AST:
			case KW_AUTOCOMMIT:
			case KW_BEFORE:
			case KW_BUCKET:
			case KW_BUCKETS:
			case KW_CACHE:
			case KW_CASCADE:
			case KW_CHANGE:
			case KW_CHECK:
			case KW_CLUSTER:
			case KW_CLUSTERED:
			case KW_CLUSTERSTATUS:
			case KW_COLLECTION:
			case KW_COLUMNS:
			case KW_COMMENT:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_COMPUTE:
			case KW_CONCATENATE:
			case KW_CONTINUE:
			case KW_DATA:
			case KW_DATABASES:
			case KW_DATE:
			case KW_DATETIME:
			case KW_DAY:
			case KW_DBPROPERTIES:
			case KW_DEBUG:
			case KW_DEFAULT:
			case KW_DEFERRED:
			case KW_DEFINED:
			case KW_DELIMITED:
			case KW_DEPENDENCY:
			case KW_DESC:
			case KW_DETAIL:
			case KW_DIRECTORIES:
			case KW_DIRECTORY:
			case KW_DISABLE:
			case KW_DISTRIBUTE:
			case KW_DO:
			case KW_DOW:
			case KW_DUMP:
			case KW_ELEM_TYPE:
			case KW_ENABLE:
			case KW_ENFORCED:
			case KW_ESCAPED:
			case KW_EXCLUSIVE:
			case KW_EXPLAIN:
			case KW_EXPORT:
			case KW_EXPRESSION:
			case KW_FIELDS:
			case KW_FILE:
			case KW_FILEFORMAT:
			case KW_FIRST:
			case KW_FORMAT:
			case KW_FORMATTED:
			case KW_FUNCTIONS:
			case KW_GROUP:
			case KW_HOUR:
			case KW_IDXPROPERTIES:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_INPATH:
			case KW_INPUTDRIVER:
			case KW_INPUTFORMAT:
			case KW_ISOLATION:
			case KW_ITEMS:
			case KW_JAR:
			case KW_KEY:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_KILL:
			case KW_LAST:
			case KW_LEVEL:
			case KW_LIMIT:
			case KW_LINES:
			case KW_LOAD:
			case KW_LOCATION:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_LOGICAL:
			case KW_LONG:
			case KW_MANAGEMENT:
			case KW_MAPJOIN:
			case KW_MAPPING:
			case KW_MATCHED:
			case KW_MATERIALIZED:
			case KW_METADATA:
			case KW_MINUTE:
			case KW_MONTH:
			case KW_MOVE:
			case KW_MSCK:
			case KW_NORELY:
			case KW_NOSCAN:
			case KW_NOVALIDATE:
			case KW_NULLS:
			case KW_OFFSET:
			case KW_OPERATOR:
			case KW_OPTION:
			case KW_ORDER:
			case KW_OUTPUTDRIVER:
			case KW_OUTPUTFORMAT:
			case KW_OVERWRITE:
			case KW_OWNER:
			case KW_PARTITIONED:
			case KW_PARTITIONS:
			case KW_PATH:
			case KW_PLAN:
			case KW_PLANS:
			case KW_PLUS:
			case KW_POOL:
			case KW_PRINCIPALS:
			case KW_PURGE:
			case KW_QUARTER:
			case KW_QUERY:
			case KW_QUERY_PARALLELISM:
			case KW_READ:
			case KW_REBUILD:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_RELOAD:
			case KW_RELY:
			case KW_RENAME:
			case KW_REOPTIMIZATION:
			case KW_REPAIR:
			case KW_REPL:
			case KW_REPLACE:
			case KW_REPLICATION:
			case KW_RESOURCE:
			case KW_RESTRICT:
			case KW_REWRITE:
			case KW_ROLE:
			case KW_ROLES:
			case KW_SCHEDULING_POLICY:
			case KW_SCHEMAS:
			case KW_SECOND:
			case KW_SEMI:
			case KW_SERDE:
			case KW_SERDEPROPERTIES:
			case KW_SETS:
			case KW_SHARED:
			case KW_SHOW:
			case KW_SHOW_DATABASE:
			case KW_SKEWED:
			case KW_SNAPSHOT:
			case KW_SORT:
			case KW_SORTED:
			case KW_SSL:
			case KW_STATISTICS:
			case KW_STATUS:
			case KW_STORED:
			case KW_STREAMTABLE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_SUMMARY:
			case KW_TABLE:
			case KW_TABLES:
			case KW_TBLPROPERTIES:
			case KW_TEMPORARY:
			case KW_TERMINATED:
			case KW_TINYINT:
			case KW_TOUCH:
			case KW_TRANSACTION:
			case KW_TRANSACTIONAL:
			case KW_TRANSACTIONS:
			case KW_UNARCHIVE:
			case KW_UNDO:
			case KW_UNIONTYPE:
			case KW_UNKNOWN:
			case KW_UNLOCK:
			case KW_UNMANAGED:
			case KW_UNSET:
			case KW_UNSIGNED:
			case KW_USE:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_VALIDATE:
			case KW_VALUE_TYPE:
			case KW_VECTORIZATION:
			case KW_VIEW:
			case KW_VIEWS:
			case KW_WAIT:
			case KW_WEEK:
			case KW_WHILE:
			case KW_WORK:
			case KW_WORKLOAD:
			case KW_WRITE:
			case KW_YEAR:
			case KW_ZONE:
			case KW_BATCH:
			case KW_DAYOFWEEK:
			case KW_HOLD_DDLTIME:
			case KW_IGNORE:
			case KW_NO_DROP:
			case KW_OFFLINE:
			case KW_PROTECTION:
			case KW_READONLY:
			case KW_TIMESTAMPTZ:
				{
				alt178=2;
				}
				break;
			case KW_URI:
				{
				int LA178_5 = input.LA(2);
				if ( (LA178_5==DOT||LA178_5==KW_FROM||LA178_5==KW_PARTITION||LA178_5==KW_TO) ) {
					alt178=2;
				}
				else if ( (LA178_5==StringLiteral) ) {
					alt178=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 178, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_SERVER:
				{
				int LA178_6 = input.LA(2);
				if ( (LA178_6==DOT||LA178_6==KW_FROM||LA178_6==KW_PARTITION||LA178_6==KW_TO) ) {
					alt178=2;
				}
				else if ( (LA178_6==Identifier||(LA178_6 >= KW_ABORT && LA178_6 <= KW_AFTER)||LA178_6==KW_ALLOC_FRACTION||LA178_6==KW_ANALYZE||LA178_6==KW_ARCHIVE||(LA178_6 >= KW_ASC && LA178_6 <= KW_AST)||(LA178_6 >= KW_AUTOCOMMIT && LA178_6 <= KW_BEFORE)||(LA178_6 >= KW_BUCKET && LA178_6 <= KW_BUCKETS)||(LA178_6 >= KW_CACHE && LA178_6 <= KW_CASCADE)||LA178_6==KW_CHANGE||(LA178_6 >= KW_CHECK && LA178_6 <= KW_COLLECTION)||(LA178_6 >= KW_COLUMNS && LA178_6 <= KW_COMMENT)||(LA178_6 >= KW_COMPACT && LA178_6 <= KW_CONCATENATE)||LA178_6==KW_CONTINUE||LA178_6==KW_DATA||(LA178_6 >= KW_DATABASES && LA178_6 <= KW_DEBUG)||(LA178_6 >= KW_DEFAULT && LA178_6 <= KW_DEFINED)||(LA178_6 >= KW_DELIMITED && LA178_6 <= KW_DESC)||(LA178_6 >= KW_DETAIL && LA178_6 <= KW_DISABLE)||(LA178_6 >= KW_DISTRIBUTE && LA178_6 <= KW_DO)||LA178_6==KW_DOW||(LA178_6 >= KW_DUMP && LA178_6 <= KW_ELEM_TYPE)||LA178_6==KW_ENABLE||(LA178_6 >= KW_ENFORCED && LA178_6 <= KW_ESCAPED)||LA178_6==KW_EXCLUSIVE||(LA178_6 >= KW_EXPLAIN && LA178_6 <= KW_EXPRESSION)||(LA178_6 >= KW_FIELDS && LA178_6 <= KW_FIRST)||(LA178_6 >= KW_FORMAT && LA178_6 <= KW_FORMATTED)||LA178_6==KW_FUNCTIONS||LA178_6==KW_GROUP||(LA178_6 >= KW_HOUR && LA178_6 <= KW_IDXPROPERTIES)||(LA178_6 >= KW_INDEX && LA178_6 <= KW_INDEXES)||(LA178_6 >= KW_INPATH && LA178_6 <= KW_INPUTFORMAT)||(LA178_6 >= KW_ISOLATION && LA178_6 <= KW_JAR)||(LA178_6 >= KW_KEY && LA178_6 <= KW_LAST)||LA178_6==KW_LEVEL||(LA178_6 >= KW_LIMIT && LA178_6 <= KW_LOAD)||(LA178_6 >= KW_LOCATION && LA178_6 <= KW_LONG)||LA178_6==KW_MANAGEMENT||(LA178_6 >= KW_MAPJOIN && LA178_6 <= KW_MATERIALIZED)||LA178_6==KW_METADATA||(LA178_6 >= KW_MINUTE && LA178_6 <= KW_MONTH)||(LA178_6 >= KW_MOVE && LA178_6 <= KW_MSCK)||(LA178_6 >= KW_NORELY && LA178_6 <= KW_NOSCAN)||LA178_6==KW_NOVALIDATE||LA178_6==KW_NULLS||LA178_6==KW_OFFSET||(LA178_6 >= KW_OPERATOR && LA178_6 <= KW_OPTION)||LA178_6==KW_ORDER||(LA178_6 >= KW_OUTPUTDRIVER && LA178_6 <= KW_OUTPUTFORMAT)||(LA178_6 >= KW_OVERWRITE && LA178_6 <= KW_OWNER)||(LA178_6 >= KW_PARTITIONED && LA178_6 <= KW_PATH)||(LA178_6 >= KW_PLAN && LA178_6 <= KW_POOL)||LA178_6==KW_PRINCIPALS||(LA178_6 >= KW_PURGE && LA178_6 <= KW_QUERY_PARALLELISM)||LA178_6==KW_READ||(LA178_6 >= KW_REBUILD && LA178_6 <= KW_RECORDWRITER)||(LA178_6 >= KW_RELOAD && LA178_6 <= KW_RESTRICT)||LA178_6==KW_REWRITE||(LA178_6 >= KW_ROLE && LA178_6 <= KW_ROLES)||(LA178_6 >= KW_SCHEDULING_POLICY && LA178_6 <= KW_SECOND)||(LA178_6 >= KW_SEMI && LA178_6 <= KW_SERVER)||(LA178_6 >= KW_SETS && LA178_6 <= KW_SKEWED)||(LA178_6 >= KW_SNAPSHOT && LA178_6 <= KW_SSL)||(LA178_6 >= KW_STATISTICS && LA178_6 <= KW_SUMMARY)||LA178_6==KW_TABLES||(LA178_6 >= KW_TBLPROPERTIES && LA178_6 <= KW_TERMINATED)||LA178_6==KW_TINYINT||(LA178_6 >= KW_TOUCH && LA178_6 <= KW_TRANSACTIONS)||LA178_6==KW_UNARCHIVE||LA178_6==KW_UNDO||LA178_6==KW_UNIONTYPE||(LA178_6 >= KW_UNKNOWN && LA178_6 <= KW_UNSIGNED)||(LA178_6 >= KW_URI && LA178_6 <= KW_USE)||(LA178_6 >= KW_UTC && LA178_6 <= KW_VALIDATE)||LA178_6==KW_VALUE_TYPE||(LA178_6 >= KW_VECTORIZATION && LA178_6 <= KW_WEEK)||LA178_6==KW_WHILE||(LA178_6 >= KW_WORK && LA178_6 <= KW_ZONE)||LA178_6==KW_BATCH||LA178_6==KW_DAYOFWEEK||LA178_6==KW_HOLD_DDLTIME||LA178_6==KW_IGNORE||LA178_6==KW_NO_DROP||LA178_6==KW_OFFLINE||LA178_6==KW_PROTECTION||LA178_6==KW_READONLY||LA178_6==KW_TIMESTAMPTZ) ) {
					alt178=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 178, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 178, 0, input);
				throw nvae;
			}
			switch (alt178) {
				case 1 :
					// HiveParser.g:1770:7: ( KW_DATABASE | KW_SCHEMA ) identifier
					{
					// HiveParser.g:1770:7: ( KW_DATABASE | KW_SCHEMA )
					int alt175=2;
					int LA175_0 = input.LA(1);
					if ( (LA175_0==KW_DATABASE) ) {
						alt175=1;
					}
					else if ( (LA175_0==KW_SCHEMA) ) {
						alt175=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 175, 0, input);
						throw nvae;
					}

					switch (alt175) {
						case 1 :
							// HiveParser.g:1770:8: KW_DATABASE
							{
							KW_DATABASE581=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_privObject9538); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE581);

							}
							break;
						case 2 :
							// HiveParser.g:1770:20: KW_SCHEMA
							{
							KW_SCHEMA582=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_privObject9540); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA582);

							}
							break;

					}

					pushFollow(FOLLOW_identifier_in_privObject9543);
					identifier583=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(identifier583.getTree());
					// AST REWRITE
					// elements: identifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1770:42: -> ^( TOK_DB_TYPE identifier )
					{
						// HiveParser.g:1770:45: ^( TOK_DB_TYPE identifier )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DB_TYPE, "TOK_DB_TYPE"), root_1);
						adaptor.addChild(root_1, stream_identifier.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:1771:7: ( KW_TABLE )? tableName ( partitionSpec )?
					{
					// HiveParser.g:1771:7: ( KW_TABLE )?
					int alt176=2;
					int LA176_0 = input.LA(1);
					if ( (LA176_0==KW_TABLE) ) {
						alt176=1;
					}
					switch (alt176) {
						case 1 :
							// HiveParser.g:1771:7: KW_TABLE
							{
							KW_TABLE584=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_privObject9559); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE584);

							}
							break;

					}

					pushFollow(FOLLOW_tableName_in_privObject9562);
					tableName585=tableName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableName.add(tableName585.getTree());
					// HiveParser.g:1771:27: ( partitionSpec )?
					int alt177=2;
					int LA177_0 = input.LA(1);
					if ( (LA177_0==KW_PARTITION) ) {
						alt177=1;
					}
					switch (alt177) {
						case 1 :
							// HiveParser.g:1771:27: partitionSpec
							{
							pushFollow(FOLLOW_partitionSpec_in_privObject9564);
							partitionSpec586=partitionSpec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec586.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: partitionSpec, tableName
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1771:42: -> ^( TOK_TABLE_TYPE tableName ( partitionSpec )? )
					{
						// HiveParser.g:1771:45: ^( TOK_TABLE_TYPE tableName ( partitionSpec )? )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABLE_TYPE, "TOK_TABLE_TYPE"), root_1);
						adaptor.addChild(root_1, stream_tableName.nextTree());
						// HiveParser.g:1771:72: ( partitionSpec )?
						if ( stream_partitionSpec.hasNext() ) {
							adaptor.addChild(root_1, stream_partitionSpec.nextTree());
						}
						stream_partitionSpec.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// HiveParser.g:1772:7: KW_URI (path= StringLiteral )
					{
					KW_URI587=(Token)match(input,KW_URI,FOLLOW_KW_URI_in_privObject9584); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_URI.add(KW_URI587);

					// HiveParser.g:1772:14: (path= StringLiteral )
					// HiveParser.g:1772:15: path= StringLiteral
					{
					path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_privObject9589); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(path);

					}

					// AST REWRITE
					// elements: path
					// token labels: path
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1772:35: -> ^( TOK_URI_TYPE $path)
					{
						// HiveParser.g:1772:39: ^( TOK_URI_TYPE $path)
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_URI_TYPE, "TOK_URI_TYPE"), root_1);
						adaptor.addChild(root_1, stream_path.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// HiveParser.g:1773:7: KW_SERVER identifier
					{
					KW_SERVER588=(Token)match(input,KW_SERVER,FOLLOW_KW_SERVER_in_privObject9608); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SERVER.add(KW_SERVER588);

					pushFollow(FOLLOW_identifier_in_privObject9610);
					identifier589=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(identifier589.getTree());
					// AST REWRITE
					// elements: identifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1773:28: -> ^( TOK_SERVER_TYPE identifier )
					{
						// HiveParser.g:1773:31: ^( TOK_SERVER_TYPE identifier )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SERVER_TYPE, "TOK_SERVER_TYPE"), root_1);
						adaptor.addChild(root_1, stream_identifier.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privObject"


	public static class privObjectCols_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "privObjectCols"
	// HiveParser.g:1776:1: privObjectCols : ( ( KW_DATABASE | KW_SCHEMA ) identifier -> ^( TOK_DB_TYPE identifier ) | ( KW_TABLE )? tableName ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )? -> ^( TOK_TABLE_TYPE tableName ( $cols)? ( partitionSpec )? ) | KW_URI (path= StringLiteral ) -> ^( TOK_URI_TYPE $path) | KW_SERVER identifier -> ^( TOK_SERVER_TYPE identifier ) );
	public final HiveParser.privObjectCols_return privObjectCols() throws RecognitionException {
		HiveParser.privObjectCols_return retval = new HiveParser.privObjectCols_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token path=null;
		Token KW_DATABASE590=null;
		Token KW_SCHEMA591=null;
		Token KW_TABLE593=null;
		Token LPAREN595=null;
		Token RPAREN596=null;
		Token KW_URI598=null;
		Token KW_SERVER599=null;
		ParserRuleReturnScope cols =null;
		ParserRuleReturnScope identifier592 =null;
		ParserRuleReturnScope tableName594 =null;
		ParserRuleReturnScope partitionSpec597 =null;
		ParserRuleReturnScope identifier600 =null;

		ASTNode path_tree=null;
		ASTNode KW_DATABASE590_tree=null;
		ASTNode KW_SCHEMA591_tree=null;
		ASTNode KW_TABLE593_tree=null;
		ASTNode LPAREN595_tree=null;
		ASTNode RPAREN596_tree=null;
		ASTNode KW_URI598_tree=null;
		ASTNode KW_SERVER599_tree=null;
		RewriteRuleTokenStream stream_KW_SERVER=new RewriteRuleTokenStream(adaptor,"token KW_SERVER");
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_URI=new RewriteRuleTokenStream(adaptor,"token KW_URI");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		try {
			// HiveParser.g:1777:5: ( ( KW_DATABASE | KW_SCHEMA ) identifier -> ^( TOK_DB_TYPE identifier ) | ( KW_TABLE )? tableName ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )? -> ^( TOK_TABLE_TYPE tableName ( $cols)? ( partitionSpec )? ) | KW_URI (path= StringLiteral ) -> ^( TOK_URI_TYPE $path) | KW_SERVER identifier -> ^( TOK_SERVER_TYPE identifier ) )
			int alt183=4;
			switch ( input.LA(1) ) {
			case KW_DATABASE:
				{
				alt183=1;
				}
				break;
			case KW_SCHEMA:
				{
				int LA183_2 = input.LA(2);
				if ( (LA183_2==Identifier||(LA183_2 >= KW_ABORT && LA183_2 <= KW_AFTER)||LA183_2==KW_ALLOC_FRACTION||LA183_2==KW_ANALYZE||LA183_2==KW_ARCHIVE||(LA183_2 >= KW_ASC && LA183_2 <= KW_AST)||(LA183_2 >= KW_AUTOCOMMIT && LA183_2 <= KW_BEFORE)||(LA183_2 >= KW_BUCKET && LA183_2 <= KW_BUCKETS)||(LA183_2 >= KW_CACHE && LA183_2 <= KW_CASCADE)||LA183_2==KW_CHANGE||(LA183_2 >= KW_CHECK && LA183_2 <= KW_COLLECTION)||(LA183_2 >= KW_COLUMNS && LA183_2 <= KW_COMMENT)||(LA183_2 >= KW_COMPACT && LA183_2 <= KW_CONCATENATE)||LA183_2==KW_CONTINUE||LA183_2==KW_DATA||(LA183_2 >= KW_DATABASES && LA183_2 <= KW_DEBUG)||(LA183_2 >= KW_DEFAULT && LA183_2 <= KW_DEFINED)||(LA183_2 >= KW_DELIMITED && LA183_2 <= KW_DESC)||(LA183_2 >= KW_DETAIL && LA183_2 <= KW_DISABLE)||(LA183_2 >= KW_DISTRIBUTE && LA183_2 <= KW_DO)||LA183_2==KW_DOW||(LA183_2 >= KW_DUMP && LA183_2 <= KW_ELEM_TYPE)||LA183_2==KW_ENABLE||(LA183_2 >= KW_ENFORCED && LA183_2 <= KW_ESCAPED)||LA183_2==KW_EXCLUSIVE||(LA183_2 >= KW_EXPLAIN && LA183_2 <= KW_EXPRESSION)||(LA183_2 >= KW_FIELDS && LA183_2 <= KW_FIRST)||(LA183_2 >= KW_FORMAT && LA183_2 <= KW_FORMATTED)||LA183_2==KW_FUNCTIONS||LA183_2==KW_GROUP||(LA183_2 >= KW_HOUR && LA183_2 <= KW_IDXPROPERTIES)||(LA183_2 >= KW_INDEX && LA183_2 <= KW_INDEXES)||(LA183_2 >= KW_INPATH && LA183_2 <= KW_INPUTFORMAT)||(LA183_2 >= KW_ISOLATION && LA183_2 <= KW_JAR)||(LA183_2 >= KW_KEY && LA183_2 <= KW_LAST)||LA183_2==KW_LEVEL||(LA183_2 >= KW_LIMIT && LA183_2 <= KW_LOAD)||(LA183_2 >= KW_LOCATION && LA183_2 <= KW_LONG)||LA183_2==KW_MANAGEMENT||(LA183_2 >= KW_MAPJOIN && LA183_2 <= KW_MATERIALIZED)||LA183_2==KW_METADATA||(LA183_2 >= KW_MINUTE && LA183_2 <= KW_MONTH)||(LA183_2 >= KW_MOVE && LA183_2 <= KW_MSCK)||(LA183_2 >= KW_NORELY && LA183_2 <= KW_NOSCAN)||LA183_2==KW_NOVALIDATE||LA183_2==KW_NULLS||LA183_2==KW_OFFSET||(LA183_2 >= KW_OPERATOR && LA183_2 <= KW_OPTION)||LA183_2==KW_ORDER||(LA183_2 >= KW_OUTPUTDRIVER && LA183_2 <= KW_OUTPUTFORMAT)||(LA183_2 >= KW_OVERWRITE && LA183_2 <= KW_OWNER)||(LA183_2 >= KW_PARTITIONED && LA183_2 <= KW_PATH)||(LA183_2 >= KW_PLAN && LA183_2 <= KW_POOL)||LA183_2==KW_PRINCIPALS||(LA183_2 >= KW_PURGE && LA183_2 <= KW_QUERY_PARALLELISM)||LA183_2==KW_READ||(LA183_2 >= KW_REBUILD && LA183_2 <= KW_RECORDWRITER)||(LA183_2 >= KW_RELOAD && LA183_2 <= KW_RESTRICT)||LA183_2==KW_REWRITE||(LA183_2 >= KW_ROLE && LA183_2 <= KW_ROLES)||(LA183_2 >= KW_SCHEDULING_POLICY && LA183_2 <= KW_SECOND)||(LA183_2 >= KW_SEMI && LA183_2 <= KW_SERVER)||(LA183_2 >= KW_SETS && LA183_2 <= KW_SKEWED)||(LA183_2 >= KW_SNAPSHOT && LA183_2 <= KW_SSL)||(LA183_2 >= KW_STATISTICS && LA183_2 <= KW_SUMMARY)||LA183_2==KW_TABLES||(LA183_2 >= KW_TBLPROPERTIES && LA183_2 <= KW_TERMINATED)||LA183_2==KW_TINYINT||(LA183_2 >= KW_TOUCH && LA183_2 <= KW_TRANSACTIONS)||LA183_2==KW_UNARCHIVE||LA183_2==KW_UNDO||LA183_2==KW_UNIONTYPE||(LA183_2 >= KW_UNKNOWN && LA183_2 <= KW_UNSIGNED)||(LA183_2 >= KW_URI && LA183_2 <= KW_USE)||(LA183_2 >= KW_UTC && LA183_2 <= KW_VALIDATE)||LA183_2==KW_VALUE_TYPE||(LA183_2 >= KW_VECTORIZATION && LA183_2 <= KW_WEEK)||LA183_2==KW_WHILE||(LA183_2 >= KW_WORK && LA183_2 <= KW_ZONE)||LA183_2==KW_BATCH||LA183_2==KW_DAYOFWEEK||LA183_2==KW_HOLD_DDLTIME||LA183_2==KW_IGNORE||LA183_2==KW_NO_DROP||LA183_2==KW_OFFLINE||LA183_2==KW_PROTECTION||LA183_2==KW_READONLY||LA183_2==KW_TIMESTAMPTZ) ) {
					alt183=1;
				}
				else if ( (LA183_2==EOF||LA183_2==DOT||LA183_2==KW_PARTITION||LA183_2==LPAREN) ) {
					alt183=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 183, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case Identifier:
			case KW_ABORT:
			case KW_ACTIVATE:
			case KW_ACTIVE:
			case KW_ADD:
			case KW_ADMIN:
			case KW_AFTER:
			case KW_ALLOC_FRACTION:
			case KW_ANALYZE:
			case KW_ARCHIVE:
			case KW_ASC:
			case KW_AST:
			case KW_AUTOCOMMIT:
			case KW_BEFORE:
			case KW_BUCKET:
			case KW_BUCKETS:
			case KW_CACHE:
			case KW_CASCADE:
			case KW_CHANGE:
			case KW_CHECK:
			case KW_CLUSTER:
			case KW_CLUSTERED:
			case KW_CLUSTERSTATUS:
			case KW_COLLECTION:
			case KW_COLUMNS:
			case KW_COMMENT:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_COMPUTE:
			case KW_CONCATENATE:
			case KW_CONTINUE:
			case KW_DATA:
			case KW_DATABASES:
			case KW_DATE:
			case KW_DATETIME:
			case KW_DAY:
			case KW_DBPROPERTIES:
			case KW_DEBUG:
			case KW_DEFAULT:
			case KW_DEFERRED:
			case KW_DEFINED:
			case KW_DELIMITED:
			case KW_DEPENDENCY:
			case KW_DESC:
			case KW_DETAIL:
			case KW_DIRECTORIES:
			case KW_DIRECTORY:
			case KW_DISABLE:
			case KW_DISTRIBUTE:
			case KW_DO:
			case KW_DOW:
			case KW_DUMP:
			case KW_ELEM_TYPE:
			case KW_ENABLE:
			case KW_ENFORCED:
			case KW_ESCAPED:
			case KW_EXCLUSIVE:
			case KW_EXPLAIN:
			case KW_EXPORT:
			case KW_EXPRESSION:
			case KW_FIELDS:
			case KW_FILE:
			case KW_FILEFORMAT:
			case KW_FIRST:
			case KW_FORMAT:
			case KW_FORMATTED:
			case KW_FUNCTIONS:
			case KW_GROUP:
			case KW_HOUR:
			case KW_IDXPROPERTIES:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_INPATH:
			case KW_INPUTDRIVER:
			case KW_INPUTFORMAT:
			case KW_ISOLATION:
			case KW_ITEMS:
			case KW_JAR:
			case KW_KEY:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_KILL:
			case KW_LAST:
			case KW_LEVEL:
			case KW_LIMIT:
			case KW_LINES:
			case KW_LOAD:
			case KW_LOCATION:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_LOGICAL:
			case KW_LONG:
			case KW_MANAGEMENT:
			case KW_MAPJOIN:
			case KW_MAPPING:
			case KW_MATCHED:
			case KW_MATERIALIZED:
			case KW_METADATA:
			case KW_MINUTE:
			case KW_MONTH:
			case KW_MOVE:
			case KW_MSCK:
			case KW_NORELY:
			case KW_NOSCAN:
			case KW_NOVALIDATE:
			case KW_NULLS:
			case KW_OFFSET:
			case KW_OPERATOR:
			case KW_OPTION:
			case KW_ORDER:
			case KW_OUTPUTDRIVER:
			case KW_OUTPUTFORMAT:
			case KW_OVERWRITE:
			case KW_OWNER:
			case KW_PARTITIONED:
			case KW_PARTITIONS:
			case KW_PATH:
			case KW_PLAN:
			case KW_PLANS:
			case KW_PLUS:
			case KW_POOL:
			case KW_PRINCIPALS:
			case KW_PURGE:
			case KW_QUARTER:
			case KW_QUERY:
			case KW_QUERY_PARALLELISM:
			case KW_READ:
			case KW_REBUILD:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_RELOAD:
			case KW_RELY:
			case KW_RENAME:
			case KW_REOPTIMIZATION:
			case KW_REPAIR:
			case KW_REPL:
			case KW_REPLACE:
			case KW_REPLICATION:
			case KW_RESOURCE:
			case KW_RESTRICT:
			case KW_REWRITE:
			case KW_ROLE:
			case KW_ROLES:
			case KW_SCHEDULING_POLICY:
			case KW_SCHEMAS:
			case KW_SECOND:
			case KW_SEMI:
			case KW_SERDE:
			case KW_SERDEPROPERTIES:
			case KW_SETS:
			case KW_SHARED:
			case KW_SHOW:
			case KW_SHOW_DATABASE:
			case KW_SKEWED:
			case KW_SNAPSHOT:
			case KW_SORT:
			case KW_SORTED:
			case KW_SSL:
			case KW_STATISTICS:
			case KW_STATUS:
			case KW_STORED:
			case KW_STREAMTABLE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_SUMMARY:
			case KW_TABLE:
			case KW_TABLES:
			case KW_TBLPROPERTIES:
			case KW_TEMPORARY:
			case KW_TERMINATED:
			case KW_TINYINT:
			case KW_TOUCH:
			case KW_TRANSACTION:
			case KW_TRANSACTIONAL:
			case KW_TRANSACTIONS:
			case KW_UNARCHIVE:
			case KW_UNDO:
			case KW_UNIONTYPE:
			case KW_UNKNOWN:
			case KW_UNLOCK:
			case KW_UNMANAGED:
			case KW_UNSET:
			case KW_UNSIGNED:
			case KW_USE:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_VALIDATE:
			case KW_VALUE_TYPE:
			case KW_VECTORIZATION:
			case KW_VIEW:
			case KW_VIEWS:
			case KW_WAIT:
			case KW_WEEK:
			case KW_WHILE:
			case KW_WORK:
			case KW_WORKLOAD:
			case KW_WRITE:
			case KW_YEAR:
			case KW_ZONE:
			case KW_BATCH:
			case KW_DAYOFWEEK:
			case KW_HOLD_DDLTIME:
			case KW_IGNORE:
			case KW_NO_DROP:
			case KW_OFFLINE:
			case KW_PROTECTION:
			case KW_READONLY:
			case KW_TIMESTAMPTZ:
				{
				alt183=2;
				}
				break;
			case KW_URI:
				{
				int LA183_5 = input.LA(2);
				if ( (LA183_5==EOF||LA183_5==DOT||LA183_5==KW_PARTITION||LA183_5==LPAREN) ) {
					alt183=2;
				}
				else if ( (LA183_5==StringLiteral) ) {
					alt183=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 183, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_SERVER:
				{
				int LA183_6 = input.LA(2);
				if ( (LA183_6==EOF||LA183_6==DOT||LA183_6==KW_PARTITION||LA183_6==LPAREN) ) {
					alt183=2;
				}
				else if ( (LA183_6==Identifier||(LA183_6 >= KW_ABORT && LA183_6 <= KW_AFTER)||LA183_6==KW_ALLOC_FRACTION||LA183_6==KW_ANALYZE||LA183_6==KW_ARCHIVE||(LA183_6 >= KW_ASC && LA183_6 <= KW_AST)||(LA183_6 >= KW_AUTOCOMMIT && LA183_6 <= KW_BEFORE)||(LA183_6 >= KW_BUCKET && LA183_6 <= KW_BUCKETS)||(LA183_6 >= KW_CACHE && LA183_6 <= KW_CASCADE)||LA183_6==KW_CHANGE||(LA183_6 >= KW_CHECK && LA183_6 <= KW_COLLECTION)||(LA183_6 >= KW_COLUMNS && LA183_6 <= KW_COMMENT)||(LA183_6 >= KW_COMPACT && LA183_6 <= KW_CONCATENATE)||LA183_6==KW_CONTINUE||LA183_6==KW_DATA||(LA183_6 >= KW_DATABASES && LA183_6 <= KW_DEBUG)||(LA183_6 >= KW_DEFAULT && LA183_6 <= KW_DEFINED)||(LA183_6 >= KW_DELIMITED && LA183_6 <= KW_DESC)||(LA183_6 >= KW_DETAIL && LA183_6 <= KW_DISABLE)||(LA183_6 >= KW_DISTRIBUTE && LA183_6 <= KW_DO)||LA183_6==KW_DOW||(LA183_6 >= KW_DUMP && LA183_6 <= KW_ELEM_TYPE)||LA183_6==KW_ENABLE||(LA183_6 >= KW_ENFORCED && LA183_6 <= KW_ESCAPED)||LA183_6==KW_EXCLUSIVE||(LA183_6 >= KW_EXPLAIN && LA183_6 <= KW_EXPRESSION)||(LA183_6 >= KW_FIELDS && LA183_6 <= KW_FIRST)||(LA183_6 >= KW_FORMAT && LA183_6 <= KW_FORMATTED)||LA183_6==KW_FUNCTIONS||LA183_6==KW_GROUP||(LA183_6 >= KW_HOUR && LA183_6 <= KW_IDXPROPERTIES)||(LA183_6 >= KW_INDEX && LA183_6 <= KW_INDEXES)||(LA183_6 >= KW_INPATH && LA183_6 <= KW_INPUTFORMAT)||(LA183_6 >= KW_ISOLATION && LA183_6 <= KW_JAR)||(LA183_6 >= KW_KEY && LA183_6 <= KW_LAST)||LA183_6==KW_LEVEL||(LA183_6 >= KW_LIMIT && LA183_6 <= KW_LOAD)||(LA183_6 >= KW_LOCATION && LA183_6 <= KW_LONG)||LA183_6==KW_MANAGEMENT||(LA183_6 >= KW_MAPJOIN && LA183_6 <= KW_MATERIALIZED)||LA183_6==KW_METADATA||(LA183_6 >= KW_MINUTE && LA183_6 <= KW_MONTH)||(LA183_6 >= KW_MOVE && LA183_6 <= KW_MSCK)||(LA183_6 >= KW_NORELY && LA183_6 <= KW_NOSCAN)||LA183_6==KW_NOVALIDATE||LA183_6==KW_NULLS||LA183_6==KW_OFFSET||(LA183_6 >= KW_OPERATOR && LA183_6 <= KW_OPTION)||LA183_6==KW_ORDER||(LA183_6 >= KW_OUTPUTDRIVER && LA183_6 <= KW_OUTPUTFORMAT)||(LA183_6 >= KW_OVERWRITE && LA183_6 <= KW_OWNER)||(LA183_6 >= KW_PARTITIONED && LA183_6 <= KW_PATH)||(LA183_6 >= KW_PLAN && LA183_6 <= KW_POOL)||LA183_6==KW_PRINCIPALS||(LA183_6 >= KW_PURGE && LA183_6 <= KW_QUERY_PARALLELISM)||LA183_6==KW_READ||(LA183_6 >= KW_REBUILD && LA183_6 <= KW_RECORDWRITER)||(LA183_6 >= KW_RELOAD && LA183_6 <= KW_RESTRICT)||LA183_6==KW_REWRITE||(LA183_6 >= KW_ROLE && LA183_6 <= KW_ROLES)||(LA183_6 >= KW_SCHEDULING_POLICY && LA183_6 <= KW_SECOND)||(LA183_6 >= KW_SEMI && LA183_6 <= KW_SERVER)||(LA183_6 >= KW_SETS && LA183_6 <= KW_SKEWED)||(LA183_6 >= KW_SNAPSHOT && LA183_6 <= KW_SSL)||(LA183_6 >= KW_STATISTICS && LA183_6 <= KW_SUMMARY)||LA183_6==KW_TABLES||(LA183_6 >= KW_TBLPROPERTIES && LA183_6 <= KW_TERMINATED)||LA183_6==KW_TINYINT||(LA183_6 >= KW_TOUCH && LA183_6 <= KW_TRANSACTIONS)||LA183_6==KW_UNARCHIVE||LA183_6==KW_UNDO||LA183_6==KW_UNIONTYPE||(LA183_6 >= KW_UNKNOWN && LA183_6 <= KW_UNSIGNED)||(LA183_6 >= KW_URI && LA183_6 <= KW_USE)||(LA183_6 >= KW_UTC && LA183_6 <= KW_VALIDATE)||LA183_6==KW_VALUE_TYPE||(LA183_6 >= KW_VECTORIZATION && LA183_6 <= KW_WEEK)||LA183_6==KW_WHILE||(LA183_6 >= KW_WORK && LA183_6 <= KW_ZONE)||LA183_6==KW_BATCH||LA183_6==KW_DAYOFWEEK||LA183_6==KW_HOLD_DDLTIME||LA183_6==KW_IGNORE||LA183_6==KW_NO_DROP||LA183_6==KW_OFFLINE||LA183_6==KW_PROTECTION||LA183_6==KW_READONLY||LA183_6==KW_TIMESTAMPTZ) ) {
					alt183=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 183, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 183, 0, input);
				throw nvae;
			}
			switch (alt183) {
				case 1 :
					// HiveParser.g:1777:7: ( KW_DATABASE | KW_SCHEMA ) identifier
					{
					// HiveParser.g:1777:7: ( KW_DATABASE | KW_SCHEMA )
					int alt179=2;
					int LA179_0 = input.LA(1);
					if ( (LA179_0==KW_DATABASE) ) {
						alt179=1;
					}
					else if ( (LA179_0==KW_SCHEMA) ) {
						alt179=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 179, 0, input);
						throw nvae;
					}

					switch (alt179) {
						case 1 :
							// HiveParser.g:1777:8: KW_DATABASE
							{
							KW_DATABASE590=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_privObjectCols9636); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE590);

							}
							break;
						case 2 :
							// HiveParser.g:1777:20: KW_SCHEMA
							{
							KW_SCHEMA591=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_privObjectCols9638); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA591);

							}
							break;

					}

					pushFollow(FOLLOW_identifier_in_privObjectCols9641);
					identifier592=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(identifier592.getTree());
					// AST REWRITE
					// elements: identifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1777:42: -> ^( TOK_DB_TYPE identifier )
					{
						// HiveParser.g:1777:45: ^( TOK_DB_TYPE identifier )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DB_TYPE, "TOK_DB_TYPE"), root_1);
						adaptor.addChild(root_1, stream_identifier.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:1778:7: ( KW_TABLE )? tableName ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )?
					{
					// HiveParser.g:1778:7: ( KW_TABLE )?
					int alt180=2;
					int LA180_0 = input.LA(1);
					if ( (LA180_0==KW_TABLE) ) {
						alt180=1;
					}
					switch (alt180) {
						case 1 :
							// HiveParser.g:1778:7: KW_TABLE
							{
							KW_TABLE593=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_privObjectCols9657); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE593);

							}
							break;

					}

					pushFollow(FOLLOW_tableName_in_privObjectCols9660);
					tableName594=tableName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableName.add(tableName594.getTree());
					// HiveParser.g:1778:27: ( LPAREN cols= columnNameList RPAREN )?
					int alt181=2;
					int LA181_0 = input.LA(1);
					if ( (LA181_0==LPAREN) ) {
						alt181=1;
					}
					switch (alt181) {
						case 1 :
							// HiveParser.g:1778:28: LPAREN cols= columnNameList RPAREN
							{
							LPAREN595=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_privObjectCols9663); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN595);

							pushFollow(FOLLOW_columnNameList_in_privObjectCols9667);
							cols=columnNameList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_columnNameList.add(cols.getTree());
							RPAREN596=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_privObjectCols9669); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN596);

							}
							break;

					}

					// HiveParser.g:1778:64: ( partitionSpec )?
					int alt182=2;
					int LA182_0 = input.LA(1);
					if ( (LA182_0==KW_PARTITION) ) {
						alt182=1;
					}
					switch (alt182) {
						case 1 :
							// HiveParser.g:1778:64: partitionSpec
							{
							pushFollow(FOLLOW_partitionSpec_in_privObjectCols9673);
							partitionSpec597=partitionSpec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec597.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: cols, tableName, partitionSpec
					// token labels: 
					// rule labels: cols, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_cols=new RewriteRuleSubtreeStream(adaptor,"rule cols",cols!=null?cols.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1778:79: -> ^( TOK_TABLE_TYPE tableName ( $cols)? ( partitionSpec )? )
					{
						// HiveParser.g:1778:82: ^( TOK_TABLE_TYPE tableName ( $cols)? ( partitionSpec )? )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABLE_TYPE, "TOK_TABLE_TYPE"), root_1);
						adaptor.addChild(root_1, stream_tableName.nextTree());
						// HiveParser.g:1778:110: ( $cols)?
						if ( stream_cols.hasNext() ) {
							adaptor.addChild(root_1, stream_cols.nextTree());
						}
						stream_cols.reset();

						// HiveParser.g:1778:116: ( partitionSpec )?
						if ( stream_partitionSpec.hasNext() ) {
							adaptor.addChild(root_1, stream_partitionSpec.nextTree());
						}
						stream_partitionSpec.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// HiveParser.g:1779:7: KW_URI (path= StringLiteral )
					{
					KW_URI598=(Token)match(input,KW_URI,FOLLOW_KW_URI_in_privObjectCols9697); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_URI.add(KW_URI598);

					// HiveParser.g:1779:14: (path= StringLiteral )
					// HiveParser.g:1779:15: path= StringLiteral
					{
					path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_privObjectCols9702); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(path);

					}

					// AST REWRITE
					// elements: path
					// token labels: path
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1779:35: -> ^( TOK_URI_TYPE $path)
					{
						// HiveParser.g:1779:39: ^( TOK_URI_TYPE $path)
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_URI_TYPE, "TOK_URI_TYPE"), root_1);
						adaptor.addChild(root_1, stream_path.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// HiveParser.g:1780:7: KW_SERVER identifier
					{
					KW_SERVER599=(Token)match(input,KW_SERVER,FOLLOW_KW_SERVER_in_privObjectCols9721); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SERVER.add(KW_SERVER599);

					pushFollow(FOLLOW_identifier_in_privObjectCols9723);
					identifier600=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(identifier600.getTree());
					// AST REWRITE
					// elements: identifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1780:28: -> ^( TOK_SERVER_TYPE identifier )
					{
						// HiveParser.g:1780:31: ^( TOK_SERVER_TYPE identifier )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SERVER_TYPE, "TOK_SERVER_TYPE"), root_1);
						adaptor.addChild(root_1, stream_identifier.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privObjectCols"


	public static class privilegeList_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "privilegeList"
	// HiveParser.g:1783:1: privilegeList : privlegeDef ( COMMA privlegeDef )* -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ ) ;
	public final HiveParser.privilegeList_return privilegeList() throws RecognitionException {
		HiveParser.privilegeList_return retval = new HiveParser.privilegeList_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token COMMA602=null;
		ParserRuleReturnScope privlegeDef601 =null;
		ParserRuleReturnScope privlegeDef603 =null;

		ASTNode COMMA602_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_privlegeDef=new RewriteRuleSubtreeStream(adaptor,"rule privlegeDef");

		pushMsg(retval.start,"grant privilege list", state);
		try {
			// HiveParser.g:1786:5: ( privlegeDef ( COMMA privlegeDef )* -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ ) )
			// HiveParser.g:1786:7: privlegeDef ( COMMA privlegeDef )*
			{
			pushFollow(FOLLOW_privlegeDef_in_privilegeList9758);
			privlegeDef601=privlegeDef();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_privlegeDef.add(privlegeDef601.getTree());
			// HiveParser.g:1786:19: ( COMMA privlegeDef )*
			loop184:
			while (true) {
				int alt184=2;
				int LA184_0 = input.LA(1);
				if ( (LA184_0==COMMA) ) {
					alt184=1;
				}

				switch (alt184) {
				case 1 :
					// HiveParser.g:1786:20: COMMA privlegeDef
					{
					COMMA602=(Token)match(input,COMMA,FOLLOW_COMMA_in_privilegeList9761); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA602);

					pushFollow(FOLLOW_privlegeDef_in_privilegeList9763);
					privlegeDef603=privlegeDef();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_privlegeDef.add(privlegeDef603.getTree());
					}
					break;

				default :
					break loop184;
				}
			}

			// AST REWRITE
			// elements: privlegeDef
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1787:5: -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ )
			{
				// HiveParser.g:1787:8: ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_PRIVILEGE_LIST, "TOK_PRIVILEGE_LIST"), root_1);
				if ( !(stream_privlegeDef.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_privlegeDef.hasNext() ) {
					adaptor.addChild(root_1, stream_privlegeDef.nextTree());
				}
				stream_privlegeDef.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privilegeList"


	public static class privlegeDef_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "privlegeDef"
	// HiveParser.g:1790:1: privlegeDef : privilegeType ( LPAREN cols= columnNameList RPAREN )? -> ^( TOK_PRIVILEGE privilegeType ( $cols)? ) ;
	public final HiveParser.privlegeDef_return privlegeDef() throws RecognitionException {
		HiveParser.privlegeDef_return retval = new HiveParser.privlegeDef_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token LPAREN605=null;
		Token RPAREN606=null;
		ParserRuleReturnScope cols =null;
		ParserRuleReturnScope privilegeType604 =null;

		ASTNode LPAREN605_tree=null;
		ASTNode RPAREN606_tree=null;
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
		RewriteRuleSubtreeStream stream_privilegeType=new RewriteRuleSubtreeStream(adaptor,"rule privilegeType");

		pushMsg(retval.start,"grant privilege", state);
		try {
			// HiveParser.g:1793:5: ( privilegeType ( LPAREN cols= columnNameList RPAREN )? -> ^( TOK_PRIVILEGE privilegeType ( $cols)? ) )
			// HiveParser.g:1793:7: privilegeType ( LPAREN cols= columnNameList RPAREN )?
			{
			pushFollow(FOLLOW_privilegeType_in_privlegeDef9805);
			privilegeType604=privilegeType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_privilegeType.add(privilegeType604.getTree());
			// HiveParser.g:1793:21: ( LPAREN cols= columnNameList RPAREN )?
			int alt185=2;
			int LA185_0 = input.LA(1);
			if ( (LA185_0==LPAREN) ) {
				alt185=1;
			}
			switch (alt185) {
				case 1 :
					// HiveParser.g:1793:22: LPAREN cols= columnNameList RPAREN
					{
					LPAREN605=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_privlegeDef9808); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN605);

					pushFollow(FOLLOW_columnNameList_in_privlegeDef9812);
					cols=columnNameList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameList.add(cols.getTree());
					RPAREN606=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_privlegeDef9814); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN606);

					}
					break;

			}

			// AST REWRITE
			// elements: privilegeType, cols
			// token labels: 
			// rule labels: cols, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_cols=new RewriteRuleSubtreeStream(adaptor,"rule cols",cols!=null?cols.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1794:5: -> ^( TOK_PRIVILEGE privilegeType ( $cols)? )
			{
				// HiveParser.g:1794:8: ^( TOK_PRIVILEGE privilegeType ( $cols)? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_PRIVILEGE, "TOK_PRIVILEGE"), root_1);
				adaptor.addChild(root_1, stream_privilegeType.nextTree());
				// HiveParser.g:1794:39: ( $cols)?
				if ( stream_cols.hasNext() ) {
					adaptor.addChild(root_1, stream_cols.nextTree());
				}
				stream_cols.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privlegeDef"


	public static class privilegeType_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "privilegeType"
	// HiveParser.g:1797:1: privilegeType : ( KW_ALL -> ^( TOK_PRIV_ALL ) | KW_ALTER -> ^( TOK_PRIV_ALTER_METADATA ) | KW_UPDATE -> ^( TOK_PRIV_ALTER_DATA ) | KW_CREATE -> ^( TOK_PRIV_CREATE ) | KW_DROP -> ^( TOK_PRIV_DROP ) | KW_LOCK -> ^( TOK_PRIV_LOCK ) | KW_SELECT -> ^( TOK_PRIV_SELECT ) | KW_SHOW_DATABASE -> ^( TOK_PRIV_SHOW_DATABASE ) | KW_INSERT -> ^( TOK_PRIV_INSERT ) | KW_DELETE -> ^( TOK_PRIV_DELETE ) );
	public final HiveParser.privilegeType_return privilegeType() throws RecognitionException {
		HiveParser.privilegeType_return retval = new HiveParser.privilegeType_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_ALL607=null;
		Token KW_ALTER608=null;
		Token KW_UPDATE609=null;
		Token KW_CREATE610=null;
		Token KW_DROP611=null;
		Token KW_LOCK612=null;
		Token KW_SELECT613=null;
		Token KW_SHOW_DATABASE614=null;
		Token KW_INSERT615=null;
		Token KW_DELETE616=null;

		ASTNode KW_ALL607_tree=null;
		ASTNode KW_ALTER608_tree=null;
		ASTNode KW_UPDATE609_tree=null;
		ASTNode KW_CREATE610_tree=null;
		ASTNode KW_DROP611_tree=null;
		ASTNode KW_LOCK612_tree=null;
		ASTNode KW_SELECT613_tree=null;
		ASTNode KW_SHOW_DATABASE614_tree=null;
		ASTNode KW_INSERT615_tree=null;
		ASTNode KW_DELETE616_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_DELETE=new RewriteRuleTokenStream(adaptor,"token KW_DELETE");
		RewriteRuleTokenStream stream_KW_SHOW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_SHOW_DATABASE");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_KW_ALTER=new RewriteRuleTokenStream(adaptor,"token KW_ALTER");
		RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
		RewriteRuleTokenStream stream_KW_LOCK=new RewriteRuleTokenStream(adaptor,"token KW_LOCK");
		RewriteRuleTokenStream stream_KW_INSERT=new RewriteRuleTokenStream(adaptor,"token KW_INSERT");
		RewriteRuleTokenStream stream_KW_SELECT=new RewriteRuleTokenStream(adaptor,"token KW_SELECT");
		RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");

		pushMsg(retval.start,"privilege type", state);
		try {
			// HiveParser.g:1800:5: ( KW_ALL -> ^( TOK_PRIV_ALL ) | KW_ALTER -> ^( TOK_PRIV_ALTER_METADATA ) | KW_UPDATE -> ^( TOK_PRIV_ALTER_DATA ) | KW_CREATE -> ^( TOK_PRIV_CREATE ) | KW_DROP -> ^( TOK_PRIV_DROP ) | KW_LOCK -> ^( TOK_PRIV_LOCK ) | KW_SELECT -> ^( TOK_PRIV_SELECT ) | KW_SHOW_DATABASE -> ^( TOK_PRIV_SHOW_DATABASE ) | KW_INSERT -> ^( TOK_PRIV_INSERT ) | KW_DELETE -> ^( TOK_PRIV_DELETE ) )
			int alt186=10;
			switch ( input.LA(1) ) {
			case KW_ALL:
				{
				alt186=1;
				}
				break;
			case KW_ALTER:
				{
				alt186=2;
				}
				break;
			case KW_UPDATE:
				{
				alt186=3;
				}
				break;
			case KW_CREATE:
				{
				alt186=4;
				}
				break;
			case KW_DROP:
				{
				alt186=5;
				}
				break;
			case KW_LOCK:
				{
				alt186=6;
				}
				break;
			case KW_SELECT:
				{
				alt186=7;
				}
				break;
			case KW_SHOW_DATABASE:
				{
				alt186=8;
				}
				break;
			case KW_INSERT:
				{
				alt186=9;
				}
				break;
			case KW_DELETE:
				{
				alt186=10;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 186, 0, input);
				throw nvae;
			}
			switch (alt186) {
				case 1 :
					// HiveParser.g:1800:7: KW_ALL
					{
					KW_ALL607=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_privilegeType9859); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALL.add(KW_ALL607);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1800:14: -> ^( TOK_PRIV_ALL )
					{
						// HiveParser.g:1800:17: ^( TOK_PRIV_ALL )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_PRIV_ALL, "TOK_PRIV_ALL"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:1801:7: KW_ALTER
					{
					KW_ALTER608=(Token)match(input,KW_ALTER,FOLLOW_KW_ALTER_in_privilegeType9873); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALTER.add(KW_ALTER608);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1801:16: -> ^( TOK_PRIV_ALTER_METADATA )
					{
						// HiveParser.g:1801:19: ^( TOK_PRIV_ALTER_METADATA )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_PRIV_ALTER_METADATA, "TOK_PRIV_ALTER_METADATA"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// HiveParser.g:1802:7: KW_UPDATE
					{
					KW_UPDATE609=(Token)match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_privilegeType9887); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_UPDATE.add(KW_UPDATE609);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1802:17: -> ^( TOK_PRIV_ALTER_DATA )
					{
						// HiveParser.g:1802:20: ^( TOK_PRIV_ALTER_DATA )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_PRIV_ALTER_DATA, "TOK_PRIV_ALTER_DATA"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// HiveParser.g:1803:7: KW_CREATE
					{
					KW_CREATE610=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_privilegeType9901); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE610);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1803:17: -> ^( TOK_PRIV_CREATE )
					{
						// HiveParser.g:1803:20: ^( TOK_PRIV_CREATE )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_PRIV_CREATE, "TOK_PRIV_CREATE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// HiveParser.g:1804:7: KW_DROP
					{
					KW_DROP611=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_privilegeType9915); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP611);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1804:15: -> ^( TOK_PRIV_DROP )
					{
						// HiveParser.g:1804:18: ^( TOK_PRIV_DROP )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_PRIV_DROP, "TOK_PRIV_DROP"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 6 :
					// HiveParser.g:1805:7: KW_LOCK
					{
					KW_LOCK612=(Token)match(input,KW_LOCK,FOLLOW_KW_LOCK_in_privilegeType9929); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_LOCK.add(KW_LOCK612);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1805:15: -> ^( TOK_PRIV_LOCK )
					{
						// HiveParser.g:1805:18: ^( TOK_PRIV_LOCK )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_PRIV_LOCK, "TOK_PRIV_LOCK"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 7 :
					// HiveParser.g:1806:7: KW_SELECT
					{
					KW_SELECT613=(Token)match(input,KW_SELECT,FOLLOW_KW_SELECT_in_privilegeType9943); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SELECT.add(KW_SELECT613);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1806:17: -> ^( TOK_PRIV_SELECT )
					{
						// HiveParser.g:1806:20: ^( TOK_PRIV_SELECT )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_PRIV_SELECT, "TOK_PRIV_SELECT"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 8 :
					// HiveParser.g:1807:7: KW_SHOW_DATABASE
					{
					KW_SHOW_DATABASE614=(Token)match(input,KW_SHOW_DATABASE,FOLLOW_KW_SHOW_DATABASE_in_privilegeType9957); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW_DATABASE.add(KW_SHOW_DATABASE614);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1807:24: -> ^( TOK_PRIV_SHOW_DATABASE )
					{
						// HiveParser.g:1807:27: ^( TOK_PRIV_SHOW_DATABASE )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_PRIV_SHOW_DATABASE, "TOK_PRIV_SHOW_DATABASE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 9 :
					// HiveParser.g:1808:7: KW_INSERT
					{
					KW_INSERT615=(Token)match(input,KW_INSERT,FOLLOW_KW_INSERT_in_privilegeType9971); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INSERT.add(KW_INSERT615);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1808:17: -> ^( TOK_PRIV_INSERT )
					{
						// HiveParser.g:1808:20: ^( TOK_PRIV_INSERT )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_PRIV_INSERT, "TOK_PRIV_INSERT"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 10 :
					// HiveParser.g:1809:7: KW_DELETE
					{
					KW_DELETE616=(Token)match(input,KW_DELETE,FOLLOW_KW_DELETE_in_privilegeType9985); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DELETE.add(KW_DELETE616);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1809:17: -> ^( TOK_PRIV_DELETE )
					{
						// HiveParser.g:1809:20: ^( TOK_PRIV_DELETE )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_PRIV_DELETE, "TOK_PRIV_DELETE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privilegeType"


	public static class principalSpecification_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "principalSpecification"
	// HiveParser.g:1812:1: principalSpecification : principalName ( COMMA principalName )* -> ^( TOK_PRINCIPAL_NAME ( principalName )+ ) ;
	public final HiveParser.principalSpecification_return principalSpecification() throws RecognitionException {
		HiveParser.principalSpecification_return retval = new HiveParser.principalSpecification_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token COMMA618=null;
		ParserRuleReturnScope principalName617 =null;
		ParserRuleReturnScope principalName619 =null;

		ASTNode COMMA618_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");

		 pushMsg(retval.start,"user/group/role name list", state); 
		try {
			// HiveParser.g:1815:5: ( principalName ( COMMA principalName )* -> ^( TOK_PRINCIPAL_NAME ( principalName )+ ) )
			// HiveParser.g:1815:7: principalName ( COMMA principalName )*
			{
			pushFollow(FOLLOW_principalName_in_principalSpecification10018);
			principalName617=principalName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_principalName.add(principalName617.getTree());
			// HiveParser.g:1815:21: ( COMMA principalName )*
			loop187:
			while (true) {
				int alt187=2;
				int LA187_0 = input.LA(1);
				if ( (LA187_0==COMMA) ) {
					alt187=1;
				}

				switch (alt187) {
				case 1 :
					// HiveParser.g:1815:22: COMMA principalName
					{
					COMMA618=(Token)match(input,COMMA,FOLLOW_COMMA_in_principalSpecification10021); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA618);

					pushFollow(FOLLOW_principalName_in_principalSpecification10023);
					principalName619=principalName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_principalName.add(principalName619.getTree());
					}
					break;

				default :
					break loop187;
				}
			}

			// AST REWRITE
			// elements: principalName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1815:44: -> ^( TOK_PRINCIPAL_NAME ( principalName )+ )
			{
				// HiveParser.g:1815:47: ^( TOK_PRINCIPAL_NAME ( principalName )+ )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_PRINCIPAL_NAME, "TOK_PRINCIPAL_NAME"), root_1);
				if ( !(stream_principalName.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_principalName.hasNext() ) {
					adaptor.addChild(root_1, stream_principalName.nextTree());
				}
				stream_principalName.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "principalSpecification"


	public static class principalName_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "principalName"
	// HiveParser.g:1818:1: principalName : ( KW_USER principalIdentifier -> ^( TOK_USER principalIdentifier ) | KW_GROUP principalIdentifier -> ^( TOK_GROUP principalIdentifier ) | KW_ROLE identifier -> ^( TOK_ROLE identifier ) );
	public final HiveParser.principalName_return principalName() throws RecognitionException {
		HiveParser.principalName_return retval = new HiveParser.principalName_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_USER620=null;
		Token KW_GROUP622=null;
		Token KW_ROLE624=null;
		ParserRuleReturnScope principalIdentifier621 =null;
		ParserRuleReturnScope principalIdentifier623 =null;
		ParserRuleReturnScope identifier625 =null;

		ASTNode KW_USER620_tree=null;
		ASTNode KW_GROUP622_tree=null;
		ASTNode KW_ROLE624_tree=null;
		RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
		RewriteRuleTokenStream stream_KW_USER=new RewriteRuleTokenStream(adaptor,"token KW_USER");
		RewriteRuleTokenStream stream_KW_GROUP=new RewriteRuleTokenStream(adaptor,"token KW_GROUP");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_principalIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule principalIdentifier");

		pushMsg(retval.start,"user|group|role name", state);
		try {
			// HiveParser.g:1821:5: ( KW_USER principalIdentifier -> ^( TOK_USER principalIdentifier ) | KW_GROUP principalIdentifier -> ^( TOK_GROUP principalIdentifier ) | KW_ROLE identifier -> ^( TOK_ROLE identifier ) )
			int alt188=3;
			switch ( input.LA(1) ) {
			case KW_USER:
				{
				alt188=1;
				}
				break;
			case KW_GROUP:
				{
				alt188=2;
				}
				break;
			case KW_ROLE:
				{
				alt188=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 188, 0, input);
				throw nvae;
			}
			switch (alt188) {
				case 1 :
					// HiveParser.g:1821:7: KW_USER principalIdentifier
					{
					KW_USER620=(Token)match(input,KW_USER,FOLLOW_KW_USER_in_principalName10061); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_USER.add(KW_USER620);

					pushFollow(FOLLOW_principalIdentifier_in_principalName10063);
					principalIdentifier621=principalIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_principalIdentifier.add(principalIdentifier621.getTree());
					// AST REWRITE
					// elements: principalIdentifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1821:35: -> ^( TOK_USER principalIdentifier )
					{
						// HiveParser.g:1821:38: ^( TOK_USER principalIdentifier )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_USER, "TOK_USER"), root_1);
						adaptor.addChild(root_1, stream_principalIdentifier.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:1822:7: KW_GROUP principalIdentifier
					{
					KW_GROUP622=(Token)match(input,KW_GROUP,FOLLOW_KW_GROUP_in_principalName10079); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_GROUP.add(KW_GROUP622);

					pushFollow(FOLLOW_principalIdentifier_in_principalName10081);
					principalIdentifier623=principalIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_principalIdentifier.add(principalIdentifier623.getTree());
					// AST REWRITE
					// elements: principalIdentifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1822:36: -> ^( TOK_GROUP principalIdentifier )
					{
						// HiveParser.g:1822:39: ^( TOK_GROUP principalIdentifier )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_GROUP, "TOK_GROUP"), root_1);
						adaptor.addChild(root_1, stream_principalIdentifier.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// HiveParser.g:1823:7: KW_ROLE identifier
					{
					KW_ROLE624=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_principalName10097); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE624);

					pushFollow(FOLLOW_identifier_in_principalName10099);
					identifier625=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(identifier625.getTree());
					// AST REWRITE
					// elements: identifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1823:26: -> ^( TOK_ROLE identifier )
					{
						// HiveParser.g:1823:29: ^( TOK_ROLE identifier )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ROLE, "TOK_ROLE"), root_1);
						adaptor.addChild(root_1, stream_identifier.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "principalName"


	public static class withGrantOption_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "withGrantOption"
	// HiveParser.g:1826:1: withGrantOption : KW_WITH KW_GRANT KW_OPTION -> ^( TOK_GRANT_WITH_OPTION ) ;
	public final HiveParser.withGrantOption_return withGrantOption() throws RecognitionException {
		HiveParser.withGrantOption_return retval = new HiveParser.withGrantOption_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_WITH626=null;
		Token KW_GRANT627=null;
		Token KW_OPTION628=null;

		ASTNode KW_WITH626_tree=null;
		ASTNode KW_GRANT627_tree=null;
		ASTNode KW_OPTION628_tree=null;
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
		RewriteRuleTokenStream stream_KW_OPTION=new RewriteRuleTokenStream(adaptor,"token KW_OPTION");

		pushMsg(retval.start,"with grant option", state);
		try {
			// HiveParser.g:1829:5: ( KW_WITH KW_GRANT KW_OPTION -> ^( TOK_GRANT_WITH_OPTION ) )
			// HiveParser.g:1829:7: KW_WITH KW_GRANT KW_OPTION
			{
			KW_WITH626=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_withGrantOption10134); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH626);

			KW_GRANT627=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_withGrantOption10136); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT627);

			KW_OPTION628=(Token)match(input,KW_OPTION,FOLLOW_KW_OPTION_in_withGrantOption10138); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_OPTION.add(KW_OPTION628);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1830:5: -> ^( TOK_GRANT_WITH_OPTION )
			{
				// HiveParser.g:1830:8: ^( TOK_GRANT_WITH_OPTION )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_GRANT_WITH_OPTION, "TOK_GRANT_WITH_OPTION"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "withGrantOption"


	public static class grantOptionFor_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "grantOptionFor"
	// HiveParser.g:1833:1: grantOptionFor : KW_GRANT KW_OPTION KW_FOR -> ^( TOK_GRANT_OPTION_FOR ) ;
	public final HiveParser.grantOptionFor_return grantOptionFor() throws RecognitionException {
		HiveParser.grantOptionFor_return retval = new HiveParser.grantOptionFor_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_GRANT629=null;
		Token KW_OPTION630=null;
		Token KW_FOR631=null;

		ASTNode KW_GRANT629_tree=null;
		ASTNode KW_OPTION630_tree=null;
		ASTNode KW_FOR631_tree=null;
		RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
		RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
		RewriteRuleTokenStream stream_KW_OPTION=new RewriteRuleTokenStream(adaptor,"token KW_OPTION");

		pushMsg(retval.start,"grant option for", state);
		try {
			// HiveParser.g:1836:5: ( KW_GRANT KW_OPTION KW_FOR -> ^( TOK_GRANT_OPTION_FOR ) )
			// HiveParser.g:1836:7: KW_GRANT KW_OPTION KW_FOR
			{
			KW_GRANT629=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_grantOptionFor10175); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT629);

			KW_OPTION630=(Token)match(input,KW_OPTION,FOLLOW_KW_OPTION_in_grantOptionFor10177); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_OPTION.add(KW_OPTION630);

			KW_FOR631=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_grantOptionFor10179); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FOR.add(KW_FOR631);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1837:5: -> ^( TOK_GRANT_OPTION_FOR )
			{
				// HiveParser.g:1837:8: ^( TOK_GRANT_OPTION_FOR )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_GRANT_OPTION_FOR, "TOK_GRANT_OPTION_FOR"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "grantOptionFor"


	public static class adminOptionFor_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "adminOptionFor"
	// HiveParser.g:1840:1: adminOptionFor : KW_ADMIN KW_OPTION KW_FOR -> ^( TOK_ADMIN_OPTION_FOR ) ;
	public final HiveParser.adminOptionFor_return adminOptionFor() throws RecognitionException {
		HiveParser.adminOptionFor_return retval = new HiveParser.adminOptionFor_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_ADMIN632=null;
		Token KW_OPTION633=null;
		Token KW_FOR634=null;

		ASTNode KW_ADMIN632_tree=null;
		ASTNode KW_OPTION633_tree=null;
		ASTNode KW_FOR634_tree=null;
		RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
		RewriteRuleTokenStream stream_KW_OPTION=new RewriteRuleTokenStream(adaptor,"token KW_OPTION");
		RewriteRuleTokenStream stream_KW_ADMIN=new RewriteRuleTokenStream(adaptor,"token KW_ADMIN");

		pushMsg(retval.start,"admin option for", state);
		try {
			// HiveParser.g:1843:5: ( KW_ADMIN KW_OPTION KW_FOR -> ^( TOK_ADMIN_OPTION_FOR ) )
			// HiveParser.g:1843:7: KW_ADMIN KW_OPTION KW_FOR
			{
			KW_ADMIN632=(Token)match(input,KW_ADMIN,FOLLOW_KW_ADMIN_in_adminOptionFor10212); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ADMIN.add(KW_ADMIN632);

			KW_OPTION633=(Token)match(input,KW_OPTION,FOLLOW_KW_OPTION_in_adminOptionFor10214); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_OPTION.add(KW_OPTION633);

			KW_FOR634=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_adminOptionFor10216); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FOR.add(KW_FOR634);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1844:5: -> ^( TOK_ADMIN_OPTION_FOR )
			{
				// HiveParser.g:1844:8: ^( TOK_ADMIN_OPTION_FOR )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ADMIN_OPTION_FOR, "TOK_ADMIN_OPTION_FOR"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "adminOptionFor"


	public static class withAdminOption_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "withAdminOption"
	// HiveParser.g:1847:1: withAdminOption : KW_WITH KW_ADMIN KW_OPTION -> ^( TOK_GRANT_WITH_ADMIN_OPTION ) ;
	public final HiveParser.withAdminOption_return withAdminOption() throws RecognitionException {
		HiveParser.withAdminOption_return retval = new HiveParser.withAdminOption_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_WITH635=null;
		Token KW_ADMIN636=null;
		Token KW_OPTION637=null;

		ASTNode KW_WITH635_tree=null;
		ASTNode KW_ADMIN636_tree=null;
		ASTNode KW_OPTION637_tree=null;
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_OPTION=new RewriteRuleTokenStream(adaptor,"token KW_OPTION");
		RewriteRuleTokenStream stream_KW_ADMIN=new RewriteRuleTokenStream(adaptor,"token KW_ADMIN");

		pushMsg(retval.start,"with admin option", state);
		try {
			// HiveParser.g:1850:5: ( KW_WITH KW_ADMIN KW_OPTION -> ^( TOK_GRANT_WITH_ADMIN_OPTION ) )
			// HiveParser.g:1850:7: KW_WITH KW_ADMIN KW_OPTION
			{
			KW_WITH635=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_withAdminOption10249); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH635);

			KW_ADMIN636=(Token)match(input,KW_ADMIN,FOLLOW_KW_ADMIN_in_withAdminOption10251); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ADMIN.add(KW_ADMIN636);

			KW_OPTION637=(Token)match(input,KW_OPTION,FOLLOW_KW_OPTION_in_withAdminOption10253); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_OPTION.add(KW_OPTION637);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1851:5: -> ^( TOK_GRANT_WITH_ADMIN_OPTION )
			{
				// HiveParser.g:1851:8: ^( TOK_GRANT_WITH_ADMIN_OPTION )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_GRANT_WITH_ADMIN_OPTION, "TOK_GRANT_WITH_ADMIN_OPTION"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "withAdminOption"


	public static class metastoreCheck_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "metastoreCheck"
	// HiveParser.g:1854:1: metastoreCheck : KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE tableName ( (add= KW_ADD |drop= KW_DROP |sync= KW_SYNC ) (parts= KW_PARTITIONS ) )? | ( partitionSpec )? ) -> ^( TOK_MSCK ( $repair)? ( tableName )? ( $add)? ( $drop)? ( $sync)? ( ( partitionSpec )* )? ) ;
	public final HiveParser.metastoreCheck_return metastoreCheck() throws RecognitionException {
		HiveParser.metastoreCheck_return retval = new HiveParser.metastoreCheck_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token repair=null;
		Token add=null;
		Token drop=null;
		Token sync=null;
		Token parts=null;
		Token KW_MSCK638=null;
		Token KW_TABLE639=null;
		ParserRuleReturnScope tableName640 =null;
		ParserRuleReturnScope partitionSpec641 =null;

		ASTNode repair_tree=null;
		ASTNode add_tree=null;
		ASTNode drop_tree=null;
		ASTNode sync_tree=null;
		ASTNode parts_tree=null;
		ASTNode KW_MSCK638_tree=null;
		ASTNode KW_TABLE639_tree=null;
		RewriteRuleTokenStream stream_KW_REPAIR=new RewriteRuleTokenStream(adaptor,"token KW_REPAIR");
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_SYNC=new RewriteRuleTokenStream(adaptor,"token KW_SYNC");
		RewriteRuleTokenStream stream_KW_MSCK=new RewriteRuleTokenStream(adaptor,"token KW_MSCK");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_ADD=new RewriteRuleTokenStream(adaptor,"token KW_ADD");
		RewriteRuleTokenStream stream_KW_PARTITIONS=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONS");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg(retval.start,"metastore check statement", state); 
		try {
			// HiveParser.g:1857:5: ( KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE tableName ( (add= KW_ADD |drop= KW_DROP |sync= KW_SYNC ) (parts= KW_PARTITIONS ) )? | ( partitionSpec )? ) -> ^( TOK_MSCK ( $repair)? ( tableName )? ( $add)? ( $drop)? ( $sync)? ( ( partitionSpec )* )? ) )
			// HiveParser.g:1857:7: KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE tableName ( (add= KW_ADD |drop= KW_DROP |sync= KW_SYNC ) (parts= KW_PARTITIONS ) )? | ( partitionSpec )? )
			{
			KW_MSCK638=(Token)match(input,KW_MSCK,FOLLOW_KW_MSCK_in_metastoreCheck10290); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_MSCK.add(KW_MSCK638);

			// HiveParser.g:1857:15: (repair= KW_REPAIR )?
			int alt189=2;
			int LA189_0 = input.LA(1);
			if ( (LA189_0==KW_REPAIR) ) {
				alt189=1;
			}
			switch (alt189) {
				case 1 :
					// HiveParser.g:1857:16: repair= KW_REPAIR
					{
					repair=(Token)match(input,KW_REPAIR,FOLLOW_KW_REPAIR_in_metastoreCheck10295); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_REPAIR.add(repair);

					}
					break;

			}

			// HiveParser.g:1858:7: ( KW_TABLE tableName ( (add= KW_ADD |drop= KW_DROP |sync= KW_SYNC ) (parts= KW_PARTITIONS ) )? | ( partitionSpec )? )
			int alt193=2;
			int LA193_0 = input.LA(1);
			if ( (LA193_0==KW_TABLE) ) {
				alt193=1;
			}
			else if ( (LA193_0==EOF||LA193_0==KW_PARTITION) ) {
				alt193=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 193, 0, input);
				throw nvae;
			}

			switch (alt193) {
				case 1 :
					// HiveParser.g:1858:8: KW_TABLE tableName ( (add= KW_ADD |drop= KW_DROP |sync= KW_SYNC ) (parts= KW_PARTITIONS ) )?
					{
					KW_TABLE639=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_metastoreCheck10306); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE639);

					pushFollow(FOLLOW_tableName_in_metastoreCheck10308);
					tableName640=tableName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableName.add(tableName640.getTree());
					// HiveParser.g:1859:9: ( (add= KW_ADD |drop= KW_DROP |sync= KW_SYNC ) (parts= KW_PARTITIONS ) )?
					int alt191=2;
					int LA191_0 = input.LA(1);
					if ( (LA191_0==KW_ADD||LA191_0==KW_DROP||LA191_0==KW_SYNC) ) {
						alt191=1;
					}
					switch (alt191) {
						case 1 :
							// HiveParser.g:1859:10: (add= KW_ADD |drop= KW_DROP |sync= KW_SYNC ) (parts= KW_PARTITIONS )
							{
							// HiveParser.g:1859:10: (add= KW_ADD |drop= KW_DROP |sync= KW_SYNC )
							int alt190=3;
							switch ( input.LA(1) ) {
							case KW_ADD:
								{
								alt190=1;
								}
								break;
							case KW_DROP:
								{
								alt190=2;
								}
								break;
							case KW_SYNC:
								{
								alt190=3;
								}
								break;
							default:
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 190, 0, input);
								throw nvae;
							}
							switch (alt190) {
								case 1 :
									// HiveParser.g:1859:11: add= KW_ADD
									{
									add=(Token)match(input,KW_ADD,FOLLOW_KW_ADD_in_metastoreCheck10322); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_ADD.add(add);

									}
									break;
								case 2 :
									// HiveParser.g:1859:24: drop= KW_DROP
									{
									drop=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_metastoreCheck10328); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_DROP.add(drop);

									}
									break;
								case 3 :
									// HiveParser.g:1859:39: sync= KW_SYNC
									{
									sync=(Token)match(input,KW_SYNC,FOLLOW_KW_SYNC_in_metastoreCheck10334); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_SYNC.add(sync);

									}
									break;

							}

							// HiveParser.g:1859:53: (parts= KW_PARTITIONS )
							// HiveParser.g:1859:54: parts= KW_PARTITIONS
							{
							parts=(Token)match(input,KW_PARTITIONS,FOLLOW_KW_PARTITIONS_in_metastoreCheck10340); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_PARTITIONS.add(parts);

							}

							}
							break;

					}

					}
					break;
				case 2 :
					// HiveParser.g:1860:9: ( partitionSpec )?
					{
					// HiveParser.g:1860:9: ( partitionSpec )?
					int alt192=2;
					int LA192_0 = input.LA(1);
					if ( (LA192_0==KW_PARTITION) ) {
						alt192=1;
					}
					switch (alt192) {
						case 1 :
							// HiveParser.g:1860:10: partitionSpec
							{
							pushFollow(FOLLOW_partitionSpec_in_metastoreCheck10356);
							partitionSpec641=partitionSpec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec641.getTree());
							}
							break;

					}

					}
					break;

			}

			// AST REWRITE
			// elements: tableName, partitionSpec, repair, drop, sync, add
			// token labels: drop, add, repair, sync
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_drop=new RewriteRuleTokenStream(adaptor,"token drop",drop);
			RewriteRuleTokenStream stream_add=new RewriteRuleTokenStream(adaptor,"token add",add);
			RewriteRuleTokenStream stream_repair=new RewriteRuleTokenStream(adaptor,"token repair",repair);
			RewriteRuleTokenStream stream_sync=new RewriteRuleTokenStream(adaptor,"token sync",sync);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1861:5: -> ^( TOK_MSCK ( $repair)? ( tableName )? ( $add)? ( $drop)? ( $sync)? ( ( partitionSpec )* )? )
			{
				// HiveParser.g:1861:8: ^( TOK_MSCK ( $repair)? ( tableName )? ( $add)? ( $drop)? ( $sync)? ( ( partitionSpec )* )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_MSCK, "TOK_MSCK"), root_1);
				// HiveParser.g:1861:20: ( $repair)?
				if ( stream_repair.hasNext() ) {
					adaptor.addChild(root_1, stream_repair.nextNode());
				}
				stream_repair.reset();

				// HiveParser.g:1861:28: ( tableName )?
				if ( stream_tableName.hasNext() ) {
					adaptor.addChild(root_1, stream_tableName.nextTree());
				}
				stream_tableName.reset();

				// HiveParser.g:1861:40: ( $add)?
				if ( stream_add.hasNext() ) {
					adaptor.addChild(root_1, stream_add.nextNode());
				}
				stream_add.reset();

				// HiveParser.g:1861:46: ( $drop)?
				if ( stream_drop.hasNext() ) {
					adaptor.addChild(root_1, stream_drop.nextNode());
				}
				stream_drop.reset();

				// HiveParser.g:1861:53: ( $sync)?
				if ( stream_sync.hasNext() ) {
					adaptor.addChild(root_1, stream_sync.nextNode());
				}
				stream_sync.reset();

				// HiveParser.g:1861:59: ( ( partitionSpec )* )?
				if ( stream_partitionSpec.hasNext() ) {
					// HiveParser.g:1861:60: ( partitionSpec )*
					while ( stream_partitionSpec.hasNext() ) {
						adaptor.addChild(root_1, stream_partitionSpec.nextTree());
					}
					stream_partitionSpec.reset();

				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "metastoreCheck"


	public static class resourceList_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "resourceList"
	// HiveParser.g:1864:1: resourceList : resource ( COMMA resource )* -> ^( TOK_RESOURCE_LIST ( resource )+ ) ;
	public final HiveParser.resourceList_return resourceList() throws RecognitionException {
		HiveParser.resourceList_return retval = new HiveParser.resourceList_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token COMMA643=null;
		ParserRuleReturnScope resource642 =null;
		ParserRuleReturnScope resource644 =null;

		ASTNode COMMA643_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_resource=new RewriteRuleSubtreeStream(adaptor,"rule resource");

		 pushMsg(retval.start,"resource list", state); 
		try {
			// HiveParser.g:1867:3: ( resource ( COMMA resource )* -> ^( TOK_RESOURCE_LIST ( resource )+ ) )
			// HiveParser.g:1868:3: resource ( COMMA resource )*
			{
			pushFollow(FOLLOW_resource_in_resourceList10421);
			resource642=resource();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_resource.add(resource642.getTree());
			// HiveParser.g:1868:12: ( COMMA resource )*
			loop194:
			while (true) {
				int alt194=2;
				int LA194_0 = input.LA(1);
				if ( (LA194_0==COMMA) ) {
					alt194=1;
				}

				switch (alt194) {
				case 1 :
					// HiveParser.g:1868:13: COMMA resource
					{
					COMMA643=(Token)match(input,COMMA,FOLLOW_COMMA_in_resourceList10424); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA643);

					pushFollow(FOLLOW_resource_in_resourceList10426);
					resource644=resource();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_resource.add(resource644.getTree());
					}
					break;

				default :
					break loop194;
				}
			}

			// AST REWRITE
			// elements: resource
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1868:30: -> ^( TOK_RESOURCE_LIST ( resource )+ )
			{
				// HiveParser.g:1868:33: ^( TOK_RESOURCE_LIST ( resource )+ )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_RESOURCE_LIST, "TOK_RESOURCE_LIST"), root_1);
				if ( !(stream_resource.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_resource.hasNext() ) {
					adaptor.addChild(root_1, stream_resource.nextTree());
				}
				stream_resource.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "resourceList"


	public static class resource_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "resource"
	// HiveParser.g:1871:1: resource : resType= resourceType resPath= StringLiteral -> ^( TOK_RESOURCE_URI $resType $resPath) ;
	public final HiveParser.resource_return resource() throws RecognitionException {
		HiveParser.resource_return retval = new HiveParser.resource_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token resPath=null;
		ParserRuleReturnScope resType =null;

		ASTNode resPath_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleSubtreeStream stream_resourceType=new RewriteRuleSubtreeStream(adaptor,"rule resourceType");

		 pushMsg(retval.start,"resource", state); 
		try {
			// HiveParser.g:1874:3: (resType= resourceType resPath= StringLiteral -> ^( TOK_RESOURCE_URI $resType $resPath) )
			// HiveParser.g:1875:3: resType= resourceType resPath= StringLiteral
			{
			pushFollow(FOLLOW_resourceType_in_resource10464);
			resType=resourceType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_resourceType.add(resType.getTree());
			resPath=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_resource10468); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(resPath);

			// AST REWRITE
			// elements: resType, resPath
			// token labels: resPath
			// rule labels: resType, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_resPath=new RewriteRuleTokenStream(adaptor,"token resPath",resPath);
			RewriteRuleSubtreeStream stream_resType=new RewriteRuleSubtreeStream(adaptor,"rule resType",resType!=null?resType.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1875:46: -> ^( TOK_RESOURCE_URI $resType $resPath)
			{
				// HiveParser.g:1875:49: ^( TOK_RESOURCE_URI $resType $resPath)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_RESOURCE_URI, "TOK_RESOURCE_URI"), root_1);
				adaptor.addChild(root_1, stream_resType.nextTree());
				adaptor.addChild(root_1, stream_resPath.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "resource"


	public static class resourceType_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "resourceType"
	// HiveParser.g:1878:1: resourceType : ( KW_JAR -> ^( TOK_JAR ) | KW_FILE -> ^( TOK_FILE ) | KW_ARCHIVE -> ^( TOK_ARCHIVE ) );
	public final HiveParser.resourceType_return resourceType() throws RecognitionException {
		HiveParser.resourceType_return retval = new HiveParser.resourceType_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_JAR645=null;
		Token KW_FILE646=null;
		Token KW_ARCHIVE647=null;

		ASTNode KW_JAR645_tree=null;
		ASTNode KW_FILE646_tree=null;
		ASTNode KW_ARCHIVE647_tree=null;
		RewriteRuleTokenStream stream_KW_ARCHIVE=new RewriteRuleTokenStream(adaptor,"token KW_ARCHIVE");
		RewriteRuleTokenStream stream_KW_JAR=new RewriteRuleTokenStream(adaptor,"token KW_JAR");
		RewriteRuleTokenStream stream_KW_FILE=new RewriteRuleTokenStream(adaptor,"token KW_FILE");

		 pushMsg(retval.start,"resource type", state); 
		try {
			// HiveParser.g:1881:3: ( KW_JAR -> ^( TOK_JAR ) | KW_FILE -> ^( TOK_FILE ) | KW_ARCHIVE -> ^( TOK_ARCHIVE ) )
			int alt195=3;
			switch ( input.LA(1) ) {
			case KW_JAR:
				{
				alt195=1;
				}
				break;
			case KW_FILE:
				{
				alt195=2;
				}
				break;
			case KW_ARCHIVE:
				{
				alt195=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 195, 0, input);
				throw nvae;
			}
			switch (alt195) {
				case 1 :
					// HiveParser.g:1882:3: KW_JAR
					{
					KW_JAR645=(Token)match(input,KW_JAR,FOLLOW_KW_JAR_in_resourceType10505); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_JAR.add(KW_JAR645);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1882:10: -> ^( TOK_JAR )
					{
						// HiveParser.g:1882:13: ^( TOK_JAR )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_JAR, "TOK_JAR"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:1884:3: KW_FILE
					{
					KW_FILE646=(Token)match(input,KW_FILE,FOLLOW_KW_FILE_in_resourceType10519); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_FILE.add(KW_FILE646);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1884:11: -> ^( TOK_FILE )
					{
						// HiveParser.g:1884:14: ^( TOK_FILE )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_FILE, "TOK_FILE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// HiveParser.g:1886:3: KW_ARCHIVE
					{
					KW_ARCHIVE647=(Token)match(input,KW_ARCHIVE,FOLLOW_KW_ARCHIVE_in_resourceType10533); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ARCHIVE.add(KW_ARCHIVE647);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 1886:14: -> ^( TOK_ARCHIVE )
					{
						// HiveParser.g:1886:17: ^( TOK_ARCHIVE )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ARCHIVE, "TOK_ARCHIVE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "resourceType"


	public static class createFunctionStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "createFunctionStatement"
	// HiveParser.g:1889:1: createFunctionStatement : KW_CREATE (temp= KW_TEMPORARY )? KW_FUNCTION functionIdentifier KW_AS StringLiteral ( KW_USING rList= resourceList )? -> {$temp != null}? ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? TOK_TEMPORARY ) -> ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? ) ;
	public final HiveParser.createFunctionStatement_return createFunctionStatement() throws RecognitionException {
		HiveParser.createFunctionStatement_return retval = new HiveParser.createFunctionStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token temp=null;
		Token KW_CREATE648=null;
		Token KW_FUNCTION649=null;
		Token KW_AS651=null;
		Token StringLiteral652=null;
		Token KW_USING653=null;
		ParserRuleReturnScope rList =null;
		ParserRuleReturnScope functionIdentifier650 =null;

		ASTNode temp_tree=null;
		ASTNode KW_CREATE648_tree=null;
		ASTNode KW_FUNCTION649_tree=null;
		ASTNode KW_AS651_tree=null;
		ASTNode StringLiteral652_tree=null;
		ASTNode KW_USING653_tree=null;
		RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_USING=new RewriteRuleTokenStream(adaptor,"token KW_USING");
		RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleSubtreeStream stream_functionIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule functionIdentifier");
		RewriteRuleSubtreeStream stream_resourceList=new RewriteRuleSubtreeStream(adaptor,"rule resourceList");

		 pushMsg(retval.start,"create function statement", state); 
		try {
			// HiveParser.g:1892:5: ( KW_CREATE (temp= KW_TEMPORARY )? KW_FUNCTION functionIdentifier KW_AS StringLiteral ( KW_USING rList= resourceList )? -> {$temp != null}? ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? TOK_TEMPORARY ) -> ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? ) )
			// HiveParser.g:1892:7: KW_CREATE (temp= KW_TEMPORARY )? KW_FUNCTION functionIdentifier KW_AS StringLiteral ( KW_USING rList= resourceList )?
			{
			KW_CREATE648=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createFunctionStatement10564); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE648);

			// HiveParser.g:1892:17: (temp= KW_TEMPORARY )?
			int alt196=2;
			int LA196_0 = input.LA(1);
			if ( (LA196_0==KW_TEMPORARY) ) {
				alt196=1;
			}
			switch (alt196) {
				case 1 :
					// HiveParser.g:1892:18: temp= KW_TEMPORARY
					{
					temp=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_createFunctionStatement10569); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TEMPORARY.add(temp);

					}
					break;

			}

			KW_FUNCTION649=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_createFunctionStatement10573); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FUNCTION.add(KW_FUNCTION649);

			pushFollow(FOLLOW_functionIdentifier_in_createFunctionStatement10575);
			functionIdentifier650=functionIdentifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_functionIdentifier.add(functionIdentifier650.getTree());
			KW_AS651=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createFunctionStatement10577); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS651);

			StringLiteral652=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_createFunctionStatement10579); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral652);

			// HiveParser.g:1893:7: ( KW_USING rList= resourceList )?
			int alt197=2;
			int LA197_0 = input.LA(1);
			if ( (LA197_0==KW_USING) ) {
				alt197=1;
			}
			switch (alt197) {
				case 1 :
					// HiveParser.g:1893:8: KW_USING rList= resourceList
					{
					KW_USING653=(Token)match(input,KW_USING,FOLLOW_KW_USING_in_createFunctionStatement10588); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_USING.add(KW_USING653);

					pushFollow(FOLLOW_resourceList_in_createFunctionStatement10592);
					rList=resourceList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_resourceList.add(rList.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: StringLiteral, rList, functionIdentifier, StringLiteral, rList, functionIdentifier
			// token labels: 
			// rule labels: rList, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_rList=new RewriteRuleSubtreeStream(adaptor,"rule rList",rList!=null?rList.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1894:5: -> {$temp != null}? ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? TOK_TEMPORARY )
			if (temp != null) {
				// HiveParser.g:1894:25: ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? TOK_TEMPORARY )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_CREATEFUNCTION, "TOK_CREATEFUNCTION"), root_1);
				adaptor.addChild(root_1, stream_functionIdentifier.nextTree());
				adaptor.addChild(root_1, stream_StringLiteral.nextNode());
				// HiveParser.g:1894:80: ( $rList)?
				if ( stream_rList.hasNext() ) {
					adaptor.addChild(root_1, stream_rList.nextTree());
				}
				stream_rList.reset();

				adaptor.addChild(root_1, (ASTNode)adaptor.create(TOK_TEMPORARY, "TOK_TEMPORARY"));
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1895:5: -> ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? )
			{
				// HiveParser.g:1895:25: ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_CREATEFUNCTION, "TOK_CREATEFUNCTION"), root_1);
				adaptor.addChild(root_1, stream_functionIdentifier.nextTree());
				adaptor.addChild(root_1, stream_StringLiteral.nextNode());
				// HiveParser.g:1895:80: ( $rList)?
				if ( stream_rList.hasNext() ) {
					adaptor.addChild(root_1, stream_rList.nextTree());
				}
				stream_rList.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createFunctionStatement"


	public static class dropFunctionStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "dropFunctionStatement"
	// HiveParser.g:1898:1: dropFunctionStatement : KW_DROP (temp= KW_TEMPORARY )? KW_FUNCTION ( ifExists )? functionIdentifier -> {$temp != null}? ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? TOK_TEMPORARY ) -> ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? ) ;
	public final HiveParser.dropFunctionStatement_return dropFunctionStatement() throws RecognitionException {
		HiveParser.dropFunctionStatement_return retval = new HiveParser.dropFunctionStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token temp=null;
		Token KW_DROP654=null;
		Token KW_FUNCTION655=null;
		ParserRuleReturnScope ifExists656 =null;
		ParserRuleReturnScope functionIdentifier657 =null;

		ASTNode temp_tree=null;
		ASTNode KW_DROP654_tree=null;
		ASTNode KW_FUNCTION655_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
		RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
		RewriteRuleSubtreeStream stream_functionIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule functionIdentifier");

		 pushMsg(retval.start,"drop function statement", state); 
		try {
			// HiveParser.g:1901:5: ( KW_DROP (temp= KW_TEMPORARY )? KW_FUNCTION ( ifExists )? functionIdentifier -> {$temp != null}? ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? TOK_TEMPORARY ) -> ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? ) )
			// HiveParser.g:1901:7: KW_DROP (temp= KW_TEMPORARY )? KW_FUNCTION ( ifExists )? functionIdentifier
			{
			KW_DROP654=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropFunctionStatement10678); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP654);

			// HiveParser.g:1901:15: (temp= KW_TEMPORARY )?
			int alt198=2;
			int LA198_0 = input.LA(1);
			if ( (LA198_0==KW_TEMPORARY) ) {
				alt198=1;
			}
			switch (alt198) {
				case 1 :
					// HiveParser.g:1901:16: temp= KW_TEMPORARY
					{
					temp=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_dropFunctionStatement10683); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TEMPORARY.add(temp);

					}
					break;

			}

			KW_FUNCTION655=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_dropFunctionStatement10687); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FUNCTION.add(KW_FUNCTION655);

			// HiveParser.g:1901:48: ( ifExists )?
			int alt199=2;
			int LA199_0 = input.LA(1);
			if ( (LA199_0==KW_IF) ) {
				alt199=1;
			}
			switch (alt199) {
				case 1 :
					// HiveParser.g:1901:48: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropFunctionStatement10689);
					ifExists656=ifExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifExists.add(ifExists656.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_functionIdentifier_in_dropFunctionStatement10692);
			functionIdentifier657=functionIdentifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_functionIdentifier.add(functionIdentifier657.getTree());
			// AST REWRITE
			// elements: functionIdentifier, functionIdentifier, ifExists, ifExists
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1902:5: -> {$temp != null}? ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? TOK_TEMPORARY )
			if (temp != null) {
				// HiveParser.g:1902:25: ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? TOK_TEMPORARY )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DROPFUNCTION, "TOK_DROPFUNCTION"), root_1);
				adaptor.addChild(root_1, stream_functionIdentifier.nextTree());
				// HiveParser.g:1902:63: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				adaptor.addChild(root_1, (ASTNode)adaptor.create(TOK_TEMPORARY, "TOK_TEMPORARY"));
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1903:5: -> ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? )
			{
				// HiveParser.g:1903:25: ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DROPFUNCTION, "TOK_DROPFUNCTION"), root_1);
				adaptor.addChild(root_1, stream_functionIdentifier.nextTree());
				// HiveParser.g:1903:63: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropFunctionStatement"


	public static class reloadFunctionStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "reloadFunctionStatement"
	// HiveParser.g:1906:1: reloadFunctionStatement : KW_RELOAD KW_FUNCTION -> ^( TOK_RELOADFUNCTION ) ;
	public final HiveParser.reloadFunctionStatement_return reloadFunctionStatement() throws RecognitionException {
		HiveParser.reloadFunctionStatement_return retval = new HiveParser.reloadFunctionStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_RELOAD658=null;
		Token KW_FUNCTION659=null;

		ASTNode KW_RELOAD658_tree=null;
		ASTNode KW_FUNCTION659_tree=null;
		RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
		RewriteRuleTokenStream stream_KW_RELOAD=new RewriteRuleTokenStream(adaptor,"token KW_RELOAD");

		 pushMsg(retval.start,"reload function statement", state); 
		try {
			// HiveParser.g:1909:5: ( KW_RELOAD KW_FUNCTION -> ^( TOK_RELOADFUNCTION ) )
			// HiveParser.g:1909:7: KW_RELOAD KW_FUNCTION
			{
			KW_RELOAD658=(Token)match(input,KW_RELOAD,FOLLOW_KW_RELOAD_in_reloadFunctionStatement10770); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_RELOAD.add(KW_RELOAD658);

			KW_FUNCTION659=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_reloadFunctionStatement10772); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FUNCTION.add(KW_FUNCTION659);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1909:29: -> ^( TOK_RELOADFUNCTION )
			{
				// HiveParser.g:1909:32: ^( TOK_RELOADFUNCTION )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_RELOADFUNCTION, "TOK_RELOADFUNCTION"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "reloadFunctionStatement"


	public static class createMacroStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "createMacroStatement"
	// HiveParser.g:1911:1: createMacroStatement : KW_CREATE KW_TEMPORARY KW_MACRO Identifier LPAREN ( columnNameTypeList )? RPAREN expression -> ^( TOK_CREATEMACRO Identifier ( columnNameTypeList )? expression ) ;
	public final HiveParser.createMacroStatement_return createMacroStatement() throws RecognitionException {
		HiveParser.createMacroStatement_return retval = new HiveParser.createMacroStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_CREATE660=null;
		Token KW_TEMPORARY661=null;
		Token KW_MACRO662=null;
		Token Identifier663=null;
		Token LPAREN664=null;
		Token RPAREN666=null;
		ParserRuleReturnScope columnNameTypeList665 =null;
		ParserRuleReturnScope expression667 =null;

		ASTNode KW_CREATE660_tree=null;
		ASTNode KW_TEMPORARY661_tree=null;
		ASTNode KW_MACRO662_tree=null;
		ASTNode Identifier663_tree=null;
		ASTNode LPAREN664_tree=null;
		ASTNode RPAREN666_tree=null;
		RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_KW_MACRO=new RewriteRuleTokenStream(adaptor,"token KW_MACRO");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");

		 pushMsg(retval.start,"create macro statement", state); 
		try {
			// HiveParser.g:1914:5: ( KW_CREATE KW_TEMPORARY KW_MACRO Identifier LPAREN ( columnNameTypeList )? RPAREN expression -> ^( TOK_CREATEMACRO Identifier ( columnNameTypeList )? expression ) )
			// HiveParser.g:1914:7: KW_CREATE KW_TEMPORARY KW_MACRO Identifier LPAREN ( columnNameTypeList )? RPAREN expression
			{
			KW_CREATE660=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createMacroStatement10800); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE660);

			KW_TEMPORARY661=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_createMacroStatement10802); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TEMPORARY.add(KW_TEMPORARY661);

			KW_MACRO662=(Token)match(input,KW_MACRO,FOLLOW_KW_MACRO_in_createMacroStatement10804); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_MACRO.add(KW_MACRO662);

			Identifier663=(Token)match(input,Identifier,FOLLOW_Identifier_in_createMacroStatement10806); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_Identifier.add(Identifier663);

			LPAREN664=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createMacroStatement10814); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN664);

			// HiveParser.g:1915:14: ( columnNameTypeList )?
			int alt200=2;
			int LA200_0 = input.LA(1);
			if ( (LA200_0==Identifier||(LA200_0 >= KW_ABORT && LA200_0 <= KW_AFTER)||LA200_0==KW_ALLOC_FRACTION||LA200_0==KW_ANALYZE||LA200_0==KW_ARCHIVE||(LA200_0 >= KW_ASC && LA200_0 <= KW_AST)||(LA200_0 >= KW_AUTOCOMMIT && LA200_0 <= KW_BEFORE)||(LA200_0 >= KW_BUCKET && LA200_0 <= KW_BUCKETS)||(LA200_0 >= KW_CACHE && LA200_0 <= KW_CASCADE)||LA200_0==KW_CHANGE||(LA200_0 >= KW_CHECK && LA200_0 <= KW_COLLECTION)||(LA200_0 >= KW_COLUMNS && LA200_0 <= KW_COMMENT)||(LA200_0 >= KW_COMPACT && LA200_0 <= KW_CONCATENATE)||LA200_0==KW_CONTINUE||LA200_0==KW_DATA||(LA200_0 >= KW_DATABASES && LA200_0 <= KW_DEBUG)||(LA200_0 >= KW_DEFAULT && LA200_0 <= KW_DEFINED)||(LA200_0 >= KW_DELIMITED && LA200_0 <= KW_DESC)||(LA200_0 >= KW_DETAIL && LA200_0 <= KW_DISABLE)||(LA200_0 >= KW_DISTRIBUTE && LA200_0 <= KW_DO)||LA200_0==KW_DOW||(LA200_0 >= KW_DUMP && LA200_0 <= KW_ELEM_TYPE)||LA200_0==KW_ENABLE||(LA200_0 >= KW_ENFORCED && LA200_0 <= KW_ESCAPED)||LA200_0==KW_EXCLUSIVE||(LA200_0 >= KW_EXPLAIN && LA200_0 <= KW_EXPRESSION)||(LA200_0 >= KW_FIELDS && LA200_0 <= KW_FIRST)||(LA200_0 >= KW_FORMAT && LA200_0 <= KW_FORMATTED)||LA200_0==KW_FUNCTIONS||LA200_0==KW_GROUP||(LA200_0 >= KW_HOUR && LA200_0 <= KW_IDXPROPERTIES)||(LA200_0 >= KW_INDEX && LA200_0 <= KW_INDEXES)||(LA200_0 >= KW_INPATH && LA200_0 <= KW_INPUTFORMAT)||(LA200_0 >= KW_ISOLATION && LA200_0 <= KW_JAR)||(LA200_0 >= KW_KEY && LA200_0 <= KW_LAST)||LA200_0==KW_LEVEL||(LA200_0 >= KW_LIMIT && LA200_0 <= KW_LOAD)||(LA200_0 >= KW_LOCATION && LA200_0 <= KW_LONG)||LA200_0==KW_MANAGEMENT||(LA200_0 >= KW_MAPJOIN && LA200_0 <= KW_MATERIALIZED)||LA200_0==KW_METADATA||(LA200_0 >= KW_MINUTE && LA200_0 <= KW_MONTH)||(LA200_0 >= KW_MOVE && LA200_0 <= KW_MSCK)||(LA200_0 >= KW_NORELY && LA200_0 <= KW_NOSCAN)||LA200_0==KW_NOVALIDATE||LA200_0==KW_NULLS||LA200_0==KW_OFFSET||(LA200_0 >= KW_OPERATOR && LA200_0 <= KW_OPTION)||LA200_0==KW_ORDER||(LA200_0 >= KW_OUTPUTDRIVER && LA200_0 <= KW_OUTPUTFORMAT)||(LA200_0 >= KW_OVERWRITE && LA200_0 <= KW_OWNER)||(LA200_0 >= KW_PARTITIONED && LA200_0 <= KW_PATH)||(LA200_0 >= KW_PLAN && LA200_0 <= KW_POOL)||LA200_0==KW_PRINCIPALS||(LA200_0 >= KW_PURGE && LA200_0 <= KW_QUERY_PARALLELISM)||LA200_0==KW_READ||(LA200_0 >= KW_REBUILD && LA200_0 <= KW_RECORDWRITER)||(LA200_0 >= KW_RELOAD && LA200_0 <= KW_RESTRICT)||LA200_0==KW_REWRITE||(LA200_0 >= KW_ROLE && LA200_0 <= KW_ROLES)||(LA200_0 >= KW_SCHEDULING_POLICY && LA200_0 <= KW_SECOND)||(LA200_0 >= KW_SEMI && LA200_0 <= KW_SERVER)||(LA200_0 >= KW_SETS && LA200_0 <= KW_SKEWED)||(LA200_0 >= KW_SNAPSHOT && LA200_0 <= KW_SSL)||(LA200_0 >= KW_STATISTICS && LA200_0 <= KW_SUMMARY)||LA200_0==KW_TABLES||(LA200_0 >= KW_TBLPROPERTIES && LA200_0 <= KW_TERMINATED)||LA200_0==KW_TINYINT||(LA200_0 >= KW_TOUCH && LA200_0 <= KW_TRANSACTIONS)||LA200_0==KW_UNARCHIVE||LA200_0==KW_UNDO||LA200_0==KW_UNIONTYPE||(LA200_0 >= KW_UNKNOWN && LA200_0 <= KW_UNSIGNED)||(LA200_0 >= KW_URI && LA200_0 <= KW_USE)||(LA200_0 >= KW_UTC && LA200_0 <= KW_VALIDATE)||LA200_0==KW_VALUE_TYPE||(LA200_0 >= KW_VECTORIZATION && LA200_0 <= KW_WEEK)||LA200_0==KW_WHILE||(LA200_0 >= KW_WORK && LA200_0 <= KW_ZONE)||LA200_0==KW_BATCH||LA200_0==KW_DAYOFWEEK||LA200_0==KW_HOLD_DDLTIME||LA200_0==KW_IGNORE||LA200_0==KW_NO_DROP||LA200_0==KW_OFFLINE||LA200_0==KW_PROTECTION||LA200_0==KW_READONLY||LA200_0==KW_TIMESTAMPTZ) ) {
				alt200=1;
			}
			switch (alt200) {
				case 1 :
					// HiveParser.g:1915:14: columnNameTypeList
					{
					pushFollow(FOLLOW_columnNameTypeList_in_createMacroStatement10816);
					columnNameTypeList665=columnNameTypeList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameTypeList.add(columnNameTypeList665.getTree());
					}
					break;

			}

			RPAREN666=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createMacroStatement10819); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN666);

			pushFollow(FOLLOW_expression_in_createMacroStatement10821);
			expression667=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expression.add(expression667.getTree());
			// AST REWRITE
			// elements: Identifier, expression, columnNameTypeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1916:5: -> ^( TOK_CREATEMACRO Identifier ( columnNameTypeList )? expression )
			{
				// HiveParser.g:1916:8: ^( TOK_CREATEMACRO Identifier ( columnNameTypeList )? expression )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_CREATEMACRO, "TOK_CREATEMACRO"), root_1);
				adaptor.addChild(root_1, stream_Identifier.nextNode());
				// HiveParser.g:1916:37: ( columnNameTypeList )?
				if ( stream_columnNameTypeList.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());
				}
				stream_columnNameTypeList.reset();

				adaptor.addChild(root_1, stream_expression.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createMacroStatement"


	public static class dropMacroStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "dropMacroStatement"
	// HiveParser.g:1919:1: dropMacroStatement : KW_DROP KW_TEMPORARY KW_MACRO ( ifExists )? Identifier -> ^( TOK_DROPMACRO Identifier ( ifExists )? ) ;
	public final HiveParser.dropMacroStatement_return dropMacroStatement() throws RecognitionException {
		HiveParser.dropMacroStatement_return retval = new HiveParser.dropMacroStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_DROP668=null;
		Token KW_TEMPORARY669=null;
		Token KW_MACRO670=null;
		Token Identifier672=null;
		ParserRuleReturnScope ifExists671 =null;

		ASTNode KW_DROP668_tree=null;
		ASTNode KW_TEMPORARY669_tree=null;
		ASTNode KW_MACRO670_tree=null;
		ASTNode Identifier672_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_MACRO=new RewriteRuleTokenStream(adaptor,"token KW_MACRO");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");

		 pushMsg(retval.start,"drop macro statement", state); 
		try {
			// HiveParser.g:1922:5: ( KW_DROP KW_TEMPORARY KW_MACRO ( ifExists )? Identifier -> ^( TOK_DROPMACRO Identifier ( ifExists )? ) )
			// HiveParser.g:1922:7: KW_DROP KW_TEMPORARY KW_MACRO ( ifExists )? Identifier
			{
			KW_DROP668=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropMacroStatement10865); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP668);

			KW_TEMPORARY669=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_dropMacroStatement10867); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TEMPORARY.add(KW_TEMPORARY669);

			KW_MACRO670=(Token)match(input,KW_MACRO,FOLLOW_KW_MACRO_in_dropMacroStatement10869); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_MACRO.add(KW_MACRO670);

			// HiveParser.g:1922:37: ( ifExists )?
			int alt201=2;
			int LA201_0 = input.LA(1);
			if ( (LA201_0==KW_IF) ) {
				alt201=1;
			}
			switch (alt201) {
				case 1 :
					// HiveParser.g:1922:37: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropMacroStatement10871);
					ifExists671=ifExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifExists.add(ifExists671.getTree());
					}
					break;

			}

			Identifier672=(Token)match(input,Identifier,FOLLOW_Identifier_in_dropMacroStatement10874); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_Identifier.add(Identifier672);

			// AST REWRITE
			// elements: ifExists, Identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1923:5: -> ^( TOK_DROPMACRO Identifier ( ifExists )? )
			{
				// HiveParser.g:1923:8: ^( TOK_DROPMACRO Identifier ( ifExists )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DROPMACRO, "TOK_DROPMACRO"), root_1);
				adaptor.addChild(root_1, stream_Identifier.nextNode());
				// HiveParser.g:1923:35: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropMacroStatement"


	public static class createViewStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "createViewStatement"
	// HiveParser.g:1926:1: createViewStatement : KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatementWithCTE -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatementWithCTE ) ;
	public final HiveParser.createViewStatement_return createViewStatement() throws RecognitionException {
		HiveParser.createViewStatement_return retval = new HiveParser.createViewStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_CREATE673=null;
		Token KW_VIEW675=null;
		Token LPAREN677=null;
		Token RPAREN679=null;
		Token KW_AS683=null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope orReplace674 =null;
		ParserRuleReturnScope ifNotExists676 =null;
		ParserRuleReturnScope columnNameCommentList678 =null;
		ParserRuleReturnScope tableComment680 =null;
		ParserRuleReturnScope viewPartition681 =null;
		ParserRuleReturnScope tablePropertiesPrefixed682 =null;
		ParserRuleReturnScope selectStatementWithCTE684 =null;

		ASTNode KW_CREATE673_tree=null;
		ASTNode KW_VIEW675_tree=null;
		ASTNode LPAREN677_tree=null;
		ASTNode RPAREN679_tree=null;
		ASTNode KW_AS683_tree=null;
		RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleSubtreeStream stream_columnNameCommentList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameCommentList");
		RewriteRuleSubtreeStream stream_selectStatementWithCTE=new RewriteRuleSubtreeStream(adaptor,"rule selectStatementWithCTE");
		RewriteRuleSubtreeStream stream_orReplace=new RewriteRuleSubtreeStream(adaptor,"rule orReplace");
		RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
		RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
		RewriteRuleSubtreeStream stream_tableComment=new RewriteRuleSubtreeStream(adaptor,"rule tableComment");
		RewriteRuleSubtreeStream stream_viewPartition=new RewriteRuleSubtreeStream(adaptor,"rule viewPartition");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");


		    pushMsg(retval.start,"create view statement", state);

		try {
			// HiveParser.g:1931:5: ( KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatementWithCTE -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatementWithCTE ) )
			// HiveParser.g:1931:7: KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatementWithCTE
			{
			KW_CREATE673=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createViewStatement10916); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE673);

			// HiveParser.g:1931:17: ( orReplace )?
			int alt202=2;
			int LA202_0 = input.LA(1);
			if ( (LA202_0==KW_OR) ) {
				alt202=1;
			}
			switch (alt202) {
				case 1 :
					// HiveParser.g:1931:18: orReplace
					{
					pushFollow(FOLLOW_orReplace_in_createViewStatement10919);
					orReplace674=orReplace();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_orReplace.add(orReplace674.getTree());
					}
					break;

			}

			KW_VIEW675=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_createViewStatement10923); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_VIEW.add(KW_VIEW675);

			// HiveParser.g:1931:38: ( ifNotExists )?
			int alt203=2;
			int LA203_0 = input.LA(1);
			if ( (LA203_0==KW_IF) ) {
				alt203=1;
			}
			switch (alt203) {
				case 1 :
					// HiveParser.g:1931:39: ifNotExists
					{
					pushFollow(FOLLOW_ifNotExists_in_createViewStatement10926);
					ifNotExists676=ifNotExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifNotExists.add(ifNotExists676.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_tableName_in_createViewStatement10932);
			name=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(name.getTree());
			// HiveParser.g:1932:9: ( LPAREN columnNameCommentList RPAREN )?
			int alt204=2;
			int LA204_0 = input.LA(1);
			if ( (LA204_0==LPAREN) ) {
				alt204=1;
			}
			switch (alt204) {
				case 1 :
					// HiveParser.g:1932:10: LPAREN columnNameCommentList RPAREN
					{
					LPAREN677=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createViewStatement10943); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN677);

					pushFollow(FOLLOW_columnNameCommentList_in_createViewStatement10945);
					columnNameCommentList678=columnNameCommentList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameCommentList.add(columnNameCommentList678.getTree());
					RPAREN679=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createViewStatement10947); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN679);

					}
					break;

			}

			// HiveParser.g:1932:48: ( tableComment )?
			int alt205=2;
			int LA205_0 = input.LA(1);
			if ( (LA205_0==KW_COMMENT) ) {
				alt205=1;
			}
			switch (alt205) {
				case 1 :
					// HiveParser.g:1932:48: tableComment
					{
					pushFollow(FOLLOW_tableComment_in_createViewStatement10951);
					tableComment680=tableComment();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableComment.add(tableComment680.getTree());
					}
					break;

			}

			// HiveParser.g:1932:62: ( viewPartition )?
			int alt206=2;
			int LA206_0 = input.LA(1);
			if ( (LA206_0==KW_PARTITIONED) ) {
				alt206=1;
			}
			switch (alt206) {
				case 1 :
					// HiveParser.g:1932:62: viewPartition
					{
					pushFollow(FOLLOW_viewPartition_in_createViewStatement10954);
					viewPartition681=viewPartition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_viewPartition.add(viewPartition681.getTree());
					}
					break;

			}

			// HiveParser.g:1933:9: ( tablePropertiesPrefixed )?
			int alt207=2;
			int LA207_0 = input.LA(1);
			if ( (LA207_0==KW_TBLPROPERTIES) ) {
				alt207=1;
			}
			switch (alt207) {
				case 1 :
					// HiveParser.g:1933:9: tablePropertiesPrefixed
					{
					pushFollow(FOLLOW_tablePropertiesPrefixed_in_createViewStatement10965);
					tablePropertiesPrefixed682=tablePropertiesPrefixed();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed682.getTree());
					}
					break;

			}

			KW_AS683=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createViewStatement10976); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS683);

			pushFollow(FOLLOW_selectStatementWithCTE_in_createViewStatement10986);
			selectStatementWithCTE684=selectStatementWithCTE();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_selectStatementWithCTE.add(selectStatementWithCTE684.getTree());
			// AST REWRITE
			// elements: ifNotExists, columnNameCommentList, tableComment, viewPartition, orReplace, tablePropertiesPrefixed, selectStatementWithCTE, name
			// token labels: 
			// rule labels: name, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1936:5: -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatementWithCTE )
			{
				// HiveParser.g:1936:8: ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatementWithCTE )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_CREATEVIEW, "TOK_CREATEVIEW"), root_1);
				adaptor.addChild(root_1, stream_name.nextTree());
				// HiveParser.g:1936:31: ( orReplace )?
				if ( stream_orReplace.hasNext() ) {
					adaptor.addChild(root_1, stream_orReplace.nextTree());
				}
				stream_orReplace.reset();

				// HiveParser.g:1937:10: ( ifNotExists )?
				if ( stream_ifNotExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifNotExists.nextTree());
				}
				stream_ifNotExists.reset();

				// HiveParser.g:1938:10: ( columnNameCommentList )?
				if ( stream_columnNameCommentList.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameCommentList.nextTree());
				}
				stream_columnNameCommentList.reset();

				// HiveParser.g:1939:10: ( tableComment )?
				if ( stream_tableComment.hasNext() ) {
					adaptor.addChild(root_1, stream_tableComment.nextTree());
				}
				stream_tableComment.reset();

				// HiveParser.g:1940:10: ( viewPartition )?
				if ( stream_viewPartition.hasNext() ) {
					adaptor.addChild(root_1, stream_viewPartition.nextTree());
				}
				stream_viewPartition.reset();

				// HiveParser.g:1941:10: ( tablePropertiesPrefixed )?
				if ( stream_tablePropertiesPrefixed.hasNext() ) {
					adaptor.addChild(root_1, stream_tablePropertiesPrefixed.nextTree());
				}
				stream_tablePropertiesPrefixed.reset();

				adaptor.addChild(root_1, stream_selectStatementWithCTE.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createViewStatement"


	public static class viewPartition_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "viewPartition"
	// HiveParser.g:1946:1: viewPartition : KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN -> ^( TOK_VIEWPARTCOLS columnNameList ) ;
	public final HiveParser.viewPartition_return viewPartition() throws RecognitionException {
		HiveParser.viewPartition_return retval = new HiveParser.viewPartition_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_PARTITIONED685=null;
		Token KW_ON686=null;
		Token LPAREN687=null;
		Token RPAREN689=null;
		ParserRuleReturnScope columnNameList688 =null;

		ASTNode KW_PARTITIONED685_tree=null;
		ASTNode KW_ON686_tree=null;
		ASTNode LPAREN687_tree=null;
		ASTNode RPAREN689_tree=null;
		RewriteRuleTokenStream stream_KW_PARTITIONED=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONED");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");

		 pushMsg(retval.start,"view partition specification", state); 
		try {
			// HiveParser.g:1949:5: ( KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN -> ^( TOK_VIEWPARTCOLS columnNameList ) )
			// HiveParser.g:1949:7: KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN
			{
			KW_PARTITIONED685=(Token)match(input,KW_PARTITIONED,FOLLOW_KW_PARTITIONED_in_viewPartition11109); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_PARTITIONED.add(KW_PARTITIONED685);

			KW_ON686=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_viewPartition11111); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON686);

			LPAREN687=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewPartition11113); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN687);

			pushFollow(FOLLOW_columnNameList_in_viewPartition11115);
			columnNameList688=columnNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameList.add(columnNameList688.getTree());
			RPAREN689=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewPartition11117); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN689);

			// AST REWRITE
			// elements: columnNameList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1950:5: -> ^( TOK_VIEWPARTCOLS columnNameList )
			{
				// HiveParser.g:1950:8: ^( TOK_VIEWPARTCOLS columnNameList )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_VIEWPARTCOLS, "TOK_VIEWPARTCOLS"), root_1);
				adaptor.addChild(root_1, stream_columnNameList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "viewPartition"


	public static class dropViewStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "dropViewStatement"
	// HiveParser.g:1953:1: dropViewStatement : KW_DROP KW_VIEW ( ifExists )? viewName -> ^( TOK_DROPVIEW viewName ( ifExists )? ) ;
	public final HiveParser.dropViewStatement_return dropViewStatement() throws RecognitionException {
		HiveParser.dropViewStatement_return retval = new HiveParser.dropViewStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_DROP690=null;
		Token KW_VIEW691=null;
		ParserRuleReturnScope ifExists692 =null;
		ParserRuleReturnScope viewName693 =null;

		ASTNode KW_DROP690_tree=null;
		ASTNode KW_VIEW691_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
		RewriteRuleSubtreeStream stream_viewName=new RewriteRuleSubtreeStream(adaptor,"rule viewName");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");

		 pushMsg(retval.start,"drop view statement", state); 
		try {
			// HiveParser.g:1956:5: ( KW_DROP KW_VIEW ( ifExists )? viewName -> ^( TOK_DROPVIEW viewName ( ifExists )? ) )
			// HiveParser.g:1956:7: KW_DROP KW_VIEW ( ifExists )? viewName
			{
			KW_DROP690=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropViewStatement11156); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP690);

			KW_VIEW691=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_dropViewStatement11158); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_VIEW.add(KW_VIEW691);

			// HiveParser.g:1956:23: ( ifExists )?
			int alt208=2;
			int LA208_0 = input.LA(1);
			if ( (LA208_0==KW_IF) ) {
				alt208=1;
			}
			switch (alt208) {
				case 1 :
					// HiveParser.g:1956:23: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropViewStatement11160);
					ifExists692=ifExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifExists.add(ifExists692.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_viewName_in_dropViewStatement11163);
			viewName693=viewName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_viewName.add(viewName693.getTree());
			// AST REWRITE
			// elements: ifExists, viewName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1956:42: -> ^( TOK_DROPVIEW viewName ( ifExists )? )
			{
				// HiveParser.g:1956:45: ^( TOK_DROPVIEW viewName ( ifExists )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DROPVIEW, "TOK_DROPVIEW"), root_1);
				adaptor.addChild(root_1, stream_viewName.nextTree());
				// HiveParser.g:1956:69: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropViewStatement"


	public static class createMaterializedViewStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "createMaterializedViewStatement"
	// HiveParser.g:1959:1: createMaterializedViewStatement : KW_CREATE KW_MATERIALIZED KW_VIEW ( ifNotExists )? name= tableName ( rewriteDisabled )? ( tableComment )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatementWithCTE -> ^( TOK_CREATE_MATERIALIZED_VIEW $name ( ifNotExists )? ( rewriteDisabled )? ( tableComment )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatementWithCTE ) ;
	public final HiveParser.createMaterializedViewStatement_return createMaterializedViewStatement() throws RecognitionException {
		HiveParser.createMaterializedViewStatement_return retval = new HiveParser.createMaterializedViewStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_CREATE694=null;
		Token KW_MATERIALIZED695=null;
		Token KW_VIEW696=null;
		Token KW_AS705=null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope ifNotExists697 =null;
		ParserRuleReturnScope rewriteDisabled698 =null;
		ParserRuleReturnScope tableComment699 =null;
		ParserRuleReturnScope tableRowFormat700 =null;
		ParserRuleReturnScope tableFileFormat701 =null;
		ParserRuleReturnScope tableLocation702 =null;
		ParserRuleReturnScope viewPartition703 =null;
		ParserRuleReturnScope tablePropertiesPrefixed704 =null;
		ParserRuleReturnScope selectStatementWithCTE706 =null;

		ASTNode KW_CREATE694_tree=null;
		ASTNode KW_MATERIALIZED695_tree=null;
		ASTNode KW_VIEW696_tree=null;
		ASTNode KW_AS705_tree=null;
		RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_KW_MATERIALIZED=new RewriteRuleTokenStream(adaptor,"token KW_MATERIALIZED");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleSubtreeStream stream_tableRowFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormat");
		RewriteRuleSubtreeStream stream_selectStatementWithCTE=new RewriteRuleSubtreeStream(adaptor,"rule selectStatementWithCTE");
		RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
		RewriteRuleSubtreeStream stream_rewriteDisabled=new RewriteRuleSubtreeStream(adaptor,"rule rewriteDisabled");
		RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
		RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
		RewriteRuleSubtreeStream stream_tableFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableFileFormat");
		RewriteRuleSubtreeStream stream_tableComment=new RewriteRuleSubtreeStream(adaptor,"rule tableComment");
		RewriteRuleSubtreeStream stream_viewPartition=new RewriteRuleSubtreeStream(adaptor,"rule viewPartition");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");


		    pushMsg(retval.start,"create materialized view statement", state);

		try {
			// HiveParser.g:1964:5: ( KW_CREATE KW_MATERIALIZED KW_VIEW ( ifNotExists )? name= tableName ( rewriteDisabled )? ( tableComment )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatementWithCTE -> ^( TOK_CREATE_MATERIALIZED_VIEW $name ( ifNotExists )? ( rewriteDisabled )? ( tableComment )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatementWithCTE ) )
			// HiveParser.g:1964:7: KW_CREATE KW_MATERIALIZED KW_VIEW ( ifNotExists )? name= tableName ( rewriteDisabled )? ( tableComment )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatementWithCTE
			{
			KW_CREATE694=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createMaterializedViewStatement11201); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE694);

			KW_MATERIALIZED695=(Token)match(input,KW_MATERIALIZED,FOLLOW_KW_MATERIALIZED_in_createMaterializedViewStatement11203); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_MATERIALIZED.add(KW_MATERIALIZED695);

			KW_VIEW696=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_createMaterializedViewStatement11205); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_VIEW.add(KW_VIEW696);

			// HiveParser.g:1964:41: ( ifNotExists )?
			int alt209=2;
			int LA209_0 = input.LA(1);
			if ( (LA209_0==KW_IF) ) {
				alt209=1;
			}
			switch (alt209) {
				case 1 :
					// HiveParser.g:1964:42: ifNotExists
					{
					pushFollow(FOLLOW_ifNotExists_in_createMaterializedViewStatement11208);
					ifNotExists697=ifNotExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifNotExists.add(ifNotExists697.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_tableName_in_createMaterializedViewStatement11214);
			name=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(name.getTree());
			// HiveParser.g:1965:9: ( rewriteDisabled )?
			int alt210=2;
			int LA210_0 = input.LA(1);
			if ( (LA210_0==KW_DISABLE) ) {
				alt210=1;
			}
			switch (alt210) {
				case 1 :
					// HiveParser.g:1965:9: rewriteDisabled
					{
					pushFollow(FOLLOW_rewriteDisabled_in_createMaterializedViewStatement11224);
					rewriteDisabled698=rewriteDisabled();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_rewriteDisabled.add(rewriteDisabled698.getTree());
					}
					break;

			}

			// HiveParser.g:1965:26: ( tableComment )?
			int alt211=2;
			int LA211_0 = input.LA(1);
			if ( (LA211_0==KW_COMMENT) ) {
				alt211=1;
			}
			switch (alt211) {
				case 1 :
					// HiveParser.g:1965:26: tableComment
					{
					pushFollow(FOLLOW_tableComment_in_createMaterializedViewStatement11227);
					tableComment699=tableComment();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableComment.add(tableComment699.getTree());
					}
					break;

			}

			// HiveParser.g:1965:40: ( tableRowFormat )?
			int alt212=2;
			int LA212_0 = input.LA(1);
			if ( (LA212_0==KW_ROW) ) {
				alt212=1;
			}
			switch (alt212) {
				case 1 :
					// HiveParser.g:1965:40: tableRowFormat
					{
					pushFollow(FOLLOW_tableRowFormat_in_createMaterializedViewStatement11230);
					tableRowFormat700=tableRowFormat();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableRowFormat.add(tableRowFormat700.getTree());
					}
					break;

			}

			// HiveParser.g:1965:56: ( tableFileFormat )?
			int alt213=2;
			int LA213_0 = input.LA(1);
			if ( (LA213_0==KW_STORED) ) {
				alt213=1;
			}
			switch (alt213) {
				case 1 :
					// HiveParser.g:1965:56: tableFileFormat
					{
					pushFollow(FOLLOW_tableFileFormat_in_createMaterializedViewStatement11233);
					tableFileFormat701=tableFileFormat();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableFileFormat.add(tableFileFormat701.getTree());
					}
					break;

			}

			// HiveParser.g:1965:73: ( tableLocation )?
			int alt214=2;
			int LA214_0 = input.LA(1);
			if ( (LA214_0==KW_LOCATION) ) {
				alt214=1;
			}
			switch (alt214) {
				case 1 :
					// HiveParser.g:1965:73: tableLocation
					{
					pushFollow(FOLLOW_tableLocation_in_createMaterializedViewStatement11236);
					tableLocation702=tableLocation();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableLocation.add(tableLocation702.getTree());
					}
					break;

			}

			// HiveParser.g:1966:9: ( viewPartition )?
			int alt215=2;
			int LA215_0 = input.LA(1);
			if ( (LA215_0==KW_PARTITIONED) ) {
				alt215=1;
			}
			switch (alt215) {
				case 1 :
					// HiveParser.g:1966:9: viewPartition
					{
					pushFollow(FOLLOW_viewPartition_in_createMaterializedViewStatement11247);
					viewPartition703=viewPartition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_viewPartition.add(viewPartition703.getTree());
					}
					break;

			}

			// HiveParser.g:1966:24: ( tablePropertiesPrefixed )?
			int alt216=2;
			int LA216_0 = input.LA(1);
			if ( (LA216_0==KW_TBLPROPERTIES) ) {
				alt216=1;
			}
			switch (alt216) {
				case 1 :
					// HiveParser.g:1966:24: tablePropertiesPrefixed
					{
					pushFollow(FOLLOW_tablePropertiesPrefixed_in_createMaterializedViewStatement11250);
					tablePropertiesPrefixed704=tablePropertiesPrefixed();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed704.getTree());
					}
					break;

			}

			KW_AS705=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createMaterializedViewStatement11253); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS705);

			pushFollow(FOLLOW_selectStatementWithCTE_in_createMaterializedViewStatement11255);
			selectStatementWithCTE706=selectStatementWithCTE();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_selectStatementWithCTE.add(selectStatementWithCTE706.getTree());
			// AST REWRITE
			// elements: selectStatementWithCTE, ifNotExists, tableLocation, rewriteDisabled, tablePropertiesPrefixed, tableRowFormat, tableComment, tableFileFormat, viewPartition, name
			// token labels: 
			// rule labels: name, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1967:5: -> ^( TOK_CREATE_MATERIALIZED_VIEW $name ( ifNotExists )? ( rewriteDisabled )? ( tableComment )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatementWithCTE )
			{
				// HiveParser.g:1967:8: ^( TOK_CREATE_MATERIALIZED_VIEW $name ( ifNotExists )? ( rewriteDisabled )? ( tableComment )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatementWithCTE )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_CREATE_MATERIALIZED_VIEW, "TOK_CREATE_MATERIALIZED_VIEW"), root_1);
				adaptor.addChild(root_1, stream_name.nextTree());
				// HiveParser.g:1968:10: ( ifNotExists )?
				if ( stream_ifNotExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifNotExists.nextTree());
				}
				stream_ifNotExists.reset();

				// HiveParser.g:1969:10: ( rewriteDisabled )?
				if ( stream_rewriteDisabled.hasNext() ) {
					adaptor.addChild(root_1, stream_rewriteDisabled.nextTree());
				}
				stream_rewriteDisabled.reset();

				// HiveParser.g:1970:10: ( tableComment )?
				if ( stream_tableComment.hasNext() ) {
					adaptor.addChild(root_1, stream_tableComment.nextTree());
				}
				stream_tableComment.reset();

				// HiveParser.g:1971:10: ( tableRowFormat )?
				if ( stream_tableRowFormat.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormat.nextTree());
				}
				stream_tableRowFormat.reset();

				// HiveParser.g:1972:10: ( tableFileFormat )?
				if ( stream_tableFileFormat.hasNext() ) {
					adaptor.addChild(root_1, stream_tableFileFormat.nextTree());
				}
				stream_tableFileFormat.reset();

				// HiveParser.g:1973:10: ( tableLocation )?
				if ( stream_tableLocation.hasNext() ) {
					adaptor.addChild(root_1, stream_tableLocation.nextTree());
				}
				stream_tableLocation.reset();

				// HiveParser.g:1974:10: ( viewPartition )?
				if ( stream_viewPartition.hasNext() ) {
					adaptor.addChild(root_1, stream_viewPartition.nextTree());
				}
				stream_viewPartition.reset();

				// HiveParser.g:1975:10: ( tablePropertiesPrefixed )?
				if ( stream_tablePropertiesPrefixed.hasNext() ) {
					adaptor.addChild(root_1, stream_tablePropertiesPrefixed.nextTree());
				}
				stream_tablePropertiesPrefixed.reset();

				adaptor.addChild(root_1, stream_selectStatementWithCTE.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createMaterializedViewStatement"


	public static class dropMaterializedViewStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "dropMaterializedViewStatement"
	// HiveParser.g:1980:1: dropMaterializedViewStatement : KW_DROP KW_MATERIALIZED KW_VIEW ( ifExists )? viewName -> ^( TOK_DROP_MATERIALIZED_VIEW viewName ( ifExists )? ) ;
	public final HiveParser.dropMaterializedViewStatement_return dropMaterializedViewStatement() throws RecognitionException {
		HiveParser.dropMaterializedViewStatement_return retval = new HiveParser.dropMaterializedViewStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_DROP707=null;
		Token KW_MATERIALIZED708=null;
		Token KW_VIEW709=null;
		ParserRuleReturnScope ifExists710 =null;
		ParserRuleReturnScope viewName711 =null;

		ASTNode KW_DROP707_tree=null;
		ASTNode KW_MATERIALIZED708_tree=null;
		ASTNode KW_VIEW709_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
		RewriteRuleTokenStream stream_KW_MATERIALIZED=new RewriteRuleTokenStream(adaptor,"token KW_MATERIALIZED");
		RewriteRuleSubtreeStream stream_viewName=new RewriteRuleSubtreeStream(adaptor,"rule viewName");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");

		 pushMsg(retval.start,"drop materialized view statement", state); 
		try {
			// HiveParser.g:1983:5: ( KW_DROP KW_MATERIALIZED KW_VIEW ( ifExists )? viewName -> ^( TOK_DROP_MATERIALIZED_VIEW viewName ( ifExists )? ) )
			// HiveParser.g:1983:7: KW_DROP KW_MATERIALIZED KW_VIEW ( ifExists )? viewName
			{
			KW_DROP707=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropMaterializedViewStatement11411); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP707);

			KW_MATERIALIZED708=(Token)match(input,KW_MATERIALIZED,FOLLOW_KW_MATERIALIZED_in_dropMaterializedViewStatement11413); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_MATERIALIZED.add(KW_MATERIALIZED708);

			KW_VIEW709=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_dropMaterializedViewStatement11415); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_VIEW.add(KW_VIEW709);

			// HiveParser.g:1983:39: ( ifExists )?
			int alt217=2;
			int LA217_0 = input.LA(1);
			if ( (LA217_0==KW_IF) ) {
				alt217=1;
			}
			switch (alt217) {
				case 1 :
					// HiveParser.g:1983:39: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropMaterializedViewStatement11417);
					ifExists710=ifExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifExists.add(ifExists710.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_viewName_in_dropMaterializedViewStatement11420);
			viewName711=viewName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_viewName.add(viewName711.getTree());
			// AST REWRITE
			// elements: viewName, ifExists
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 1983:58: -> ^( TOK_DROP_MATERIALIZED_VIEW viewName ( ifExists )? )
			{
				// HiveParser.g:1983:61: ^( TOK_DROP_MATERIALIZED_VIEW viewName ( ifExists )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DROP_MATERIALIZED_VIEW, "TOK_DROP_MATERIALIZED_VIEW"), root_1);
				adaptor.addChild(root_1, stream_viewName.nextTree());
				// HiveParser.g:1983:99: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropMaterializedViewStatement"


	public static class showFunctionIdentifier_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "showFunctionIdentifier"
	// HiveParser.g:1986:1: showFunctionIdentifier : ( functionIdentifier | StringLiteral );
	public final HiveParser.showFunctionIdentifier_return showFunctionIdentifier() throws RecognitionException {
		HiveParser.showFunctionIdentifier_return retval = new HiveParser.showFunctionIdentifier_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token StringLiteral713=null;
		ParserRuleReturnScope functionIdentifier712 =null;

		ASTNode StringLiteral713_tree=null;

		 pushMsg(retval.start,"identifier for show function statement", state); 
		try {
			// HiveParser.g:1989:5: ( functionIdentifier | StringLiteral )
			int alt218=2;
			int LA218_0 = input.LA(1);
			if ( (LA218_0==Identifier||(LA218_0 >= KW_ABORT && LA218_0 <= KW_AFTER)||LA218_0==KW_ALLOC_FRACTION||LA218_0==KW_ANALYZE||LA218_0==KW_ARCHIVE||(LA218_0 >= KW_ASC && LA218_0 <= KW_AST)||(LA218_0 >= KW_AUTOCOMMIT && LA218_0 <= KW_BEFORE)||(LA218_0 >= KW_BUCKET && LA218_0 <= KW_BUCKETS)||(LA218_0 >= KW_CACHE && LA218_0 <= KW_CASCADE)||LA218_0==KW_CHANGE||(LA218_0 >= KW_CHECK && LA218_0 <= KW_COLLECTION)||(LA218_0 >= KW_COLUMNS && LA218_0 <= KW_COMMENT)||(LA218_0 >= KW_COMPACT && LA218_0 <= KW_CONCATENATE)||LA218_0==KW_CONTINUE||LA218_0==KW_DATA||(LA218_0 >= KW_DATABASES && LA218_0 <= KW_DEBUG)||(LA218_0 >= KW_DEFAULT && LA218_0 <= KW_DEFINED)||(LA218_0 >= KW_DELIMITED && LA218_0 <= KW_DESC)||(LA218_0 >= KW_DETAIL && LA218_0 <= KW_DISABLE)||(LA218_0 >= KW_DISTRIBUTE && LA218_0 <= KW_DO)||LA218_0==KW_DOW||(LA218_0 >= KW_DUMP && LA218_0 <= KW_ELEM_TYPE)||LA218_0==KW_ENABLE||(LA218_0 >= KW_ENFORCED && LA218_0 <= KW_ESCAPED)||LA218_0==KW_EXCLUSIVE||(LA218_0 >= KW_EXPLAIN && LA218_0 <= KW_EXPRESSION)||(LA218_0 >= KW_FIELDS && LA218_0 <= KW_FIRST)||(LA218_0 >= KW_FORMAT && LA218_0 <= KW_FORMATTED)||LA218_0==KW_FUNCTIONS||LA218_0==KW_GROUP||(LA218_0 >= KW_HOUR && LA218_0 <= KW_IDXPROPERTIES)||(LA218_0 >= KW_INDEX && LA218_0 <= KW_INDEXES)||(LA218_0 >= KW_INPATH && LA218_0 <= KW_INPUTFORMAT)||(LA218_0 >= KW_ISOLATION && LA218_0 <= KW_JAR)||(LA218_0 >= KW_KEY && LA218_0 <= KW_LAST)||LA218_0==KW_LEVEL||(LA218_0 >= KW_LIMIT && LA218_0 <= KW_LOAD)||(LA218_0 >= KW_LOCATION && LA218_0 <= KW_LONG)||LA218_0==KW_MANAGEMENT||(LA218_0 >= KW_MAPJOIN && LA218_0 <= KW_MATERIALIZED)||LA218_0==KW_METADATA||(LA218_0 >= KW_MINUTE && LA218_0 <= KW_MONTH)||(LA218_0 >= KW_MOVE && LA218_0 <= KW_MSCK)||(LA218_0 >= KW_NORELY && LA218_0 <= KW_NOSCAN)||LA218_0==KW_NOVALIDATE||LA218_0==KW_NULLS||LA218_0==KW_OFFSET||(LA218_0 >= KW_OPERATOR && LA218_0 <= KW_OPTION)||LA218_0==KW_ORDER||(LA218_0 >= KW_OUTPUTDRIVER && LA218_0 <= KW_OUTPUTFORMAT)||(LA218_0 >= KW_OVERWRITE && LA218_0 <= KW_OWNER)||(LA218_0 >= KW_PARTITIONED && LA218_0 <= KW_PATH)||(LA218_0 >= KW_PLAN && LA218_0 <= KW_POOL)||LA218_0==KW_PRINCIPALS||(LA218_0 >= KW_PURGE && LA218_0 <= KW_QUERY_PARALLELISM)||LA218_0==KW_READ||(LA218_0 >= KW_REBUILD && LA218_0 <= KW_RECORDWRITER)||(LA218_0 >= KW_RELOAD && LA218_0 <= KW_RESTRICT)||LA218_0==KW_REWRITE||(LA218_0 >= KW_ROLE && LA218_0 <= KW_ROLES)||(LA218_0 >= KW_SCHEDULING_POLICY && LA218_0 <= KW_SECOND)||(LA218_0 >= KW_SEMI && LA218_0 <= KW_SERVER)||(LA218_0 >= KW_SETS && LA218_0 <= KW_SKEWED)||(LA218_0 >= KW_SNAPSHOT && LA218_0 <= KW_SSL)||(LA218_0 >= KW_STATISTICS && LA218_0 <= KW_SUMMARY)||LA218_0==KW_TABLES||(LA218_0 >= KW_TBLPROPERTIES && LA218_0 <= KW_TERMINATED)||LA218_0==KW_TINYINT||(LA218_0 >= KW_TOUCH && LA218_0 <= KW_TRANSACTIONS)||LA218_0==KW_UNARCHIVE||LA218_0==KW_UNDO||LA218_0==KW_UNIONTYPE||(LA218_0 >= KW_UNKNOWN && LA218_0 <= KW_UNSIGNED)||(LA218_0 >= KW_URI && LA218_0 <= KW_USE)||(LA218_0 >= KW_UTC && LA218_0 <= KW_VALIDATE)||LA218_0==KW_VALUE_TYPE||(LA218_0 >= KW_VECTORIZATION && LA218_0 <= KW_WEEK)||LA218_0==KW_WHILE||(LA218_0 >= KW_WORK && LA218_0 <= KW_ZONE)||LA218_0==KW_BATCH||LA218_0==KW_DAYOFWEEK||LA218_0==KW_HOLD_DDLTIME||LA218_0==KW_IGNORE||LA218_0==KW_NO_DROP||LA218_0==KW_OFFLINE||LA218_0==KW_PROTECTION||LA218_0==KW_READONLY||LA218_0==KW_TIMESTAMPTZ) ) {
				alt218=1;
			}
			else if ( (LA218_0==StringLiteral) ) {
				alt218=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 218, 0, input);
				throw nvae;
			}

			switch (alt218) {
				case 1 :
					// HiveParser.g:1989:7: functionIdentifier
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_functionIdentifier_in_showFunctionIdentifier11458);
					functionIdentifier712=functionIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, functionIdentifier712.getTree());

					}
					break;
				case 2 :
					// HiveParser.g:1990:7: StringLiteral
					{
					root_0 = (ASTNode)adaptor.nil();


					StringLiteral713=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_showFunctionIdentifier11466); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					StringLiteral713_tree = (ASTNode)adaptor.create(StringLiteral713);
					adaptor.addChild(root_0, StringLiteral713_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showFunctionIdentifier"


	public static class showStmtIdentifier_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "showStmtIdentifier"
	// HiveParser.g:1993:1: showStmtIdentifier : ( identifier | StringLiteral );
	public final HiveParser.showStmtIdentifier_return showStmtIdentifier() throws RecognitionException {
		HiveParser.showStmtIdentifier_return retval = new HiveParser.showStmtIdentifier_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token StringLiteral715=null;
		ParserRuleReturnScope identifier714 =null;

		ASTNode StringLiteral715_tree=null;

		 pushMsg(retval.start,"identifier for show statement", state); 
		try {
			// HiveParser.g:1996:5: ( identifier | StringLiteral )
			int alt219=2;
			int LA219_0 = input.LA(1);
			if ( (LA219_0==Identifier||(LA219_0 >= KW_ABORT && LA219_0 <= KW_AFTER)||LA219_0==KW_ALLOC_FRACTION||LA219_0==KW_ANALYZE||LA219_0==KW_ARCHIVE||(LA219_0 >= KW_ASC && LA219_0 <= KW_AST)||(LA219_0 >= KW_AUTOCOMMIT && LA219_0 <= KW_BEFORE)||(LA219_0 >= KW_BUCKET && LA219_0 <= KW_BUCKETS)||(LA219_0 >= KW_CACHE && LA219_0 <= KW_CASCADE)||LA219_0==KW_CHANGE||(LA219_0 >= KW_CHECK && LA219_0 <= KW_COLLECTION)||(LA219_0 >= KW_COLUMNS && LA219_0 <= KW_COMMENT)||(LA219_0 >= KW_COMPACT && LA219_0 <= KW_CONCATENATE)||LA219_0==KW_CONTINUE||LA219_0==KW_DATA||(LA219_0 >= KW_DATABASES && LA219_0 <= KW_DEBUG)||(LA219_0 >= KW_DEFAULT && LA219_0 <= KW_DEFINED)||(LA219_0 >= KW_DELIMITED && LA219_0 <= KW_DESC)||(LA219_0 >= KW_DETAIL && LA219_0 <= KW_DISABLE)||(LA219_0 >= KW_DISTRIBUTE && LA219_0 <= KW_DO)||LA219_0==KW_DOW||(LA219_0 >= KW_DUMP && LA219_0 <= KW_ELEM_TYPE)||LA219_0==KW_ENABLE||(LA219_0 >= KW_ENFORCED && LA219_0 <= KW_ESCAPED)||LA219_0==KW_EXCLUSIVE||(LA219_0 >= KW_EXPLAIN && LA219_0 <= KW_EXPRESSION)||(LA219_0 >= KW_FIELDS && LA219_0 <= KW_FIRST)||(LA219_0 >= KW_FORMAT && LA219_0 <= KW_FORMATTED)||LA219_0==KW_FUNCTIONS||LA219_0==KW_GROUP||(LA219_0 >= KW_HOUR && LA219_0 <= KW_IDXPROPERTIES)||(LA219_0 >= KW_INDEX && LA219_0 <= KW_INDEXES)||(LA219_0 >= KW_INPATH && LA219_0 <= KW_INPUTFORMAT)||(LA219_0 >= KW_ISOLATION && LA219_0 <= KW_JAR)||(LA219_0 >= KW_KEY && LA219_0 <= KW_LAST)||LA219_0==KW_LEVEL||(LA219_0 >= KW_LIMIT && LA219_0 <= KW_LOAD)||(LA219_0 >= KW_LOCATION && LA219_0 <= KW_LONG)||LA219_0==KW_MANAGEMENT||(LA219_0 >= KW_MAPJOIN && LA219_0 <= KW_MATERIALIZED)||LA219_0==KW_METADATA||(LA219_0 >= KW_MINUTE && LA219_0 <= KW_MONTH)||(LA219_0 >= KW_MOVE && LA219_0 <= KW_MSCK)||(LA219_0 >= KW_NORELY && LA219_0 <= KW_NOSCAN)||LA219_0==KW_NOVALIDATE||LA219_0==KW_NULLS||LA219_0==KW_OFFSET||(LA219_0 >= KW_OPERATOR && LA219_0 <= KW_OPTION)||LA219_0==KW_ORDER||(LA219_0 >= KW_OUTPUTDRIVER && LA219_0 <= KW_OUTPUTFORMAT)||(LA219_0 >= KW_OVERWRITE && LA219_0 <= KW_OWNER)||(LA219_0 >= KW_PARTITIONED && LA219_0 <= KW_PATH)||(LA219_0 >= KW_PLAN && LA219_0 <= KW_POOL)||LA219_0==KW_PRINCIPALS||(LA219_0 >= KW_PURGE && LA219_0 <= KW_QUERY_PARALLELISM)||LA219_0==KW_READ||(LA219_0 >= KW_REBUILD && LA219_0 <= KW_RECORDWRITER)||(LA219_0 >= KW_RELOAD && LA219_0 <= KW_RESTRICT)||LA219_0==KW_REWRITE||(LA219_0 >= KW_ROLE && LA219_0 <= KW_ROLES)||(LA219_0 >= KW_SCHEDULING_POLICY && LA219_0 <= KW_SECOND)||(LA219_0 >= KW_SEMI && LA219_0 <= KW_SERVER)||(LA219_0 >= KW_SETS && LA219_0 <= KW_SKEWED)||(LA219_0 >= KW_SNAPSHOT && LA219_0 <= KW_SSL)||(LA219_0 >= KW_STATISTICS && LA219_0 <= KW_SUMMARY)||LA219_0==KW_TABLES||(LA219_0 >= KW_TBLPROPERTIES && LA219_0 <= KW_TERMINATED)||LA219_0==KW_TINYINT||(LA219_0 >= KW_TOUCH && LA219_0 <= KW_TRANSACTIONS)||LA219_0==KW_UNARCHIVE||LA219_0==KW_UNDO||LA219_0==KW_UNIONTYPE||(LA219_0 >= KW_UNKNOWN && LA219_0 <= KW_UNSIGNED)||(LA219_0 >= KW_URI && LA219_0 <= KW_USE)||(LA219_0 >= KW_UTC && LA219_0 <= KW_VALIDATE)||LA219_0==KW_VALUE_TYPE||(LA219_0 >= KW_VECTORIZATION && LA219_0 <= KW_WEEK)||LA219_0==KW_WHILE||(LA219_0 >= KW_WORK && LA219_0 <= KW_ZONE)||LA219_0==KW_BATCH||LA219_0==KW_DAYOFWEEK||LA219_0==KW_HOLD_DDLTIME||LA219_0==KW_IGNORE||LA219_0==KW_NO_DROP||LA219_0==KW_OFFLINE||LA219_0==KW_PROTECTION||LA219_0==KW_READONLY||LA219_0==KW_TIMESTAMPTZ) ) {
				alt219=1;
			}
			else if ( (LA219_0==StringLiteral) ) {
				alt219=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 219, 0, input);
				throw nvae;
			}

			switch (alt219) {
				case 1 :
					// HiveParser.g:1996:7: identifier
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_identifier_in_showStmtIdentifier11493);
					identifier714=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier714.getTree());

					}
					break;
				case 2 :
					// HiveParser.g:1997:7: StringLiteral
					{
					root_0 = (ASTNode)adaptor.nil();


					StringLiteral715=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_showStmtIdentifier11501); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					StringLiteral715_tree = (ASTNode)adaptor.create(StringLiteral715);
					adaptor.addChild(root_0, StringLiteral715_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showStmtIdentifier"


	public static class tableComment_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableComment"
	// HiveParser.g:2000:1: tableComment : KW_COMMENT comment= StringLiteral -> ^( TOK_TABLECOMMENT $comment) ;
	public final HiveParser.tableComment_return tableComment() throws RecognitionException {
		HiveParser.tableComment_return retval = new HiveParser.tableComment_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token comment=null;
		Token KW_COMMENT716=null;

		ASTNode comment_tree=null;
		ASTNode KW_COMMENT716_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

		 pushMsg(retval.start,"table's comment", state); 
		try {
			// HiveParser.g:2003:5: ( KW_COMMENT comment= StringLiteral -> ^( TOK_TABLECOMMENT $comment) )
			// HiveParser.g:2004:7: KW_COMMENT comment= StringLiteral
			{
			KW_COMMENT716=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_tableComment11534); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT716);

			comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableComment11538); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(comment);

			// AST REWRITE
			// elements: comment
			// token labels: comment
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2004:41: -> ^( TOK_TABLECOMMENT $comment)
			{
				// HiveParser.g:2004:44: ^( TOK_TABLECOMMENT $comment)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABLECOMMENT, "TOK_TABLECOMMENT"), root_1);
				adaptor.addChild(root_1, stream_comment.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableComment"


	public static class createTablePartitionSpec_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "createTablePartitionSpec"
	// HiveParser.g:2007:1: createTablePartitionSpec : KW_PARTITIONED KW_BY LPAREN (opt1= createTablePartitionColumnTypeSpec |opt2= createTablePartitionColumnSpec ) RPAREN -> {$opt1.tree != null}? $opt1 -> $opt2;
	public final HiveParser.createTablePartitionSpec_return createTablePartitionSpec() throws RecognitionException {
		HiveParser.createTablePartitionSpec_return retval = new HiveParser.createTablePartitionSpec_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_PARTITIONED717=null;
		Token KW_BY718=null;
		Token LPAREN719=null;
		Token RPAREN720=null;
		ParserRuleReturnScope opt1 =null;
		ParserRuleReturnScope opt2 =null;

		ASTNode KW_PARTITIONED717_tree=null;
		ASTNode KW_BY718_tree=null;
		ASTNode LPAREN719_tree=null;
		ASTNode RPAREN720_tree=null;
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleTokenStream stream_KW_PARTITIONED=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONED");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_createTablePartitionColumnSpec=new RewriteRuleSubtreeStream(adaptor,"rule createTablePartitionColumnSpec");
		RewriteRuleSubtreeStream stream_createTablePartitionColumnTypeSpec=new RewriteRuleSubtreeStream(adaptor,"rule createTablePartitionColumnTypeSpec");

		 pushMsg(retval.start,"create table partition specification", state); 
		try {
			// HiveParser.g:2010:5: ( KW_PARTITIONED KW_BY LPAREN (opt1= createTablePartitionColumnTypeSpec |opt2= createTablePartitionColumnSpec ) RPAREN -> {$opt1.tree != null}? $opt1 -> $opt2)
			// HiveParser.g:2010:7: KW_PARTITIONED KW_BY LPAREN (opt1= createTablePartitionColumnTypeSpec |opt2= createTablePartitionColumnSpec ) RPAREN
			{
			KW_PARTITIONED717=(Token)match(input,KW_PARTITIONED,FOLLOW_KW_PARTITIONED_in_createTablePartitionSpec11575); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_PARTITIONED.add(KW_PARTITIONED717);

			KW_BY718=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_createTablePartitionSpec11577); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY718);

			LPAREN719=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createTablePartitionSpec11579); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN719);

			// HiveParser.g:2010:35: (opt1= createTablePartitionColumnTypeSpec |opt2= createTablePartitionColumnSpec )
			int alt220=2;
			int LA220_0 = input.LA(1);
			if ( (LA220_0==Identifier) ) {
				int LA220_1 = input.LA(2);
				if ( (LA220_1==KW_ARRAY||(LA220_1 >= KW_BIGINT && LA220_1 <= KW_BOOLEAN)||LA220_1==KW_CHAR||(LA220_1 >= KW_DATE && LA220_1 <= KW_DATETIME)||LA220_1==KW_DECIMAL||LA220_1==KW_DOUBLE||LA220_1==KW_FLOAT||LA220_1==KW_INT||LA220_1==KW_MAP||LA220_1==KW_REAL||LA220_1==KW_SMALLINT||(LA220_1 >= KW_STRING && LA220_1 <= KW_STRUCT)||(LA220_1 >= KW_TIMESTAMP && LA220_1 <= KW_TINYINT)||LA220_1==KW_UNIONTYPE||LA220_1==KW_VARCHAR) ) {
					alt220=1;
				}
				else if ( (LA220_1==COMMA||LA220_1==RPAREN) ) {
					alt220=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( ((LA220_0 >= KW_ABORT && LA220_0 <= KW_AFTER)||LA220_0==KW_ALLOC_FRACTION||LA220_0==KW_ANALYZE||LA220_0==KW_ARCHIVE||(LA220_0 >= KW_ASC && LA220_0 <= KW_AST)||(LA220_0 >= KW_AUTOCOMMIT && LA220_0 <= KW_BEFORE)||(LA220_0 >= KW_BUCKET && LA220_0 <= KW_BUCKETS)||(LA220_0 >= KW_CACHE && LA220_0 <= KW_CASCADE)||LA220_0==KW_CHANGE||(LA220_0 >= KW_CHECK && LA220_0 <= KW_COLLECTION)||(LA220_0 >= KW_COLUMNS && LA220_0 <= KW_COMMENT)||(LA220_0 >= KW_COMPACT && LA220_0 <= KW_CONCATENATE)||LA220_0==KW_CONTINUE||LA220_0==KW_DATA||(LA220_0 >= KW_DATABASES && LA220_0 <= KW_DEBUG)||(LA220_0 >= KW_DEFAULT && LA220_0 <= KW_DEFINED)||(LA220_0 >= KW_DELIMITED && LA220_0 <= KW_DESC)||(LA220_0 >= KW_DETAIL && LA220_0 <= KW_DISABLE)||(LA220_0 >= KW_DISTRIBUTE && LA220_0 <= KW_DO)||LA220_0==KW_DOW||(LA220_0 >= KW_DUMP && LA220_0 <= KW_ELEM_TYPE)||LA220_0==KW_ENABLE||(LA220_0 >= KW_ENFORCED && LA220_0 <= KW_ESCAPED)||LA220_0==KW_EXCLUSIVE||(LA220_0 >= KW_EXPLAIN && LA220_0 <= KW_EXPRESSION)||(LA220_0 >= KW_FIELDS && LA220_0 <= KW_FIRST)||(LA220_0 >= KW_FORMAT && LA220_0 <= KW_FORMATTED)||LA220_0==KW_FUNCTIONS||LA220_0==KW_GROUP||(LA220_0 >= KW_HOUR && LA220_0 <= KW_IDXPROPERTIES)||(LA220_0 >= KW_INDEX && LA220_0 <= KW_INDEXES)||(LA220_0 >= KW_INPATH && LA220_0 <= KW_INPUTFORMAT)||(LA220_0 >= KW_ISOLATION && LA220_0 <= KW_JAR)||(LA220_0 >= KW_KEY && LA220_0 <= KW_LAST)||LA220_0==KW_LEVEL||(LA220_0 >= KW_LIMIT && LA220_0 <= KW_LOAD)||(LA220_0 >= KW_LOCATION && LA220_0 <= KW_LONG)||LA220_0==KW_MANAGEMENT||(LA220_0 >= KW_MAPJOIN && LA220_0 <= KW_MATERIALIZED)||LA220_0==KW_METADATA||(LA220_0 >= KW_MINUTE && LA220_0 <= KW_MONTH)||(LA220_0 >= KW_MOVE && LA220_0 <= KW_MSCK)||(LA220_0 >= KW_NORELY && LA220_0 <= KW_NOSCAN)||LA220_0==KW_NOVALIDATE||LA220_0==KW_NULLS||LA220_0==KW_OFFSET||(LA220_0 >= KW_OPERATOR && LA220_0 <= KW_OPTION)||LA220_0==KW_ORDER||(LA220_0 >= KW_OUTPUTDRIVER && LA220_0 <= KW_OUTPUTFORMAT)||(LA220_0 >= KW_OVERWRITE && LA220_0 <= KW_OWNER)||(LA220_0 >= KW_PARTITIONED && LA220_0 <= KW_PATH)||(LA220_0 >= KW_PLAN && LA220_0 <= KW_POOL)||LA220_0==KW_PRINCIPALS||(LA220_0 >= KW_PURGE && LA220_0 <= KW_QUERY_PARALLELISM)||LA220_0==KW_READ||(LA220_0 >= KW_REBUILD && LA220_0 <= KW_RECORDWRITER)||(LA220_0 >= KW_RELOAD && LA220_0 <= KW_RESTRICT)||LA220_0==KW_REWRITE||(LA220_0 >= KW_ROLE && LA220_0 <= KW_ROLES)||(LA220_0 >= KW_SCHEDULING_POLICY && LA220_0 <= KW_SECOND)||(LA220_0 >= KW_SEMI && LA220_0 <= KW_SERVER)||(LA220_0 >= KW_SETS && LA220_0 <= KW_SKEWED)||(LA220_0 >= KW_SNAPSHOT && LA220_0 <= KW_SSL)||(LA220_0 >= KW_STATISTICS && LA220_0 <= KW_SUMMARY)||LA220_0==KW_TABLES||(LA220_0 >= KW_TBLPROPERTIES && LA220_0 <= KW_TERMINATED)||LA220_0==KW_TINYINT||(LA220_0 >= KW_TOUCH && LA220_0 <= KW_TRANSACTIONS)||LA220_0==KW_UNARCHIVE||LA220_0==KW_UNDO||LA220_0==KW_UNIONTYPE||(LA220_0 >= KW_UNKNOWN && LA220_0 <= KW_UNSIGNED)||(LA220_0 >= KW_URI && LA220_0 <= KW_USE)||(LA220_0 >= KW_UTC && LA220_0 <= KW_VALIDATE)||LA220_0==KW_VALUE_TYPE||(LA220_0 >= KW_VECTORIZATION && LA220_0 <= KW_WEEK)||LA220_0==KW_WHILE||(LA220_0 >= KW_WORK && LA220_0 <= KW_ZONE)||LA220_0==KW_BATCH||LA220_0==KW_DAYOFWEEK||LA220_0==KW_HOLD_DDLTIME||LA220_0==KW_IGNORE||LA220_0==KW_NO_DROP||LA220_0==KW_OFFLINE||LA220_0==KW_PROTECTION||LA220_0==KW_READONLY||LA220_0==KW_TIMESTAMPTZ) ) {
				int LA220_2 = input.LA(2);
				if ( (LA220_2==KW_ARRAY||(LA220_2 >= KW_BIGINT && LA220_2 <= KW_BOOLEAN)||LA220_2==KW_CHAR||(LA220_2 >= KW_DATE && LA220_2 <= KW_DATETIME)||LA220_2==KW_DECIMAL||LA220_2==KW_DOUBLE||LA220_2==KW_FLOAT||LA220_2==KW_INT||LA220_2==KW_MAP||LA220_2==KW_REAL||LA220_2==KW_SMALLINT||(LA220_2 >= KW_STRING && LA220_2 <= KW_STRUCT)||(LA220_2 >= KW_TIMESTAMP && LA220_2 <= KW_TINYINT)||LA220_2==KW_UNIONTYPE||LA220_2==KW_VARCHAR) ) {
					alt220=1;
				}
				else if ( (LA220_2==COMMA||LA220_2==RPAREN) ) {
					alt220=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 220, 0, input);
				throw nvae;
			}

			switch (alt220) {
				case 1 :
					// HiveParser.g:2010:36: opt1= createTablePartitionColumnTypeSpec
					{
					pushFollow(FOLLOW_createTablePartitionColumnTypeSpec_in_createTablePartitionSpec11586);
					opt1=createTablePartitionColumnTypeSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_createTablePartitionColumnTypeSpec.add(opt1.getTree());
					}
					break;
				case 2 :
					// HiveParser.g:2010:80: opt2= createTablePartitionColumnSpec
					{
					pushFollow(FOLLOW_createTablePartitionColumnSpec_in_createTablePartitionSpec11594);
					opt2=createTablePartitionColumnSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_createTablePartitionColumnSpec.add(opt2.getTree());
					}
					break;

			}

			RPAREN720=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createTablePartitionSpec11597); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN720);

			// AST REWRITE
			// elements: opt1, opt2
			// token labels: 
			// rule labels: opt1, opt2, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_opt1=new RewriteRuleSubtreeStream(adaptor,"rule opt1",opt1!=null?opt1.getTree():null);
			RewriteRuleSubtreeStream stream_opt2=new RewriteRuleSubtreeStream(adaptor,"rule opt2",opt2!=null?opt2.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2011:5: -> {$opt1.tree != null}? $opt1
			if ((opt1!=null?((ASTNode)opt1.getTree()):null) != null) {
				adaptor.addChild(root_0, stream_opt1.nextTree());
			}

			else // 2012:5: -> $opt2
			{
				adaptor.addChild(root_0, stream_opt2.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createTablePartitionSpec"


	public static class createTablePartitionColumnTypeSpec_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "createTablePartitionColumnTypeSpec"
	// HiveParser.g:2015:1: createTablePartitionColumnTypeSpec : columnNameTypeConstraint ( COMMA columnNameTypeConstraint )* -> ^( TOK_TABLEPARTCOLS ( columnNameTypeConstraint )+ ) ;
	public final HiveParser.createTablePartitionColumnTypeSpec_return createTablePartitionColumnTypeSpec() throws RecognitionException {
		HiveParser.createTablePartitionColumnTypeSpec_return retval = new HiveParser.createTablePartitionColumnTypeSpec_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token COMMA722=null;
		ParserRuleReturnScope columnNameTypeConstraint721 =null;
		ParserRuleReturnScope columnNameTypeConstraint723 =null;

		ASTNode COMMA722_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnNameTypeConstraint=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeConstraint");

		 pushMsg(retval.start,"create table partition specification", state); 
		try {
			// HiveParser.g:2018:5: ( columnNameTypeConstraint ( COMMA columnNameTypeConstraint )* -> ^( TOK_TABLEPARTCOLS ( columnNameTypeConstraint )+ ) )
			// HiveParser.g:2018:7: columnNameTypeConstraint ( COMMA columnNameTypeConstraint )*
			{
			pushFollow(FOLLOW_columnNameTypeConstraint_in_createTablePartitionColumnTypeSpec11644);
			columnNameTypeConstraint721=columnNameTypeConstraint();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameTypeConstraint.add(columnNameTypeConstraint721.getTree());
			// HiveParser.g:2018:32: ( COMMA columnNameTypeConstraint )*
			loop221:
			while (true) {
				int alt221=2;
				int LA221_0 = input.LA(1);
				if ( (LA221_0==COMMA) ) {
					alt221=1;
				}

				switch (alt221) {
				case 1 :
					// HiveParser.g:2018:33: COMMA columnNameTypeConstraint
					{
					COMMA722=(Token)match(input,COMMA,FOLLOW_COMMA_in_createTablePartitionColumnTypeSpec11647); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA722);

					pushFollow(FOLLOW_columnNameTypeConstraint_in_createTablePartitionColumnTypeSpec11649);
					columnNameTypeConstraint723=columnNameTypeConstraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameTypeConstraint.add(columnNameTypeConstraint723.getTree());
					}
					break;

				default :
					break loop221;
				}
			}

			// AST REWRITE
			// elements: columnNameTypeConstraint
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2019:5: -> ^( TOK_TABLEPARTCOLS ( columnNameTypeConstraint )+ )
			{
				// HiveParser.g:2019:8: ^( TOK_TABLEPARTCOLS ( columnNameTypeConstraint )+ )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABLEPARTCOLS, "TOK_TABLEPARTCOLS"), root_1);
				if ( !(stream_columnNameTypeConstraint.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnNameTypeConstraint.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameTypeConstraint.nextTree());
				}
				stream_columnNameTypeConstraint.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createTablePartitionColumnTypeSpec"


	public static class createTablePartitionColumnSpec_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "createTablePartitionColumnSpec"
	// HiveParser.g:2022:1: createTablePartitionColumnSpec : columnName ( COMMA columnName )* -> ^( TOK_TABLEPARTCOLNAMES ( columnName )+ ) ;
	public final HiveParser.createTablePartitionColumnSpec_return createTablePartitionColumnSpec() throws RecognitionException {
		HiveParser.createTablePartitionColumnSpec_return retval = new HiveParser.createTablePartitionColumnSpec_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token COMMA725=null;
		ParserRuleReturnScope columnName724 =null;
		ParserRuleReturnScope columnName726 =null;

		ASTNode COMMA725_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnName=new RewriteRuleSubtreeStream(adaptor,"rule columnName");

		 pushMsg(retval.start,"create table partition specification", state); 
		try {
			// HiveParser.g:2025:5: ( columnName ( COMMA columnName )* -> ^( TOK_TABLEPARTCOLNAMES ( columnName )+ ) )
			// HiveParser.g:2025:7: columnName ( COMMA columnName )*
			{
			pushFollow(FOLLOW_columnName_in_createTablePartitionColumnSpec11691);
			columnName724=columnName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnName.add(columnName724.getTree());
			// HiveParser.g:2025:18: ( COMMA columnName )*
			loop222:
			while (true) {
				int alt222=2;
				int LA222_0 = input.LA(1);
				if ( (LA222_0==COMMA) ) {
					alt222=1;
				}

				switch (alt222) {
				case 1 :
					// HiveParser.g:2025:19: COMMA columnName
					{
					COMMA725=(Token)match(input,COMMA,FOLLOW_COMMA_in_createTablePartitionColumnSpec11694); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA725);

					pushFollow(FOLLOW_columnName_in_createTablePartitionColumnSpec11696);
					columnName726=columnName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnName.add(columnName726.getTree());
					}
					break;

				default :
					break loop222;
				}
			}

			// AST REWRITE
			// elements: columnName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2026:5: -> ^( TOK_TABLEPARTCOLNAMES ( columnName )+ )
			{
				// HiveParser.g:2026:8: ^( TOK_TABLEPARTCOLNAMES ( columnName )+ )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABLEPARTCOLNAMES, "TOK_TABLEPARTCOLNAMES"), root_1);
				if ( !(stream_columnName.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnName.hasNext() ) {
					adaptor.addChild(root_1, stream_columnName.nextTree());
				}
				stream_columnName.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createTablePartitionColumnSpec"


	public static class tableBuckets_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableBuckets"
	// HiveParser.g:2029:1: tableBuckets : KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS -> ^( TOK_ALTERTABLE_BUCKETS $bucketCols ( $sortCols)? $num) ;
	public final HiveParser.tableBuckets_return tableBuckets() throws RecognitionException {
		HiveParser.tableBuckets_return retval = new HiveParser.tableBuckets_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token num=null;
		Token KW_CLUSTERED727=null;
		Token KW_BY728=null;
		Token LPAREN729=null;
		Token RPAREN730=null;
		Token KW_SORTED731=null;
		Token KW_BY732=null;
		Token LPAREN733=null;
		Token RPAREN734=null;
		Token KW_INTO735=null;
		Token KW_BUCKETS736=null;
		ParserRuleReturnScope bucketCols =null;
		ParserRuleReturnScope sortCols =null;

		ASTNode num_tree=null;
		ASTNode KW_CLUSTERED727_tree=null;
		ASTNode KW_BY728_tree=null;
		ASTNode LPAREN729_tree=null;
		ASTNode RPAREN730_tree=null;
		ASTNode KW_SORTED731_tree=null;
		ASTNode KW_BY732_tree=null;
		ASTNode LPAREN733_tree=null;
		ASTNode RPAREN734_tree=null;
		ASTNode KW_INTO735_tree=null;
		ASTNode KW_BUCKETS736_tree=null;
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleTokenStream stream_KW_SORTED=new RewriteRuleTokenStream(adaptor,"token KW_SORTED");
		RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
		RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
		RewriteRuleTokenStream stream_KW_BUCKETS=new RewriteRuleTokenStream(adaptor,"token KW_BUCKETS");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_CLUSTERED=new RewriteRuleTokenStream(adaptor,"token KW_CLUSTERED");
		RewriteRuleSubtreeStream stream_columnNameOrderList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameOrderList");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");

		 pushMsg(retval.start,"table buckets specification", state); 
		try {
			// HiveParser.g:2032:5: ( KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS -> ^( TOK_ALTERTABLE_BUCKETS $bucketCols ( $sortCols)? $num) )
			// HiveParser.g:2033:7: KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS
			{
			KW_CLUSTERED727=(Token)match(input,KW_CLUSTERED,FOLLOW_KW_CLUSTERED_in_tableBuckets11744); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CLUSTERED.add(KW_CLUSTERED727);

			KW_BY728=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableBuckets11746); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY728);

			LPAREN729=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableBuckets11748); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN729);

			pushFollow(FOLLOW_columnNameList_in_tableBuckets11752);
			bucketCols=columnNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameList.add(bucketCols.getTree());
			RPAREN730=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableBuckets11754); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN730);

			// HiveParser.g:2033:66: ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )?
			int alt223=2;
			int LA223_0 = input.LA(1);
			if ( (LA223_0==KW_SORTED) ) {
				alt223=1;
			}
			switch (alt223) {
				case 1 :
					// HiveParser.g:2033:67: KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN
					{
					KW_SORTED731=(Token)match(input,KW_SORTED,FOLLOW_KW_SORTED_in_tableBuckets11757); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SORTED.add(KW_SORTED731);

					KW_BY732=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableBuckets11759); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY732);

					LPAREN733=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableBuckets11761); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN733);

					pushFollow(FOLLOW_columnNameOrderList_in_tableBuckets11765);
					sortCols=columnNameOrderList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameOrderList.add(sortCols.getTree());
					RPAREN734=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableBuckets11767); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN734);

					}
					break;

			}

			KW_INTO735=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_tableBuckets11771); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_INTO.add(KW_INTO735);

			num=(Token)match(input,Number,FOLLOW_Number_in_tableBuckets11775); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_Number.add(num);

			KW_BUCKETS736=(Token)match(input,KW_BUCKETS,FOLLOW_KW_BUCKETS_in_tableBuckets11777); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_BUCKETS.add(KW_BUCKETS736);

			// AST REWRITE
			// elements: bucketCols, sortCols, num
			// token labels: num
			// rule labels: bucketCols, sortCols, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
			RewriteRuleSubtreeStream stream_bucketCols=new RewriteRuleSubtreeStream(adaptor,"rule bucketCols",bucketCols!=null?bucketCols.getTree():null);
			RewriteRuleSubtreeStream stream_sortCols=new RewriteRuleSubtreeStream(adaptor,"rule sortCols",sortCols!=null?sortCols.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2034:5: -> ^( TOK_ALTERTABLE_BUCKETS $bucketCols ( $sortCols)? $num)
			{
				// HiveParser.g:2034:8: ^( TOK_ALTERTABLE_BUCKETS $bucketCols ( $sortCols)? $num)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ALTERTABLE_BUCKETS, "TOK_ALTERTABLE_BUCKETS"), root_1);
				adaptor.addChild(root_1, stream_bucketCols.nextTree());
				// HiveParser.g:2034:46: ( $sortCols)?
				if ( stream_sortCols.hasNext() ) {
					adaptor.addChild(root_1, stream_sortCols.nextTree());
				}
				stream_sortCols.reset();

				adaptor.addChild(root_1, stream_num.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableBuckets"


	public static class tableSkewed_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableSkewed"
	// HiveParser.g:2037:1: tableSkewed : KW_SKEWED KW_BY LPAREN skewedCols= columnNameList RPAREN KW_ON LPAREN (skewedValues= skewedValueElement ) RPAREN ( ( storedAsDirs )=> storedAsDirs )? -> ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? ) ;
	public final HiveParser.tableSkewed_return tableSkewed() throws RecognitionException {
		HiveParser.tableSkewed_return retval = new HiveParser.tableSkewed_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_SKEWED737=null;
		Token KW_BY738=null;
		Token LPAREN739=null;
		Token RPAREN740=null;
		Token KW_ON741=null;
		Token LPAREN742=null;
		Token RPAREN743=null;
		ParserRuleReturnScope skewedCols =null;
		ParserRuleReturnScope skewedValues =null;
		ParserRuleReturnScope storedAsDirs744 =null;

		ASTNode KW_SKEWED737_tree=null;
		ASTNode KW_BY738_tree=null;
		ASTNode LPAREN739_tree=null;
		ASTNode RPAREN740_tree=null;
		ASTNode KW_ON741_tree=null;
		ASTNode LPAREN742_tree=null;
		ASTNode RPAREN743_tree=null;
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_SKEWED=new RewriteRuleTokenStream(adaptor,"token KW_SKEWED");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleSubtreeStream stream_skewedValueElement=new RewriteRuleSubtreeStream(adaptor,"rule skewedValueElement");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
		RewriteRuleSubtreeStream stream_storedAsDirs=new RewriteRuleSubtreeStream(adaptor,"rule storedAsDirs");

		 pushMsg(retval.start,"table skewed specification", state); 
		try {
			// HiveParser.g:2040:5: ( KW_SKEWED KW_BY LPAREN skewedCols= columnNameList RPAREN KW_ON LPAREN (skewedValues= skewedValueElement ) RPAREN ( ( storedAsDirs )=> storedAsDirs )? -> ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? ) )
			// HiveParser.g:2041:6: KW_SKEWED KW_BY LPAREN skewedCols= columnNameList RPAREN KW_ON LPAREN (skewedValues= skewedValueElement ) RPAREN ( ( storedAsDirs )=> storedAsDirs )?
			{
			KW_SKEWED737=(Token)match(input,KW_SKEWED,FOLLOW_KW_SKEWED_in_tableSkewed11829); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SKEWED.add(KW_SKEWED737);

			KW_BY738=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableSkewed11831); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY738);

			LPAREN739=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableSkewed11833); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN739);

			pushFollow(FOLLOW_columnNameList_in_tableSkewed11837);
			skewedCols=columnNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameList.add(skewedCols.getTree());
			RPAREN740=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableSkewed11839); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN740);

			KW_ON741=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_tableSkewed11841); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON741);

			LPAREN742=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableSkewed11843); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN742);

			// HiveParser.g:2041:75: (skewedValues= skewedValueElement )
			// HiveParser.g:2041:76: skewedValues= skewedValueElement
			{
			pushFollow(FOLLOW_skewedValueElement_in_tableSkewed11848);
			skewedValues=skewedValueElement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_skewedValueElement.add(skewedValues.getTree());
			}

			RPAREN743=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableSkewed11851); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN743);

			// HiveParser.g:2041:116: ( ( storedAsDirs )=> storedAsDirs )?
			int alt224=2;
			int LA224_0 = input.LA(1);
			if ( (LA224_0==KW_STORED) ) {
				int LA224_1 = input.LA(2);
				if ( (LA224_1==KW_AS) ) {
					int LA224_7 = input.LA(3);
					if ( (LA224_7==KW_DIRECTORIES) ) {
						int LA224_9 = input.LA(4);
						if ( (synpred17_HiveParser()) ) {
							alt224=1;
						}
					}
				}
			}
			switch (alt224) {
				case 1 :
					// HiveParser.g:2041:117: ( storedAsDirs )=> storedAsDirs
					{
					pushFollow(FOLLOW_storedAsDirs_in_tableSkewed11860);
					storedAsDirs744=storedAsDirs();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_storedAsDirs.add(storedAsDirs744.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: storedAsDirs, skewedCols, skewedValues
			// token labels: 
			// rule labels: skewedCols, skewedValues, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_skewedCols=new RewriteRuleSubtreeStream(adaptor,"rule skewedCols",skewedCols!=null?skewedCols.getTree():null);
			RewriteRuleSubtreeStream stream_skewedValues=new RewriteRuleSubtreeStream(adaptor,"rule skewedValues",skewedValues!=null?skewedValues.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2042:5: -> ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? )
			{
				// HiveParser.g:2042:8: ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABLESKEWED, "TOK_TABLESKEWED"), root_1);
				adaptor.addChild(root_1, stream_skewedCols.nextTree());
				adaptor.addChild(root_1, stream_skewedValues.nextTree());
				// HiveParser.g:2042:52: ( storedAsDirs )?
				if ( stream_storedAsDirs.hasNext() ) {
					adaptor.addChild(root_1, stream_storedAsDirs.nextTree());
				}
				stream_storedAsDirs.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableSkewed"


	public static class rowFormat_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "rowFormat"
	// HiveParser.g:2045:1: rowFormat : ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) );
	public final HiveParser.rowFormat_return rowFormat() throws RecognitionException {
		HiveParser.rowFormat_return retval = new HiveParser.rowFormat_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope rowFormatSerde745 =null;
		ParserRuleReturnScope rowFormatDelimited746 =null;

		RewriteRuleSubtreeStream stream_rowFormatSerde=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatSerde");
		RewriteRuleSubtreeStream stream_rowFormatDelimited=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatDelimited");

		 pushMsg(retval.start,"serde specification", state); 
		try {
			// HiveParser.g:2048:5: ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) )
			int alt225=3;
			int LA225_0 = input.LA(1);
			if ( (LA225_0==KW_ROW) ) {
				int LA225_1 = input.LA(2);
				if ( (LA225_1==KW_FORMAT) ) {
					int LA225_27 = input.LA(3);
					if ( (LA225_27==KW_SERDE) ) {
						alt225=1;
					}
					else if ( (LA225_27==KW_DELIMITED) ) {
						alt225=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 225, 27, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 225, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA225_0==EOF||LA225_0==COMMA||LA225_0==KW_CLUSTER||LA225_0==KW_DISTRIBUTE||LA225_0==KW_EXCEPT||LA225_0==KW_FROM||LA225_0==KW_GROUP||LA225_0==KW_HAVING||LA225_0==KW_INSERT||LA225_0==KW_INTERSECT||LA225_0==KW_LATERAL||LA225_0==KW_LIMIT||LA225_0==KW_MAP||LA225_0==KW_MINUS||LA225_0==KW_ORDER||(LA225_0 >= KW_RECORDREADER && LA225_0 <= KW_REDUCE)||LA225_0==KW_SELECT||LA225_0==KW_SORT||LA225_0==KW_UNION||LA225_0==KW_USING||LA225_0==KW_WHERE||LA225_0==KW_WINDOW||LA225_0==RPAREN) ) {
				alt225=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 225, 0, input);
				throw nvae;
			}

			switch (alt225) {
				case 1 :
					// HiveParser.g:2048:7: rowFormatSerde
					{
					pushFollow(FOLLOW_rowFormatSerde_in_rowFormat11908);
					rowFormatSerde745=rowFormatSerde();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_rowFormatSerde.add(rowFormatSerde745.getTree());
					// AST REWRITE
					// elements: rowFormatSerde
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2048:22: -> ^( TOK_SERDE rowFormatSerde )
					{
						// HiveParser.g:2048:25: ^( TOK_SERDE rowFormatSerde )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SERDE, "TOK_SERDE"), root_1);
						adaptor.addChild(root_1, stream_rowFormatSerde.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:2049:7: rowFormatDelimited
					{
					pushFollow(FOLLOW_rowFormatDelimited_in_rowFormat11924);
					rowFormatDelimited746=rowFormatDelimited();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_rowFormatDelimited.add(rowFormatDelimited746.getTree());
					// AST REWRITE
					// elements: rowFormatDelimited
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2049:26: -> ^( TOK_SERDE rowFormatDelimited )
					{
						// HiveParser.g:2049:29: ^( TOK_SERDE rowFormatDelimited )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SERDE, "TOK_SERDE"), root_1);
						adaptor.addChild(root_1, stream_rowFormatDelimited.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// HiveParser.g:2050:9: 
					{
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2050:9: -> ^( TOK_SERDE )
					{
						// HiveParser.g:2050:12: ^( TOK_SERDE )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SERDE, "TOK_SERDE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rowFormat"


	public static class recordReader_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "recordReader"
	// HiveParser.g:2053:1: recordReader : ( KW_RECORDREADER StringLiteral -> ^( TOK_RECORDREADER StringLiteral ) | -> ^( TOK_RECORDREADER ) );
	public final HiveParser.recordReader_return recordReader() throws RecognitionException {
		HiveParser.recordReader_return retval = new HiveParser.recordReader_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_RECORDREADER747=null;
		Token StringLiteral748=null;

		ASTNode KW_RECORDREADER747_tree=null;
		ASTNode StringLiteral748_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_RECORDREADER=new RewriteRuleTokenStream(adaptor,"token KW_RECORDREADER");

		 pushMsg(retval.start,"record reader specification", state); 
		try {
			// HiveParser.g:2056:5: ( KW_RECORDREADER StringLiteral -> ^( TOK_RECORDREADER StringLiteral ) | -> ^( TOK_RECORDREADER ) )
			int alt226=2;
			int LA226_0 = input.LA(1);
			if ( (LA226_0==KW_RECORDREADER) ) {
				alt226=1;
			}
			else if ( (LA226_0==EOF||LA226_0==COMMA||LA226_0==KW_CLUSTER||LA226_0==KW_DISTRIBUTE||LA226_0==KW_EXCEPT||LA226_0==KW_FROM||LA226_0==KW_GROUP||LA226_0==KW_HAVING||LA226_0==KW_INSERT||LA226_0==KW_INTERSECT||LA226_0==KW_LATERAL||LA226_0==KW_LIMIT||LA226_0==KW_MAP||LA226_0==KW_MINUS||LA226_0==KW_ORDER||LA226_0==KW_REDUCE||LA226_0==KW_SELECT||LA226_0==KW_SORT||LA226_0==KW_UNION||LA226_0==KW_WHERE||LA226_0==KW_WINDOW||LA226_0==RPAREN) ) {
				alt226=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 226, 0, input);
				throw nvae;
			}

			switch (alt226) {
				case 1 :
					// HiveParser.g:2056:7: KW_RECORDREADER StringLiteral
					{
					KW_RECORDREADER747=(Token)match(input,KW_RECORDREADER,FOLLOW_KW_RECORDREADER_in_recordReader11973); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_RECORDREADER.add(KW_RECORDREADER747);

					StringLiteral748=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_recordReader11975); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral748);

					// AST REWRITE
					// elements: StringLiteral
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2056:37: -> ^( TOK_RECORDREADER StringLiteral )
					{
						// HiveParser.g:2056:40: ^( TOK_RECORDREADER StringLiteral )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_RECORDREADER, "TOK_RECORDREADER"), root_1);
						adaptor.addChild(root_1, stream_StringLiteral.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:2057:9: 
					{
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2057:9: -> ^( TOK_RECORDREADER )
					{
						// HiveParser.g:2057:12: ^( TOK_RECORDREADER )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_RECORDREADER, "TOK_RECORDREADER"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "recordReader"


	public static class recordWriter_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "recordWriter"
	// HiveParser.g:2060:1: recordWriter : ( KW_RECORDWRITER StringLiteral -> ^( TOK_RECORDWRITER StringLiteral ) | -> ^( TOK_RECORDWRITER ) );
	public final HiveParser.recordWriter_return recordWriter() throws RecognitionException {
		HiveParser.recordWriter_return retval = new HiveParser.recordWriter_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_RECORDWRITER749=null;
		Token StringLiteral750=null;

		ASTNode KW_RECORDWRITER749_tree=null;
		ASTNode StringLiteral750_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_RECORDWRITER=new RewriteRuleTokenStream(adaptor,"token KW_RECORDWRITER");

		 pushMsg(retval.start,"record writer specification", state); 
		try {
			// HiveParser.g:2063:5: ( KW_RECORDWRITER StringLiteral -> ^( TOK_RECORDWRITER StringLiteral ) | -> ^( TOK_RECORDWRITER ) )
			int alt227=2;
			int LA227_0 = input.LA(1);
			if ( (LA227_0==KW_RECORDWRITER) ) {
				alt227=1;
			}
			else if ( (LA227_0==KW_USING) ) {
				alt227=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 227, 0, input);
				throw nvae;
			}

			switch (alt227) {
				case 1 :
					// HiveParser.g:2063:7: KW_RECORDWRITER StringLiteral
					{
					KW_RECORDWRITER749=(Token)match(input,KW_RECORDWRITER,FOLLOW_KW_RECORDWRITER_in_recordWriter12024); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_RECORDWRITER.add(KW_RECORDWRITER749);

					StringLiteral750=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_recordWriter12026); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral750);

					// AST REWRITE
					// elements: StringLiteral
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2063:37: -> ^( TOK_RECORDWRITER StringLiteral )
					{
						// HiveParser.g:2063:40: ^( TOK_RECORDWRITER StringLiteral )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_RECORDWRITER, "TOK_RECORDWRITER"), root_1);
						adaptor.addChild(root_1, stream_StringLiteral.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:2064:9: 
					{
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2064:9: -> ^( TOK_RECORDWRITER )
					{
						// HiveParser.g:2064:12: ^( TOK_RECORDWRITER )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_RECORDWRITER, "TOK_RECORDWRITER"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "recordWriter"


	public static class rowFormatSerde_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "rowFormatSerde"
	// HiveParser.g:2067:1: rowFormatSerde : KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_SERDENAME $name ( $serdeprops)? ) ;
	public final HiveParser.rowFormatSerde_return rowFormatSerde() throws RecognitionException {
		HiveParser.rowFormatSerde_return retval = new HiveParser.rowFormatSerde_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token name=null;
		Token KW_ROW751=null;
		Token KW_FORMAT752=null;
		Token KW_SERDE753=null;
		Token KW_WITH754=null;
		Token KW_SERDEPROPERTIES755=null;
		ParserRuleReturnScope serdeprops =null;

		ASTNode name_tree=null;
		ASTNode KW_ROW751_tree=null;
		ASTNode KW_FORMAT752_tree=null;
		ASTNode KW_SERDE753_tree=null;
		ASTNode KW_WITH754_tree=null;
		ASTNode KW_SERDEPROPERTIES755_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_ROW=new RewriteRuleTokenStream(adaptor,"token KW_ROW");
		RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
		RewriteRuleTokenStream stream_KW_SERDE=new RewriteRuleTokenStream(adaptor,"token KW_SERDE");
		RewriteRuleTokenStream stream_KW_FORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FORMAT");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");

		 pushMsg(retval.start,"serde format specification", state); 
		try {
			// HiveParser.g:2070:5: ( KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_SERDENAME $name ( $serdeprops)? ) )
			// HiveParser.g:2070:7: KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
			{
			KW_ROW751=(Token)match(input,KW_ROW,FOLLOW_KW_ROW_in_rowFormatSerde12075); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ROW.add(KW_ROW751);

			KW_FORMAT752=(Token)match(input,KW_FORMAT,FOLLOW_KW_FORMAT_in_rowFormatSerde12077); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FORMAT.add(KW_FORMAT752);

			KW_SERDE753=(Token)match(input,KW_SERDE,FOLLOW_KW_SERDE_in_rowFormatSerde12079); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SERDE.add(KW_SERDE753);

			name=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_rowFormatSerde12083); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(name);

			// HiveParser.g:2070:52: ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
			int alt228=2;
			int LA228_0 = input.LA(1);
			if ( (LA228_0==KW_WITH) ) {
				alt228=1;
			}
			switch (alt228) {
				case 1 :
					// HiveParser.g:2070:53: KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties
					{
					KW_WITH754=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_rowFormatSerde12086); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH754);

					KW_SERDEPROPERTIES755=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_rowFormatSerde12088); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES755);

					pushFollow(FOLLOW_tableProperties_in_rowFormatSerde12092);
					serdeprops=tableProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableProperties.add(serdeprops.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: name, serdeprops
			// token labels: name
			// rule labels: serdeprops, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
			RewriteRuleSubtreeStream stream_serdeprops=new RewriteRuleSubtreeStream(adaptor,"rule serdeprops",serdeprops!=null?serdeprops.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2071:5: -> ^( TOK_SERDENAME $name ( $serdeprops)? )
			{
				// HiveParser.g:2071:8: ^( TOK_SERDENAME $name ( $serdeprops)? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SERDENAME, "TOK_SERDENAME"), root_1);
				adaptor.addChild(root_1, stream_name.nextNode());
				// HiveParser.g:2071:31: ( $serdeprops)?
				if ( stream_serdeprops.hasNext() ) {
					adaptor.addChild(root_1, stream_serdeprops.nextTree());
				}
				stream_serdeprops.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rowFormatSerde"


	public static class rowFormatDelimited_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "rowFormatDelimited"
	// HiveParser.g:2074:1: rowFormatDelimited : KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? ) ;
	public final HiveParser.rowFormatDelimited_return rowFormatDelimited() throws RecognitionException {
		HiveParser.rowFormatDelimited_return retval = new HiveParser.rowFormatDelimited_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_ROW756=null;
		Token KW_FORMAT757=null;
		Token KW_DELIMITED758=null;
		ParserRuleReturnScope tableRowFormatFieldIdentifier759 =null;
		ParserRuleReturnScope tableRowFormatCollItemsIdentifier760 =null;
		ParserRuleReturnScope tableRowFormatMapKeysIdentifier761 =null;
		ParserRuleReturnScope tableRowFormatLinesIdentifier762 =null;
		ParserRuleReturnScope tableRowNullFormat763 =null;

		ASTNode KW_ROW756_tree=null;
		ASTNode KW_FORMAT757_tree=null;
		ASTNode KW_DELIMITED758_tree=null;
		RewriteRuleTokenStream stream_KW_ROW=new RewriteRuleTokenStream(adaptor,"token KW_ROW");
		RewriteRuleTokenStream stream_KW_DELIMITED=new RewriteRuleTokenStream(adaptor,"token KW_DELIMITED");
		RewriteRuleTokenStream stream_KW_FORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FORMAT");
		RewriteRuleSubtreeStream stream_tableRowNullFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowNullFormat");
		RewriteRuleSubtreeStream stream_tableRowFormatFieldIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatFieldIdentifier");
		RewriteRuleSubtreeStream stream_tableRowFormatCollItemsIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatCollItemsIdentifier");
		RewriteRuleSubtreeStream stream_tableRowFormatMapKeysIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatMapKeysIdentifier");
		RewriteRuleSubtreeStream stream_tableRowFormatLinesIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatLinesIdentifier");

		 pushMsg(retval.start,"serde properties specification", state); 
		try {
			// HiveParser.g:2077:5: ( KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? ) )
			// HiveParser.g:2078:7: KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )?
			{
			KW_ROW756=(Token)match(input,KW_ROW,FOLLOW_KW_ROW_in_rowFormatDelimited12144); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ROW.add(KW_ROW756);

			KW_FORMAT757=(Token)match(input,KW_FORMAT,FOLLOW_KW_FORMAT_in_rowFormatDelimited12146); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FORMAT.add(KW_FORMAT757);

			KW_DELIMITED758=(Token)match(input,KW_DELIMITED,FOLLOW_KW_DELIMITED_in_rowFormatDelimited12148); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DELIMITED.add(KW_DELIMITED758);

			// HiveParser.g:2078:37: ( tableRowFormatFieldIdentifier )?
			int alt229=2;
			int LA229_0 = input.LA(1);
			if ( (LA229_0==KW_FIELDS) ) {
				alt229=1;
			}
			switch (alt229) {
				case 1 :
					// HiveParser.g:2078:37: tableRowFormatFieldIdentifier
					{
					pushFollow(FOLLOW_tableRowFormatFieldIdentifier_in_rowFormatDelimited12150);
					tableRowFormatFieldIdentifier759=tableRowFormatFieldIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableRowFormatFieldIdentifier.add(tableRowFormatFieldIdentifier759.getTree());
					}
					break;

			}

			// HiveParser.g:2078:68: ( tableRowFormatCollItemsIdentifier )?
			int alt230=2;
			int LA230_0 = input.LA(1);
			if ( (LA230_0==KW_COLLECTION) ) {
				alt230=1;
			}
			switch (alt230) {
				case 1 :
					// HiveParser.g:2078:68: tableRowFormatCollItemsIdentifier
					{
					pushFollow(FOLLOW_tableRowFormatCollItemsIdentifier_in_rowFormatDelimited12153);
					tableRowFormatCollItemsIdentifier760=tableRowFormatCollItemsIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableRowFormatCollItemsIdentifier.add(tableRowFormatCollItemsIdentifier760.getTree());
					}
					break;

			}

			// HiveParser.g:2078:103: ( tableRowFormatMapKeysIdentifier )?
			int alt231=2;
			alt231 = dfa231.predict(input);
			switch (alt231) {
				case 1 :
					// HiveParser.g:2078:103: tableRowFormatMapKeysIdentifier
					{
					pushFollow(FOLLOW_tableRowFormatMapKeysIdentifier_in_rowFormatDelimited12156);
					tableRowFormatMapKeysIdentifier761=tableRowFormatMapKeysIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableRowFormatMapKeysIdentifier.add(tableRowFormatMapKeysIdentifier761.getTree());
					}
					break;

			}

			// HiveParser.g:2078:136: ( tableRowFormatLinesIdentifier )?
			int alt232=2;
			int LA232_0 = input.LA(1);
			if ( (LA232_0==KW_LINES) ) {
				alt232=1;
			}
			switch (alt232) {
				case 1 :
					// HiveParser.g:2078:136: tableRowFormatLinesIdentifier
					{
					pushFollow(FOLLOW_tableRowFormatLinesIdentifier_in_rowFormatDelimited12159);
					tableRowFormatLinesIdentifier762=tableRowFormatLinesIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableRowFormatLinesIdentifier.add(tableRowFormatLinesIdentifier762.getTree());
					}
					break;

			}

			// HiveParser.g:2078:167: ( tableRowNullFormat )?
			int alt233=2;
			int LA233_0 = input.LA(1);
			if ( (LA233_0==KW_NULL) ) {
				alt233=1;
			}
			switch (alt233) {
				case 1 :
					// HiveParser.g:2078:167: tableRowNullFormat
					{
					pushFollow(FOLLOW_tableRowNullFormat_in_rowFormatDelimited12162);
					tableRowNullFormat763=tableRowNullFormat();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableRowNullFormat.add(tableRowNullFormat763.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: tableRowFormatLinesIdentifier, tableRowNullFormat, tableRowFormatMapKeysIdentifier, tableRowFormatFieldIdentifier, tableRowFormatCollItemsIdentifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2079:5: -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? )
			{
				// HiveParser.g:2079:8: ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SERDEPROPS, "TOK_SERDEPROPS"), root_1);
				// HiveParser.g:2079:25: ( tableRowFormatFieldIdentifier )?
				if ( stream_tableRowFormatFieldIdentifier.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormatFieldIdentifier.nextTree());
				}
				stream_tableRowFormatFieldIdentifier.reset();

				// HiveParser.g:2079:56: ( tableRowFormatCollItemsIdentifier )?
				if ( stream_tableRowFormatCollItemsIdentifier.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormatCollItemsIdentifier.nextTree());
				}
				stream_tableRowFormatCollItemsIdentifier.reset();

				// HiveParser.g:2079:91: ( tableRowFormatMapKeysIdentifier )?
				if ( stream_tableRowFormatMapKeysIdentifier.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormatMapKeysIdentifier.nextTree());
				}
				stream_tableRowFormatMapKeysIdentifier.reset();

				// HiveParser.g:2079:124: ( tableRowFormatLinesIdentifier )?
				if ( stream_tableRowFormatLinesIdentifier.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormatLinesIdentifier.nextTree());
				}
				stream_tableRowFormatLinesIdentifier.reset();

				// HiveParser.g:2079:155: ( tableRowNullFormat )?
				if ( stream_tableRowNullFormat.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowNullFormat.nextTree());
				}
				stream_tableRowNullFormat.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rowFormatDelimited"


	public static class tableRowFormat_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableRowFormat"
	// HiveParser.g:2082:1: tableRowFormat : ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) );
	public final HiveParser.tableRowFormat_return tableRowFormat() throws RecognitionException {
		HiveParser.tableRowFormat_return retval = new HiveParser.tableRowFormat_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope rowFormatDelimited764 =null;
		ParserRuleReturnScope rowFormatSerde765 =null;

		RewriteRuleSubtreeStream stream_rowFormatSerde=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatSerde");
		RewriteRuleSubtreeStream stream_rowFormatDelimited=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatDelimited");

		 pushMsg(retval.start,"table row format specification", state); 
		try {
			// HiveParser.g:2085:5: ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) )
			int alt234=2;
			int LA234_0 = input.LA(1);
			if ( (LA234_0==KW_ROW) ) {
				int LA234_1 = input.LA(2);
				if ( (LA234_1==KW_FORMAT) ) {
					int LA234_2 = input.LA(3);
					if ( (LA234_2==KW_DELIMITED) ) {
						alt234=1;
					}
					else if ( (LA234_2==KW_SERDE) ) {
						alt234=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 234, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 234, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 234, 0, input);
				throw nvae;
			}

			switch (alt234) {
				case 1 :
					// HiveParser.g:2086:7: rowFormatDelimited
					{
					pushFollow(FOLLOW_rowFormatDelimited_in_tableRowFormat12221);
					rowFormatDelimited764=rowFormatDelimited();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_rowFormatDelimited.add(rowFormatDelimited764.getTree());
					// AST REWRITE
					// elements: rowFormatDelimited
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2087:5: -> ^( TOK_TABLEROWFORMAT rowFormatDelimited )
					{
						// HiveParser.g:2087:8: ^( TOK_TABLEROWFORMAT rowFormatDelimited )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABLEROWFORMAT, "TOK_TABLEROWFORMAT"), root_1);
						adaptor.addChild(root_1, stream_rowFormatDelimited.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:2088:7: rowFormatSerde
					{
					pushFollow(FOLLOW_rowFormatSerde_in_tableRowFormat12241);
					rowFormatSerde765=rowFormatSerde();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_rowFormatSerde.add(rowFormatSerde765.getTree());
					// AST REWRITE
					// elements: rowFormatSerde
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2089:5: -> ^( TOK_TABLESERIALIZER rowFormatSerde )
					{
						// HiveParser.g:2089:8: ^( TOK_TABLESERIALIZER rowFormatSerde )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABLESERIALIZER, "TOK_TABLESERIALIZER"), root_1);
						adaptor.addChild(root_1, stream_rowFormatSerde.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowFormat"


	public static class tablePropertiesPrefixed_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "tablePropertiesPrefixed"
	// HiveParser.g:2092:1: tablePropertiesPrefixed : KW_TBLPROPERTIES ! tableProperties ;
	public final HiveParser.tablePropertiesPrefixed_return tablePropertiesPrefixed() throws RecognitionException {
		HiveParser.tablePropertiesPrefixed_return retval = new HiveParser.tablePropertiesPrefixed_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_TBLPROPERTIES766=null;
		ParserRuleReturnScope tableProperties767 =null;

		ASTNode KW_TBLPROPERTIES766_tree=null;

		 pushMsg(retval.start,"table properties with prefix", state); 
		try {
			// HiveParser.g:2095:5: ( KW_TBLPROPERTIES ! tableProperties )
			// HiveParser.g:2096:9: KW_TBLPROPERTIES ! tableProperties
			{
			root_0 = (ASTNode)adaptor.nil();


			KW_TBLPROPERTIES766=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_tablePropertiesPrefixed12288); if (state.failed) return retval;
			pushFollow(FOLLOW_tableProperties_in_tablePropertiesPrefixed12291);
			tableProperties767=tableProperties();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, tableProperties767.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tablePropertiesPrefixed"


	public static class tableProperties_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableProperties"
	// HiveParser.g:2099:1: tableProperties : LPAREN tablePropertiesList RPAREN -> ^( TOK_TABLEPROPERTIES tablePropertiesList ) ;
	public final HiveParser.tableProperties_return tableProperties() throws RecognitionException {
		HiveParser.tableProperties_return retval = new HiveParser.tableProperties_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token LPAREN768=null;
		Token RPAREN770=null;
		ParserRuleReturnScope tablePropertiesList769 =null;

		ASTNode LPAREN768_tree=null;
		ASTNode RPAREN770_tree=null;
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_tablePropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesList");

		 pushMsg(retval.start,"table properties", state); 
		try {
			// HiveParser.g:2102:5: ( LPAREN tablePropertiesList RPAREN -> ^( TOK_TABLEPROPERTIES tablePropertiesList ) )
			// HiveParser.g:2103:7: LPAREN tablePropertiesList RPAREN
			{
			LPAREN768=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableProperties12324); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN768);

			pushFollow(FOLLOW_tablePropertiesList_in_tableProperties12326);
			tablePropertiesList769=tablePropertiesList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tablePropertiesList.add(tablePropertiesList769.getTree());
			RPAREN770=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableProperties12328); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN770);

			// AST REWRITE
			// elements: tablePropertiesList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2103:41: -> ^( TOK_TABLEPROPERTIES tablePropertiesList )
			{
				// HiveParser.g:2103:44: ^( TOK_TABLEPROPERTIES tablePropertiesList )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABLEPROPERTIES, "TOK_TABLEPROPERTIES"), root_1);
				adaptor.addChild(root_1, stream_tablePropertiesList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableProperties"


	public static class tablePropertiesList_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "tablePropertiesList"
	// HiveParser.g:2106:1: tablePropertiesList : ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ ) | keyProperty ( COMMA keyProperty )* -> ^( TOK_TABLEPROPLIST ( keyProperty )+ ) );
	public final HiveParser.tablePropertiesList_return tablePropertiesList() throws RecognitionException {
		HiveParser.tablePropertiesList_return retval = new HiveParser.tablePropertiesList_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token COMMA772=null;
		Token COMMA775=null;
		ParserRuleReturnScope keyValueProperty771 =null;
		ParserRuleReturnScope keyValueProperty773 =null;
		ParserRuleReturnScope keyProperty774 =null;
		ParserRuleReturnScope keyProperty776 =null;

		ASTNode COMMA772_tree=null;
		ASTNode COMMA775_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");
		RewriteRuleSubtreeStream stream_keyProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyProperty");

		 pushMsg(retval.start,"table properties list", state); 
		try {
			// HiveParser.g:2109:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ ) | keyProperty ( COMMA keyProperty )* -> ^( TOK_TABLEPROPLIST ( keyProperty )+ ) )
			int alt237=2;
			int LA237_0 = input.LA(1);
			if ( (LA237_0==StringLiteral) ) {
				int LA237_1 = input.LA(2);
				if ( (LA237_1==EQUAL) ) {
					alt237=1;
				}
				else if ( (LA237_1==COMMA||LA237_1==RPAREN) ) {
					alt237=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 237, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 237, 0, input);
				throw nvae;
			}

			switch (alt237) {
				case 1 :
					// HiveParser.g:2110:7: keyValueProperty ( COMMA keyValueProperty )*
					{
					pushFollow(FOLLOW_keyValueProperty_in_tablePropertiesList12369);
					keyValueProperty771=keyValueProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_keyValueProperty.add(keyValueProperty771.getTree());
					// HiveParser.g:2110:24: ( COMMA keyValueProperty )*
					loop235:
					while (true) {
						int alt235=2;
						int LA235_0 = input.LA(1);
						if ( (LA235_0==COMMA) ) {
							alt235=1;
						}

						switch (alt235) {
						case 1 :
							// HiveParser.g:2110:25: COMMA keyValueProperty
							{
							COMMA772=(Token)match(input,COMMA,FOLLOW_COMMA_in_tablePropertiesList12372); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA772);

							pushFollow(FOLLOW_keyValueProperty_in_tablePropertiesList12374);
							keyValueProperty773=keyValueProperty();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_keyValueProperty.add(keyValueProperty773.getTree());
							}
							break;

						default :
							break loop235;
						}
					}

					// AST REWRITE
					// elements: keyValueProperty
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2110:50: -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ )
					{
						// HiveParser.g:2110:53: ^( TOK_TABLEPROPLIST ( keyValueProperty )+ )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABLEPROPLIST, "TOK_TABLEPROPLIST"), root_1);
						if ( !(stream_keyValueProperty.hasNext()) ) {
							throw new RewriteEarlyExitException();
						}
						while ( stream_keyValueProperty.hasNext() ) {
							adaptor.addChild(root_1, stream_keyValueProperty.nextTree());
						}
						stream_keyValueProperty.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:2112:7: keyProperty ( COMMA keyProperty )*
					{
					pushFollow(FOLLOW_keyProperty_in_tablePropertiesList12399);
					keyProperty774=keyProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_keyProperty.add(keyProperty774.getTree());
					// HiveParser.g:2112:19: ( COMMA keyProperty )*
					loop236:
					while (true) {
						int alt236=2;
						int LA236_0 = input.LA(1);
						if ( (LA236_0==COMMA) ) {
							alt236=1;
						}

						switch (alt236) {
						case 1 :
							// HiveParser.g:2112:20: COMMA keyProperty
							{
							COMMA775=(Token)match(input,COMMA,FOLLOW_COMMA_in_tablePropertiesList12402); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA775);

							pushFollow(FOLLOW_keyProperty_in_tablePropertiesList12404);
							keyProperty776=keyProperty();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_keyProperty.add(keyProperty776.getTree());
							}
							break;

						default :
							break loop236;
						}
					}

					// AST REWRITE
					// elements: keyProperty
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2112:40: -> ^( TOK_TABLEPROPLIST ( keyProperty )+ )
					{
						// HiveParser.g:2112:43: ^( TOK_TABLEPROPLIST ( keyProperty )+ )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABLEPROPLIST, "TOK_TABLEPROPLIST"), root_1);
						if ( !(stream_keyProperty.hasNext()) ) {
							throw new RewriteEarlyExitException();
						}
						while ( stream_keyProperty.hasNext() ) {
							adaptor.addChild(root_1, stream_keyProperty.nextTree());
						}
						stream_keyProperty.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tablePropertiesList"


	public static class keyValueProperty_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "keyValueProperty"
	// HiveParser.g:2115:1: keyValueProperty : key= StringLiteral EQUAL value= StringLiteral -> ^( TOK_TABLEPROPERTY $key $value) ;
	public final HiveParser.keyValueProperty_return keyValueProperty() throws RecognitionException {
		HiveParser.keyValueProperty_return retval = new HiveParser.keyValueProperty_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token key=null;
		Token value=null;
		Token EQUAL777=null;

		ASTNode key_tree=null;
		ASTNode value_tree=null;
		ASTNode EQUAL777_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");

		 pushMsg(retval.start,"specifying key/value property", state); 
		try {
			// HiveParser.g:2118:5: (key= StringLiteral EQUAL value= StringLiteral -> ^( TOK_TABLEPROPERTY $key $value) )
			// HiveParser.g:2119:7: key= StringLiteral EQUAL value= StringLiteral
			{
			key=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_keyValueProperty12450); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(key);

			EQUAL777=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_keyValueProperty12452); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL777);

			value=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_keyValueProperty12456); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(value);

			// AST REWRITE
			// elements: value, key
			// token labels: value, key
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_value=new RewriteRuleTokenStream(adaptor,"token value",value);
			RewriteRuleTokenStream stream_key=new RewriteRuleTokenStream(adaptor,"token key",key);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2119:51: -> ^( TOK_TABLEPROPERTY $key $value)
			{
				// HiveParser.g:2119:54: ^( TOK_TABLEPROPERTY $key $value)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABLEPROPERTY, "TOK_TABLEPROPERTY"), root_1);
				adaptor.addChild(root_1, stream_key.nextNode());
				adaptor.addChild(root_1, stream_value.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "keyValueProperty"


	public static class keyProperty_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "keyProperty"
	// HiveParser.g:2122:1: keyProperty : key= StringLiteral -> ^( TOK_TABLEPROPERTY $key TOK_NULL ) ;
	public final HiveParser.keyProperty_return keyProperty() throws RecognitionException {
		HiveParser.keyProperty_return retval = new HiveParser.keyProperty_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token key=null;

		ASTNode key_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");

		 pushMsg(retval.start,"specifying key property", state); 
		try {
			// HiveParser.g:2125:5: (key= StringLiteral -> ^( TOK_TABLEPROPERTY $key TOK_NULL ) )
			// HiveParser.g:2126:7: key= StringLiteral
			{
			key=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_keyProperty12503); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(key);

			// AST REWRITE
			// elements: key
			// token labels: key
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_key=new RewriteRuleTokenStream(adaptor,"token key",key);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2126:25: -> ^( TOK_TABLEPROPERTY $key TOK_NULL )
			{
				// HiveParser.g:2126:28: ^( TOK_TABLEPROPERTY $key TOK_NULL )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABLEPROPERTY, "TOK_TABLEPROPERTY"), root_1);
				adaptor.addChild(root_1, stream_key.nextNode());
				adaptor.addChild(root_1, (ASTNode)adaptor.create(TOK_NULL, "TOK_NULL"));
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "keyProperty"


	public static class tableRowFormatFieldIdentifier_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableRowFormatFieldIdentifier"
	// HiveParser.g:2129:1: tableRowFormatFieldIdentifier : KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )? -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? ) ;
	public final HiveParser.tableRowFormatFieldIdentifier_return tableRowFormatFieldIdentifier() throws RecognitionException {
		HiveParser.tableRowFormatFieldIdentifier_return retval = new HiveParser.tableRowFormatFieldIdentifier_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token fldIdnt=null;
		Token fldEscape=null;
		Token KW_FIELDS778=null;
		Token KW_TERMINATED779=null;
		Token KW_BY780=null;
		Token KW_ESCAPED781=null;
		Token KW_BY782=null;

		ASTNode fldIdnt_tree=null;
		ASTNode fldEscape_tree=null;
		ASTNode KW_FIELDS778_tree=null;
		ASTNode KW_TERMINATED779_tree=null;
		ASTNode KW_BY780_tree=null;
		ASTNode KW_ESCAPED781_tree=null;
		ASTNode KW_BY782_tree=null;
		RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_ESCAPED=new RewriteRuleTokenStream(adaptor,"token KW_ESCAPED");
		RewriteRuleTokenStream stream_KW_FIELDS=new RewriteRuleTokenStream(adaptor,"token KW_FIELDS");

		 pushMsg(retval.start,"table row format's field separator", state); 
		try {
			// HiveParser.g:2132:5: ( KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )? -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? ) )
			// HiveParser.g:2133:7: KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )?
			{
			KW_FIELDS778=(Token)match(input,KW_FIELDS,FOLLOW_KW_FIELDS_in_tableRowFormatFieldIdentifier12547); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FIELDS.add(KW_FIELDS778);

			KW_TERMINATED779=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatFieldIdentifier12549); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TERMINATED.add(KW_TERMINATED779);

			KW_BY780=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier12551); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY780);

			fldIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier12555); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(fldIdnt);

			// HiveParser.g:2133:59: ( KW_ESCAPED KW_BY fldEscape= StringLiteral )?
			int alt238=2;
			int LA238_0 = input.LA(1);
			if ( (LA238_0==KW_ESCAPED) ) {
				alt238=1;
			}
			switch (alt238) {
				case 1 :
					// HiveParser.g:2133:60: KW_ESCAPED KW_BY fldEscape= StringLiteral
					{
					KW_ESCAPED781=(Token)match(input,KW_ESCAPED,FOLLOW_KW_ESCAPED_in_tableRowFormatFieldIdentifier12558); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ESCAPED.add(KW_ESCAPED781);

					KW_BY782=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier12560); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY782);

					fldEscape=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier12564); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(fldEscape);

					}
					break;

			}

			// AST REWRITE
			// elements: fldEscape, fldIdnt
			// token labels: fldIdnt, fldEscape
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_fldIdnt=new RewriteRuleTokenStream(adaptor,"token fldIdnt",fldIdnt);
			RewriteRuleTokenStream stream_fldEscape=new RewriteRuleTokenStream(adaptor,"token fldEscape",fldEscape);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2134:5: -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? )
			{
				// HiveParser.g:2134:8: ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABLEROWFORMATFIELD, "TOK_TABLEROWFORMATFIELD"), root_1);
				adaptor.addChild(root_1, stream_fldIdnt.nextNode());
				// HiveParser.g:2134:44: ( $fldEscape)?
				if ( stream_fldEscape.hasNext() ) {
					adaptor.addChild(root_1, stream_fldEscape.nextNode());
				}
				stream_fldEscape.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowFormatFieldIdentifier"


	public static class tableRowFormatCollItemsIdentifier_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableRowFormatCollItemsIdentifier"
	// HiveParser.g:2137:1: tableRowFormatCollItemsIdentifier : KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt) ;
	public final HiveParser.tableRowFormatCollItemsIdentifier_return tableRowFormatCollItemsIdentifier() throws RecognitionException {
		HiveParser.tableRowFormatCollItemsIdentifier_return retval = new HiveParser.tableRowFormatCollItemsIdentifier_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token collIdnt=null;
		Token KW_COLLECTION783=null;
		Token KW_ITEMS784=null;
		Token KW_TERMINATED785=null;
		Token KW_BY786=null;

		ASTNode collIdnt_tree=null;
		ASTNode KW_COLLECTION783_tree=null;
		ASTNode KW_ITEMS784_tree=null;
		ASTNode KW_TERMINATED785_tree=null;
		ASTNode KW_BY786_tree=null;
		RewriteRuleTokenStream stream_KW_COLLECTION=new RewriteRuleTokenStream(adaptor,"token KW_COLLECTION");
		RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
		RewriteRuleTokenStream stream_KW_ITEMS=new RewriteRuleTokenStream(adaptor,"token KW_ITEMS");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");

		 pushMsg(retval.start,"table row format's column separator", state); 
		try {
			// HiveParser.g:2140:5: ( KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt) )
			// HiveParser.g:2141:7: KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral
			{
			KW_COLLECTION783=(Token)match(input,KW_COLLECTION,FOLLOW_KW_COLLECTION_in_tableRowFormatCollItemsIdentifier12616); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_COLLECTION.add(KW_COLLECTION783);

			KW_ITEMS784=(Token)match(input,KW_ITEMS,FOLLOW_KW_ITEMS_in_tableRowFormatCollItemsIdentifier12618); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ITEMS.add(KW_ITEMS784);

			KW_TERMINATED785=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatCollItemsIdentifier12620); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TERMINATED.add(KW_TERMINATED785);

			KW_BY786=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatCollItemsIdentifier12622); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY786);

			collIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatCollItemsIdentifier12626); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(collIdnt);

			// AST REWRITE
			// elements: collIdnt
			// token labels: collIdnt
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_collIdnt=new RewriteRuleTokenStream(adaptor,"token collIdnt",collIdnt);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2142:5: -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt)
			{
				// HiveParser.g:2142:8: ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABLEROWFORMATCOLLITEMS, "TOK_TABLEROWFORMATCOLLITEMS"), root_1);
				adaptor.addChild(root_1, stream_collIdnt.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowFormatCollItemsIdentifier"


	public static class tableRowFormatMapKeysIdentifier_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableRowFormatMapKeysIdentifier"
	// HiveParser.g:2145:1: tableRowFormatMapKeysIdentifier : KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt) ;
	public final HiveParser.tableRowFormatMapKeysIdentifier_return tableRowFormatMapKeysIdentifier() throws RecognitionException {
		HiveParser.tableRowFormatMapKeysIdentifier_return retval = new HiveParser.tableRowFormatMapKeysIdentifier_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token mapKeysIdnt=null;
		Token KW_MAP787=null;
		Token KW_KEYS788=null;
		Token KW_TERMINATED789=null;
		Token KW_BY790=null;

		ASTNode mapKeysIdnt_tree=null;
		ASTNode KW_MAP787_tree=null;
		ASTNode KW_KEYS788_tree=null;
		ASTNode KW_TERMINATED789_tree=null;
		ASTNode KW_BY790_tree=null;
		RewriteRuleTokenStream stream_KW_KEYS=new RewriteRuleTokenStream(adaptor,"token KW_KEYS");
		RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_MAP=new RewriteRuleTokenStream(adaptor,"token KW_MAP");

		 pushMsg(retval.start,"table row format's map key separator", state); 
		try {
			// HiveParser.g:2148:5: ( KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt) )
			// HiveParser.g:2149:7: KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral
			{
			KW_MAP787=(Token)match(input,KW_MAP,FOLLOW_KW_MAP_in_tableRowFormatMapKeysIdentifier12672); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_MAP.add(KW_MAP787);

			KW_KEYS788=(Token)match(input,KW_KEYS,FOLLOW_KW_KEYS_in_tableRowFormatMapKeysIdentifier12674); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_KEYS.add(KW_KEYS788);

			KW_TERMINATED789=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatMapKeysIdentifier12676); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TERMINATED.add(KW_TERMINATED789);

			KW_BY790=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatMapKeysIdentifier12678); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY790);

			mapKeysIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatMapKeysIdentifier12682); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(mapKeysIdnt);

			// AST REWRITE
			// elements: mapKeysIdnt
			// token labels: mapKeysIdnt
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_mapKeysIdnt=new RewriteRuleTokenStream(adaptor,"token mapKeysIdnt",mapKeysIdnt);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2150:5: -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt)
			{
				// HiveParser.g:2150:8: ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABLEROWFORMATMAPKEYS, "TOK_TABLEROWFORMATMAPKEYS"), root_1);
				adaptor.addChild(root_1, stream_mapKeysIdnt.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowFormatMapKeysIdentifier"


	public static class tableRowFormatLinesIdentifier_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableRowFormatLinesIdentifier"
	// HiveParser.g:2153:1: tableRowFormatLinesIdentifier : KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATLINES $linesIdnt) ;
	public final HiveParser.tableRowFormatLinesIdentifier_return tableRowFormatLinesIdentifier() throws RecognitionException {
		HiveParser.tableRowFormatLinesIdentifier_return retval = new HiveParser.tableRowFormatLinesIdentifier_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token linesIdnt=null;
		Token KW_LINES791=null;
		Token KW_TERMINATED792=null;
		Token KW_BY793=null;

		ASTNode linesIdnt_tree=null;
		ASTNode KW_LINES791_tree=null;
		ASTNode KW_TERMINATED792_tree=null;
		ASTNode KW_BY793_tree=null;
		RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_LINES=new RewriteRuleTokenStream(adaptor,"token KW_LINES");

		 pushMsg(retval.start,"table row format's line separator", state); 
		try {
			// HiveParser.g:2156:5: ( KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATLINES $linesIdnt) )
			// HiveParser.g:2157:7: KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral
			{
			KW_LINES791=(Token)match(input,KW_LINES,FOLLOW_KW_LINES_in_tableRowFormatLinesIdentifier12728); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LINES.add(KW_LINES791);

			KW_TERMINATED792=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatLinesIdentifier12730); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TERMINATED.add(KW_TERMINATED792);

			KW_BY793=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatLinesIdentifier12732); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY793);

			linesIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatLinesIdentifier12736); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(linesIdnt);

			// AST REWRITE
			// elements: linesIdnt
			// token labels: linesIdnt
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_linesIdnt=new RewriteRuleTokenStream(adaptor,"token linesIdnt",linesIdnt);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2158:5: -> ^( TOK_TABLEROWFORMATLINES $linesIdnt)
			{
				// HiveParser.g:2158:8: ^( TOK_TABLEROWFORMATLINES $linesIdnt)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABLEROWFORMATLINES, "TOK_TABLEROWFORMATLINES"), root_1);
				adaptor.addChild(root_1, stream_linesIdnt.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowFormatLinesIdentifier"


	public static class tableRowNullFormat_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableRowNullFormat"
	// HiveParser.g:2161:1: tableRowNullFormat : KW_NULL KW_DEFINED KW_AS nullIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATNULL $nullIdnt) ;
	public final HiveParser.tableRowNullFormat_return tableRowNullFormat() throws RecognitionException {
		HiveParser.tableRowNullFormat_return retval = new HiveParser.tableRowNullFormat_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token nullIdnt=null;
		Token KW_NULL794=null;
		Token KW_DEFINED795=null;
		Token KW_AS796=null;

		ASTNode nullIdnt_tree=null;
		ASTNode KW_NULL794_tree=null;
		ASTNode KW_DEFINED795_tree=null;
		ASTNode KW_AS796_tree=null;
		RewriteRuleTokenStream stream_KW_NULL=new RewriteRuleTokenStream(adaptor,"token KW_NULL");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_KW_DEFINED=new RewriteRuleTokenStream(adaptor,"token KW_DEFINED");

		 pushMsg(retval.start,"table row format's null specifier", state); 
		try {
			// HiveParser.g:2164:5: ( KW_NULL KW_DEFINED KW_AS nullIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATNULL $nullIdnt) )
			// HiveParser.g:2165:7: KW_NULL KW_DEFINED KW_AS nullIdnt= StringLiteral
			{
			KW_NULL794=(Token)match(input,KW_NULL,FOLLOW_KW_NULL_in_tableRowNullFormat12782); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_NULL.add(KW_NULL794);

			KW_DEFINED795=(Token)match(input,KW_DEFINED,FOLLOW_KW_DEFINED_in_tableRowNullFormat12784); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DEFINED.add(KW_DEFINED795);

			KW_AS796=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableRowNullFormat12786); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS796);

			nullIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowNullFormat12790); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(nullIdnt);

			// AST REWRITE
			// elements: nullIdnt
			// token labels: nullIdnt
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_nullIdnt=new RewriteRuleTokenStream(adaptor,"token nullIdnt",nullIdnt);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2166:5: -> ^( TOK_TABLEROWFORMATNULL $nullIdnt)
			{
				// HiveParser.g:2166:8: ^( TOK_TABLEROWFORMATNULL $nullIdnt)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABLEROWFORMATNULL, "TOK_TABLEROWFORMATNULL"), root_1);
				adaptor.addChild(root_1, stream_nullIdnt.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowNullFormat"


	public static class tableFileFormat_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableFileFormat"
	// HiveParser.g:2168:1: tableFileFormat : ( ( KW_STORED KW_AS KW_INPUTFORMAT )=> KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) | KW_STORED KW_AS genericSpec= identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) );
	public final HiveParser.tableFileFormat_return tableFileFormat() throws RecognitionException {
		HiveParser.tableFileFormat_return retval = new HiveParser.tableFileFormat_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token inFmt=null;
		Token outFmt=null;
		Token inDriver=null;
		Token outDriver=null;
		Token storageHandler=null;
		Token KW_STORED797=null;
		Token KW_AS798=null;
		Token KW_INPUTFORMAT799=null;
		Token KW_OUTPUTFORMAT800=null;
		Token KW_INPUTDRIVER801=null;
		Token KW_OUTPUTDRIVER802=null;
		Token KW_STORED803=null;
		Token KW_BY804=null;
		Token KW_WITH805=null;
		Token KW_SERDEPROPERTIES806=null;
		Token KW_STORED807=null;
		Token KW_AS808=null;
		ParserRuleReturnScope serdeprops =null;
		ParserRuleReturnScope genericSpec =null;

		ASTNode inFmt_tree=null;
		ASTNode outFmt_tree=null;
		ASTNode inDriver_tree=null;
		ASTNode outDriver_tree=null;
		ASTNode storageHandler_tree=null;
		ASTNode KW_STORED797_tree=null;
		ASTNode KW_AS798_tree=null;
		ASTNode KW_INPUTFORMAT799_tree=null;
		ASTNode KW_OUTPUTFORMAT800_tree=null;
		ASTNode KW_INPUTDRIVER801_tree=null;
		ASTNode KW_OUTPUTDRIVER802_tree=null;
		ASTNode KW_STORED803_tree=null;
		ASTNode KW_BY804_tree=null;
		ASTNode KW_WITH805_tree=null;
		ASTNode KW_SERDEPROPERTIES806_tree=null;
		ASTNode KW_STORED807_tree=null;
		ASTNode KW_AS808_tree=null;
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleTokenStream stream_KW_INPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_INPUTFORMAT");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
		RewriteRuleTokenStream stream_KW_INPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_INPUTDRIVER");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_KW_OUTPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTFORMAT");
		RewriteRuleTokenStream stream_KW_STORED=new RewriteRuleTokenStream(adaptor,"token KW_STORED");
		RewriteRuleTokenStream stream_KW_OUTPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTDRIVER");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");

		 pushMsg(retval.start,"table file format specification", state); 
		try {
			// HiveParser.g:2171:5: ( ( KW_STORED KW_AS KW_INPUTFORMAT )=> KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) | KW_STORED KW_AS genericSpec= identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) )
			int alt241=3;
			int LA241_0 = input.LA(1);
			if ( (LA241_0==KW_STORED) ) {
				int LA241_1 = input.LA(2);
				if ( (LA241_1==KW_AS) ) {
					int LA241_2 = input.LA(3);
					if ( (LA241_2==KW_INPUTFORMAT) ) {
						int LA241_4 = input.LA(4);
						if ( (synpred18_HiveParser()) ) {
							alt241=1;
						}
						else if ( (true) ) {
							alt241=3;
						}

					}
					else if ( (LA241_2==Identifier||(LA241_2 >= KW_ABORT && LA241_2 <= KW_AFTER)||LA241_2==KW_ALLOC_FRACTION||LA241_2==KW_ANALYZE||LA241_2==KW_ARCHIVE||(LA241_2 >= KW_ASC && LA241_2 <= KW_AST)||(LA241_2 >= KW_AUTOCOMMIT && LA241_2 <= KW_BEFORE)||(LA241_2 >= KW_BUCKET && LA241_2 <= KW_BUCKETS)||(LA241_2 >= KW_CACHE && LA241_2 <= KW_CASCADE)||LA241_2==KW_CHANGE||(LA241_2 >= KW_CHECK && LA241_2 <= KW_COLLECTION)||(LA241_2 >= KW_COLUMNS && LA241_2 <= KW_COMMENT)||(LA241_2 >= KW_COMPACT && LA241_2 <= KW_CONCATENATE)||LA241_2==KW_CONTINUE||LA241_2==KW_DATA||(LA241_2 >= KW_DATABASES && LA241_2 <= KW_DEBUG)||(LA241_2 >= KW_DEFAULT && LA241_2 <= KW_DEFINED)||(LA241_2 >= KW_DELIMITED && LA241_2 <= KW_DESC)||(LA241_2 >= KW_DETAIL && LA241_2 <= KW_DISABLE)||(LA241_2 >= KW_DISTRIBUTE && LA241_2 <= KW_DO)||LA241_2==KW_DOW||(LA241_2 >= KW_DUMP && LA241_2 <= KW_ELEM_TYPE)||LA241_2==KW_ENABLE||(LA241_2 >= KW_ENFORCED && LA241_2 <= KW_ESCAPED)||LA241_2==KW_EXCLUSIVE||(LA241_2 >= KW_EXPLAIN && LA241_2 <= KW_EXPRESSION)||(LA241_2 >= KW_FIELDS && LA241_2 <= KW_FIRST)||(LA241_2 >= KW_FORMAT && LA241_2 <= KW_FORMATTED)||LA241_2==KW_FUNCTIONS||LA241_2==KW_GROUP||(LA241_2 >= KW_HOUR && LA241_2 <= KW_IDXPROPERTIES)||(LA241_2 >= KW_INDEX && LA241_2 <= KW_INDEXES)||(LA241_2 >= KW_INPATH && LA241_2 <= KW_INPUTDRIVER)||(LA241_2 >= KW_ISOLATION && LA241_2 <= KW_JAR)||(LA241_2 >= KW_KEY && LA241_2 <= KW_LAST)||LA241_2==KW_LEVEL||(LA241_2 >= KW_LIMIT && LA241_2 <= KW_LOAD)||(LA241_2 >= KW_LOCATION && LA241_2 <= KW_LONG)||LA241_2==KW_MANAGEMENT||(LA241_2 >= KW_MAPJOIN && LA241_2 <= KW_MATERIALIZED)||LA241_2==KW_METADATA||(LA241_2 >= KW_MINUTE && LA241_2 <= KW_MONTH)||(LA241_2 >= KW_MOVE && LA241_2 <= KW_MSCK)||(LA241_2 >= KW_NORELY && LA241_2 <= KW_NOSCAN)||LA241_2==KW_NOVALIDATE||LA241_2==KW_NULLS||LA241_2==KW_OFFSET||(LA241_2 >= KW_OPERATOR && LA241_2 <= KW_OPTION)||LA241_2==KW_ORDER||(LA241_2 >= KW_OUTPUTDRIVER && LA241_2 <= KW_OUTPUTFORMAT)||(LA241_2 >= KW_OVERWRITE && LA241_2 <= KW_OWNER)||(LA241_2 >= KW_PARTITIONED && LA241_2 <= KW_PATH)||(LA241_2 >= KW_PLAN && LA241_2 <= KW_POOL)||LA241_2==KW_PRINCIPALS||(LA241_2 >= KW_PURGE && LA241_2 <= KW_QUERY_PARALLELISM)||LA241_2==KW_READ||(LA241_2 >= KW_REBUILD && LA241_2 <= KW_RECORDWRITER)||(LA241_2 >= KW_RELOAD && LA241_2 <= KW_RESTRICT)||LA241_2==KW_REWRITE||(LA241_2 >= KW_ROLE && LA241_2 <= KW_ROLES)||(LA241_2 >= KW_SCHEDULING_POLICY && LA241_2 <= KW_SECOND)||(LA241_2 >= KW_SEMI && LA241_2 <= KW_SERVER)||(LA241_2 >= KW_SETS && LA241_2 <= KW_SKEWED)||(LA241_2 >= KW_SNAPSHOT && LA241_2 <= KW_SSL)||(LA241_2 >= KW_STATISTICS && LA241_2 <= KW_SUMMARY)||LA241_2==KW_TABLES||(LA241_2 >= KW_TBLPROPERTIES && LA241_2 <= KW_TERMINATED)||LA241_2==KW_TINYINT||(LA241_2 >= KW_TOUCH && LA241_2 <= KW_TRANSACTIONS)||LA241_2==KW_UNARCHIVE||LA241_2==KW_UNDO||LA241_2==KW_UNIONTYPE||(LA241_2 >= KW_UNKNOWN && LA241_2 <= KW_UNSIGNED)||(LA241_2 >= KW_URI && LA241_2 <= KW_USE)||(LA241_2 >= KW_UTC && LA241_2 <= KW_VALIDATE)||LA241_2==KW_VALUE_TYPE||(LA241_2 >= KW_VECTORIZATION && LA241_2 <= KW_WEEK)||LA241_2==KW_WHILE||(LA241_2 >= KW_WORK && LA241_2 <= KW_ZONE)||LA241_2==KW_BATCH||LA241_2==KW_DAYOFWEEK||LA241_2==KW_HOLD_DDLTIME||LA241_2==KW_IGNORE||LA241_2==KW_NO_DROP||LA241_2==KW_OFFLINE||LA241_2==KW_PROTECTION||LA241_2==KW_READONLY||LA241_2==KW_TIMESTAMPTZ) ) {
						alt241=3;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 241, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( (LA241_1==KW_BY) ) {
					alt241=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 241, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 241, 0, input);
				throw nvae;
			}

			switch (alt241) {
				case 1 :
					// HiveParser.g:2172:7: ( KW_STORED KW_AS KW_INPUTFORMAT )=> KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
					{
					KW_STORED797=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat12845); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_STORED.add(KW_STORED797);

					KW_AS798=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat12847); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS798);

					KW_INPUTFORMAT799=(Token)match(input,KW_INPUTFORMAT,FOLLOW_KW_INPUTFORMAT_in_tableFileFormat12849); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INPUTFORMAT.add(KW_INPUTFORMAT799);

					inFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat12853); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(inFmt);

					KW_OUTPUTFORMAT800=(Token)match(input,KW_OUTPUTFORMAT,FOLLOW_KW_OUTPUTFORMAT_in_tableFileFormat12855); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_OUTPUTFORMAT.add(KW_OUTPUTFORMAT800);

					outFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat12859); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(outFmt);

					// HiveParser.g:2172:131: ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
					int alt239=2;
					int LA239_0 = input.LA(1);
					if ( (LA239_0==KW_INPUTDRIVER) ) {
						alt239=1;
					}
					switch (alt239) {
						case 1 :
							// HiveParser.g:2172:132: KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral
							{
							KW_INPUTDRIVER801=(Token)match(input,KW_INPUTDRIVER,FOLLOW_KW_INPUTDRIVER_in_tableFileFormat12862); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_INPUTDRIVER.add(KW_INPUTDRIVER801);

							inDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat12866); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_StringLiteral.add(inDriver);

							KW_OUTPUTDRIVER802=(Token)match(input,KW_OUTPUTDRIVER,FOLLOW_KW_OUTPUTDRIVER_in_tableFileFormat12868); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_OUTPUTDRIVER.add(KW_OUTPUTDRIVER802);

							outDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat12872); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_StringLiteral.add(outDriver);

							}
							break;

					}

					// AST REWRITE
					// elements: inDriver, outFmt, outDriver, inFmt
					// token labels: inFmt, inDriver, outDriver, outFmt
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_inFmt=new RewriteRuleTokenStream(adaptor,"token inFmt",inFmt);
					RewriteRuleTokenStream stream_inDriver=new RewriteRuleTokenStream(adaptor,"token inDriver",inDriver);
					RewriteRuleTokenStream stream_outDriver=new RewriteRuleTokenStream(adaptor,"token outDriver",outDriver);
					RewriteRuleTokenStream stream_outFmt=new RewriteRuleTokenStream(adaptor,"token outFmt",outFmt);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2173:7: -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
					{
						// HiveParser.g:2173:10: ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABLEFILEFORMAT, "TOK_TABLEFILEFORMAT"), root_1);
						adaptor.addChild(root_1, stream_inFmt.nextNode());
						adaptor.addChild(root_1, stream_outFmt.nextNode());
						// HiveParser.g:2173:48: ( $inDriver)?
						if ( stream_inDriver.hasNext() ) {
							adaptor.addChild(root_1, stream_inDriver.nextNode());
						}
						stream_inDriver.reset();

						// HiveParser.g:2173:59: ( $outDriver)?
						if ( stream_outDriver.hasNext() ) {
							adaptor.addChild(root_1, stream_outDriver.nextNode());
						}
						stream_outDriver.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:2174:9: KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
					{
					KW_STORED803=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat12910); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_STORED.add(KW_STORED803);

					KW_BY804=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableFileFormat12912); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY804);

					storageHandler=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat12916); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(storageHandler);

					// HiveParser.g:2175:10: ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
					int alt240=2;
					int LA240_0 = input.LA(1);
					if ( (LA240_0==KW_WITH) ) {
						alt240=1;
					}
					switch (alt240) {
						case 1 :
							// HiveParser.g:2175:11: KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties
							{
							KW_WITH805=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_tableFileFormat12928); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH805);

							KW_SERDEPROPERTIES806=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_tableFileFormat12930); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES806);

							pushFollow(FOLLOW_tableProperties_in_tableFileFormat12934);
							serdeprops=tableProperties();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableProperties.add(serdeprops.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: serdeprops, storageHandler
					// token labels: storageHandler
					// rule labels: serdeprops, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_storageHandler=new RewriteRuleTokenStream(adaptor,"token storageHandler",storageHandler);
					RewriteRuleSubtreeStream stream_serdeprops=new RewriteRuleSubtreeStream(adaptor,"rule serdeprops",serdeprops!=null?serdeprops.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2176:7: -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? )
					{
						// HiveParser.g:2176:10: ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_STORAGEHANDLER, "TOK_STORAGEHANDLER"), root_1);
						adaptor.addChild(root_1, stream_storageHandler.nextNode());
						// HiveParser.g:2176:48: ( $serdeprops)?
						if ( stream_serdeprops.hasNext() ) {
							adaptor.addChild(root_1, stream_serdeprops.nextTree());
						}
						stream_serdeprops.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// HiveParser.g:2177:9: KW_STORED KW_AS genericSpec= identifier
					{
					KW_STORED807=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat12965); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_STORED.add(KW_STORED807);

					KW_AS808=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat12967); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS808);

					pushFollow(FOLLOW_identifier_in_tableFileFormat12971);
					genericSpec=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(genericSpec.getTree());
					// AST REWRITE
					// elements: genericSpec
					// token labels: 
					// rule labels: genericSpec, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_genericSpec=new RewriteRuleSubtreeStream(adaptor,"rule genericSpec",genericSpec!=null?genericSpec.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2178:7: -> ^( TOK_FILEFORMAT_GENERIC $genericSpec)
					{
						// HiveParser.g:2178:10: ^( TOK_FILEFORMAT_GENERIC $genericSpec)
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_FILEFORMAT_GENERIC, "TOK_FILEFORMAT_GENERIC"), root_1);
						adaptor.addChild(root_1, stream_genericSpec.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableFileFormat"


	public static class tableLocation_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableLocation"
	// HiveParser.g:2181:1: tableLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_TABLELOCATION $locn) ;
	public final HiveParser.tableLocation_return tableLocation() throws RecognitionException {
		HiveParser.tableLocation_return retval = new HiveParser.tableLocation_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token locn=null;
		Token KW_LOCATION809=null;

		ASTNode locn_tree=null;
		ASTNode KW_LOCATION809_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

		 pushMsg(retval.start,"table location specification", state); 
		try {
			// HiveParser.g:2184:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_TABLELOCATION $locn) )
			// HiveParser.g:2185:7: KW_LOCATION locn= StringLiteral
			{
			KW_LOCATION809=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_tableLocation13019); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LOCATION.add(KW_LOCATION809);

			locn=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableLocation13023); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(locn);

			// AST REWRITE
			// elements: locn
			// token labels: locn
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2185:38: -> ^( TOK_TABLELOCATION $locn)
			{
				// HiveParser.g:2185:41: ^( TOK_TABLELOCATION $locn)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABLELOCATION, "TOK_TABLELOCATION"), root_1);
				adaptor.addChild(root_1, stream_locn.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableLocation"


	public static class columnNameTypeList_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnNameTypeList"
	// HiveParser.g:2188:1: columnNameTypeList : columnNameType ( COMMA columnNameType )* -> ^( TOK_TABCOLLIST ( columnNameType )+ ) ;
	public final HiveParser.columnNameTypeList_return columnNameTypeList() throws RecognitionException {
		HiveParser.columnNameTypeList_return retval = new HiveParser.columnNameTypeList_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token COMMA811=null;
		ParserRuleReturnScope columnNameType810 =null;
		ParserRuleReturnScope columnNameType812 =null;

		ASTNode COMMA811_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnNameType=new RewriteRuleSubtreeStream(adaptor,"rule columnNameType");

		 pushMsg(retval.start,"column name type list", state); 
		try {
			// HiveParser.g:2191:5: ( columnNameType ( COMMA columnNameType )* -> ^( TOK_TABCOLLIST ( columnNameType )+ ) )
			// HiveParser.g:2191:7: columnNameType ( COMMA columnNameType )*
			{
			pushFollow(FOLLOW_columnNameType_in_columnNameTypeList13059);
			columnNameType810=columnNameType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameType.add(columnNameType810.getTree());
			// HiveParser.g:2191:22: ( COMMA columnNameType )*
			loop242:
			while (true) {
				int alt242=2;
				int LA242_0 = input.LA(1);
				if ( (LA242_0==COMMA) ) {
					int LA242_20 = input.LA(2);
					if ( (LA242_20==Identifier||(LA242_20 >= KW_ABORT && LA242_20 <= KW_AFTER)||LA242_20==KW_ALLOC_FRACTION||LA242_20==KW_ANALYZE||LA242_20==KW_ARCHIVE||(LA242_20 >= KW_ASC && LA242_20 <= KW_AST)||(LA242_20 >= KW_AUTOCOMMIT && LA242_20 <= KW_BEFORE)||(LA242_20 >= KW_BUCKET && LA242_20 <= KW_BUCKETS)||(LA242_20 >= KW_CACHE && LA242_20 <= KW_CASCADE)||LA242_20==KW_CHANGE||(LA242_20 >= KW_CHECK && LA242_20 <= KW_COLLECTION)||(LA242_20 >= KW_COLUMNS && LA242_20 <= KW_COMMENT)||(LA242_20 >= KW_COMPACT && LA242_20 <= KW_CONCATENATE)||LA242_20==KW_CONTINUE||LA242_20==KW_DATA||(LA242_20 >= KW_DATABASES && LA242_20 <= KW_DEBUG)||(LA242_20 >= KW_DEFAULT && LA242_20 <= KW_DEFINED)||(LA242_20 >= KW_DELIMITED && LA242_20 <= KW_DESC)||(LA242_20 >= KW_DETAIL && LA242_20 <= KW_DISABLE)||(LA242_20 >= KW_DISTRIBUTE && LA242_20 <= KW_DO)||LA242_20==KW_DOW||(LA242_20 >= KW_DUMP && LA242_20 <= KW_ELEM_TYPE)||LA242_20==KW_ENABLE||(LA242_20 >= KW_ENFORCED && LA242_20 <= KW_ESCAPED)||LA242_20==KW_EXCLUSIVE||(LA242_20 >= KW_EXPLAIN && LA242_20 <= KW_EXPRESSION)||(LA242_20 >= KW_FIELDS && LA242_20 <= KW_FIRST)||(LA242_20 >= KW_FORMAT && LA242_20 <= KW_FORMATTED)||LA242_20==KW_FUNCTIONS||LA242_20==KW_GROUP||(LA242_20 >= KW_HOUR && LA242_20 <= KW_IDXPROPERTIES)||(LA242_20 >= KW_INDEX && LA242_20 <= KW_INDEXES)||(LA242_20 >= KW_INPATH && LA242_20 <= KW_INPUTFORMAT)||(LA242_20 >= KW_ISOLATION && LA242_20 <= KW_JAR)||(LA242_20 >= KW_KEY && LA242_20 <= KW_LAST)||LA242_20==KW_LEVEL||(LA242_20 >= KW_LIMIT && LA242_20 <= KW_LOAD)||(LA242_20 >= KW_LOCATION && LA242_20 <= KW_LONG)||LA242_20==KW_MANAGEMENT||(LA242_20 >= KW_MAPJOIN && LA242_20 <= KW_MATERIALIZED)||LA242_20==KW_METADATA||(LA242_20 >= KW_MINUTE && LA242_20 <= KW_MONTH)||(LA242_20 >= KW_MOVE && LA242_20 <= KW_MSCK)||(LA242_20 >= KW_NORELY && LA242_20 <= KW_NOSCAN)||LA242_20==KW_NOVALIDATE||LA242_20==KW_NULLS||LA242_20==KW_OFFSET||(LA242_20 >= KW_OPERATOR && LA242_20 <= KW_OPTION)||LA242_20==KW_ORDER||(LA242_20 >= KW_OUTPUTDRIVER && LA242_20 <= KW_OUTPUTFORMAT)||(LA242_20 >= KW_OVERWRITE && LA242_20 <= KW_OWNER)||(LA242_20 >= KW_PARTITIONED && LA242_20 <= KW_PATH)||(LA242_20 >= KW_PLAN && LA242_20 <= KW_POOL)||LA242_20==KW_PRINCIPALS||(LA242_20 >= KW_PURGE && LA242_20 <= KW_QUERY_PARALLELISM)||LA242_20==KW_READ||(LA242_20 >= KW_REBUILD && LA242_20 <= KW_RECORDWRITER)||(LA242_20 >= KW_RELOAD && LA242_20 <= KW_RESTRICT)||LA242_20==KW_REWRITE||(LA242_20 >= KW_ROLE && LA242_20 <= KW_ROLES)||(LA242_20 >= KW_SCHEDULING_POLICY && LA242_20 <= KW_SECOND)||(LA242_20 >= KW_SEMI && LA242_20 <= KW_SERVER)||(LA242_20 >= KW_SETS && LA242_20 <= KW_SKEWED)||(LA242_20 >= KW_SNAPSHOT && LA242_20 <= KW_SSL)||(LA242_20 >= KW_STATISTICS && LA242_20 <= KW_SUMMARY)||LA242_20==KW_TABLES||(LA242_20 >= KW_TBLPROPERTIES && LA242_20 <= KW_TERMINATED)||LA242_20==KW_TINYINT||(LA242_20 >= KW_TOUCH && LA242_20 <= KW_TRANSACTIONS)||LA242_20==KW_UNARCHIVE||LA242_20==KW_UNDO||LA242_20==KW_UNIONTYPE||(LA242_20 >= KW_UNKNOWN && LA242_20 <= KW_UNSIGNED)||(LA242_20 >= KW_URI && LA242_20 <= KW_USE)||(LA242_20 >= KW_UTC && LA242_20 <= KW_VALIDATE)||LA242_20==KW_VALUE_TYPE||(LA242_20 >= KW_VECTORIZATION && LA242_20 <= KW_WEEK)||LA242_20==KW_WHILE||(LA242_20 >= KW_WORK && LA242_20 <= KW_ZONE)||LA242_20==KW_BATCH||LA242_20==KW_DAYOFWEEK||LA242_20==KW_HOLD_DDLTIME||LA242_20==KW_IGNORE||LA242_20==KW_NO_DROP||LA242_20==KW_OFFLINE||LA242_20==KW_PROTECTION||LA242_20==KW_READONLY||LA242_20==KW_TIMESTAMPTZ) ) {
						alt242=1;
					}

				}

				switch (alt242) {
				case 1 :
					// HiveParser.g:2191:23: COMMA columnNameType
					{
					COMMA811=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameTypeList13062); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA811);

					pushFollow(FOLLOW_columnNameType_in_columnNameTypeList13064);
					columnNameType812=columnNameType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameType.add(columnNameType812.getTree());
					}
					break;

				default :
					break loop242;
				}
			}

			// AST REWRITE
			// elements: columnNameType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2191:46: -> ^( TOK_TABCOLLIST ( columnNameType )+ )
			{
				// HiveParser.g:2191:49: ^( TOK_TABCOLLIST ( columnNameType )+ )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABCOLLIST, "TOK_TABCOLLIST"), root_1);
				if ( !(stream_columnNameType.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnNameType.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameType.nextTree());
				}
				stream_columnNameType.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameTypeList"


	public static class columnNameTypeOrConstraintList_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnNameTypeOrConstraintList"
	// HiveParser.g:2194:1: columnNameTypeOrConstraintList : columnNameTypeOrConstraint ( COMMA columnNameTypeOrConstraint )* -> ^( TOK_TABCOLLIST ( columnNameTypeOrConstraint )+ ) ;
	public final HiveParser.columnNameTypeOrConstraintList_return columnNameTypeOrConstraintList() throws RecognitionException {
		HiveParser.columnNameTypeOrConstraintList_return retval = new HiveParser.columnNameTypeOrConstraintList_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token COMMA814=null;
		ParserRuleReturnScope columnNameTypeOrConstraint813 =null;
		ParserRuleReturnScope columnNameTypeOrConstraint815 =null;

		ASTNode COMMA814_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnNameTypeOrConstraint=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeOrConstraint");

		 pushMsg(retval.start,"column name type and constraints list", state); 
		try {
			// HiveParser.g:2197:5: ( columnNameTypeOrConstraint ( COMMA columnNameTypeOrConstraint )* -> ^( TOK_TABCOLLIST ( columnNameTypeOrConstraint )+ ) )
			// HiveParser.g:2197:7: columnNameTypeOrConstraint ( COMMA columnNameTypeOrConstraint )*
			{
			pushFollow(FOLLOW_columnNameTypeOrConstraint_in_columnNameTypeOrConstraintList13102);
			columnNameTypeOrConstraint813=columnNameTypeOrConstraint();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameTypeOrConstraint.add(columnNameTypeOrConstraint813.getTree());
			// HiveParser.g:2197:34: ( COMMA columnNameTypeOrConstraint )*
			loop243:
			while (true) {
				int alt243=2;
				int LA243_0 = input.LA(1);
				if ( (LA243_0==COMMA) ) {
					alt243=1;
				}

				switch (alt243) {
				case 1 :
					// HiveParser.g:2197:35: COMMA columnNameTypeOrConstraint
					{
					COMMA814=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameTypeOrConstraintList13105); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA814);

					pushFollow(FOLLOW_columnNameTypeOrConstraint_in_columnNameTypeOrConstraintList13107);
					columnNameTypeOrConstraint815=columnNameTypeOrConstraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameTypeOrConstraint.add(columnNameTypeOrConstraint815.getTree());
					}
					break;

				default :
					break loop243;
				}
			}

			// AST REWRITE
			// elements: columnNameTypeOrConstraint
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2197:70: -> ^( TOK_TABCOLLIST ( columnNameTypeOrConstraint )+ )
			{
				// HiveParser.g:2197:73: ^( TOK_TABCOLLIST ( columnNameTypeOrConstraint )+ )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABCOLLIST, "TOK_TABCOLLIST"), root_1);
				if ( !(stream_columnNameTypeOrConstraint.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnNameTypeOrConstraint.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameTypeOrConstraint.nextTree());
				}
				stream_columnNameTypeOrConstraint.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameTypeOrConstraintList"


	public static class columnNameColonTypeList_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnNameColonTypeList"
	// HiveParser.g:2200:1: columnNameColonTypeList : columnNameColonType ( COMMA columnNameColonType )* -> ^( TOK_TABCOLLIST ( columnNameColonType )+ ) ;
	public final HiveParser.columnNameColonTypeList_return columnNameColonTypeList() throws RecognitionException {
		HiveParser.columnNameColonTypeList_return retval = new HiveParser.columnNameColonTypeList_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token COMMA817=null;
		ParserRuleReturnScope columnNameColonType816 =null;
		ParserRuleReturnScope columnNameColonType818 =null;

		ASTNode COMMA817_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnNameColonType=new RewriteRuleSubtreeStream(adaptor,"rule columnNameColonType");

		 pushMsg(retval.start,"column name type list", state); 
		try {
			// HiveParser.g:2203:5: ( columnNameColonType ( COMMA columnNameColonType )* -> ^( TOK_TABCOLLIST ( columnNameColonType )+ ) )
			// HiveParser.g:2203:7: columnNameColonType ( COMMA columnNameColonType )*
			{
			pushFollow(FOLLOW_columnNameColonType_in_columnNameColonTypeList13145);
			columnNameColonType816=columnNameColonType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameColonType.add(columnNameColonType816.getTree());
			// HiveParser.g:2203:27: ( COMMA columnNameColonType )*
			loop244:
			while (true) {
				int alt244=2;
				int LA244_0 = input.LA(1);
				if ( (LA244_0==COMMA) ) {
					alt244=1;
				}

				switch (alt244) {
				case 1 :
					// HiveParser.g:2203:28: COMMA columnNameColonType
					{
					COMMA817=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameColonTypeList13148); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA817);

					pushFollow(FOLLOW_columnNameColonType_in_columnNameColonTypeList13150);
					columnNameColonType818=columnNameColonType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameColonType.add(columnNameColonType818.getTree());
					}
					break;

				default :
					break loop244;
				}
			}

			// AST REWRITE
			// elements: columnNameColonType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2203:56: -> ^( TOK_TABCOLLIST ( columnNameColonType )+ )
			{
				// HiveParser.g:2203:59: ^( TOK_TABCOLLIST ( columnNameColonType )+ )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABCOLLIST, "TOK_TABCOLLIST"), root_1);
				if ( !(stream_columnNameColonType.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnNameColonType.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameColonType.nextTree());
				}
				stream_columnNameColonType.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameColonTypeList"


	public static class columnNameList_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnNameList"
	// HiveParser.g:2206:1: columnNameList : columnName ( COMMA columnName )* -> ^( TOK_TABCOLNAME ( columnName )+ ) ;
	public final HiveParser.columnNameList_return columnNameList() throws RecognitionException {
		HiveParser.columnNameList_return retval = new HiveParser.columnNameList_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token COMMA820=null;
		ParserRuleReturnScope columnName819 =null;
		ParserRuleReturnScope columnName821 =null;

		ASTNode COMMA820_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnName=new RewriteRuleSubtreeStream(adaptor,"rule columnName");

		 pushMsg(retval.start,"column name list", state); 
		try {
			// HiveParser.g:2209:5: ( columnName ( COMMA columnName )* -> ^( TOK_TABCOLNAME ( columnName )+ ) )
			// HiveParser.g:2209:7: columnName ( COMMA columnName )*
			{
			pushFollow(FOLLOW_columnName_in_columnNameList13188);
			columnName819=columnName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnName.add(columnName819.getTree());
			// HiveParser.g:2209:18: ( COMMA columnName )*
			loop245:
			while (true) {
				int alt245=2;
				int LA245_0 = input.LA(1);
				if ( (LA245_0==COMMA) ) {
					alt245=1;
				}

				switch (alt245) {
				case 1 :
					// HiveParser.g:2209:19: COMMA columnName
					{
					COMMA820=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameList13191); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA820);

					pushFollow(FOLLOW_columnName_in_columnNameList13193);
					columnName821=columnName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnName.add(columnName821.getTree());
					}
					break;

				default :
					break loop245;
				}
			}

			// AST REWRITE
			// elements: columnName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2209:38: -> ^( TOK_TABCOLNAME ( columnName )+ )
			{
				// HiveParser.g:2209:41: ^( TOK_TABCOLNAME ( columnName )+ )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_1);
				if ( !(stream_columnName.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnName.hasNext() ) {
					adaptor.addChild(root_1, stream_columnName.nextTree());
				}
				stream_columnName.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameList"


	public static class columnName_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnName"
	// HiveParser.g:2212:1: columnName : identifier ;
	public final HiveParser.columnName_return columnName() throws RecognitionException {
		HiveParser.columnName_return retval = new HiveParser.columnName_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope identifier822 =null;


		 pushMsg(retval.start,"column name", state); 
		try {
			// HiveParser.g:2215:5: ( identifier )
			// HiveParser.g:2216:7: identifier
			{
			root_0 = (ASTNode)adaptor.nil();


			pushFollow(FOLLOW_identifier_in_columnName13237);
			identifier822=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier822.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnName"


	public static class extColumnName_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "extColumnName"
	// HiveParser.g:2219:1: extColumnName : identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )* ;
	public final HiveParser.extColumnName_return extColumnName() throws RecognitionException {
		HiveParser.extColumnName_return retval = new HiveParser.extColumnName_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token DOT824=null;
		Token KW_ELEM_TYPE825=null;
		Token KW_KEY_TYPE826=null;
		Token KW_VALUE_TYPE827=null;
		ParserRuleReturnScope identifier823 =null;
		ParserRuleReturnScope identifier828 =null;

		ASTNode DOT824_tree=null;
		ASTNode KW_ELEM_TYPE825_tree=null;
		ASTNode KW_KEY_TYPE826_tree=null;
		ASTNode KW_VALUE_TYPE827_tree=null;

		 pushMsg(retval.start,"column name for complex types", state); 
		try {
			// HiveParser.g:2222:5: ( identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )* )
			// HiveParser.g:2223:7: identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )*
			{
			root_0 = (ASTNode)adaptor.nil();


			pushFollow(FOLLOW_identifier_in_extColumnName13270);
			identifier823=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier823.getTree());

			// HiveParser.g:2223:18: ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )*
			loop247:
			while (true) {
				int alt247=2;
				int LA247_0 = input.LA(1);
				if ( (LA247_0==DOT) ) {
					alt247=1;
				}

				switch (alt247) {
				case 1 :
					// HiveParser.g:2223:19: DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier )
					{
					DOT824=(Token)match(input,DOT,FOLLOW_DOT_in_extColumnName13273); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOT824_tree = (ASTNode)adaptor.create(DOT824);
					root_0 = (ASTNode)adaptor.becomeRoot(DOT824_tree, root_0);
					}

					// HiveParser.g:2223:24: ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier )
					int alt246=4;
					switch ( input.LA(1) ) {
					case KW_ELEM_TYPE:
						{
						int LA246_1 = input.LA(2);
						if ( (synpred19_HiveParser()) ) {
							alt246=1;
						}
						else if ( (true) ) {
							alt246=4;
						}

						}
						break;
					case KW_KEY_TYPE:
						{
						int LA246_2 = input.LA(2);
						if ( (synpred20_HiveParser()) ) {
							alt246=2;
						}
						else if ( (true) ) {
							alt246=4;
						}

						}
						break;
					case KW_VALUE_TYPE:
						{
						int LA246_3 = input.LA(2);
						if ( (synpred21_HiveParser()) ) {
							alt246=3;
						}
						else if ( (true) ) {
							alt246=4;
						}

						}
						break;
					case Identifier:
					case KW_ABORT:
					case KW_ACTIVATE:
					case KW_ACTIVE:
					case KW_ADD:
					case KW_ADMIN:
					case KW_AFTER:
					case KW_ALLOC_FRACTION:
					case KW_ANALYZE:
					case KW_ARCHIVE:
					case KW_ASC:
					case KW_AST:
					case KW_AUTOCOMMIT:
					case KW_BEFORE:
					case KW_BUCKET:
					case KW_BUCKETS:
					case KW_CACHE:
					case KW_CASCADE:
					case KW_CHANGE:
					case KW_CHECK:
					case KW_CLUSTER:
					case KW_CLUSTERED:
					case KW_CLUSTERSTATUS:
					case KW_COLLECTION:
					case KW_COLUMNS:
					case KW_COMMENT:
					case KW_COMPACT:
					case KW_COMPACTIONS:
					case KW_COMPUTE:
					case KW_CONCATENATE:
					case KW_CONTINUE:
					case KW_DATA:
					case KW_DATABASES:
					case KW_DATE:
					case KW_DATETIME:
					case KW_DAY:
					case KW_DBPROPERTIES:
					case KW_DEBUG:
					case KW_DEFAULT:
					case KW_DEFERRED:
					case KW_DEFINED:
					case KW_DELIMITED:
					case KW_DEPENDENCY:
					case KW_DESC:
					case KW_DETAIL:
					case KW_DIRECTORIES:
					case KW_DIRECTORY:
					case KW_DISABLE:
					case KW_DISTRIBUTE:
					case KW_DO:
					case KW_DOW:
					case KW_DUMP:
					case KW_ENABLE:
					case KW_ENFORCED:
					case KW_ESCAPED:
					case KW_EXCLUSIVE:
					case KW_EXPLAIN:
					case KW_EXPORT:
					case KW_EXPRESSION:
					case KW_FIELDS:
					case KW_FILE:
					case KW_FILEFORMAT:
					case KW_FIRST:
					case KW_FORMAT:
					case KW_FORMATTED:
					case KW_FUNCTIONS:
					case KW_GROUP:
					case KW_HOUR:
					case KW_IDXPROPERTIES:
					case KW_INDEX:
					case KW_INDEXES:
					case KW_INPATH:
					case KW_INPUTDRIVER:
					case KW_INPUTFORMAT:
					case KW_ISOLATION:
					case KW_ITEMS:
					case KW_JAR:
					case KW_KEY:
					case KW_KEYS:
					case KW_KILL:
					case KW_LAST:
					case KW_LEVEL:
					case KW_LIMIT:
					case KW_LINES:
					case KW_LOAD:
					case KW_LOCATION:
					case KW_LOCK:
					case KW_LOCKS:
					case KW_LOGICAL:
					case KW_LONG:
					case KW_MANAGEMENT:
					case KW_MAPJOIN:
					case KW_MAPPING:
					case KW_MATCHED:
					case KW_MATERIALIZED:
					case KW_METADATA:
					case KW_MINUTE:
					case KW_MONTH:
					case KW_MOVE:
					case KW_MSCK:
					case KW_NORELY:
					case KW_NOSCAN:
					case KW_NOVALIDATE:
					case KW_NULLS:
					case KW_OFFSET:
					case KW_OPERATOR:
					case KW_OPTION:
					case KW_ORDER:
					case KW_OUTPUTDRIVER:
					case KW_OUTPUTFORMAT:
					case KW_OVERWRITE:
					case KW_OWNER:
					case KW_PARTITIONED:
					case KW_PARTITIONS:
					case KW_PATH:
					case KW_PLAN:
					case KW_PLANS:
					case KW_PLUS:
					case KW_POOL:
					case KW_PRINCIPALS:
					case KW_PURGE:
					case KW_QUARTER:
					case KW_QUERY:
					case KW_QUERY_PARALLELISM:
					case KW_READ:
					case KW_REBUILD:
					case KW_RECORDREADER:
					case KW_RECORDWRITER:
					case KW_RELOAD:
					case KW_RELY:
					case KW_RENAME:
					case KW_REOPTIMIZATION:
					case KW_REPAIR:
					case KW_REPL:
					case KW_REPLACE:
					case KW_REPLICATION:
					case KW_RESOURCE:
					case KW_RESTRICT:
					case KW_REWRITE:
					case KW_ROLE:
					case KW_ROLES:
					case KW_SCHEDULING_POLICY:
					case KW_SCHEMA:
					case KW_SCHEMAS:
					case KW_SECOND:
					case KW_SEMI:
					case KW_SERDE:
					case KW_SERDEPROPERTIES:
					case KW_SERVER:
					case KW_SETS:
					case KW_SHARED:
					case KW_SHOW:
					case KW_SHOW_DATABASE:
					case KW_SKEWED:
					case KW_SNAPSHOT:
					case KW_SORT:
					case KW_SORTED:
					case KW_SSL:
					case KW_STATISTICS:
					case KW_STATUS:
					case KW_STORED:
					case KW_STREAMTABLE:
					case KW_STRING:
					case KW_STRUCT:
					case KW_SUMMARY:
					case KW_TABLES:
					case KW_TBLPROPERTIES:
					case KW_TEMPORARY:
					case KW_TERMINATED:
					case KW_TINYINT:
					case KW_TOUCH:
					case KW_TRANSACTION:
					case KW_TRANSACTIONAL:
					case KW_TRANSACTIONS:
					case KW_UNARCHIVE:
					case KW_UNDO:
					case KW_UNIONTYPE:
					case KW_UNKNOWN:
					case KW_UNLOCK:
					case KW_UNMANAGED:
					case KW_UNSET:
					case KW_UNSIGNED:
					case KW_URI:
					case KW_USE:
					case KW_UTC:
					case KW_UTCTIMESTAMP:
					case KW_VALIDATE:
					case KW_VECTORIZATION:
					case KW_VIEW:
					case KW_VIEWS:
					case KW_WAIT:
					case KW_WEEK:
					case KW_WHILE:
					case KW_WORK:
					case KW_WORKLOAD:
					case KW_WRITE:
					case KW_YEAR:
					case KW_ZONE:
					case KW_BATCH:
					case KW_DAYOFWEEK:
					case KW_HOLD_DDLTIME:
					case KW_IGNORE:
					case KW_NO_DROP:
					case KW_OFFLINE:
					case KW_PROTECTION:
					case KW_READONLY:
					case KW_TIMESTAMPTZ:
						{
						alt246=4;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 246, 0, input);
						throw nvae;
					}
					switch (alt246) {
						case 1 :
							// HiveParser.g:2223:25: ( KW_ELEM_TYPE )=> KW_ELEM_TYPE
							{
							KW_ELEM_TYPE825=(Token)match(input,KW_ELEM_TYPE,FOLLOW_KW_ELEM_TYPE_in_extColumnName13283); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							KW_ELEM_TYPE825_tree = (ASTNode)adaptor.create(KW_ELEM_TYPE825);
							adaptor.addChild(root_0, KW_ELEM_TYPE825_tree);
							}

							}
							break;
						case 2 :
							// HiveParser.g:2223:58: ( KW_KEY_TYPE )=> KW_KEY_TYPE
							{
							KW_KEY_TYPE826=(Token)match(input,KW_KEY_TYPE,FOLLOW_KW_KEY_TYPE_in_extColumnName13293); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							KW_KEY_TYPE826_tree = (ASTNode)adaptor.create(KW_KEY_TYPE826);
							adaptor.addChild(root_0, KW_KEY_TYPE826_tree);
							}

							}
							break;
						case 3 :
							// HiveParser.g:2223:89: ( KW_VALUE_TYPE )=> KW_VALUE_TYPE
							{
							KW_VALUE_TYPE827=(Token)match(input,KW_VALUE_TYPE,FOLLOW_KW_VALUE_TYPE_in_extColumnName13303); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							KW_VALUE_TYPE827_tree = (ASTNode)adaptor.create(KW_VALUE_TYPE827);
							adaptor.addChild(root_0, KW_VALUE_TYPE827_tree);
							}

							}
							break;
						case 4 :
							// HiveParser.g:2223:124: identifier
							{
							pushFollow(FOLLOW_identifier_in_extColumnName13307);
							identifier828=identifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier828.getTree());

							}
							break;

					}

					}
					break;

				default :
					break loop247;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "extColumnName"


	public static class columnNameOrderList_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnNameOrderList"
	// HiveParser.g:2226:1: columnNameOrderList : columnNameOrder ( COMMA columnNameOrder )* -> ^( TOK_TABCOLNAME ( columnNameOrder )+ ) ;
	public final HiveParser.columnNameOrderList_return columnNameOrderList() throws RecognitionException {
		HiveParser.columnNameOrderList_return retval = new HiveParser.columnNameOrderList_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token COMMA830=null;
		ParserRuleReturnScope columnNameOrder829 =null;
		ParserRuleReturnScope columnNameOrder831 =null;

		ASTNode COMMA830_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnNameOrder=new RewriteRuleSubtreeStream(adaptor,"rule columnNameOrder");

		 pushMsg(retval.start,"column name order list", state); 
		try {
			// HiveParser.g:2229:5: ( columnNameOrder ( COMMA columnNameOrder )* -> ^( TOK_TABCOLNAME ( columnNameOrder )+ ) )
			// HiveParser.g:2229:7: columnNameOrder ( COMMA columnNameOrder )*
			{
			pushFollow(FOLLOW_columnNameOrder_in_columnNameOrderList13337);
			columnNameOrder829=columnNameOrder();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameOrder.add(columnNameOrder829.getTree());
			// HiveParser.g:2229:23: ( COMMA columnNameOrder )*
			loop248:
			while (true) {
				int alt248=2;
				int LA248_0 = input.LA(1);
				if ( (LA248_0==COMMA) ) {
					alt248=1;
				}

				switch (alt248) {
				case 1 :
					// HiveParser.g:2229:24: COMMA columnNameOrder
					{
					COMMA830=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameOrderList13340); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA830);

					pushFollow(FOLLOW_columnNameOrder_in_columnNameOrderList13342);
					columnNameOrder831=columnNameOrder();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameOrder.add(columnNameOrder831.getTree());
					}
					break;

				default :
					break loop248;
				}
			}

			// AST REWRITE
			// elements: columnNameOrder
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2229:48: -> ^( TOK_TABCOLNAME ( columnNameOrder )+ )
			{
				// HiveParser.g:2229:51: ^( TOK_TABCOLNAME ( columnNameOrder )+ )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_1);
				if ( !(stream_columnNameOrder.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnNameOrder.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameOrder.nextTree());
				}
				stream_columnNameOrder.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameOrderList"


	public static class columnParenthesesList_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnParenthesesList"
	// HiveParser.g:2232:1: columnParenthesesList : LPAREN ! columnNameList RPAREN !;
	public final HiveParser.columnParenthesesList_return columnParenthesesList() throws RecognitionException {
		HiveParser.columnParenthesesList_return retval = new HiveParser.columnParenthesesList_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token LPAREN832=null;
		Token RPAREN834=null;
		ParserRuleReturnScope columnNameList833 =null;

		ASTNode LPAREN832_tree=null;
		ASTNode RPAREN834_tree=null;

		 pushMsg(retval.start,"column parentheses list", state); 
		try {
			// HiveParser.g:2235:5: ( LPAREN ! columnNameList RPAREN !)
			// HiveParser.g:2235:7: LPAREN ! columnNameList RPAREN !
			{
			root_0 = (ASTNode)adaptor.nil();


			LPAREN832=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_columnParenthesesList13380); if (state.failed) return retval;
			pushFollow(FOLLOW_columnNameList_in_columnParenthesesList13383);
			columnNameList833=columnNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, columnNameList833.getTree());

			RPAREN834=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_columnParenthesesList13385); if (state.failed) return retval;
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnParenthesesList"


	public static class enableValidateSpecification_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "enableValidateSpecification"
	// HiveParser.g:2238:1: enableValidateSpecification : ( enableSpecification ( validateSpecification )? | enforcedSpecification );
	public final HiveParser.enableValidateSpecification_return enableValidateSpecification() throws RecognitionException {
		HiveParser.enableValidateSpecification_return retval = new HiveParser.enableValidateSpecification_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope enableSpecification835 =null;
		ParserRuleReturnScope validateSpecification836 =null;
		ParserRuleReturnScope enforcedSpecification837 =null;


		 pushMsg(retval.start,"enable specification", state); 
		try {
			// HiveParser.g:2241:5: ( enableSpecification ( validateSpecification )? | enforcedSpecification )
			int alt250=2;
			int LA250_0 = input.LA(1);
			if ( (LA250_0==KW_DISABLE||LA250_0==KW_ENABLE) ) {
				alt250=1;
			}
			else if ( (LA250_0==KW_ENFORCED||LA250_0==KW_NOT) ) {
				alt250=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 250, 0, input);
				throw nvae;
			}

			switch (alt250) {
				case 1 :
					// HiveParser.g:2241:7: enableSpecification ( validateSpecification )?
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_enableSpecification_in_enableValidateSpecification13413);
					enableSpecification835=enableSpecification();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, enableSpecification835.getTree());

					// HiveParser.g:2241:27: ( validateSpecification )?
					int alt249=2;
					int LA249_0 = input.LA(1);
					if ( (LA249_0==KW_NOVALIDATE||LA249_0==KW_VALIDATE) ) {
						alt249=1;
					}
					switch (alt249) {
						case 1 :
							// HiveParser.g:2241:27: validateSpecification
							{
							pushFollow(FOLLOW_validateSpecification_in_enableValidateSpecification13415);
							validateSpecification836=validateSpecification();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, validateSpecification836.getTree());

							}
							break;

					}

					}
					break;
				case 2 :
					// HiveParser.g:2242:7: enforcedSpecification
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_enforcedSpecification_in_enableValidateSpecification13424);
					enforcedSpecification837=enforcedSpecification();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, enforcedSpecification837.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "enableValidateSpecification"


	public static class enableSpecification_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "enableSpecification"
	// HiveParser.g:2245:1: enableSpecification : ( KW_ENABLE -> ^( TOK_ENABLE ) | KW_DISABLE -> ^( TOK_DISABLE ) );
	public final HiveParser.enableSpecification_return enableSpecification() throws RecognitionException {
		HiveParser.enableSpecification_return retval = new HiveParser.enableSpecification_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_ENABLE838=null;
		Token KW_DISABLE839=null;

		ASTNode KW_ENABLE838_tree=null;
		ASTNode KW_DISABLE839_tree=null;
		RewriteRuleTokenStream stream_KW_DISABLE=new RewriteRuleTokenStream(adaptor,"token KW_DISABLE");
		RewriteRuleTokenStream stream_KW_ENABLE=new RewriteRuleTokenStream(adaptor,"token KW_ENABLE");

		 pushMsg(retval.start,"enable specification", state); 
		try {
			// HiveParser.g:2248:5: ( KW_ENABLE -> ^( TOK_ENABLE ) | KW_DISABLE -> ^( TOK_DISABLE ) )
			int alt251=2;
			int LA251_0 = input.LA(1);
			if ( (LA251_0==KW_ENABLE) ) {
				alt251=1;
			}
			else if ( (LA251_0==KW_DISABLE) ) {
				alt251=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 251, 0, input);
				throw nvae;
			}

			switch (alt251) {
				case 1 :
					// HiveParser.g:2248:7: KW_ENABLE
					{
					KW_ENABLE838=(Token)match(input,KW_ENABLE,FOLLOW_KW_ENABLE_in_enableSpecification13451); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ENABLE.add(KW_ENABLE838);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2248:17: -> ^( TOK_ENABLE )
					{
						// HiveParser.g:2248:20: ^( TOK_ENABLE )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ENABLE, "TOK_ENABLE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:2249:7: KW_DISABLE
					{
					KW_DISABLE839=(Token)match(input,KW_DISABLE,FOLLOW_KW_DISABLE_in_enableSpecification13465); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DISABLE.add(KW_DISABLE839);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2249:18: -> ^( TOK_DISABLE )
					{
						// HiveParser.g:2249:21: ^( TOK_DISABLE )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DISABLE, "TOK_DISABLE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "enableSpecification"


	public static class validateSpecification_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "validateSpecification"
	// HiveParser.g:2252:1: validateSpecification : ( KW_VALIDATE -> ^( TOK_VALIDATE ) | KW_NOVALIDATE -> ^( TOK_NOVALIDATE ) );
	public final HiveParser.validateSpecification_return validateSpecification() throws RecognitionException {
		HiveParser.validateSpecification_return retval = new HiveParser.validateSpecification_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_VALIDATE840=null;
		Token KW_NOVALIDATE841=null;

		ASTNode KW_VALIDATE840_tree=null;
		ASTNode KW_NOVALIDATE841_tree=null;
		RewriteRuleTokenStream stream_KW_VALIDATE=new RewriteRuleTokenStream(adaptor,"token KW_VALIDATE");
		RewriteRuleTokenStream stream_KW_NOVALIDATE=new RewriteRuleTokenStream(adaptor,"token KW_NOVALIDATE");

		 pushMsg(retval.start,"validate specification", state); 
		try {
			// HiveParser.g:2255:5: ( KW_VALIDATE -> ^( TOK_VALIDATE ) | KW_NOVALIDATE -> ^( TOK_NOVALIDATE ) )
			int alt252=2;
			int LA252_0 = input.LA(1);
			if ( (LA252_0==KW_VALIDATE) ) {
				alt252=1;
			}
			else if ( (LA252_0==KW_NOVALIDATE) ) {
				alt252=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 252, 0, input);
				throw nvae;
			}

			switch (alt252) {
				case 1 :
					// HiveParser.g:2255:7: KW_VALIDATE
					{
					KW_VALIDATE840=(Token)match(input,KW_VALIDATE,FOLLOW_KW_VALIDATE_in_validateSpecification13498); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_VALIDATE.add(KW_VALIDATE840);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2255:19: -> ^( TOK_VALIDATE )
					{
						// HiveParser.g:2255:22: ^( TOK_VALIDATE )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_VALIDATE, "TOK_VALIDATE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:2256:7: KW_NOVALIDATE
					{
					KW_NOVALIDATE841=(Token)match(input,KW_NOVALIDATE,FOLLOW_KW_NOVALIDATE_in_validateSpecification13512); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NOVALIDATE.add(KW_NOVALIDATE841);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2256:21: -> ^( TOK_NOVALIDATE )
					{
						// HiveParser.g:2256:24: ^( TOK_NOVALIDATE )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_NOVALIDATE, "TOK_NOVALIDATE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "validateSpecification"


	public static class enforcedSpecification_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "enforcedSpecification"
	// HiveParser.g:2259:1: enforcedSpecification : ( KW_ENFORCED -> ^( TOK_ENABLE ) | KW_NOT KW_ENFORCED -> ^( TOK_DISABLE ) );
	public final HiveParser.enforcedSpecification_return enforcedSpecification() throws RecognitionException {
		HiveParser.enforcedSpecification_return retval = new HiveParser.enforcedSpecification_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_ENFORCED842=null;
		Token KW_NOT843=null;
		Token KW_ENFORCED844=null;

		ASTNode KW_ENFORCED842_tree=null;
		ASTNode KW_NOT843_tree=null;
		ASTNode KW_ENFORCED844_tree=null;
		RewriteRuleTokenStream stream_KW_ENFORCED=new RewriteRuleTokenStream(adaptor,"token KW_ENFORCED");
		RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");

		 pushMsg(retval.start,"enforced specification", state); 
		try {
			// HiveParser.g:2262:5: ( KW_ENFORCED -> ^( TOK_ENABLE ) | KW_NOT KW_ENFORCED -> ^( TOK_DISABLE ) )
			int alt253=2;
			int LA253_0 = input.LA(1);
			if ( (LA253_0==KW_ENFORCED) ) {
				alt253=1;
			}
			else if ( (LA253_0==KW_NOT) ) {
				alt253=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 253, 0, input);
				throw nvae;
			}

			switch (alt253) {
				case 1 :
					// HiveParser.g:2262:7: KW_ENFORCED
					{
					KW_ENFORCED842=(Token)match(input,KW_ENFORCED,FOLLOW_KW_ENFORCED_in_enforcedSpecification13545); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ENFORCED.add(KW_ENFORCED842);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2262:19: -> ^( TOK_ENABLE )
					{
						// HiveParser.g:2262:22: ^( TOK_ENABLE )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ENABLE, "TOK_ENABLE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:2263:7: KW_NOT KW_ENFORCED
					{
					KW_NOT843=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_enforcedSpecification13559); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT843);

					KW_ENFORCED844=(Token)match(input,KW_ENFORCED,FOLLOW_KW_ENFORCED_in_enforcedSpecification13561); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ENFORCED.add(KW_ENFORCED844);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2263:26: -> ^( TOK_DISABLE )
					{
						// HiveParser.g:2263:29: ^( TOK_DISABLE )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DISABLE, "TOK_DISABLE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "enforcedSpecification"


	public static class relySpecification_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "relySpecification"
	// HiveParser.g:2266:1: relySpecification : ( KW_RELY -> ^( TOK_RELY ) | KW_NORELY -> ^( TOK_NORELY ) );
	public final HiveParser.relySpecification_return relySpecification() throws RecognitionException {
		HiveParser.relySpecification_return retval = new HiveParser.relySpecification_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_RELY845=null;
		Token KW_NORELY846=null;

		ASTNode KW_RELY845_tree=null;
		ASTNode KW_NORELY846_tree=null;
		RewriteRuleTokenStream stream_KW_NORELY=new RewriteRuleTokenStream(adaptor,"token KW_NORELY");
		RewriteRuleTokenStream stream_KW_RELY=new RewriteRuleTokenStream(adaptor,"token KW_RELY");

		 pushMsg(retval.start,"rely specification", state); 
		try {
			// HiveParser.g:2269:5: ( KW_RELY -> ^( TOK_RELY ) | KW_NORELY -> ^( TOK_NORELY ) )
			int alt254=2;
			int LA254_0 = input.LA(1);
			if ( (LA254_0==KW_RELY) ) {
				alt254=1;
			}
			else if ( (LA254_0==KW_NORELY) ) {
				alt254=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 254, 0, input);
				throw nvae;
			}

			switch (alt254) {
				case 1 :
					// HiveParser.g:2269:8: KW_RELY
					{
					KW_RELY845=(Token)match(input,KW_RELY,FOLLOW_KW_RELY_in_relySpecification13595); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_RELY.add(KW_RELY845);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2269:16: -> ^( TOK_RELY )
					{
						// HiveParser.g:2269:19: ^( TOK_RELY )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_RELY, "TOK_RELY"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:2270:8: KW_NORELY
					{
					KW_NORELY846=(Token)match(input,KW_NORELY,FOLLOW_KW_NORELY_in_relySpecification13610); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NORELY.add(KW_NORELY846);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2270:18: -> ^( TOK_NORELY )
					{
						// HiveParser.g:2270:21: ^( TOK_NORELY )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_NORELY, "TOK_NORELY"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "relySpecification"


	public static class createConstraint_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "createConstraint"
	// HiveParser.g:2273:1: createConstraint : ( KW_CONSTRAINT constraintName= identifier )? tableLevelConstraint ( constraintOptsCreate )? -> {$constraintName.tree != null}? ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsCreate )? ) -> ^( ( constraintOptsCreate )? ) ;
	public final HiveParser.createConstraint_return createConstraint() throws RecognitionException {
		HiveParser.createConstraint_return retval = new HiveParser.createConstraint_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_CONSTRAINT847=null;
		ParserRuleReturnScope constraintName =null;
		ParserRuleReturnScope tableLevelConstraint848 =null;
		ParserRuleReturnScope constraintOptsCreate849 =null;

		ASTNode KW_CONSTRAINT847_tree=null;
		RewriteRuleTokenStream stream_KW_CONSTRAINT=new RewriteRuleTokenStream(adaptor,"token KW_CONSTRAINT");
		RewriteRuleSubtreeStream stream_constraintOptsCreate=new RewriteRuleSubtreeStream(adaptor,"rule constraintOptsCreate");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_tableLevelConstraint=new RewriteRuleSubtreeStream(adaptor,"rule tableLevelConstraint");

		 pushMsg(retval.start,"pk or uk or nn constraint", state); 
		try {
			// HiveParser.g:2276:5: ( ( KW_CONSTRAINT constraintName= identifier )? tableLevelConstraint ( constraintOptsCreate )? -> {$constraintName.tree != null}? ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsCreate )? ) -> ^( ( constraintOptsCreate )? ) )
			// HiveParser.g:2276:7: ( KW_CONSTRAINT constraintName= identifier )? tableLevelConstraint ( constraintOptsCreate )?
			{
			// HiveParser.g:2276:7: ( KW_CONSTRAINT constraintName= identifier )?
			int alt255=2;
			int LA255_0 = input.LA(1);
			if ( (LA255_0==KW_CONSTRAINT) ) {
				alt255=1;
			}
			switch (alt255) {
				case 1 :
					// HiveParser.g:2276:8: KW_CONSTRAINT constraintName= identifier
					{
					KW_CONSTRAINT847=(Token)match(input,KW_CONSTRAINT,FOLLOW_KW_CONSTRAINT_in_createConstraint13644); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CONSTRAINT.add(KW_CONSTRAINT847);

					pushFollow(FOLLOW_identifier_in_createConstraint13648);
					constraintName=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(constraintName.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_tableLevelConstraint_in_createConstraint13652);
			tableLevelConstraint848=tableLevelConstraint();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableLevelConstraint.add(tableLevelConstraint848.getTree());
			// HiveParser.g:2276:71: ( constraintOptsCreate )?
			int alt256=2;
			int LA256_0 = input.LA(1);
			if ( (LA256_0==KW_DISABLE||LA256_0==KW_ENABLE||LA256_0==KW_ENFORCED||LA256_0==KW_NOT) ) {
				alt256=1;
			}
			switch (alt256) {
				case 1 :
					// HiveParser.g:2276:71: constraintOptsCreate
					{
					pushFollow(FOLLOW_constraintOptsCreate_in_createConstraint13654);
					constraintOptsCreate849=constraintOptsCreate();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_constraintOptsCreate.add(constraintOptsCreate849.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: constraintName, constraintOptsCreate, constraintOptsCreate
			// token labels: 
			// rule labels: constraintName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_constraintName=new RewriteRuleSubtreeStream(adaptor,"rule constraintName",constraintName!=null?constraintName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2277:5: -> {$constraintName.tree != null}? ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsCreate )? )
			if ((constraintName!=null?((ASTNode)constraintName.getTree()):null) != null) {
				// HiveParser.g:2278:13: ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsCreate )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((tableLevelConstraint848!=null?((ASTNode)tableLevelConstraint848.getTree()):null), root_1);
				// HiveParser.g:2278:44: ^( TOK_CONSTRAINT_NAME $constraintName)
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_CONSTRAINT_NAME, "TOK_CONSTRAINT_NAME"), root_2);
				adaptor.addChild(root_2, stream_constraintName.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// HiveParser.g:2278:83: ( constraintOptsCreate )?
				if ( stream_constraintOptsCreate.hasNext() ) {
					adaptor.addChild(root_1, stream_constraintOptsCreate.nextTree());
				}
				stream_constraintOptsCreate.reset();

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2279:5: -> ^( ( constraintOptsCreate )? )
			{
				// HiveParser.g:2279:8: ^( ( constraintOptsCreate )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((tableLevelConstraint848!=null?((ASTNode)tableLevelConstraint848.getTree()):null), root_1);
				// HiveParser.g:2279:39: ( constraintOptsCreate )?
				if ( stream_constraintOptsCreate.hasNext() ) {
					adaptor.addChild(root_1, stream_constraintOptsCreate.nextTree());
				}
				stream_constraintOptsCreate.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createConstraint"


	public static class alterConstraintWithName_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterConstraintWithName"
	// HiveParser.g:2282:1: alterConstraintWithName : KW_CONSTRAINT constraintName= identifier tableLevelConstraint ( constraintOptsAlter )? -> ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsAlter )? ) ;
	public final HiveParser.alterConstraintWithName_return alterConstraintWithName() throws RecognitionException {
		HiveParser.alterConstraintWithName_return retval = new HiveParser.alterConstraintWithName_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_CONSTRAINT850=null;
		ParserRuleReturnScope constraintName =null;
		ParserRuleReturnScope tableLevelConstraint851 =null;
		ParserRuleReturnScope constraintOptsAlter852 =null;

		ASTNode KW_CONSTRAINT850_tree=null;
		RewriteRuleTokenStream stream_KW_CONSTRAINT=new RewriteRuleTokenStream(adaptor,"token KW_CONSTRAINT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_tableLevelConstraint=new RewriteRuleSubtreeStream(adaptor,"rule tableLevelConstraint");
		RewriteRuleSubtreeStream stream_constraintOptsAlter=new RewriteRuleSubtreeStream(adaptor,"rule constraintOptsAlter");

		 pushMsg(retval.start,"pk or uk or nn constraint with name", state); 
		try {
			// HiveParser.g:2285:5: ( KW_CONSTRAINT constraintName= identifier tableLevelConstraint ( constraintOptsAlter )? -> ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsAlter )? ) )
			// HiveParser.g:2285:7: KW_CONSTRAINT constraintName= identifier tableLevelConstraint ( constraintOptsAlter )?
			{
			KW_CONSTRAINT850=(Token)match(input,KW_CONSTRAINT,FOLLOW_KW_CONSTRAINT_in_alterConstraintWithName13729); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CONSTRAINT.add(KW_CONSTRAINT850);

			pushFollow(FOLLOW_identifier_in_alterConstraintWithName13733);
			constraintName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(constraintName.getTree());
			pushFollow(FOLLOW_tableLevelConstraint_in_alterConstraintWithName13735);
			tableLevelConstraint851=tableLevelConstraint();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableLevelConstraint.add(tableLevelConstraint851.getTree());
			// HiveParser.g:2285:68: ( constraintOptsAlter )?
			int alt257=2;
			int LA257_0 = input.LA(1);
			if ( (LA257_0==KW_DISABLE||LA257_0==KW_ENABLE||LA257_0==KW_ENFORCED||LA257_0==KW_NOT) ) {
				alt257=1;
			}
			switch (alt257) {
				case 1 :
					// HiveParser.g:2285:68: constraintOptsAlter
					{
					pushFollow(FOLLOW_constraintOptsAlter_in_alterConstraintWithName13737);
					constraintOptsAlter852=constraintOptsAlter();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_constraintOptsAlter.add(constraintOptsAlter852.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: constraintOptsAlter, constraintName
			// token labels: 
			// rule labels: constraintName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_constraintName=new RewriteRuleSubtreeStream(adaptor,"rule constraintName",constraintName!=null?constraintName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2286:5: -> ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsAlter )? )
			{
				// HiveParser.g:2286:7: ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsAlter )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((tableLevelConstraint851!=null?((ASTNode)tableLevelConstraint851.getTree()):null), root_1);
				// HiveParser.g:2286:38: ^( TOK_CONSTRAINT_NAME $constraintName)
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_CONSTRAINT_NAME, "TOK_CONSTRAINT_NAME"), root_2);
				adaptor.addChild(root_2, stream_constraintName.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// HiveParser.g:2286:77: ( constraintOptsAlter )?
				if ( stream_constraintOptsAlter.hasNext() ) {
					adaptor.addChild(root_1, stream_constraintOptsAlter.nextTree());
				}
				stream_constraintOptsAlter.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterConstraintWithName"


	public static class tableLevelConstraint_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableLevelConstraint"
	// HiveParser.g:2289:1: tableLevelConstraint : ( pkUkConstraint | checkConstraint );
	public final HiveParser.tableLevelConstraint_return tableLevelConstraint() throws RecognitionException {
		HiveParser.tableLevelConstraint_return retval = new HiveParser.tableLevelConstraint_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope pkUkConstraint853 =null;
		ParserRuleReturnScope checkConstraint854 =null;


		try {
			// HiveParser.g:2290:5: ( pkUkConstraint | checkConstraint )
			int alt258=2;
			int LA258_0 = input.LA(1);
			if ( (LA258_0==KW_PRIMARY||LA258_0==KW_UNIQUE) ) {
				alt258=1;
			}
			else if ( (LA258_0==KW_CHECK) ) {
				alt258=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 258, 0, input);
				throw nvae;
			}

			switch (alt258) {
				case 1 :
					// HiveParser.g:2290:7: pkUkConstraint
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_pkUkConstraint_in_tableLevelConstraint13774);
					pkUkConstraint853=pkUkConstraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pkUkConstraint853.getTree());

					}
					break;
				case 2 :
					// HiveParser.g:2291:7: checkConstraint
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_checkConstraint_in_tableLevelConstraint13782);
					checkConstraint854=checkConstraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, checkConstraint854.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableLevelConstraint"


	public static class pkUkConstraint_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "pkUkConstraint"
	// HiveParser.g:2294:1: pkUkConstraint : tableConstraintType pkCols= columnParenthesesList -> ^( tableConstraintType $pkCols) ;
	public final HiveParser.pkUkConstraint_return pkUkConstraint() throws RecognitionException {
		HiveParser.pkUkConstraint_return retval = new HiveParser.pkUkConstraint_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope pkCols =null;
		ParserRuleReturnScope tableConstraintType855 =null;

		RewriteRuleSubtreeStream stream_columnParenthesesList=new RewriteRuleSubtreeStream(adaptor,"rule columnParenthesesList");
		RewriteRuleSubtreeStream stream_tableConstraintType=new RewriteRuleSubtreeStream(adaptor,"rule tableConstraintType");

		 pushMsg(retval.start,"pk or uk table level constraint", state); 
		try {
			// HiveParser.g:2297:5: ( tableConstraintType pkCols= columnParenthesesList -> ^( tableConstraintType $pkCols) )
			// HiveParser.g:2297:7: tableConstraintType pkCols= columnParenthesesList
			{
			pushFollow(FOLLOW_tableConstraintType_in_pkUkConstraint13809);
			tableConstraintType855=tableConstraintType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableConstraintType.add(tableConstraintType855.getTree());
			pushFollow(FOLLOW_columnParenthesesList_in_pkUkConstraint13813);
			pkCols=columnParenthesesList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnParenthesesList.add(pkCols.getTree());
			// AST REWRITE
			// elements: tableConstraintType, pkCols
			// token labels: 
			// rule labels: pkCols, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_pkCols=new RewriteRuleSubtreeStream(adaptor,"rule pkCols",pkCols!=null?pkCols.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2298:5: -> ^( tableConstraintType $pkCols)
			{
				// HiveParser.g:2298:8: ^( tableConstraintType $pkCols)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot(stream_tableConstraintType.nextNode(), root_1);
				adaptor.addChild(root_1, stream_pkCols.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pkUkConstraint"


	public static class checkConstraint_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "checkConstraint"
	// HiveParser.g:2301:1: checkConstraint : KW_CHECK expression -> ^( TOK_CHECK_CONSTRAINT expression ) ;
	public final HiveParser.checkConstraint_return checkConstraint() throws RecognitionException {
		HiveParser.checkConstraint_return retval = new HiveParser.checkConstraint_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_CHECK856=null;
		ParserRuleReturnScope expression857 =null;

		ASTNode KW_CHECK856_tree=null;
		RewriteRuleTokenStream stream_KW_CHECK=new RewriteRuleTokenStream(adaptor,"token KW_CHECK");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");

		 pushMsg(retval.start,"CHECK constraint", state); 
		try {
			// HiveParser.g:2304:5: ( KW_CHECK expression -> ^( TOK_CHECK_CONSTRAINT expression ) )
			// HiveParser.g:2304:7: KW_CHECK expression
			{
			KW_CHECK856=(Token)match(input,KW_CHECK,FOLLOW_KW_CHECK_in_checkConstraint13853); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CHECK.add(KW_CHECK856);

			pushFollow(FOLLOW_expression_in_checkConstraint13855);
			expression857=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expression.add(expression857.getTree());
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2305:5: -> ^( TOK_CHECK_CONSTRAINT expression )
			{
				// HiveParser.g:2305:8: ^( TOK_CHECK_CONSTRAINT expression )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_CHECK_CONSTRAINT, "TOK_CHECK_CONSTRAINT"), root_1);
				adaptor.addChild(root_1, stream_expression.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "checkConstraint"


	public static class createForeignKey_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "createForeignKey"
	// HiveParser.g:2308:1: createForeignKey : ( KW_CONSTRAINT constraintName= identifier )? KW_FOREIGN KW_KEY fkCols= columnParenthesesList KW_REFERENCES tabName= tableName parCols= columnParenthesesList ( constraintOptsCreate )? -> {$constraintName.tree != null}? ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) $fkCols $tabName $parCols ( constraintOptsCreate )? ) -> ^( TOK_FOREIGN_KEY $fkCols $tabName $parCols ( constraintOptsCreate )? ) ;
	public final HiveParser.createForeignKey_return createForeignKey() throws RecognitionException {
		HiveParser.createForeignKey_return retval = new HiveParser.createForeignKey_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_CONSTRAINT858=null;
		Token KW_FOREIGN859=null;
		Token KW_KEY860=null;
		Token KW_REFERENCES861=null;
		ParserRuleReturnScope constraintName =null;
		ParserRuleReturnScope fkCols =null;
		ParserRuleReturnScope tabName =null;
		ParserRuleReturnScope parCols =null;
		ParserRuleReturnScope constraintOptsCreate862 =null;

		ASTNode KW_CONSTRAINT858_tree=null;
		ASTNode KW_FOREIGN859_tree=null;
		ASTNode KW_KEY860_tree=null;
		ASTNode KW_REFERENCES861_tree=null;
		RewriteRuleTokenStream stream_KW_CONSTRAINT=new RewriteRuleTokenStream(adaptor,"token KW_CONSTRAINT");
		RewriteRuleTokenStream stream_KW_REFERENCES=new RewriteRuleTokenStream(adaptor,"token KW_REFERENCES");
		RewriteRuleTokenStream stream_KW_FOREIGN=new RewriteRuleTokenStream(adaptor,"token KW_FOREIGN");
		RewriteRuleTokenStream stream_KW_KEY=new RewriteRuleTokenStream(adaptor,"token KW_KEY");
		RewriteRuleSubtreeStream stream_constraintOptsCreate=new RewriteRuleSubtreeStream(adaptor,"rule constraintOptsCreate");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_columnParenthesesList=new RewriteRuleSubtreeStream(adaptor,"rule columnParenthesesList");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg(retval.start,"foreign key", state); 
		try {
			// HiveParser.g:2311:5: ( ( KW_CONSTRAINT constraintName= identifier )? KW_FOREIGN KW_KEY fkCols= columnParenthesesList KW_REFERENCES tabName= tableName parCols= columnParenthesesList ( constraintOptsCreate )? -> {$constraintName.tree != null}? ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) $fkCols $tabName $parCols ( constraintOptsCreate )? ) -> ^( TOK_FOREIGN_KEY $fkCols $tabName $parCols ( constraintOptsCreate )? ) )
			// HiveParser.g:2311:7: ( KW_CONSTRAINT constraintName= identifier )? KW_FOREIGN KW_KEY fkCols= columnParenthesesList KW_REFERENCES tabName= tableName parCols= columnParenthesesList ( constraintOptsCreate )?
			{
			// HiveParser.g:2311:7: ( KW_CONSTRAINT constraintName= identifier )?
			int alt259=2;
			int LA259_0 = input.LA(1);
			if ( (LA259_0==KW_CONSTRAINT) ) {
				alt259=1;
			}
			switch (alt259) {
				case 1 :
					// HiveParser.g:2311:8: KW_CONSTRAINT constraintName= identifier
					{
					KW_CONSTRAINT858=(Token)match(input,KW_CONSTRAINT,FOLLOW_KW_CONSTRAINT_in_createForeignKey13895); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CONSTRAINT.add(KW_CONSTRAINT858);

					pushFollow(FOLLOW_identifier_in_createForeignKey13899);
					constraintName=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(constraintName.getTree());
					}
					break;

			}

			KW_FOREIGN859=(Token)match(input,KW_FOREIGN,FOLLOW_KW_FOREIGN_in_createForeignKey13903); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FOREIGN.add(KW_FOREIGN859);

			KW_KEY860=(Token)match(input,KW_KEY,FOLLOW_KW_KEY_in_createForeignKey13905); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_KEY.add(KW_KEY860);

			pushFollow(FOLLOW_columnParenthesesList_in_createForeignKey13909);
			fkCols=columnParenthesesList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnParenthesesList.add(fkCols.getTree());
			KW_REFERENCES861=(Token)match(input,KW_REFERENCES,FOLLOW_KW_REFERENCES_in_createForeignKey13912); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REFERENCES.add(KW_REFERENCES861);

			pushFollow(FOLLOW_tableName_in_createForeignKey13916);
			tabName=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tabName.getTree());
			pushFollow(FOLLOW_columnParenthesesList_in_createForeignKey13920);
			parCols=columnParenthesesList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnParenthesesList.add(parCols.getTree());
			// HiveParser.g:2311:160: ( constraintOptsCreate )?
			int alt260=2;
			int LA260_0 = input.LA(1);
			if ( (LA260_0==KW_DISABLE||LA260_0==KW_ENABLE||LA260_0==KW_ENFORCED||LA260_0==KW_NOT) ) {
				alt260=1;
			}
			switch (alt260) {
				case 1 :
					// HiveParser.g:2311:160: constraintOptsCreate
					{
					pushFollow(FOLLOW_constraintOptsCreate_in_createForeignKey13922);
					constraintOptsCreate862=constraintOptsCreate();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_constraintOptsCreate.add(constraintOptsCreate862.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: parCols, tabName, constraintName, constraintOptsCreate, fkCols, parCols, fkCols, constraintOptsCreate, tabName
			// token labels: 
			// rule labels: parCols, tabName, fkCols, constraintName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_parCols=new RewriteRuleSubtreeStream(adaptor,"rule parCols",parCols!=null?parCols.getTree():null);
			RewriteRuleSubtreeStream stream_tabName=new RewriteRuleSubtreeStream(adaptor,"rule tabName",tabName!=null?tabName.getTree():null);
			RewriteRuleSubtreeStream stream_fkCols=new RewriteRuleSubtreeStream(adaptor,"rule fkCols",fkCols!=null?fkCols.getTree():null);
			RewriteRuleSubtreeStream stream_constraintName=new RewriteRuleSubtreeStream(adaptor,"rule constraintName",constraintName!=null?constraintName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2312:5: -> {$constraintName.tree != null}? ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) $fkCols $tabName $parCols ( constraintOptsCreate )? )
			if ((constraintName!=null?((ASTNode)constraintName.getTree()):null) != null) {
				// HiveParser.g:2313:13: ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) $fkCols $tabName $parCols ( constraintOptsCreate )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_FOREIGN_KEY, "TOK_FOREIGN_KEY"), root_1);
				// HiveParser.g:2313:31: ^( TOK_CONSTRAINT_NAME $constraintName)
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_CONSTRAINT_NAME, "TOK_CONSTRAINT_NAME"), root_2);
				adaptor.addChild(root_2, stream_constraintName.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_1, stream_fkCols.nextTree());
				adaptor.addChild(root_1, stream_tabName.nextTree());
				adaptor.addChild(root_1, stream_parCols.nextTree());
				// HiveParser.g:2313:96: ( constraintOptsCreate )?
				if ( stream_constraintOptsCreate.hasNext() ) {
					adaptor.addChild(root_1, stream_constraintOptsCreate.nextTree());
				}
				stream_constraintOptsCreate.reset();

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2314:5: -> ^( TOK_FOREIGN_KEY $fkCols $tabName $parCols ( constraintOptsCreate )? )
			{
				// HiveParser.g:2314:8: ^( TOK_FOREIGN_KEY $fkCols $tabName $parCols ( constraintOptsCreate )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_FOREIGN_KEY, "TOK_FOREIGN_KEY"), root_1);
				adaptor.addChild(root_1, stream_fkCols.nextTree());
				adaptor.addChild(root_1, stream_tabName.nextTree());
				adaptor.addChild(root_1, stream_parCols.nextTree());
				// HiveParser.g:2314:52: ( constraintOptsCreate )?
				if ( stream_constraintOptsCreate.hasNext() ) {
					adaptor.addChild(root_1, stream_constraintOptsCreate.nextTree());
				}
				stream_constraintOptsCreate.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createForeignKey"


	public static class alterForeignKeyWithName_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterForeignKeyWithName"
	// HiveParser.g:2317:1: alterForeignKeyWithName : KW_CONSTRAINT constraintName= identifier KW_FOREIGN KW_KEY fkCols= columnParenthesesList KW_REFERENCES tabName= tableName parCols= columnParenthesesList ( constraintOptsAlter )? -> ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) $fkCols $tabName $parCols ( constraintOptsAlter )? ) ;
	public final HiveParser.alterForeignKeyWithName_return alterForeignKeyWithName() throws RecognitionException {
		HiveParser.alterForeignKeyWithName_return retval = new HiveParser.alterForeignKeyWithName_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_CONSTRAINT863=null;
		Token KW_FOREIGN864=null;
		Token KW_KEY865=null;
		Token KW_REFERENCES866=null;
		ParserRuleReturnScope constraintName =null;
		ParserRuleReturnScope fkCols =null;
		ParserRuleReturnScope tabName =null;
		ParserRuleReturnScope parCols =null;
		ParserRuleReturnScope constraintOptsAlter867 =null;

		ASTNode KW_CONSTRAINT863_tree=null;
		ASTNode KW_FOREIGN864_tree=null;
		ASTNode KW_KEY865_tree=null;
		ASTNode KW_REFERENCES866_tree=null;
		RewriteRuleTokenStream stream_KW_CONSTRAINT=new RewriteRuleTokenStream(adaptor,"token KW_CONSTRAINT");
		RewriteRuleTokenStream stream_KW_REFERENCES=new RewriteRuleTokenStream(adaptor,"token KW_REFERENCES");
		RewriteRuleTokenStream stream_KW_FOREIGN=new RewriteRuleTokenStream(adaptor,"token KW_FOREIGN");
		RewriteRuleTokenStream stream_KW_KEY=new RewriteRuleTokenStream(adaptor,"token KW_KEY");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_constraintOptsAlter=new RewriteRuleSubtreeStream(adaptor,"rule constraintOptsAlter");
		RewriteRuleSubtreeStream stream_columnParenthesesList=new RewriteRuleSubtreeStream(adaptor,"rule columnParenthesesList");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg(retval.start,"foreign key with key name", state); 
		try {
			// HiveParser.g:2320:5: ( KW_CONSTRAINT constraintName= identifier KW_FOREIGN KW_KEY fkCols= columnParenthesesList KW_REFERENCES tabName= tableName parCols= columnParenthesesList ( constraintOptsAlter )? -> ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) $fkCols $tabName $parCols ( constraintOptsAlter )? ) )
			// HiveParser.g:2320:7: KW_CONSTRAINT constraintName= identifier KW_FOREIGN KW_KEY fkCols= columnParenthesesList KW_REFERENCES tabName= tableName parCols= columnParenthesesList ( constraintOptsAlter )?
			{
			KW_CONSTRAINT863=(Token)match(input,KW_CONSTRAINT,FOLLOW_KW_CONSTRAINT_in_alterForeignKeyWithName14015); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CONSTRAINT.add(KW_CONSTRAINT863);

			pushFollow(FOLLOW_identifier_in_alterForeignKeyWithName14019);
			constraintName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(constraintName.getTree());
			KW_FOREIGN864=(Token)match(input,KW_FOREIGN,FOLLOW_KW_FOREIGN_in_alterForeignKeyWithName14021); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FOREIGN.add(KW_FOREIGN864);

			KW_KEY865=(Token)match(input,KW_KEY,FOLLOW_KW_KEY_in_alterForeignKeyWithName14023); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_KEY.add(KW_KEY865);

			pushFollow(FOLLOW_columnParenthesesList_in_alterForeignKeyWithName14027);
			fkCols=columnParenthesesList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnParenthesesList.add(fkCols.getTree());
			KW_REFERENCES866=(Token)match(input,KW_REFERENCES,FOLLOW_KW_REFERENCES_in_alterForeignKeyWithName14030); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REFERENCES.add(KW_REFERENCES866);

			pushFollow(FOLLOW_tableName_in_alterForeignKeyWithName14034);
			tabName=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tabName.getTree());
			pushFollow(FOLLOW_columnParenthesesList_in_alterForeignKeyWithName14038);
			parCols=columnParenthesesList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnParenthesesList.add(parCols.getTree());
			// HiveParser.g:2320:157: ( constraintOptsAlter )?
			int alt261=2;
			int LA261_0 = input.LA(1);
			if ( (LA261_0==KW_DISABLE||LA261_0==KW_ENABLE||LA261_0==KW_ENFORCED||LA261_0==KW_NOT) ) {
				alt261=1;
			}
			switch (alt261) {
				case 1 :
					// HiveParser.g:2320:157: constraintOptsAlter
					{
					pushFollow(FOLLOW_constraintOptsAlter_in_alterForeignKeyWithName14040);
					constraintOptsAlter867=constraintOptsAlter();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_constraintOptsAlter.add(constraintOptsAlter867.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: constraintOptsAlter, constraintName, tabName, parCols, fkCols
			// token labels: 
			// rule labels: tabName, parCols, fkCols, constraintName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_tabName=new RewriteRuleSubtreeStream(adaptor,"rule tabName",tabName!=null?tabName.getTree():null);
			RewriteRuleSubtreeStream stream_parCols=new RewriteRuleSubtreeStream(adaptor,"rule parCols",parCols!=null?parCols.getTree():null);
			RewriteRuleSubtreeStream stream_fkCols=new RewriteRuleSubtreeStream(adaptor,"rule fkCols",fkCols!=null?fkCols.getTree():null);
			RewriteRuleSubtreeStream stream_constraintName=new RewriteRuleSubtreeStream(adaptor,"rule constraintName",constraintName!=null?constraintName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2321:5: -> ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) $fkCols $tabName $parCols ( constraintOptsAlter )? )
			{
				// HiveParser.g:2321:8: ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) $fkCols $tabName $parCols ( constraintOptsAlter )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_FOREIGN_KEY, "TOK_FOREIGN_KEY"), root_1);
				// HiveParser.g:2321:26: ^( TOK_CONSTRAINT_NAME $constraintName)
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_CONSTRAINT_NAME, "TOK_CONSTRAINT_NAME"), root_2);
				adaptor.addChild(root_2, stream_constraintName.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_1, stream_fkCols.nextTree());
				adaptor.addChild(root_1, stream_tabName.nextTree());
				adaptor.addChild(root_1, stream_parCols.nextTree());
				// HiveParser.g:2321:91: ( constraintOptsAlter )?
				if ( stream_constraintOptsAlter.hasNext() ) {
					adaptor.addChild(root_1, stream_constraintOptsAlter.nextTree());
				}
				stream_constraintOptsAlter.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterForeignKeyWithName"


	public static class skewedValueElement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "skewedValueElement"
	// HiveParser.g:2324:1: skewedValueElement : ( skewedColumnValues | skewedColumnValuePairList );
	public final HiveParser.skewedValueElement_return skewedValueElement() throws RecognitionException {
		HiveParser.skewedValueElement_return retval = new HiveParser.skewedValueElement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope skewedColumnValues868 =null;
		ParserRuleReturnScope skewedColumnValuePairList869 =null;


		 pushMsg(retval.start,"skewed value element", state); 
		try {
			// HiveParser.g:2327:5: ( skewedColumnValues | skewedColumnValuePairList )
			int alt262=2;
			int LA262_0 = input.LA(1);
			if ( (LA262_0==CharSetName||LA262_0==IntegralLiteral||(LA262_0 >= KW_CURRENT_DATE && LA262_0 <= KW_CURRENT_TIMESTAMP)||LA262_0==KW_DATE||LA262_0==KW_FALSE||LA262_0==KW_NULL||(LA262_0 >= KW_TIMESTAMP && LA262_0 <= KW_TIMESTAMPLOCALTZ)||LA262_0==KW_TRUE||LA262_0==KW_UNKNOWN||(LA262_0 >= Number && LA262_0 <= NumberLiteral)||LA262_0==StringLiteral) ) {
				alt262=1;
			}
			else if ( (LA262_0==LPAREN) ) {
				alt262=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 262, 0, input);
				throw nvae;
			}

			switch (alt262) {
				case 1 :
					// HiveParser.g:2328:7: skewedColumnValues
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_skewedColumnValues_in_skewedValueElement14103);
					skewedColumnValues868=skewedColumnValues();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, skewedColumnValues868.getTree());

					}
					break;
				case 2 :
					// HiveParser.g:2329:8: skewedColumnValuePairList
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_skewedColumnValuePairList_in_skewedValueElement14112);
					skewedColumnValuePairList869=skewedColumnValuePairList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, skewedColumnValuePairList869.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedValueElement"


	public static class skewedColumnValuePairList_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "skewedColumnValuePairList"
	// HiveParser.g:2332:1: skewedColumnValuePairList : skewedColumnValuePair ( COMMA skewedColumnValuePair )* -> ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ ) ;
	public final HiveParser.skewedColumnValuePairList_return skewedColumnValuePairList() throws RecognitionException {
		HiveParser.skewedColumnValuePairList_return retval = new HiveParser.skewedColumnValuePairList_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token COMMA871=null;
		ParserRuleReturnScope skewedColumnValuePair870 =null;
		ParserRuleReturnScope skewedColumnValuePair872 =null;

		ASTNode COMMA871_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_skewedColumnValuePair=new RewriteRuleSubtreeStream(adaptor,"rule skewedColumnValuePair");

		 pushMsg(retval.start,"column value pair list", state); 
		try {
			// HiveParser.g:2335:5: ( skewedColumnValuePair ( COMMA skewedColumnValuePair )* -> ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ ) )
			// HiveParser.g:2335:7: skewedColumnValuePair ( COMMA skewedColumnValuePair )*
			{
			pushFollow(FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList14139);
			skewedColumnValuePair870=skewedColumnValuePair();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_skewedColumnValuePair.add(skewedColumnValuePair870.getTree());
			// HiveParser.g:2335:29: ( COMMA skewedColumnValuePair )*
			loop263:
			while (true) {
				int alt263=2;
				int LA263_0 = input.LA(1);
				if ( (LA263_0==COMMA) ) {
					alt263=1;
				}

				switch (alt263) {
				case 1 :
					// HiveParser.g:2335:30: COMMA skewedColumnValuePair
					{
					COMMA871=(Token)match(input,COMMA,FOLLOW_COMMA_in_skewedColumnValuePairList14142); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA871);

					pushFollow(FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList14144);
					skewedColumnValuePair872=skewedColumnValuePair();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_skewedColumnValuePair.add(skewedColumnValuePair872.getTree());
					}
					break;

				default :
					break loop263;
				}
			}

			// AST REWRITE
			// elements: skewedColumnValuePair
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2335:60: -> ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ )
			{
				// HiveParser.g:2335:63: ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABCOLVALUE_PAIR, "TOK_TABCOLVALUE_PAIR"), root_1);
				if ( !(stream_skewedColumnValuePair.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_skewedColumnValuePair.hasNext() ) {
					adaptor.addChild(root_1, stream_skewedColumnValuePair.nextTree());
				}
				stream_skewedColumnValuePair.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedColumnValuePairList"


	public static class skewedColumnValuePair_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "skewedColumnValuePair"
	// HiveParser.g:2338:1: skewedColumnValuePair : LPAREN colValues= skewedColumnValues RPAREN -> ^( TOK_TABCOLVALUES $colValues) ;
	public final HiveParser.skewedColumnValuePair_return skewedColumnValuePair() throws RecognitionException {
		HiveParser.skewedColumnValuePair_return retval = new HiveParser.skewedColumnValuePair_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token LPAREN873=null;
		Token RPAREN874=null;
		ParserRuleReturnScope colValues =null;

		ASTNode LPAREN873_tree=null;
		ASTNode RPAREN874_tree=null;
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_skewedColumnValues=new RewriteRuleSubtreeStream(adaptor,"rule skewedColumnValues");

		 pushMsg(retval.start,"column value pair", state); 
		try {
			// HiveParser.g:2341:5: ( LPAREN colValues= skewedColumnValues RPAREN -> ^( TOK_TABCOLVALUES $colValues) )
			// HiveParser.g:2342:7: LPAREN colValues= skewedColumnValues RPAREN
			{
			LPAREN873=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_skewedColumnValuePair14188); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN873);

			pushFollow(FOLLOW_skewedColumnValues_in_skewedColumnValuePair14192);
			colValues=skewedColumnValues();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_skewedColumnValues.add(colValues.getTree());
			RPAREN874=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_skewedColumnValuePair14194); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN874);

			// AST REWRITE
			// elements: colValues
			// token labels: 
			// rule labels: colValues, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_colValues=new RewriteRuleSubtreeStream(adaptor,"rule colValues",colValues!=null?colValues.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2343:7: -> ^( TOK_TABCOLVALUES $colValues)
			{
				// HiveParser.g:2343:10: ^( TOK_TABCOLVALUES $colValues)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABCOLVALUES, "TOK_TABCOLVALUES"), root_1);
				adaptor.addChild(root_1, stream_colValues.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedColumnValuePair"


	public static class skewedColumnValues_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "skewedColumnValues"
	// HiveParser.g:2346:1: skewedColumnValues : skewedColumnValue ( COMMA skewedColumnValue )* -> ^( TOK_TABCOLVALUE ( skewedColumnValue )+ ) ;
	public final HiveParser.skewedColumnValues_return skewedColumnValues() throws RecognitionException {
		HiveParser.skewedColumnValues_return retval = new HiveParser.skewedColumnValues_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token COMMA876=null;
		ParserRuleReturnScope skewedColumnValue875 =null;
		ParserRuleReturnScope skewedColumnValue877 =null;

		ASTNode COMMA876_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_skewedColumnValue=new RewriteRuleSubtreeStream(adaptor,"rule skewedColumnValue");

		 pushMsg(retval.start,"column values", state); 
		try {
			// HiveParser.g:2349:5: ( skewedColumnValue ( COMMA skewedColumnValue )* -> ^( TOK_TABCOLVALUE ( skewedColumnValue )+ ) )
			// HiveParser.g:2349:7: skewedColumnValue ( COMMA skewedColumnValue )*
			{
			pushFollow(FOLLOW_skewedColumnValue_in_skewedColumnValues14236);
			skewedColumnValue875=skewedColumnValue();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_skewedColumnValue.add(skewedColumnValue875.getTree());
			// HiveParser.g:2349:25: ( COMMA skewedColumnValue )*
			loop264:
			while (true) {
				int alt264=2;
				int LA264_0 = input.LA(1);
				if ( (LA264_0==COMMA) ) {
					alt264=1;
				}

				switch (alt264) {
				case 1 :
					// HiveParser.g:2349:26: COMMA skewedColumnValue
					{
					COMMA876=(Token)match(input,COMMA,FOLLOW_COMMA_in_skewedColumnValues14239); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA876);

					pushFollow(FOLLOW_skewedColumnValue_in_skewedColumnValues14241);
					skewedColumnValue877=skewedColumnValue();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_skewedColumnValue.add(skewedColumnValue877.getTree());
					}
					break;

				default :
					break loop264;
				}
			}

			// AST REWRITE
			// elements: skewedColumnValue
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2349:52: -> ^( TOK_TABCOLVALUE ( skewedColumnValue )+ )
			{
				// HiveParser.g:2349:55: ^( TOK_TABCOLVALUE ( skewedColumnValue )+ )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABCOLVALUE, "TOK_TABCOLVALUE"), root_1);
				if ( !(stream_skewedColumnValue.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_skewedColumnValue.hasNext() ) {
					adaptor.addChild(root_1, stream_skewedColumnValue.nextTree());
				}
				stream_skewedColumnValue.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedColumnValues"


	public static class skewedColumnValue_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "skewedColumnValue"
	// HiveParser.g:2352:1: skewedColumnValue : constant ;
	public final HiveParser.skewedColumnValue_return skewedColumnValue() throws RecognitionException {
		HiveParser.skewedColumnValue_return retval = new HiveParser.skewedColumnValue_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope constant878 =null;


		 pushMsg(retval.start,"column value", state); 
		try {
			// HiveParser.g:2355:5: ( constant )
			// HiveParser.g:2356:7: constant
			{
			root_0 = (ASTNode)adaptor.nil();


			pushFollow(FOLLOW_constant_in_skewedColumnValue14285);
			constant878=constant();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, constant878.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedColumnValue"


	public static class skewedValueLocationElement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "skewedValueLocationElement"
	// HiveParser.g:2359:1: skewedValueLocationElement : ( skewedColumnValue | skewedColumnValuePair );
	public final HiveParser.skewedValueLocationElement_return skewedValueLocationElement() throws RecognitionException {
		HiveParser.skewedValueLocationElement_return retval = new HiveParser.skewedValueLocationElement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope skewedColumnValue879 =null;
		ParserRuleReturnScope skewedColumnValuePair880 =null;


		 pushMsg(retval.start,"skewed value location element", state); 
		try {
			// HiveParser.g:2362:5: ( skewedColumnValue | skewedColumnValuePair )
			int alt265=2;
			int LA265_0 = input.LA(1);
			if ( (LA265_0==CharSetName||LA265_0==IntegralLiteral||(LA265_0 >= KW_CURRENT_DATE && LA265_0 <= KW_CURRENT_TIMESTAMP)||LA265_0==KW_DATE||LA265_0==KW_FALSE||LA265_0==KW_NULL||(LA265_0 >= KW_TIMESTAMP && LA265_0 <= KW_TIMESTAMPLOCALTZ)||LA265_0==KW_TRUE||LA265_0==KW_UNKNOWN||(LA265_0 >= Number && LA265_0 <= NumberLiteral)||LA265_0==StringLiteral) ) {
				alt265=1;
			}
			else if ( (LA265_0==LPAREN) ) {
				alt265=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 265, 0, input);
				throw nvae;
			}

			switch (alt265) {
				case 1 :
					// HiveParser.g:2363:7: skewedColumnValue
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_skewedColumnValue_in_skewedValueLocationElement14318);
					skewedColumnValue879=skewedColumnValue();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, skewedColumnValue879.getTree());

					}
					break;
				case 2 :
					// HiveParser.g:2364:8: skewedColumnValuePair
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_skewedColumnValuePair_in_skewedValueLocationElement14327);
					skewedColumnValuePair880=skewedColumnValuePair();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, skewedColumnValuePair880.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedValueLocationElement"


	public static class orderSpecification_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "orderSpecification"
	// HiveParser.g:2367:1: orderSpecification : ( KW_ASC | KW_DESC );
	public final HiveParser.orderSpecification_return orderSpecification() throws RecognitionException {
		HiveParser.orderSpecification_return retval = new HiveParser.orderSpecification_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token set881=null;

		ASTNode set881_tree=null;

		 pushMsg(retval.start,"order specification", state); 
		try {
			// HiveParser.g:2370:5: ( KW_ASC | KW_DESC )
			// HiveParser.g:
			{
			root_0 = (ASTNode)adaptor.nil();


			set881=input.LT(1);
			if ( input.LA(1)==KW_ASC||input.LA(1)==KW_DESC ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (ASTNode)adaptor.create(set881));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "orderSpecification"


	public static class nullOrdering_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "nullOrdering"
	// HiveParser.g:2372:1: nullOrdering : ( KW_NULLS KW_FIRST -> ^( TOK_NULLS_FIRST ) | KW_NULLS KW_LAST -> ^( TOK_NULLS_LAST ) );
	public final HiveParser.nullOrdering_return nullOrdering() throws RecognitionException {
		HiveParser.nullOrdering_return retval = new HiveParser.nullOrdering_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_NULLS882=null;
		Token KW_FIRST883=null;
		Token KW_NULLS884=null;
		Token KW_LAST885=null;

		ASTNode KW_NULLS882_tree=null;
		ASTNode KW_FIRST883_tree=null;
		ASTNode KW_NULLS884_tree=null;
		ASTNode KW_LAST885_tree=null;
		RewriteRuleTokenStream stream_KW_FIRST=new RewriteRuleTokenStream(adaptor,"token KW_FIRST");
		RewriteRuleTokenStream stream_KW_NULLS=new RewriteRuleTokenStream(adaptor,"token KW_NULLS");
		RewriteRuleTokenStream stream_KW_LAST=new RewriteRuleTokenStream(adaptor,"token KW_LAST");

		 pushMsg(retval.start,"nulls ordering", state); 
		try {
			// HiveParser.g:2375:5: ( KW_NULLS KW_FIRST -> ^( TOK_NULLS_FIRST ) | KW_NULLS KW_LAST -> ^( TOK_NULLS_LAST ) )
			int alt266=2;
			int LA266_0 = input.LA(1);
			if ( (LA266_0==KW_NULLS) ) {
				int LA266_1 = input.LA(2);
				if ( (LA266_1==KW_FIRST) ) {
					alt266=1;
				}
				else if ( (LA266_1==KW_LAST) ) {
					alt266=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 266, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 266, 0, input);
				throw nvae;
			}

			switch (alt266) {
				case 1 :
					// HiveParser.g:2375:7: KW_NULLS KW_FIRST
					{
					KW_NULLS882=(Token)match(input,KW_NULLS,FOLLOW_KW_NULLS_in_nullOrdering14381); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NULLS.add(KW_NULLS882);

					KW_FIRST883=(Token)match(input,KW_FIRST,FOLLOW_KW_FIRST_in_nullOrdering14383); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_FIRST.add(KW_FIRST883);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2375:25: -> ^( TOK_NULLS_FIRST )
					{
						// HiveParser.g:2375:28: ^( TOK_NULLS_FIRST )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_NULLS_FIRST, "TOK_NULLS_FIRST"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:2376:7: KW_NULLS KW_LAST
					{
					KW_NULLS884=(Token)match(input,KW_NULLS,FOLLOW_KW_NULLS_in_nullOrdering14397); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NULLS.add(KW_NULLS884);

					KW_LAST885=(Token)match(input,KW_LAST,FOLLOW_KW_LAST_in_nullOrdering14399); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_LAST.add(KW_LAST885);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2376:24: -> ^( TOK_NULLS_LAST )
					{
						// HiveParser.g:2376:27: ^( TOK_NULLS_LAST )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_NULLS_LAST, "TOK_NULLS_LAST"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "nullOrdering"


	public static class columnNameOrder_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnNameOrder"
	// HiveParser.g:2379:1: columnNameOrder : identifier (orderSpec= orderSpecification )? (nullSpec= nullOrdering )? -> {$orderSpec.tree == null && $nullSpec.tree == null && nullsLast()}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_LAST identifier ) ) -> {$orderSpec.tree == null && $nullSpec.tree == null && !nullsLast()}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) ) -> {$orderSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_DESC}? ^( TOK_TABSORTCOLNAMEDESC ^( TOK_NULLS_LAST identifier ) ) -> {$orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) ) -> ^( TOK_TABSORTCOLNAMEDESC ^( $nullSpec identifier ) ) ;
	public final HiveParser.columnNameOrder_return columnNameOrder() throws RecognitionException {
		HiveParser.columnNameOrder_return retval = new HiveParser.columnNameOrder_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope orderSpec =null;
		ParserRuleReturnScope nullSpec =null;
		ParserRuleReturnScope identifier886 =null;

		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_nullOrdering=new RewriteRuleSubtreeStream(adaptor,"rule nullOrdering");
		RewriteRuleSubtreeStream stream_orderSpecification=new RewriteRuleSubtreeStream(adaptor,"rule orderSpecification");

		 pushMsg(retval.start,"column name order", state); 
		try {
			// HiveParser.g:2382:5: ( identifier (orderSpec= orderSpecification )? (nullSpec= nullOrdering )? -> {$orderSpec.tree == null && $nullSpec.tree == null && nullsLast()}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_LAST identifier ) ) -> {$orderSpec.tree == null && $nullSpec.tree == null && !nullsLast()}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) ) -> {$orderSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_DESC}? ^( TOK_TABSORTCOLNAMEDESC ^( TOK_NULLS_LAST identifier ) ) -> {$orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) ) -> ^( TOK_TABSORTCOLNAMEDESC ^( $nullSpec identifier ) ) )
			// HiveParser.g:2382:7: identifier (orderSpec= orderSpecification )? (nullSpec= nullOrdering )?
			{
			pushFollow(FOLLOW_identifier_in_columnNameOrder14432);
			identifier886=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(identifier886.getTree());
			// HiveParser.g:2382:27: (orderSpec= orderSpecification )?
			int alt267=2;
			int LA267_0 = input.LA(1);
			if ( (LA267_0==KW_ASC||LA267_0==KW_DESC) ) {
				alt267=1;
			}
			switch (alt267) {
				case 1 :
					// HiveParser.g:2382:27: orderSpec= orderSpecification
					{
					pushFollow(FOLLOW_orderSpecification_in_columnNameOrder14436);
					orderSpec=orderSpecification();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_orderSpecification.add(orderSpec.getTree());
					}
					break;

			}

			// HiveParser.g:2382:56: (nullSpec= nullOrdering )?
			int alt268=2;
			int LA268_0 = input.LA(1);
			if ( (LA268_0==KW_NULLS) ) {
				alt268=1;
			}
			switch (alt268) {
				case 1 :
					// HiveParser.g:2382:56: nullSpec= nullOrdering
					{
					pushFollow(FOLLOW_nullOrdering_in_columnNameOrder14441);
					nullSpec=nullOrdering();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_nullOrdering.add(nullSpec.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: identifier, identifier, identifier, identifier, nullSpec, nullSpec, nullSpec, identifier, identifier, identifier
			// token labels: 
			// rule labels: nullSpec, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_nullSpec=new RewriteRuleSubtreeStream(adaptor,"rule nullSpec",nullSpec!=null?nullSpec.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2383:5: -> {$orderSpec.tree == null && $nullSpec.tree == null && nullsLast()}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_LAST identifier ) )
			if ((orderSpec!=null?((ASTNode)orderSpec.getTree()):null) == null && (nullSpec!=null?((ASTNode)nullSpec.getTree()):null) == null && nullsLast()) {
				// HiveParser.g:2384:13: ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_LAST identifier ) )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				// HiveParser.g:2384:37: ^( TOK_NULLS_LAST identifier )
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_NULLS_LAST, "TOK_NULLS_LAST"), root_2);
				adaptor.addChild(root_2, stream_identifier.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2385:5: -> {$orderSpec.tree == null && $nullSpec.tree == null && !nullsLast()}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) )
			if ((orderSpec!=null?((ASTNode)orderSpec.getTree()):null) == null && (nullSpec!=null?((ASTNode)nullSpec.getTree()):null) == null && !nullsLast()) {
				// HiveParser.g:2386:13: ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				// HiveParser.g:2386:37: ^( TOK_NULLS_FIRST identifier )
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_NULLS_FIRST, "TOK_NULLS_FIRST"), root_2);
				adaptor.addChild(root_2, stream_identifier.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2387:5: -> {$orderSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) )
			if ((orderSpec!=null?((ASTNode)orderSpec.getTree()):null) == null) {
				// HiveParser.g:2388:13: ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				// HiveParser.g:2388:37: ^( $nullSpec identifier )
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot(stream_nullSpec.nextNode(), root_2);
				adaptor.addChild(root_2, stream_identifier.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2389:5: -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) )
			if ((nullSpec!=null?((ASTNode)nullSpec.getTree()):null) == null && (orderSpec!=null?((ASTNode)orderSpec.getTree()):null).getType()==HiveParser.KW_ASC) {
				// HiveParser.g:2390:13: ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				// HiveParser.g:2390:37: ^( TOK_NULLS_FIRST identifier )
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_NULLS_FIRST, "TOK_NULLS_FIRST"), root_2);
				adaptor.addChild(root_2, stream_identifier.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2391:5: -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_DESC}? ^( TOK_TABSORTCOLNAMEDESC ^( TOK_NULLS_LAST identifier ) )
			if ((nullSpec!=null?((ASTNode)nullSpec.getTree()):null) == null && (orderSpec!=null?((ASTNode)orderSpec.getTree()):null).getType()==HiveParser.KW_DESC) {
				// HiveParser.g:2392:13: ^( TOK_TABSORTCOLNAMEDESC ^( TOK_NULLS_LAST identifier ) )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC"), root_1);
				// HiveParser.g:2392:38: ^( TOK_NULLS_LAST identifier )
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_NULLS_LAST, "TOK_NULLS_LAST"), root_2);
				adaptor.addChild(root_2, stream_identifier.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2393:5: -> {$orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) )
			if ((orderSpec!=null?((ASTNode)orderSpec.getTree()):null).getType()==HiveParser.KW_ASC) {
				// HiveParser.g:2394:13: ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				// HiveParser.g:2394:37: ^( $nullSpec identifier )
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot(stream_nullSpec.nextNode(), root_2);
				adaptor.addChild(root_2, stream_identifier.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2395:5: -> ^( TOK_TABSORTCOLNAMEDESC ^( $nullSpec identifier ) )
			{
				// HiveParser.g:2395:8: ^( TOK_TABSORTCOLNAMEDESC ^( $nullSpec identifier ) )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC"), root_1);
				// HiveParser.g:2395:33: ^( $nullSpec identifier )
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot(stream_nullSpec.nextNode(), root_2);
				adaptor.addChild(root_2, stream_identifier.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameOrder"


	public static class columnNameCommentList_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnNameCommentList"
	// HiveParser.g:2398:1: columnNameCommentList : columnNameComment ( COMMA columnNameComment )* -> ^( TOK_TABCOLNAME ( columnNameComment )+ ) ;
	public final HiveParser.columnNameCommentList_return columnNameCommentList() throws RecognitionException {
		HiveParser.columnNameCommentList_return retval = new HiveParser.columnNameCommentList_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token COMMA888=null;
		ParserRuleReturnScope columnNameComment887 =null;
		ParserRuleReturnScope columnNameComment889 =null;

		ASTNode COMMA888_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnNameComment=new RewriteRuleSubtreeStream(adaptor,"rule columnNameComment");

		 pushMsg(retval.start,"column name comment list", state); 
		try {
			// HiveParser.g:2401:5: ( columnNameComment ( COMMA columnNameComment )* -> ^( TOK_TABCOLNAME ( columnNameComment )+ ) )
			// HiveParser.g:2401:7: columnNameComment ( COMMA columnNameComment )*
			{
			pushFollow(FOLLOW_columnNameComment_in_columnNameCommentList14668);
			columnNameComment887=columnNameComment();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameComment.add(columnNameComment887.getTree());
			// HiveParser.g:2401:25: ( COMMA columnNameComment )*
			loop269:
			while (true) {
				int alt269=2;
				int LA269_0 = input.LA(1);
				if ( (LA269_0==COMMA) ) {
					alt269=1;
				}

				switch (alt269) {
				case 1 :
					// HiveParser.g:2401:26: COMMA columnNameComment
					{
					COMMA888=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameCommentList14671); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA888);

					pushFollow(FOLLOW_columnNameComment_in_columnNameCommentList14673);
					columnNameComment889=columnNameComment();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameComment.add(columnNameComment889.getTree());
					}
					break;

				default :
					break loop269;
				}
			}

			// AST REWRITE
			// elements: columnNameComment
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2401:52: -> ^( TOK_TABCOLNAME ( columnNameComment )+ )
			{
				// HiveParser.g:2401:55: ^( TOK_TABCOLNAME ( columnNameComment )+ )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_1);
				if ( !(stream_columnNameComment.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnNameComment.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameComment.nextTree());
				}
				stream_columnNameComment.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameCommentList"


	public static class columnNameComment_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnNameComment"
	// HiveParser.g:2404:1: columnNameComment : colName= identifier ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? ) ;
	public final HiveParser.columnNameComment_return columnNameComment() throws RecognitionException {
		HiveParser.columnNameComment_return retval = new HiveParser.columnNameComment_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token comment=null;
		Token KW_COMMENT890=null;
		ParserRuleReturnScope colName =null;

		ASTNode comment_tree=null;
		ASTNode KW_COMMENT890_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg(retval.start,"column name comment", state); 
		try {
			// HiveParser.g:2407:5: (colName= identifier ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? ) )
			// HiveParser.g:2407:7: colName= identifier ( KW_COMMENT comment= StringLiteral )?
			{
			pushFollow(FOLLOW_identifier_in_columnNameComment14713);
			colName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(colName.getTree());
			// HiveParser.g:2407:26: ( KW_COMMENT comment= StringLiteral )?
			int alt270=2;
			int LA270_0 = input.LA(1);
			if ( (LA270_0==KW_COMMENT) ) {
				alt270=1;
			}
			switch (alt270) {
				case 1 :
					// HiveParser.g:2407:27: KW_COMMENT comment= StringLiteral
					{
					KW_COMMENT890=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameComment14716); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT890);

					comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameComment14720); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(comment);

					}
					break;

			}

			// AST REWRITE
			// elements: colName, comment
			// token labels: comment
			// rule labels: colName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2408:5: -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? )
			{
				// HiveParser.g:2408:8: ^( TOK_TABCOL $colName TOK_NULL ( $comment)? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);
				adaptor.addChild(root_1, stream_colName.nextTree());
				adaptor.addChild(root_1, (ASTNode)adaptor.create(TOK_NULL, "TOK_NULL"));
				// HiveParser.g:2408:40: ( $comment)?
				if ( stream_comment.hasNext() ) {
					adaptor.addChild(root_1, stream_comment.nextNode());
				}
				stream_comment.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameComment"


	public static class columnRefOrder_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnRefOrder"
	// HiveParser.g:2411:1: columnRefOrder : expression (orderSpec= orderSpecification )? (nullSpec= nullOrdering )? -> {$orderSpec.tree == null && $nullSpec.tree == null && nullsLast()}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_LAST expression ) ) -> {$orderSpec.tree == null && $nullSpec.tree == null && !nullsLast()}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST expression ) ) -> {$orderSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec expression ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST expression ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_DESC}? ^( TOK_TABSORTCOLNAMEDESC ^( TOK_NULLS_LAST expression ) ) -> {$orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec expression ) ) -> ^( TOK_TABSORTCOLNAMEDESC ^( $nullSpec expression ) ) ;
	public final HiveParser.columnRefOrder_return columnRefOrder() throws RecognitionException {
		HiveParser.columnRefOrder_return retval = new HiveParser.columnRefOrder_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope orderSpec =null;
		ParserRuleReturnScope nullSpec =null;
		ParserRuleReturnScope expression891 =null;

		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_nullOrdering=new RewriteRuleSubtreeStream(adaptor,"rule nullOrdering");
		RewriteRuleSubtreeStream stream_orderSpecification=new RewriteRuleSubtreeStream(adaptor,"rule orderSpecification");

		 pushMsg(retval.start,"column order", state); 
		try {
			// HiveParser.g:2414:5: ( expression (orderSpec= orderSpecification )? (nullSpec= nullOrdering )? -> {$orderSpec.tree == null && $nullSpec.tree == null && nullsLast()}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_LAST expression ) ) -> {$orderSpec.tree == null && $nullSpec.tree == null && !nullsLast()}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST expression ) ) -> {$orderSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec expression ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST expression ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_DESC}? ^( TOK_TABSORTCOLNAMEDESC ^( TOK_NULLS_LAST expression ) ) -> {$orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec expression ) ) -> ^( TOK_TABSORTCOLNAMEDESC ^( $nullSpec expression ) ) )
			// HiveParser.g:2414:7: expression (orderSpec= orderSpecification )? (nullSpec= nullOrdering )?
			{
			pushFollow(FOLLOW_expression_in_columnRefOrder14768);
			expression891=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expression.add(expression891.getTree());
			// HiveParser.g:2414:27: (orderSpec= orderSpecification )?
			int alt271=2;
			int LA271_0 = input.LA(1);
			if ( (LA271_0==KW_ASC||LA271_0==KW_DESC) ) {
				alt271=1;
			}
			switch (alt271) {
				case 1 :
					// HiveParser.g:2414:27: orderSpec= orderSpecification
					{
					pushFollow(FOLLOW_orderSpecification_in_columnRefOrder14772);
					orderSpec=orderSpecification();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_orderSpecification.add(orderSpec.getTree());
					}
					break;

			}

			// HiveParser.g:2414:56: (nullSpec= nullOrdering )?
			int alt272=2;
			int LA272_0 = input.LA(1);
			if ( (LA272_0==KW_NULLS) ) {
				alt272=1;
			}
			switch (alt272) {
				case 1 :
					// HiveParser.g:2414:56: nullSpec= nullOrdering
					{
					pushFollow(FOLLOW_nullOrdering_in_columnRefOrder14777);
					nullSpec=nullOrdering();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_nullOrdering.add(nullSpec.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: expression, nullSpec, expression, expression, expression, expression, nullSpec, expression, expression, nullSpec
			// token labels: 
			// rule labels: nullSpec, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_nullSpec=new RewriteRuleSubtreeStream(adaptor,"rule nullSpec",nullSpec!=null?nullSpec.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2415:5: -> {$orderSpec.tree == null && $nullSpec.tree == null && nullsLast()}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_LAST expression ) )
			if ((orderSpec!=null?((ASTNode)orderSpec.getTree()):null) == null && (nullSpec!=null?((ASTNode)nullSpec.getTree()):null) == null && nullsLast()) {
				// HiveParser.g:2416:13: ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_LAST expression ) )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				// HiveParser.g:2416:37: ^( TOK_NULLS_LAST expression )
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_NULLS_LAST, "TOK_NULLS_LAST"), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2417:5: -> {$orderSpec.tree == null && $nullSpec.tree == null && !nullsLast()}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST expression ) )
			if ((orderSpec!=null?((ASTNode)orderSpec.getTree()):null) == null && (nullSpec!=null?((ASTNode)nullSpec.getTree()):null) == null && !nullsLast()) {
				// HiveParser.g:2418:13: ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST expression ) )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				// HiveParser.g:2418:37: ^( TOK_NULLS_FIRST expression )
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_NULLS_FIRST, "TOK_NULLS_FIRST"), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2419:5: -> {$orderSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec expression ) )
			if ((orderSpec!=null?((ASTNode)orderSpec.getTree()):null) == null) {
				// HiveParser.g:2420:13: ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec expression ) )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				// HiveParser.g:2420:37: ^( $nullSpec expression )
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot(stream_nullSpec.nextNode(), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2421:5: -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST expression ) )
			if ((nullSpec!=null?((ASTNode)nullSpec.getTree()):null) == null && (orderSpec!=null?((ASTNode)orderSpec.getTree()):null).getType()==HiveParser.KW_ASC) {
				// HiveParser.g:2422:13: ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST expression ) )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				// HiveParser.g:2422:37: ^( TOK_NULLS_FIRST expression )
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_NULLS_FIRST, "TOK_NULLS_FIRST"), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2423:5: -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_DESC}? ^( TOK_TABSORTCOLNAMEDESC ^( TOK_NULLS_LAST expression ) )
			if ((nullSpec!=null?((ASTNode)nullSpec.getTree()):null) == null && (orderSpec!=null?((ASTNode)orderSpec.getTree()):null).getType()==HiveParser.KW_DESC) {
				// HiveParser.g:2424:13: ^( TOK_TABSORTCOLNAMEDESC ^( TOK_NULLS_LAST expression ) )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC"), root_1);
				// HiveParser.g:2424:38: ^( TOK_NULLS_LAST expression )
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_NULLS_LAST, "TOK_NULLS_LAST"), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2425:5: -> {$orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec expression ) )
			if ((orderSpec!=null?((ASTNode)orderSpec.getTree()):null).getType()==HiveParser.KW_ASC) {
				// HiveParser.g:2426:13: ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec expression ) )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				// HiveParser.g:2426:37: ^( $nullSpec expression )
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot(stream_nullSpec.nextNode(), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2427:5: -> ^( TOK_TABSORTCOLNAMEDESC ^( $nullSpec expression ) )
			{
				// HiveParser.g:2427:8: ^( TOK_TABSORTCOLNAMEDESC ^( $nullSpec expression ) )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC"), root_1);
				// HiveParser.g:2427:33: ^( $nullSpec expression )
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot(stream_nullSpec.nextNode(), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnRefOrder"


	public static class columnNameType_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnNameType"
	// HiveParser.g:2430:1: columnNameType : colName= identifier colType ( KW_COMMENT comment= StringLiteral )? -> {containExcludedCharForCreateTableColumnName($colName.text)}? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) ;
	public final HiveParser.columnNameType_return columnNameType() throws RecognitionException {
		HiveParser.columnNameType_return retval = new HiveParser.columnNameType_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token comment=null;
		Token KW_COMMENT893=null;
		ParserRuleReturnScope colName =null;
		ParserRuleReturnScope colType892 =null;

		ASTNode comment_tree=null;
		ASTNode KW_COMMENT893_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");

		 pushMsg(retval.start,"column specification", state); 
		try {
			// HiveParser.g:2433:5: (colName= identifier colType ( KW_COMMENT comment= StringLiteral )? -> {containExcludedCharForCreateTableColumnName($colName.text)}? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) )
			// HiveParser.g:2433:7: colName= identifier colType ( KW_COMMENT comment= StringLiteral )?
			{
			pushFollow(FOLLOW_identifier_in_columnNameType15006);
			colName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(colName.getTree());
			pushFollow(FOLLOW_colType_in_columnNameType15008);
			colType892=colType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_colType.add(colType892.getTree());
			// HiveParser.g:2433:34: ( KW_COMMENT comment= StringLiteral )?
			int alt273=2;
			int LA273_0 = input.LA(1);
			if ( (LA273_0==KW_COMMENT) ) {
				alt273=1;
			}
			switch (alt273) {
				case 1 :
					// HiveParser.g:2433:35: KW_COMMENT comment= StringLiteral
					{
					KW_COMMENT893=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameType15011); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT893);

					comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameType15015); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(comment);

					}
					break;

			}

			// AST REWRITE
			// elements: comment, colName, colType, colType, colName
			// token labels: comment
			// rule labels: colName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2434:5: -> {containExcludedCharForCreateTableColumnName($colName.text)}?
			if (containExcludedCharForCreateTableColumnName((colName!=null?input.toString(colName.start,colName.stop):null))) {
				adaptor.addChild(root_0, throwColumnNameException());
			}

			else // 2435:5: -> {$comment == null}? ^( TOK_TABCOL $colName colType )
			if (comment == null) {
				// HiveParser.g:2435:28: ^( TOK_TABCOL $colName colType )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);
				adaptor.addChild(root_1, stream_colName.nextTree());
				adaptor.addChild(root_1, stream_colType.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2436:5: -> ^( TOK_TABCOL $colName colType $comment)
			{
				// HiveParser.g:2436:28: ^( TOK_TABCOL $colName colType $comment)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);
				adaptor.addChild(root_1, stream_colName.nextTree());
				adaptor.addChild(root_1, stream_colType.nextTree());
				adaptor.addChild(root_1, stream_comment.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameType"


	public static class columnNameTypeOrConstraint_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnNameTypeOrConstraint"
	// HiveParser.g:2439:1: columnNameTypeOrConstraint : ( ( tableConstraint ) | ( columnNameTypeConstraint ) );
	public final HiveParser.columnNameTypeOrConstraint_return columnNameTypeOrConstraint() throws RecognitionException {
		HiveParser.columnNameTypeOrConstraint_return retval = new HiveParser.columnNameTypeOrConstraint_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope tableConstraint894 =null;
		ParserRuleReturnScope columnNameTypeConstraint895 =null;


		 pushMsg(retval.start,"column name or constraint", state); 
		try {
			// HiveParser.g:2442:5: ( ( tableConstraint ) | ( columnNameTypeConstraint ) )
			int alt274=2;
			alt274 = dfa274.predict(input);
			switch (alt274) {
				case 1 :
					// HiveParser.g:2442:7: ( tableConstraint )
					{
					root_0 = (ASTNode)adaptor.nil();


					// HiveParser.g:2442:7: ( tableConstraint )
					// HiveParser.g:2442:9: tableConstraint
					{
					pushFollow(FOLLOW_tableConstraint_in_columnNameTypeOrConstraint15111);
					tableConstraint894=tableConstraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, tableConstraint894.getTree());

					}

					}
					break;
				case 2 :
					// HiveParser.g:2443:7: ( columnNameTypeConstraint )
					{
					root_0 = (ASTNode)adaptor.nil();


					// HiveParser.g:2443:7: ( columnNameTypeConstraint )
					// HiveParser.g:2443:9: columnNameTypeConstraint
					{
					pushFollow(FOLLOW_columnNameTypeConstraint_in_columnNameTypeOrConstraint15123);
					columnNameTypeConstraint895=columnNameTypeConstraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, columnNameTypeConstraint895.getTree());

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameTypeOrConstraint"


	public static class tableConstraint_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableConstraint"
	// HiveParser.g:2446:1: tableConstraint : ( ( createForeignKey ) | ( createConstraint ) );
	public final HiveParser.tableConstraint_return tableConstraint() throws RecognitionException {
		HiveParser.tableConstraint_return retval = new HiveParser.tableConstraint_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope createForeignKey896 =null;
		ParserRuleReturnScope createConstraint897 =null;


		 pushMsg(retval.start,"table constraint", state); 
		try {
			// HiveParser.g:2449:5: ( ( createForeignKey ) | ( createConstraint ) )
			int alt275=2;
			switch ( input.LA(1) ) {
			case KW_CONSTRAINT:
				{
				int LA275_1 = input.LA(2);
				if ( (LA275_1==Identifier) ) {
					int LA275_6 = input.LA(3);
					if ( (LA275_6==KW_FOREIGN) ) {
						alt275=1;
					}
					else if ( (LA275_6==KW_CHECK||LA275_6==KW_PRIMARY||LA275_6==KW_UNIQUE) ) {
						alt275=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 275, 6, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( ((LA275_1 >= KW_ABORT && LA275_1 <= KW_AFTER)||LA275_1==KW_ALLOC_FRACTION||LA275_1==KW_ANALYZE||LA275_1==KW_ARCHIVE||(LA275_1 >= KW_ASC && LA275_1 <= KW_AST)||(LA275_1 >= KW_AUTOCOMMIT && LA275_1 <= KW_BEFORE)||(LA275_1 >= KW_BUCKET && LA275_1 <= KW_BUCKETS)||(LA275_1 >= KW_CACHE && LA275_1 <= KW_CASCADE)||LA275_1==KW_CHANGE||(LA275_1 >= KW_CHECK && LA275_1 <= KW_COLLECTION)||(LA275_1 >= KW_COLUMNS && LA275_1 <= KW_COMMENT)||(LA275_1 >= KW_COMPACT && LA275_1 <= KW_CONCATENATE)||LA275_1==KW_CONTINUE||LA275_1==KW_DATA||(LA275_1 >= KW_DATABASES && LA275_1 <= KW_DEBUG)||(LA275_1 >= KW_DEFAULT && LA275_1 <= KW_DEFINED)||(LA275_1 >= KW_DELIMITED && LA275_1 <= KW_DESC)||(LA275_1 >= KW_DETAIL && LA275_1 <= KW_DISABLE)||(LA275_1 >= KW_DISTRIBUTE && LA275_1 <= KW_DO)||LA275_1==KW_DOW||(LA275_1 >= KW_DUMP && LA275_1 <= KW_ELEM_TYPE)||LA275_1==KW_ENABLE||(LA275_1 >= KW_ENFORCED && LA275_1 <= KW_ESCAPED)||LA275_1==KW_EXCLUSIVE||(LA275_1 >= KW_EXPLAIN && LA275_1 <= KW_EXPRESSION)||(LA275_1 >= KW_FIELDS && LA275_1 <= KW_FIRST)||(LA275_1 >= KW_FORMAT && LA275_1 <= KW_FORMATTED)||LA275_1==KW_FUNCTIONS||LA275_1==KW_GROUP||(LA275_1 >= KW_HOUR && LA275_1 <= KW_IDXPROPERTIES)||(LA275_1 >= KW_INDEX && LA275_1 <= KW_INDEXES)||(LA275_1 >= KW_INPATH && LA275_1 <= KW_INPUTFORMAT)||(LA275_1 >= KW_ISOLATION && LA275_1 <= KW_JAR)||(LA275_1 >= KW_KEY && LA275_1 <= KW_LAST)||LA275_1==KW_LEVEL||(LA275_1 >= KW_LIMIT && LA275_1 <= KW_LOAD)||(LA275_1 >= KW_LOCATION && LA275_1 <= KW_LONG)||LA275_1==KW_MANAGEMENT||(LA275_1 >= KW_MAPJOIN && LA275_1 <= KW_MATERIALIZED)||LA275_1==KW_METADATA||(LA275_1 >= KW_MINUTE && LA275_1 <= KW_MONTH)||(LA275_1 >= KW_MOVE && LA275_1 <= KW_MSCK)||(LA275_1 >= KW_NORELY && LA275_1 <= KW_NOSCAN)||LA275_1==KW_NOVALIDATE||LA275_1==KW_NULLS||LA275_1==KW_OFFSET||(LA275_1 >= KW_OPERATOR && LA275_1 <= KW_OPTION)||LA275_1==KW_ORDER||(LA275_1 >= KW_OUTPUTDRIVER && LA275_1 <= KW_OUTPUTFORMAT)||(LA275_1 >= KW_OVERWRITE && LA275_1 <= KW_OWNER)||(LA275_1 >= KW_PARTITIONED && LA275_1 <= KW_PATH)||(LA275_1 >= KW_PLAN && LA275_1 <= KW_POOL)||LA275_1==KW_PRINCIPALS||(LA275_1 >= KW_PURGE && LA275_1 <= KW_QUERY_PARALLELISM)||LA275_1==KW_READ||(LA275_1 >= KW_REBUILD && LA275_1 <= KW_RECORDWRITER)||(LA275_1 >= KW_RELOAD && LA275_1 <= KW_RESTRICT)||LA275_1==KW_REWRITE||(LA275_1 >= KW_ROLE && LA275_1 <= KW_ROLES)||(LA275_1 >= KW_SCHEDULING_POLICY && LA275_1 <= KW_SECOND)||(LA275_1 >= KW_SEMI && LA275_1 <= KW_SERVER)||(LA275_1 >= KW_SETS && LA275_1 <= KW_SKEWED)||(LA275_1 >= KW_SNAPSHOT && LA275_1 <= KW_SSL)||(LA275_1 >= KW_STATISTICS && LA275_1 <= KW_SUMMARY)||LA275_1==KW_TABLES||(LA275_1 >= KW_TBLPROPERTIES && LA275_1 <= KW_TERMINATED)||LA275_1==KW_TINYINT||(LA275_1 >= KW_TOUCH && LA275_1 <= KW_TRANSACTIONS)||LA275_1==KW_UNARCHIVE||LA275_1==KW_UNDO||LA275_1==KW_UNIONTYPE||(LA275_1 >= KW_UNKNOWN && LA275_1 <= KW_UNSIGNED)||(LA275_1 >= KW_URI && LA275_1 <= KW_USE)||(LA275_1 >= KW_UTC && LA275_1 <= KW_VALIDATE)||LA275_1==KW_VALUE_TYPE||(LA275_1 >= KW_VECTORIZATION && LA275_1 <= KW_WEEK)||LA275_1==KW_WHILE||(LA275_1 >= KW_WORK && LA275_1 <= KW_ZONE)||LA275_1==KW_BATCH||LA275_1==KW_DAYOFWEEK||LA275_1==KW_HOLD_DDLTIME||LA275_1==KW_IGNORE||LA275_1==KW_NO_DROP||LA275_1==KW_OFFLINE||LA275_1==KW_PROTECTION||LA275_1==KW_READONLY||LA275_1==KW_TIMESTAMPTZ) ) {
					int LA275_7 = input.LA(3);
					if ( (LA275_7==KW_FOREIGN) ) {
						alt275=1;
					}
					else if ( (LA275_7==KW_CHECK||LA275_7==KW_PRIMARY||LA275_7==KW_UNIQUE) ) {
						alt275=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 275, 7, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 275, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_FOREIGN:
				{
				alt275=1;
				}
				break;
			case KW_CHECK:
			case KW_PRIMARY:
			case KW_UNIQUE:
				{
				alt275=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 275, 0, input);
				throw nvae;
			}
			switch (alt275) {
				case 1 :
					// HiveParser.g:2449:7: ( createForeignKey )
					{
					root_0 = (ASTNode)adaptor.nil();


					// HiveParser.g:2449:7: ( createForeignKey )
					// HiveParser.g:2449:9: createForeignKey
					{
					pushFollow(FOLLOW_createForeignKey_in_tableConstraint15154);
					createForeignKey896=createForeignKey();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, createForeignKey896.getTree());

					}

					}
					break;
				case 2 :
					// HiveParser.g:2450:7: ( createConstraint )
					{
					root_0 = (ASTNode)adaptor.nil();


					// HiveParser.g:2450:7: ( createConstraint )
					// HiveParser.g:2450:9: createConstraint
					{
					pushFollow(FOLLOW_createConstraint_in_tableConstraint15166);
					createConstraint897=createConstraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, createConstraint897.getTree());

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableConstraint"


	public static class columnNameTypeConstraint_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnNameTypeConstraint"
	// HiveParser.g:2453:1: columnNameTypeConstraint : colName= identifier colType ( columnConstraint[$colName.tree] )? ( KW_COMMENT comment= StringLiteral )? -> {containExcludedCharForCreateTableColumnName($colName.text)}? -> ^( TOK_TABCOL $colName colType ( $comment)? ( columnConstraint )? ) ;
	public final HiveParser.columnNameTypeConstraint_return columnNameTypeConstraint() throws RecognitionException {
		HiveParser.columnNameTypeConstraint_return retval = new HiveParser.columnNameTypeConstraint_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token comment=null;
		Token KW_COMMENT900=null;
		ParserRuleReturnScope colName =null;
		ParserRuleReturnScope colType898 =null;
		ParserRuleReturnScope columnConstraint899 =null;

		ASTNode comment_tree=null;
		ASTNode KW_COMMENT900_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_columnConstraint=new RewriteRuleSubtreeStream(adaptor,"rule columnConstraint");
		RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");

		 pushMsg(retval.start,"column specification", state); 
		try {
			// HiveParser.g:2456:5: (colName= identifier colType ( columnConstraint[$colName.tree] )? ( KW_COMMENT comment= StringLiteral )? -> {containExcludedCharForCreateTableColumnName($colName.text)}? -> ^( TOK_TABCOL $colName colType ( $comment)? ( columnConstraint )? ) )
			// HiveParser.g:2456:7: colName= identifier colType ( columnConstraint[$colName.tree] )? ( KW_COMMENT comment= StringLiteral )?
			{
			pushFollow(FOLLOW_identifier_in_columnNameTypeConstraint15197);
			colName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(colName.getTree());
			pushFollow(FOLLOW_colType_in_columnNameTypeConstraint15199);
			colType898=colType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_colType.add(colType898.getTree());
			// HiveParser.g:2456:34: ( columnConstraint[$colName.tree] )?
			int alt276=2;
			int LA276_0 = input.LA(1);
			if ( (LA276_0==KW_CHECK||LA276_0==KW_CONSTRAINT||LA276_0==KW_DEFAULT||LA276_0==KW_NOT||LA276_0==KW_PRIMARY||LA276_0==KW_REFERENCES||LA276_0==KW_UNIQUE) ) {
				alt276=1;
			}
			switch (alt276) {
				case 1 :
					// HiveParser.g:2456:34: columnConstraint[$colName.tree]
					{
					pushFollow(FOLLOW_columnConstraint_in_columnNameTypeConstraint15201);
					columnConstraint899=columnConstraint((colName!=null?((ASTNode)colName.getTree()):null));
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnConstraint.add(columnConstraint899.getTree());
					}
					break;

			}

			// HiveParser.g:2456:67: ( KW_COMMENT comment= StringLiteral )?
			int alt277=2;
			int LA277_0 = input.LA(1);
			if ( (LA277_0==KW_COMMENT) ) {
				alt277=1;
			}
			switch (alt277) {
				case 1 :
					// HiveParser.g:2456:68: KW_COMMENT comment= StringLiteral
					{
					KW_COMMENT900=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameTypeConstraint15206); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT900);

					comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameTypeConstraint15210); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(comment);

					}
					break;

			}

			// AST REWRITE
			// elements: comment, colName, columnConstraint, colType
			// token labels: comment
			// rule labels: colName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2457:5: -> {containExcludedCharForCreateTableColumnName($colName.text)}?
			if (containExcludedCharForCreateTableColumnName((colName!=null?input.toString(colName.start,colName.stop):null))) {
				adaptor.addChild(root_0, throwColumnNameException());
			}

			else // 2458:5: -> ^( TOK_TABCOL $colName colType ( $comment)? ( columnConstraint )? )
			{
				// HiveParser.g:2458:8: ^( TOK_TABCOL $colName colType ( $comment)? ( columnConstraint )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);
				adaptor.addChild(root_1, stream_colName.nextTree());
				adaptor.addChild(root_1, stream_colType.nextTree());
				// HiveParser.g:2458:39: ( $comment)?
				if ( stream_comment.hasNext() ) {
					adaptor.addChild(root_1, stream_comment.nextNode());
				}
				stream_comment.reset();

				// HiveParser.g:2458:48: ( columnConstraint )?
				if ( stream_columnConstraint.hasNext() ) {
					adaptor.addChild(root_1, stream_columnConstraint.nextTree());
				}
				stream_columnConstraint.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameTypeConstraint"


	public static class columnConstraint_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnConstraint"
	// HiveParser.g:2461:1: columnConstraint[CommonTree fkColName] : ( ( foreignKeyConstraint[$fkColName] ) | ( colConstraint ) );
	public final HiveParser.columnConstraint_return columnConstraint(CommonTree fkColName) throws RecognitionException {
		HiveParser.columnConstraint_return retval = new HiveParser.columnConstraint_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope foreignKeyConstraint901 =null;
		ParserRuleReturnScope colConstraint902 =null;


		 pushMsg(retval.start,"column constraint", state); 
		try {
			// HiveParser.g:2464:5: ( ( foreignKeyConstraint[$fkColName] ) | ( colConstraint ) )
			int alt278=2;
			switch ( input.LA(1) ) {
			case KW_CONSTRAINT:
				{
				int LA278_1 = input.LA(2);
				if ( (LA278_1==Identifier) ) {
					int LA278_8 = input.LA(3);
					if ( (LA278_8==KW_REFERENCES) ) {
						alt278=1;
					}
					else if ( (LA278_8==KW_CHECK||LA278_8==KW_DEFAULT||LA278_8==KW_NOT||LA278_8==KW_PRIMARY||LA278_8==KW_UNIQUE) ) {
						alt278=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 278, 8, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( ((LA278_1 >= KW_ABORT && LA278_1 <= KW_AFTER)||LA278_1==KW_ALLOC_FRACTION||LA278_1==KW_ANALYZE||LA278_1==KW_ARCHIVE||(LA278_1 >= KW_ASC && LA278_1 <= KW_AST)||(LA278_1 >= KW_AUTOCOMMIT && LA278_1 <= KW_BEFORE)||(LA278_1 >= KW_BUCKET && LA278_1 <= KW_BUCKETS)||(LA278_1 >= KW_CACHE && LA278_1 <= KW_CASCADE)||LA278_1==KW_CHANGE||(LA278_1 >= KW_CHECK && LA278_1 <= KW_COLLECTION)||(LA278_1 >= KW_COLUMNS && LA278_1 <= KW_COMMENT)||(LA278_1 >= KW_COMPACT && LA278_1 <= KW_CONCATENATE)||LA278_1==KW_CONTINUE||LA278_1==KW_DATA||(LA278_1 >= KW_DATABASES && LA278_1 <= KW_DEBUG)||(LA278_1 >= KW_DEFAULT && LA278_1 <= KW_DEFINED)||(LA278_1 >= KW_DELIMITED && LA278_1 <= KW_DESC)||(LA278_1 >= KW_DETAIL && LA278_1 <= KW_DISABLE)||(LA278_1 >= KW_DISTRIBUTE && LA278_1 <= KW_DO)||LA278_1==KW_DOW||(LA278_1 >= KW_DUMP && LA278_1 <= KW_ELEM_TYPE)||LA278_1==KW_ENABLE||(LA278_1 >= KW_ENFORCED && LA278_1 <= KW_ESCAPED)||LA278_1==KW_EXCLUSIVE||(LA278_1 >= KW_EXPLAIN && LA278_1 <= KW_EXPRESSION)||(LA278_1 >= KW_FIELDS && LA278_1 <= KW_FIRST)||(LA278_1 >= KW_FORMAT && LA278_1 <= KW_FORMATTED)||LA278_1==KW_FUNCTIONS||LA278_1==KW_GROUP||(LA278_1 >= KW_HOUR && LA278_1 <= KW_IDXPROPERTIES)||(LA278_1 >= KW_INDEX && LA278_1 <= KW_INDEXES)||(LA278_1 >= KW_INPATH && LA278_1 <= KW_INPUTFORMAT)||(LA278_1 >= KW_ISOLATION && LA278_1 <= KW_JAR)||(LA278_1 >= KW_KEY && LA278_1 <= KW_LAST)||LA278_1==KW_LEVEL||(LA278_1 >= KW_LIMIT && LA278_1 <= KW_LOAD)||(LA278_1 >= KW_LOCATION && LA278_1 <= KW_LONG)||LA278_1==KW_MANAGEMENT||(LA278_1 >= KW_MAPJOIN && LA278_1 <= KW_MATERIALIZED)||LA278_1==KW_METADATA||(LA278_1 >= KW_MINUTE && LA278_1 <= KW_MONTH)||(LA278_1 >= KW_MOVE && LA278_1 <= KW_MSCK)||(LA278_1 >= KW_NORELY && LA278_1 <= KW_NOSCAN)||LA278_1==KW_NOVALIDATE||LA278_1==KW_NULLS||LA278_1==KW_OFFSET||(LA278_1 >= KW_OPERATOR && LA278_1 <= KW_OPTION)||LA278_1==KW_ORDER||(LA278_1 >= KW_OUTPUTDRIVER && LA278_1 <= KW_OUTPUTFORMAT)||(LA278_1 >= KW_OVERWRITE && LA278_1 <= KW_OWNER)||(LA278_1 >= KW_PARTITIONED && LA278_1 <= KW_PATH)||(LA278_1 >= KW_PLAN && LA278_1 <= KW_POOL)||LA278_1==KW_PRINCIPALS||(LA278_1 >= KW_PURGE && LA278_1 <= KW_QUERY_PARALLELISM)||LA278_1==KW_READ||(LA278_1 >= KW_REBUILD && LA278_1 <= KW_RECORDWRITER)||(LA278_1 >= KW_RELOAD && LA278_1 <= KW_RESTRICT)||LA278_1==KW_REWRITE||(LA278_1 >= KW_ROLE && LA278_1 <= KW_ROLES)||(LA278_1 >= KW_SCHEDULING_POLICY && LA278_1 <= KW_SECOND)||(LA278_1 >= KW_SEMI && LA278_1 <= KW_SERVER)||(LA278_1 >= KW_SETS && LA278_1 <= KW_SKEWED)||(LA278_1 >= KW_SNAPSHOT && LA278_1 <= KW_SSL)||(LA278_1 >= KW_STATISTICS && LA278_1 <= KW_SUMMARY)||LA278_1==KW_TABLES||(LA278_1 >= KW_TBLPROPERTIES && LA278_1 <= KW_TERMINATED)||LA278_1==KW_TINYINT||(LA278_1 >= KW_TOUCH && LA278_1 <= KW_TRANSACTIONS)||LA278_1==KW_UNARCHIVE||LA278_1==KW_UNDO||LA278_1==KW_UNIONTYPE||(LA278_1 >= KW_UNKNOWN && LA278_1 <= KW_UNSIGNED)||(LA278_1 >= KW_URI && LA278_1 <= KW_USE)||(LA278_1 >= KW_UTC && LA278_1 <= KW_VALIDATE)||LA278_1==KW_VALUE_TYPE||(LA278_1 >= KW_VECTORIZATION && LA278_1 <= KW_WEEK)||LA278_1==KW_WHILE||(LA278_1 >= KW_WORK && LA278_1 <= KW_ZONE)||LA278_1==KW_BATCH||LA278_1==KW_DAYOFWEEK||LA278_1==KW_HOLD_DDLTIME||LA278_1==KW_IGNORE||LA278_1==KW_NO_DROP||LA278_1==KW_OFFLINE||LA278_1==KW_PROTECTION||LA278_1==KW_READONLY||LA278_1==KW_TIMESTAMPTZ) ) {
					int LA278_9 = input.LA(3);
					if ( (LA278_9==KW_REFERENCES) ) {
						alt278=1;
					}
					else if ( (LA278_9==KW_CHECK||LA278_9==KW_DEFAULT||LA278_9==KW_NOT||LA278_9==KW_PRIMARY||LA278_9==KW_UNIQUE) ) {
						alt278=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 278, 9, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 278, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_REFERENCES:
				{
				alt278=1;
				}
				break;
			case KW_CHECK:
			case KW_DEFAULT:
			case KW_NOT:
			case KW_PRIMARY:
			case KW_UNIQUE:
				{
				alt278=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 278, 0, input);
				throw nvae;
			}
			switch (alt278) {
				case 1 :
					// HiveParser.g:2464:7: ( foreignKeyConstraint[$fkColName] )
					{
					root_0 = (ASTNode)adaptor.nil();


					// HiveParser.g:2464:7: ( foreignKeyConstraint[$fkColName] )
					// HiveParser.g:2464:9: foreignKeyConstraint[$fkColName]
					{
					pushFollow(FOLLOW_foreignKeyConstraint_in_columnConstraint15274);
					foreignKeyConstraint901=foreignKeyConstraint(fkColName);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, foreignKeyConstraint901.getTree());

					}

					}
					break;
				case 2 :
					// HiveParser.g:2465:7: ( colConstraint )
					{
					root_0 = (ASTNode)adaptor.nil();


					// HiveParser.g:2465:7: ( colConstraint )
					// HiveParser.g:2465:9: colConstraint
					{
					pushFollow(FOLLOW_colConstraint_in_columnConstraint15287);
					colConstraint902=colConstraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, colConstraint902.getTree());

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnConstraint"


	public static class foreignKeyConstraint_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "foreignKeyConstraint"
	// HiveParser.g:2468:1: foreignKeyConstraint[CommonTree fkColName] : ( KW_CONSTRAINT constraintName= identifier )? KW_REFERENCES tabName= tableName LPAREN colName= columnName RPAREN ( constraintOptsCreate )? -> {$constraintName.tree != null}? ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsCreate )? ) -> ^( TOK_FOREIGN_KEY ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsCreate )? ) ;
	public final HiveParser.foreignKeyConstraint_return foreignKeyConstraint(CommonTree fkColName) throws RecognitionException {
		HiveParser.foreignKeyConstraint_return retval = new HiveParser.foreignKeyConstraint_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_CONSTRAINT903=null;
		Token KW_REFERENCES904=null;
		Token LPAREN905=null;
		Token RPAREN906=null;
		ParserRuleReturnScope constraintName =null;
		ParserRuleReturnScope tabName =null;
		ParserRuleReturnScope colName =null;
		ParserRuleReturnScope constraintOptsCreate907 =null;

		ASTNode KW_CONSTRAINT903_tree=null;
		ASTNode KW_REFERENCES904_tree=null;
		ASTNode LPAREN905_tree=null;
		ASTNode RPAREN906_tree=null;
		RewriteRuleTokenStream stream_KW_CONSTRAINT=new RewriteRuleTokenStream(adaptor,"token KW_CONSTRAINT");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_REFERENCES=new RewriteRuleTokenStream(adaptor,"token KW_REFERENCES");
		RewriteRuleSubtreeStream stream_constraintOptsCreate=new RewriteRuleSubtreeStream(adaptor,"rule constraintOptsCreate");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
		RewriteRuleSubtreeStream stream_columnName=new RewriteRuleSubtreeStream(adaptor,"rule columnName");

		 pushMsg(retval.start,"column constraint", state); 
		try {
			// HiveParser.g:2471:5: ( ( KW_CONSTRAINT constraintName= identifier )? KW_REFERENCES tabName= tableName LPAREN colName= columnName RPAREN ( constraintOptsCreate )? -> {$constraintName.tree != null}? ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsCreate )? ) -> ^( TOK_FOREIGN_KEY ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsCreate )? ) )
			// HiveParser.g:2471:7: ( KW_CONSTRAINT constraintName= identifier )? KW_REFERENCES tabName= tableName LPAREN colName= columnName RPAREN ( constraintOptsCreate )?
			{
			// HiveParser.g:2471:7: ( KW_CONSTRAINT constraintName= identifier )?
			int alt279=2;
			int LA279_0 = input.LA(1);
			if ( (LA279_0==KW_CONSTRAINT) ) {
				alt279=1;
			}
			switch (alt279) {
				case 1 :
					// HiveParser.g:2471:8: KW_CONSTRAINT constraintName= identifier
					{
					KW_CONSTRAINT903=(Token)match(input,KW_CONSTRAINT,FOLLOW_KW_CONSTRAINT_in_foreignKeyConstraint15318); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CONSTRAINT.add(KW_CONSTRAINT903);

					pushFollow(FOLLOW_identifier_in_foreignKeyConstraint15322);
					constraintName=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(constraintName.getTree());
					}
					break;

			}

			KW_REFERENCES904=(Token)match(input,KW_REFERENCES,FOLLOW_KW_REFERENCES_in_foreignKeyConstraint15326); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REFERENCES.add(KW_REFERENCES904);

			pushFollow(FOLLOW_tableName_in_foreignKeyConstraint15330);
			tabName=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tabName.getTree());
			LPAREN905=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_foreignKeyConstraint15332); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN905);

			pushFollow(FOLLOW_columnName_in_foreignKeyConstraint15336);
			colName=columnName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnName.add(colName.getTree());
			RPAREN906=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_foreignKeyConstraint15338); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN906);

			// HiveParser.g:2471:115: ( constraintOptsCreate )?
			int alt280=2;
			int LA280_0 = input.LA(1);
			if ( (LA280_0==KW_DISABLE||LA280_0==KW_ENABLE||LA280_0==KW_ENFORCED||LA280_0==KW_NOT) ) {
				alt280=1;
			}
			switch (alt280) {
				case 1 :
					// HiveParser.g:2471:115: constraintOptsCreate
					{
					pushFollow(FOLLOW_constraintOptsCreate_in_foreignKeyConstraint15340);
					constraintOptsCreate907=constraintOptsCreate();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_constraintOptsCreate.add(constraintOptsCreate907.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: colName, tabName, constraintOptsCreate, colName, constraintOptsCreate, constraintName, tabName
			// token labels: 
			// rule labels: colName, tabName, constraintName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.getTree():null);
			RewriteRuleSubtreeStream stream_tabName=new RewriteRuleSubtreeStream(adaptor,"rule tabName",tabName!=null?tabName.getTree():null);
			RewriteRuleSubtreeStream stream_constraintName=new RewriteRuleSubtreeStream(adaptor,"rule constraintName",constraintName!=null?constraintName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2472:5: -> {$constraintName.tree != null}? ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsCreate )? )
			if ((constraintName!=null?((ASTNode)constraintName.getTree()):null) != null) {
				// HiveParser.g:2473:13: ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsCreate )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_FOREIGN_KEY, "TOK_FOREIGN_KEY"), root_1);
				// HiveParser.g:2473:31: ^( TOK_CONSTRAINT_NAME $constraintName)
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_CONSTRAINT_NAME, "TOK_CONSTRAINT_NAME"), root_2);
				adaptor.addChild(root_2, stream_constraintName.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// HiveParser.g:2473:70: ^( TOK_TABCOLNAME )
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_2);
				adaptor.addChild(root_2, fkColName);
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_1, stream_tabName.nextTree());
				// HiveParser.g:2473:110: ^( TOK_TABCOLNAME $colName)
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_2);
				adaptor.addChild(root_2, stream_colName.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// HiveParser.g:2473:137: ( constraintOptsCreate )?
				if ( stream_constraintOptsCreate.hasNext() ) {
					adaptor.addChild(root_1, stream_constraintOptsCreate.nextTree());
				}
				stream_constraintOptsCreate.reset();

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2474:5: -> ^( TOK_FOREIGN_KEY ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsCreate )? )
			{
				// HiveParser.g:2474:8: ^( TOK_FOREIGN_KEY ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsCreate )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_FOREIGN_KEY, "TOK_FOREIGN_KEY"), root_1);
				// HiveParser.g:2474:26: ^( TOK_TABCOLNAME )
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_2);
				adaptor.addChild(root_2, fkColName);
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_1, stream_tabName.nextTree());
				// HiveParser.g:2474:66: ^( TOK_TABCOLNAME $colName)
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_2);
				adaptor.addChild(root_2, stream_colName.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// HiveParser.g:2474:93: ( constraintOptsCreate )?
				if ( stream_constraintOptsCreate.hasNext() ) {
					adaptor.addChild(root_1, stream_constraintOptsCreate.nextTree());
				}
				stream_constraintOptsCreate.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "foreignKeyConstraint"


	public static class colConstraint_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "colConstraint"
	// HiveParser.g:2477:1: colConstraint : ( KW_CONSTRAINT constraintName= identifier )? columnConstraintType ( constraintOptsCreate )? -> {$constraintName.tree != null}? ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsCreate )? ) -> ^( ( constraintOptsCreate )? ) ;
	public final HiveParser.colConstraint_return colConstraint() throws RecognitionException {
		HiveParser.colConstraint_return retval = new HiveParser.colConstraint_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_CONSTRAINT908=null;
		ParserRuleReturnScope constraintName =null;
		ParserRuleReturnScope columnConstraintType909 =null;
		ParserRuleReturnScope constraintOptsCreate910 =null;

		ASTNode KW_CONSTRAINT908_tree=null;
		RewriteRuleTokenStream stream_KW_CONSTRAINT=new RewriteRuleTokenStream(adaptor,"token KW_CONSTRAINT");
		RewriteRuleSubtreeStream stream_constraintOptsCreate=new RewriteRuleSubtreeStream(adaptor,"rule constraintOptsCreate");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_columnConstraintType=new RewriteRuleSubtreeStream(adaptor,"rule columnConstraintType");

		 pushMsg(retval.start,"column constraint", state); 
		try {
			// HiveParser.g:2480:5: ( ( KW_CONSTRAINT constraintName= identifier )? columnConstraintType ( constraintOptsCreate )? -> {$constraintName.tree != null}? ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsCreate )? ) -> ^( ( constraintOptsCreate )? ) )
			// HiveParser.g:2480:7: ( KW_CONSTRAINT constraintName= identifier )? columnConstraintType ( constraintOptsCreate )?
			{
			// HiveParser.g:2480:7: ( KW_CONSTRAINT constraintName= identifier )?
			int alt281=2;
			int LA281_0 = input.LA(1);
			if ( (LA281_0==KW_CONSTRAINT) ) {
				alt281=1;
			}
			switch (alt281) {
				case 1 :
					// HiveParser.g:2480:8: KW_CONSTRAINT constraintName= identifier
					{
					KW_CONSTRAINT908=(Token)match(input,KW_CONSTRAINT,FOLLOW_KW_CONSTRAINT_in_colConstraint15448); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CONSTRAINT.add(KW_CONSTRAINT908);

					pushFollow(FOLLOW_identifier_in_colConstraint15452);
					constraintName=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(constraintName.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_columnConstraintType_in_colConstraint15456);
			columnConstraintType909=columnConstraintType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnConstraintType.add(columnConstraintType909.getTree());
			// HiveParser.g:2480:71: ( constraintOptsCreate )?
			int alt282=2;
			int LA282_0 = input.LA(1);
			if ( (LA282_0==KW_DISABLE||LA282_0==KW_ENABLE||LA282_0==KW_ENFORCED||LA282_0==KW_NOT) ) {
				alt282=1;
			}
			switch (alt282) {
				case 1 :
					// HiveParser.g:2480:71: constraintOptsCreate
					{
					pushFollow(FOLLOW_constraintOptsCreate_in_colConstraint15458);
					constraintOptsCreate910=constraintOptsCreate();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_constraintOptsCreate.add(constraintOptsCreate910.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: constraintOptsCreate, constraintName, constraintOptsCreate
			// token labels: 
			// rule labels: constraintName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_constraintName=new RewriteRuleSubtreeStream(adaptor,"rule constraintName",constraintName!=null?constraintName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2481:5: -> {$constraintName.tree != null}? ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsCreate )? )
			if ((constraintName!=null?((ASTNode)constraintName.getTree()):null) != null) {
				// HiveParser.g:2482:13: ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsCreate )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((columnConstraintType909!=null?((ASTNode)columnConstraintType909.getTree()):null), root_1);
				// HiveParser.g:2482:44: ^( TOK_CONSTRAINT_NAME $constraintName)
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_CONSTRAINT_NAME, "TOK_CONSTRAINT_NAME"), root_2);
				adaptor.addChild(root_2, stream_constraintName.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// HiveParser.g:2482:83: ( constraintOptsCreate )?
				if ( stream_constraintOptsCreate.hasNext() ) {
					adaptor.addChild(root_1, stream_constraintOptsCreate.nextTree());
				}
				stream_constraintOptsCreate.reset();

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2483:5: -> ^( ( constraintOptsCreate )? )
			{
				// HiveParser.g:2483:8: ^( ( constraintOptsCreate )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((columnConstraintType909!=null?((ASTNode)columnConstraintType909.getTree()):null), root_1);
				// HiveParser.g:2483:39: ( constraintOptsCreate )?
				if ( stream_constraintOptsCreate.hasNext() ) {
					adaptor.addChild(root_1, stream_constraintOptsCreate.nextTree());
				}
				stream_constraintOptsCreate.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "colConstraint"


	public static class alterColumnConstraint_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterColumnConstraint"
	// HiveParser.g:2486:1: alterColumnConstraint[CommonTree fkColName] : ( ( alterForeignKeyConstraint[$fkColName] ) | ( alterColConstraint ) );
	public final HiveParser.alterColumnConstraint_return alterColumnConstraint(CommonTree fkColName) throws RecognitionException {
		HiveParser.alterColumnConstraint_return retval = new HiveParser.alterColumnConstraint_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope alterForeignKeyConstraint911 =null;
		ParserRuleReturnScope alterColConstraint912 =null;


		 pushMsg(retval.start,"alter column constraint", state); 
		try {
			// HiveParser.g:2489:5: ( ( alterForeignKeyConstraint[$fkColName] ) | ( alterColConstraint ) )
			int alt283=2;
			switch ( input.LA(1) ) {
			case KW_CONSTRAINT:
				{
				int LA283_1 = input.LA(2);
				if ( (LA283_1==Identifier) ) {
					int LA283_8 = input.LA(3);
					if ( (LA283_8==KW_REFERENCES) ) {
						alt283=1;
					}
					else if ( (LA283_8==KW_CHECK||LA283_8==KW_DEFAULT||LA283_8==KW_NOT||LA283_8==KW_PRIMARY||LA283_8==KW_UNIQUE) ) {
						alt283=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 283, 8, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( ((LA283_1 >= KW_ABORT && LA283_1 <= KW_AFTER)||LA283_1==KW_ALLOC_FRACTION||LA283_1==KW_ANALYZE||LA283_1==KW_ARCHIVE||(LA283_1 >= KW_ASC && LA283_1 <= KW_AST)||(LA283_1 >= KW_AUTOCOMMIT && LA283_1 <= KW_BEFORE)||(LA283_1 >= KW_BUCKET && LA283_1 <= KW_BUCKETS)||(LA283_1 >= KW_CACHE && LA283_1 <= KW_CASCADE)||LA283_1==KW_CHANGE||(LA283_1 >= KW_CHECK && LA283_1 <= KW_COLLECTION)||(LA283_1 >= KW_COLUMNS && LA283_1 <= KW_COMMENT)||(LA283_1 >= KW_COMPACT && LA283_1 <= KW_CONCATENATE)||LA283_1==KW_CONTINUE||LA283_1==KW_DATA||(LA283_1 >= KW_DATABASES && LA283_1 <= KW_DEBUG)||(LA283_1 >= KW_DEFAULT && LA283_1 <= KW_DEFINED)||(LA283_1 >= KW_DELIMITED && LA283_1 <= KW_DESC)||(LA283_1 >= KW_DETAIL && LA283_1 <= KW_DISABLE)||(LA283_1 >= KW_DISTRIBUTE && LA283_1 <= KW_DO)||LA283_1==KW_DOW||(LA283_1 >= KW_DUMP && LA283_1 <= KW_ELEM_TYPE)||LA283_1==KW_ENABLE||(LA283_1 >= KW_ENFORCED && LA283_1 <= KW_ESCAPED)||LA283_1==KW_EXCLUSIVE||(LA283_1 >= KW_EXPLAIN && LA283_1 <= KW_EXPRESSION)||(LA283_1 >= KW_FIELDS && LA283_1 <= KW_FIRST)||(LA283_1 >= KW_FORMAT && LA283_1 <= KW_FORMATTED)||LA283_1==KW_FUNCTIONS||LA283_1==KW_GROUP||(LA283_1 >= KW_HOUR && LA283_1 <= KW_IDXPROPERTIES)||(LA283_1 >= KW_INDEX && LA283_1 <= KW_INDEXES)||(LA283_1 >= KW_INPATH && LA283_1 <= KW_INPUTFORMAT)||(LA283_1 >= KW_ISOLATION && LA283_1 <= KW_JAR)||(LA283_1 >= KW_KEY && LA283_1 <= KW_LAST)||LA283_1==KW_LEVEL||(LA283_1 >= KW_LIMIT && LA283_1 <= KW_LOAD)||(LA283_1 >= KW_LOCATION && LA283_1 <= KW_LONG)||LA283_1==KW_MANAGEMENT||(LA283_1 >= KW_MAPJOIN && LA283_1 <= KW_MATERIALIZED)||LA283_1==KW_METADATA||(LA283_1 >= KW_MINUTE && LA283_1 <= KW_MONTH)||(LA283_1 >= KW_MOVE && LA283_1 <= KW_MSCK)||(LA283_1 >= KW_NORELY && LA283_1 <= KW_NOSCAN)||LA283_1==KW_NOVALIDATE||LA283_1==KW_NULLS||LA283_1==KW_OFFSET||(LA283_1 >= KW_OPERATOR && LA283_1 <= KW_OPTION)||LA283_1==KW_ORDER||(LA283_1 >= KW_OUTPUTDRIVER && LA283_1 <= KW_OUTPUTFORMAT)||(LA283_1 >= KW_OVERWRITE && LA283_1 <= KW_OWNER)||(LA283_1 >= KW_PARTITIONED && LA283_1 <= KW_PATH)||(LA283_1 >= KW_PLAN && LA283_1 <= KW_POOL)||LA283_1==KW_PRINCIPALS||(LA283_1 >= KW_PURGE && LA283_1 <= KW_QUERY_PARALLELISM)||LA283_1==KW_READ||(LA283_1 >= KW_REBUILD && LA283_1 <= KW_RECORDWRITER)||(LA283_1 >= KW_RELOAD && LA283_1 <= KW_RESTRICT)||LA283_1==KW_REWRITE||(LA283_1 >= KW_ROLE && LA283_1 <= KW_ROLES)||(LA283_1 >= KW_SCHEDULING_POLICY && LA283_1 <= KW_SECOND)||(LA283_1 >= KW_SEMI && LA283_1 <= KW_SERVER)||(LA283_1 >= KW_SETS && LA283_1 <= KW_SKEWED)||(LA283_1 >= KW_SNAPSHOT && LA283_1 <= KW_SSL)||(LA283_1 >= KW_STATISTICS && LA283_1 <= KW_SUMMARY)||LA283_1==KW_TABLES||(LA283_1 >= KW_TBLPROPERTIES && LA283_1 <= KW_TERMINATED)||LA283_1==KW_TINYINT||(LA283_1 >= KW_TOUCH && LA283_1 <= KW_TRANSACTIONS)||LA283_1==KW_UNARCHIVE||LA283_1==KW_UNDO||LA283_1==KW_UNIONTYPE||(LA283_1 >= KW_UNKNOWN && LA283_1 <= KW_UNSIGNED)||(LA283_1 >= KW_URI && LA283_1 <= KW_USE)||(LA283_1 >= KW_UTC && LA283_1 <= KW_VALIDATE)||LA283_1==KW_VALUE_TYPE||(LA283_1 >= KW_VECTORIZATION && LA283_1 <= KW_WEEK)||LA283_1==KW_WHILE||(LA283_1 >= KW_WORK && LA283_1 <= KW_ZONE)||LA283_1==KW_BATCH||LA283_1==KW_DAYOFWEEK||LA283_1==KW_HOLD_DDLTIME||LA283_1==KW_IGNORE||LA283_1==KW_NO_DROP||LA283_1==KW_OFFLINE||LA283_1==KW_PROTECTION||LA283_1==KW_READONLY||LA283_1==KW_TIMESTAMPTZ) ) {
					int LA283_9 = input.LA(3);
					if ( (LA283_9==KW_REFERENCES) ) {
						alt283=1;
					}
					else if ( (LA283_9==KW_CHECK||LA283_9==KW_DEFAULT||LA283_9==KW_NOT||LA283_9==KW_PRIMARY||LA283_9==KW_UNIQUE) ) {
						alt283=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 283, 9, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 283, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_REFERENCES:
				{
				alt283=1;
				}
				break;
			case KW_CHECK:
			case KW_DEFAULT:
			case KW_NOT:
			case KW_PRIMARY:
			case KW_UNIQUE:
				{
				alt283=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 283, 0, input);
				throw nvae;
			}
			switch (alt283) {
				case 1 :
					// HiveParser.g:2489:7: ( alterForeignKeyConstraint[$fkColName] )
					{
					root_0 = (ASTNode)adaptor.nil();


					// HiveParser.g:2489:7: ( alterForeignKeyConstraint[$fkColName] )
					// HiveParser.g:2489:9: alterForeignKeyConstraint[$fkColName]
					{
					pushFollow(FOLLOW_alterForeignKeyConstraint_in_alterColumnConstraint15536);
					alterForeignKeyConstraint911=alterForeignKeyConstraint(fkColName);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterForeignKeyConstraint911.getTree());

					}

					}
					break;
				case 2 :
					// HiveParser.g:2490:7: ( alterColConstraint )
					{
					root_0 = (ASTNode)adaptor.nil();


					// HiveParser.g:2490:7: ( alterColConstraint )
					// HiveParser.g:2490:9: alterColConstraint
					{
					pushFollow(FOLLOW_alterColConstraint_in_alterColumnConstraint15549);
					alterColConstraint912=alterColConstraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterColConstraint912.getTree());

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterColumnConstraint"


	public static class alterForeignKeyConstraint_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterForeignKeyConstraint"
	// HiveParser.g:2493:1: alterForeignKeyConstraint[CommonTree fkColName] : ( KW_CONSTRAINT constraintName= identifier )? KW_REFERENCES tabName= tableName LPAREN colName= columnName RPAREN ( constraintOptsAlter )? -> {$constraintName.tree != null}? ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsAlter )? ) -> ^( TOK_FOREIGN_KEY ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsAlter )? ) ;
	public final HiveParser.alterForeignKeyConstraint_return alterForeignKeyConstraint(CommonTree fkColName) throws RecognitionException {
		HiveParser.alterForeignKeyConstraint_return retval = new HiveParser.alterForeignKeyConstraint_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_CONSTRAINT913=null;
		Token KW_REFERENCES914=null;
		Token LPAREN915=null;
		Token RPAREN916=null;
		ParserRuleReturnScope constraintName =null;
		ParserRuleReturnScope tabName =null;
		ParserRuleReturnScope colName =null;
		ParserRuleReturnScope constraintOptsAlter917 =null;

		ASTNode KW_CONSTRAINT913_tree=null;
		ASTNode KW_REFERENCES914_tree=null;
		ASTNode LPAREN915_tree=null;
		ASTNode RPAREN916_tree=null;
		RewriteRuleTokenStream stream_KW_CONSTRAINT=new RewriteRuleTokenStream(adaptor,"token KW_CONSTRAINT");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_REFERENCES=new RewriteRuleTokenStream(adaptor,"token KW_REFERENCES");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_constraintOptsAlter=new RewriteRuleSubtreeStream(adaptor,"rule constraintOptsAlter");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
		RewriteRuleSubtreeStream stream_columnName=new RewriteRuleSubtreeStream(adaptor,"rule columnName");

		 pushMsg(retval.start,"alter column constraint", state); 
		try {
			// HiveParser.g:2496:5: ( ( KW_CONSTRAINT constraintName= identifier )? KW_REFERENCES tabName= tableName LPAREN colName= columnName RPAREN ( constraintOptsAlter )? -> {$constraintName.tree != null}? ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsAlter )? ) -> ^( TOK_FOREIGN_KEY ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsAlter )? ) )
			// HiveParser.g:2496:7: ( KW_CONSTRAINT constraintName= identifier )? KW_REFERENCES tabName= tableName LPAREN colName= columnName RPAREN ( constraintOptsAlter )?
			{
			// HiveParser.g:2496:7: ( KW_CONSTRAINT constraintName= identifier )?
			int alt284=2;
			int LA284_0 = input.LA(1);
			if ( (LA284_0==KW_CONSTRAINT) ) {
				alt284=1;
			}
			switch (alt284) {
				case 1 :
					// HiveParser.g:2496:8: KW_CONSTRAINT constraintName= identifier
					{
					KW_CONSTRAINT913=(Token)match(input,KW_CONSTRAINT,FOLLOW_KW_CONSTRAINT_in_alterForeignKeyConstraint15580); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CONSTRAINT.add(KW_CONSTRAINT913);

					pushFollow(FOLLOW_identifier_in_alterForeignKeyConstraint15584);
					constraintName=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(constraintName.getTree());
					}
					break;

			}

			KW_REFERENCES914=(Token)match(input,KW_REFERENCES,FOLLOW_KW_REFERENCES_in_alterForeignKeyConstraint15588); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REFERENCES.add(KW_REFERENCES914);

			pushFollow(FOLLOW_tableName_in_alterForeignKeyConstraint15592);
			tabName=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tabName.getTree());
			LPAREN915=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alterForeignKeyConstraint15594); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN915);

			pushFollow(FOLLOW_columnName_in_alterForeignKeyConstraint15598);
			colName=columnName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnName.add(colName.getTree());
			RPAREN916=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alterForeignKeyConstraint15600); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN916);

			// HiveParser.g:2496:115: ( constraintOptsAlter )?
			int alt285=2;
			int LA285_0 = input.LA(1);
			if ( (LA285_0==KW_DISABLE||LA285_0==KW_ENABLE||LA285_0==KW_ENFORCED||LA285_0==KW_NOT) ) {
				alt285=1;
			}
			switch (alt285) {
				case 1 :
					// HiveParser.g:2496:115: constraintOptsAlter
					{
					pushFollow(FOLLOW_constraintOptsAlter_in_alterForeignKeyConstraint15602);
					constraintOptsAlter917=constraintOptsAlter();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_constraintOptsAlter.add(constraintOptsAlter917.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: tabName, constraintOptsAlter, constraintName, colName, colName, constraintOptsAlter, tabName
			// token labels: 
			// rule labels: tabName, colName, constraintName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_tabName=new RewriteRuleSubtreeStream(adaptor,"rule tabName",tabName!=null?tabName.getTree():null);
			RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.getTree():null);
			RewriteRuleSubtreeStream stream_constraintName=new RewriteRuleSubtreeStream(adaptor,"rule constraintName",constraintName!=null?constraintName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2497:5: -> {$constraintName.tree != null}? ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsAlter )? )
			if ((constraintName!=null?((ASTNode)constraintName.getTree()):null) != null) {
				// HiveParser.g:2498:13: ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsAlter )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_FOREIGN_KEY, "TOK_FOREIGN_KEY"), root_1);
				// HiveParser.g:2498:31: ^( TOK_CONSTRAINT_NAME $constraintName)
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_CONSTRAINT_NAME, "TOK_CONSTRAINT_NAME"), root_2);
				adaptor.addChild(root_2, stream_constraintName.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// HiveParser.g:2498:70: ^( TOK_TABCOLNAME )
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_2);
				adaptor.addChild(root_2, fkColName);
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_1, stream_tabName.nextTree());
				// HiveParser.g:2498:110: ^( TOK_TABCOLNAME $colName)
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_2);
				adaptor.addChild(root_2, stream_colName.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// HiveParser.g:2498:137: ( constraintOptsAlter )?
				if ( stream_constraintOptsAlter.hasNext() ) {
					adaptor.addChild(root_1, stream_constraintOptsAlter.nextTree());
				}
				stream_constraintOptsAlter.reset();

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2499:5: -> ^( TOK_FOREIGN_KEY ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsAlter )? )
			{
				// HiveParser.g:2499:8: ^( TOK_FOREIGN_KEY ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsAlter )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_FOREIGN_KEY, "TOK_FOREIGN_KEY"), root_1);
				// HiveParser.g:2499:26: ^( TOK_TABCOLNAME )
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_2);
				adaptor.addChild(root_2, fkColName);
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_1, stream_tabName.nextTree());
				// HiveParser.g:2499:66: ^( TOK_TABCOLNAME $colName)
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_2);
				adaptor.addChild(root_2, stream_colName.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// HiveParser.g:2499:93: ( constraintOptsAlter )?
				if ( stream_constraintOptsAlter.hasNext() ) {
					adaptor.addChild(root_1, stream_constraintOptsAlter.nextTree());
				}
				stream_constraintOptsAlter.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterForeignKeyConstraint"


	public static class alterColConstraint_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterColConstraint"
	// HiveParser.g:2502:1: alterColConstraint : ( KW_CONSTRAINT constraintName= identifier )? columnConstraintType ( constraintOptsAlter )? -> {$constraintName.tree != null}? ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsAlter )? ) -> ^( ( constraintOptsAlter )? ) ;
	public final HiveParser.alterColConstraint_return alterColConstraint() throws RecognitionException {
		HiveParser.alterColConstraint_return retval = new HiveParser.alterColConstraint_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_CONSTRAINT918=null;
		ParserRuleReturnScope constraintName =null;
		ParserRuleReturnScope columnConstraintType919 =null;
		ParserRuleReturnScope constraintOptsAlter920 =null;

		ASTNode KW_CONSTRAINT918_tree=null;
		RewriteRuleTokenStream stream_KW_CONSTRAINT=new RewriteRuleTokenStream(adaptor,"token KW_CONSTRAINT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_columnConstraintType=new RewriteRuleSubtreeStream(adaptor,"rule columnConstraintType");
		RewriteRuleSubtreeStream stream_constraintOptsAlter=new RewriteRuleSubtreeStream(adaptor,"rule constraintOptsAlter");

		 pushMsg(retval.start,"alter column constraint", state); 
		try {
			// HiveParser.g:2505:5: ( ( KW_CONSTRAINT constraintName= identifier )? columnConstraintType ( constraintOptsAlter )? -> {$constraintName.tree != null}? ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsAlter )? ) -> ^( ( constraintOptsAlter )? ) )
			// HiveParser.g:2505:7: ( KW_CONSTRAINT constraintName= identifier )? columnConstraintType ( constraintOptsAlter )?
			{
			// HiveParser.g:2505:7: ( KW_CONSTRAINT constraintName= identifier )?
			int alt286=2;
			int LA286_0 = input.LA(1);
			if ( (LA286_0==KW_CONSTRAINT) ) {
				alt286=1;
			}
			switch (alt286) {
				case 1 :
					// HiveParser.g:2505:8: KW_CONSTRAINT constraintName= identifier
					{
					KW_CONSTRAINT918=(Token)match(input,KW_CONSTRAINT,FOLLOW_KW_CONSTRAINT_in_alterColConstraint15710); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CONSTRAINT.add(KW_CONSTRAINT918);

					pushFollow(FOLLOW_identifier_in_alterColConstraint15714);
					constraintName=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(constraintName.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_columnConstraintType_in_alterColConstraint15718);
			columnConstraintType919=columnConstraintType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnConstraintType.add(columnConstraintType919.getTree());
			// HiveParser.g:2505:71: ( constraintOptsAlter )?
			int alt287=2;
			int LA287_0 = input.LA(1);
			if ( (LA287_0==KW_DISABLE||LA287_0==KW_ENABLE||LA287_0==KW_ENFORCED||LA287_0==KW_NOT) ) {
				alt287=1;
			}
			switch (alt287) {
				case 1 :
					// HiveParser.g:2505:71: constraintOptsAlter
					{
					pushFollow(FOLLOW_constraintOptsAlter_in_alterColConstraint15720);
					constraintOptsAlter920=constraintOptsAlter();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_constraintOptsAlter.add(constraintOptsAlter920.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: constraintName, constraintOptsAlter, constraintOptsAlter
			// token labels: 
			// rule labels: constraintName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_constraintName=new RewriteRuleSubtreeStream(adaptor,"rule constraintName",constraintName!=null?constraintName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2506:5: -> {$constraintName.tree != null}? ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsAlter )? )
			if ((constraintName!=null?((ASTNode)constraintName.getTree()):null) != null) {
				// HiveParser.g:2507:13: ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsAlter )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((columnConstraintType919!=null?((ASTNode)columnConstraintType919.getTree()):null), root_1);
				// HiveParser.g:2507:44: ^( TOK_CONSTRAINT_NAME $constraintName)
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_CONSTRAINT_NAME, "TOK_CONSTRAINT_NAME"), root_2);
				adaptor.addChild(root_2, stream_constraintName.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// HiveParser.g:2507:83: ( constraintOptsAlter )?
				if ( stream_constraintOptsAlter.hasNext() ) {
					adaptor.addChild(root_1, stream_constraintOptsAlter.nextTree());
				}
				stream_constraintOptsAlter.reset();

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2508:5: -> ^( ( constraintOptsAlter )? )
			{
				// HiveParser.g:2508:8: ^( ( constraintOptsAlter )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((columnConstraintType919!=null?((ASTNode)columnConstraintType919.getTree()):null), root_1);
				// HiveParser.g:2508:39: ( constraintOptsAlter )?
				if ( stream_constraintOptsAlter.hasNext() ) {
					adaptor.addChild(root_1, stream_constraintOptsAlter.nextTree());
				}
				stream_constraintOptsAlter.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterColConstraint"


	public static class columnConstraintType_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnConstraintType"
	// HiveParser.g:2511:1: columnConstraintType : ( KW_NOT KW_NULL -> TOK_NOT_NULL | KW_DEFAULT defaultVal -> ^( TOK_DEFAULT_VALUE defaultVal ) | checkConstraint | tableConstraintType );
	public final HiveParser.columnConstraintType_return columnConstraintType() throws RecognitionException {
		HiveParser.columnConstraintType_return retval = new HiveParser.columnConstraintType_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_NOT921=null;
		Token KW_NULL922=null;
		Token KW_DEFAULT923=null;
		ParserRuleReturnScope defaultVal924 =null;
		ParserRuleReturnScope checkConstraint925 =null;
		ParserRuleReturnScope tableConstraintType926 =null;

		ASTNode KW_NOT921_tree=null;
		ASTNode KW_NULL922_tree=null;
		ASTNode KW_DEFAULT923_tree=null;
		RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
		RewriteRuleTokenStream stream_KW_NULL=new RewriteRuleTokenStream(adaptor,"token KW_NULL");
		RewriteRuleTokenStream stream_KW_DEFAULT=new RewriteRuleTokenStream(adaptor,"token KW_DEFAULT");
		RewriteRuleSubtreeStream stream_defaultVal=new RewriteRuleSubtreeStream(adaptor,"rule defaultVal");

		try {
			// HiveParser.g:2512:5: ( KW_NOT KW_NULL -> TOK_NOT_NULL | KW_DEFAULT defaultVal -> ^( TOK_DEFAULT_VALUE defaultVal ) | checkConstraint | tableConstraintType )
			int alt288=4;
			switch ( input.LA(1) ) {
			case KW_NOT:
				{
				alt288=1;
				}
				break;
			case KW_DEFAULT:
				{
				alt288=2;
				}
				break;
			case KW_CHECK:
				{
				alt288=3;
				}
				break;
			case KW_PRIMARY:
			case KW_UNIQUE:
				{
				alt288=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 288, 0, input);
				throw nvae;
			}
			switch (alt288) {
				case 1 :
					// HiveParser.g:2512:7: KW_NOT KW_NULL
					{
					KW_NOT921=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_columnConstraintType15785); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT921);

					KW_NULL922=(Token)match(input,KW_NULL,FOLLOW_KW_NULL_in_columnConstraintType15787); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NULL.add(KW_NULL922);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2512:28: -> TOK_NOT_NULL
					{
						adaptor.addChild(root_0, (ASTNode)adaptor.create(TOK_NOT_NULL, "TOK_NOT_NULL"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:2513:7: KW_DEFAULT defaultVal
					{
					KW_DEFAULT923=(Token)match(input,KW_DEFAULT,FOLLOW_KW_DEFAULT_in_columnConstraintType15808); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DEFAULT.add(KW_DEFAULT923);

					pushFollow(FOLLOW_defaultVal_in_columnConstraintType15810);
					defaultVal924=defaultVal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_defaultVal.add(defaultVal924.getTree());
					// AST REWRITE
					// elements: defaultVal
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2513:28: -> ^( TOK_DEFAULT_VALUE defaultVal )
					{
						// HiveParser.g:2513:34: ^( TOK_DEFAULT_VALUE defaultVal )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DEFAULT_VALUE, "TOK_DEFAULT_VALUE"), root_1);
						adaptor.addChild(root_1, stream_defaultVal.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// HiveParser.g:2514:7: checkConstraint
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_checkConstraint_in_columnConstraintType15828);
					checkConstraint925=checkConstraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, checkConstraint925.getTree());

					}
					break;
				case 4 :
					// HiveParser.g:2515:7: tableConstraintType
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_tableConstraintType_in_columnConstraintType15836);
					tableConstraintType926=tableConstraintType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, tableConstraintType926.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnConstraintType"


	public static class defaultVal_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "defaultVal"
	// HiveParser.g:2518:1: defaultVal : ( constant | function | castExpression );
	public final HiveParser.defaultVal_return defaultVal() throws RecognitionException {
		HiveParser.defaultVal_return retval = new HiveParser.defaultVal_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope constant927 =null;
		ParserRuleReturnScope function928 =null;
		ParserRuleReturnScope castExpression929 =null;


		try {
			// HiveParser.g:2519:5: ( constant | function | castExpression )
			int alt289=3;
			alt289 = dfa289.predict(input);
			switch (alt289) {
				case 1 :
					// HiveParser.g:2519:7: constant
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_constant_in_defaultVal15853);
					constant927=constant();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constant927.getTree());

					}
					break;
				case 2 :
					// HiveParser.g:2520:7: function
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_function_in_defaultVal15861);
					function928=function();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, function928.getTree());

					}
					break;
				case 3 :
					// HiveParser.g:2521:7: castExpression
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_castExpression_in_defaultVal15869);
					castExpression929=castExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, castExpression929.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "defaultVal"


	public static class tableConstraintType_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableConstraintType"
	// HiveParser.g:2524:1: tableConstraintType : ( KW_PRIMARY KW_KEY -> TOK_PRIMARY_KEY | KW_UNIQUE -> TOK_UNIQUE );
	public final HiveParser.tableConstraintType_return tableConstraintType() throws RecognitionException {
		HiveParser.tableConstraintType_return retval = new HiveParser.tableConstraintType_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_PRIMARY930=null;
		Token KW_KEY931=null;
		Token KW_UNIQUE932=null;

		ASTNode KW_PRIMARY930_tree=null;
		ASTNode KW_KEY931_tree=null;
		ASTNode KW_UNIQUE932_tree=null;
		RewriteRuleTokenStream stream_KW_PRIMARY=new RewriteRuleTokenStream(adaptor,"token KW_PRIMARY");
		RewriteRuleTokenStream stream_KW_UNIQUE=new RewriteRuleTokenStream(adaptor,"token KW_UNIQUE");
		RewriteRuleTokenStream stream_KW_KEY=new RewriteRuleTokenStream(adaptor,"token KW_KEY");

		try {
			// HiveParser.g:2525:5: ( KW_PRIMARY KW_KEY -> TOK_PRIMARY_KEY | KW_UNIQUE -> TOK_UNIQUE )
			int alt290=2;
			int LA290_0 = input.LA(1);
			if ( (LA290_0==KW_PRIMARY) ) {
				alt290=1;
			}
			else if ( (LA290_0==KW_UNIQUE) ) {
				alt290=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 290, 0, input);
				throw nvae;
			}

			switch (alt290) {
				case 1 :
					// HiveParser.g:2525:7: KW_PRIMARY KW_KEY
					{
					KW_PRIMARY930=(Token)match(input,KW_PRIMARY,FOLLOW_KW_PRIMARY_in_tableConstraintType15886); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_PRIMARY.add(KW_PRIMARY930);

					KW_KEY931=(Token)match(input,KW_KEY,FOLLOW_KW_KEY_in_tableConstraintType15888); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_KEY.add(KW_KEY931);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2525:28: -> TOK_PRIMARY_KEY
					{
						adaptor.addChild(root_0, (ASTNode)adaptor.create(TOK_PRIMARY_KEY, "TOK_PRIMARY_KEY"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:2526:7: KW_UNIQUE
					{
					KW_UNIQUE932=(Token)match(input,KW_UNIQUE,FOLLOW_KW_UNIQUE_in_tableConstraintType15906); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_UNIQUE.add(KW_UNIQUE932);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2526:28: -> TOK_UNIQUE
					{
						adaptor.addChild(root_0, (ASTNode)adaptor.create(TOK_UNIQUE, "TOK_UNIQUE"));
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableConstraintType"


	public static class constraintOptsCreate_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "constraintOptsCreate"
	// HiveParser.g:2529:1: constraintOptsCreate : enableValidateSpecification ( relySpecification )? ;
	public final HiveParser.constraintOptsCreate_return constraintOptsCreate() throws RecognitionException {
		HiveParser.constraintOptsCreate_return retval = new HiveParser.constraintOptsCreate_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope enableValidateSpecification933 =null;
		ParserRuleReturnScope relySpecification934 =null;


		try {
			// HiveParser.g:2530:5: ( enableValidateSpecification ( relySpecification )? )
			// HiveParser.g:2530:7: enableValidateSpecification ( relySpecification )?
			{
			root_0 = (ASTNode)adaptor.nil();


			pushFollow(FOLLOW_enableValidateSpecification_in_constraintOptsCreate15941);
			enableValidateSpecification933=enableValidateSpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, enableValidateSpecification933.getTree());

			// HiveParser.g:2530:35: ( relySpecification )?
			int alt291=2;
			int LA291_0 = input.LA(1);
			if ( (LA291_0==KW_NORELY||LA291_0==KW_RELY) ) {
				alt291=1;
			}
			switch (alt291) {
				case 1 :
					// HiveParser.g:2530:35: relySpecification
					{
					pushFollow(FOLLOW_relySpecification_in_constraintOptsCreate15943);
					relySpecification934=relySpecification();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, relySpecification934.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constraintOptsCreate"


	public static class constraintOptsAlter_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "constraintOptsAlter"
	// HiveParser.g:2533:1: constraintOptsAlter : enableValidateSpecification ( relySpecification )? ;
	public final HiveParser.constraintOptsAlter_return constraintOptsAlter() throws RecognitionException {
		HiveParser.constraintOptsAlter_return retval = new HiveParser.constraintOptsAlter_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope enableValidateSpecification935 =null;
		ParserRuleReturnScope relySpecification936 =null;


		try {
			// HiveParser.g:2534:5: ( enableValidateSpecification ( relySpecification )? )
			// HiveParser.g:2534:7: enableValidateSpecification ( relySpecification )?
			{
			root_0 = (ASTNode)adaptor.nil();


			pushFollow(FOLLOW_enableValidateSpecification_in_constraintOptsAlter15961);
			enableValidateSpecification935=enableValidateSpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, enableValidateSpecification935.getTree());

			// HiveParser.g:2534:35: ( relySpecification )?
			int alt292=2;
			int LA292_0 = input.LA(1);
			if ( (LA292_0==KW_NORELY||LA292_0==KW_RELY) ) {
				alt292=1;
			}
			switch (alt292) {
				case 1 :
					// HiveParser.g:2534:35: relySpecification
					{
					pushFollow(FOLLOW_relySpecification_in_constraintOptsAlter15963);
					relySpecification936=relySpecification();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, relySpecification936.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constraintOptsAlter"


	public static class columnNameColonType_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnNameColonType"
	// HiveParser.g:2537:1: columnNameColonType : colName= identifier COLON colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) ;
	public final HiveParser.columnNameColonType_return columnNameColonType() throws RecognitionException {
		HiveParser.columnNameColonType_return retval = new HiveParser.columnNameColonType_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token comment=null;
		Token COLON937=null;
		Token KW_COMMENT939=null;
		ParserRuleReturnScope colName =null;
		ParserRuleReturnScope colType938 =null;

		ASTNode comment_tree=null;
		ASTNode COLON937_tree=null;
		ASTNode KW_COMMENT939_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");

		 pushMsg(retval.start,"column specification", state); 
		try {
			// HiveParser.g:2540:5: (colName= identifier COLON colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) )
			// HiveParser.g:2540:7: colName= identifier COLON colType ( KW_COMMENT comment= StringLiteral )?
			{
			pushFollow(FOLLOW_identifier_in_columnNameColonType15993);
			colName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(colName.getTree());
			COLON937=(Token)match(input,COLON,FOLLOW_COLON_in_columnNameColonType15995); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_COLON.add(COLON937);

			pushFollow(FOLLOW_colType_in_columnNameColonType15997);
			colType938=colType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_colType.add(colType938.getTree());
			// HiveParser.g:2540:40: ( KW_COMMENT comment= StringLiteral )?
			int alt293=2;
			int LA293_0 = input.LA(1);
			if ( (LA293_0==KW_COMMENT) ) {
				alt293=1;
			}
			switch (alt293) {
				case 1 :
					// HiveParser.g:2540:41: KW_COMMENT comment= StringLiteral
					{
					KW_COMMENT939=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameColonType16000); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT939);

					comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameColonType16004); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(comment);

					}
					break;

			}

			// AST REWRITE
			// elements: comment, colName, colType, colType, colName
			// token labels: comment
			// rule labels: colName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2541:5: -> {$comment == null}? ^( TOK_TABCOL $colName colType )
			if (comment == null) {
				// HiveParser.g:2541:28: ^( TOK_TABCOL $colName colType )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);
				adaptor.addChild(root_1, stream_colName.nextTree());
				adaptor.addChild(root_1, stream_colType.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2542:5: -> ^( TOK_TABCOL $colName colType $comment)
			{
				// HiveParser.g:2542:28: ^( TOK_TABCOL $colName colType $comment)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);
				adaptor.addChild(root_1, stream_colName.nextTree());
				adaptor.addChild(root_1, stream_colType.nextTree());
				adaptor.addChild(root_1, stream_comment.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameColonType"


	public static class colType_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "colType"
	// HiveParser.g:2545:1: colType : type ;
	public final HiveParser.colType_return colType() throws RecognitionException {
		HiveParser.colType_return retval = new HiveParser.colType_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope type940 =null;


		 pushMsg(retval.start,"column type", state); 
		try {
			// HiveParser.g:2548:5: ( type )
			// HiveParser.g:2548:7: type
			{
			root_0 = (ASTNode)adaptor.nil();


			pushFollow(FOLLOW_type_in_colType16088);
			type940=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type940.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "colType"


	public static class colTypeList_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "colTypeList"
	// HiveParser.g:2551:1: colTypeList : colType ( COMMA colType )* -> ^( TOK_COLTYPELIST ( colType )+ ) ;
	public final HiveParser.colTypeList_return colTypeList() throws RecognitionException {
		HiveParser.colTypeList_return retval = new HiveParser.colTypeList_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token COMMA942=null;
		ParserRuleReturnScope colType941 =null;
		ParserRuleReturnScope colType943 =null;

		ASTNode COMMA942_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");

		 pushMsg(retval.start,"column type list", state); 
		try {
			// HiveParser.g:2554:5: ( colType ( COMMA colType )* -> ^( TOK_COLTYPELIST ( colType )+ ) )
			// HiveParser.g:2554:7: colType ( COMMA colType )*
			{
			pushFollow(FOLLOW_colType_in_colTypeList16115);
			colType941=colType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_colType.add(colType941.getTree());
			// HiveParser.g:2554:15: ( COMMA colType )*
			loop294:
			while (true) {
				int alt294=2;
				int LA294_0 = input.LA(1);
				if ( (LA294_0==COMMA) ) {
					alt294=1;
				}

				switch (alt294) {
				case 1 :
					// HiveParser.g:2554:16: COMMA colType
					{
					COMMA942=(Token)match(input,COMMA,FOLLOW_COMMA_in_colTypeList16118); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA942);

					pushFollow(FOLLOW_colType_in_colTypeList16120);
					colType943=colType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_colType.add(colType943.getTree());
					}
					break;

				default :
					break loop294;
				}
			}

			// AST REWRITE
			// elements: colType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2554:32: -> ^( TOK_COLTYPELIST ( colType )+ )
			{
				// HiveParser.g:2554:35: ^( TOK_COLTYPELIST ( colType )+ )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_COLTYPELIST, "TOK_COLTYPELIST"), root_1);
				if ( !(stream_colType.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_colType.hasNext() ) {
					adaptor.addChild(root_1, stream_colType.nextTree());
				}
				stream_colType.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "colTypeList"


	public static class type_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "type"
	// HiveParser.g:2557:1: type : ( primitiveType | listType | structType | mapType | unionType );
	public final HiveParser.type_return type() throws RecognitionException {
		HiveParser.type_return retval = new HiveParser.type_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope primitiveType944 =null;
		ParserRuleReturnScope listType945 =null;
		ParserRuleReturnScope structType946 =null;
		ParserRuleReturnScope mapType947 =null;
		ParserRuleReturnScope unionType948 =null;


		try {
			// HiveParser.g:2558:5: ( primitiveType | listType | structType | mapType | unionType )
			int alt295=5;
			switch ( input.LA(1) ) {
			case KW_BIGINT:
			case KW_BINARY:
			case KW_BOOLEAN:
			case KW_CHAR:
			case KW_DATE:
			case KW_DATETIME:
			case KW_DECIMAL:
			case KW_DOUBLE:
			case KW_FLOAT:
			case KW_INT:
			case KW_REAL:
			case KW_SMALLINT:
			case KW_STRING:
			case KW_TIMESTAMP:
			case KW_TIMESTAMPLOCALTZ:
			case KW_TINYINT:
			case KW_VARCHAR:
				{
				alt295=1;
				}
				break;
			case KW_ARRAY:
				{
				alt295=2;
				}
				break;
			case KW_STRUCT:
				{
				alt295=3;
				}
				break;
			case KW_MAP:
				{
				alt295=4;
				}
				break;
			case KW_UNIONTYPE:
				{
				alt295=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 295, 0, input);
				throw nvae;
			}
			switch (alt295) {
				case 1 :
					// HiveParser.g:2558:7: primitiveType
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_primitiveType_in_type16148);
					primitiveType944=primitiveType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveType944.getTree());

					}
					break;
				case 2 :
					// HiveParser.g:2559:7: listType
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_listType_in_type16156);
					listType945=listType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, listType945.getTree());

					}
					break;
				case 3 :
					// HiveParser.g:2560:7: structType
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_structType_in_type16164);
					structType946=structType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, structType946.getTree());

					}
					break;
				case 4 :
					// HiveParser.g:2561:7: mapType
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_mapType_in_type16172);
					mapType947=mapType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, mapType947.getTree());

					}
					break;
				case 5 :
					// HiveParser.g:2562:7: unionType
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_unionType_in_type16180);
					unionType948=unionType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unionType948.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type"


	public static class primitiveType_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "primitiveType"
	// HiveParser.g:2564:1: primitiveType : ( KW_TINYINT -> TOK_TINYINT | KW_SMALLINT -> TOK_SMALLINT | KW_INT -> TOK_INT | KW_BIGINT -> TOK_BIGINT | KW_BOOLEAN -> TOK_BOOLEAN | KW_FLOAT -> TOK_FLOAT | KW_REAL -> TOK_FLOAT | KW_DOUBLE ( KW_PRECISION )? -> TOK_DOUBLE | KW_DATE -> TOK_DATE | KW_DATETIME -> TOK_DATETIME | KW_TIMESTAMP -> TOK_TIMESTAMP | KW_TIMESTAMPLOCALTZ -> TOK_TIMESTAMPLOCALTZ | KW_TIMESTAMP KW_WITH KW_LOCAL KW_TIME KW_ZONE -> TOK_TIMESTAMPLOCALTZ | KW_STRING -> TOK_STRING | KW_BINARY -> TOK_BINARY | KW_DECIMAL ( LPAREN prec= Number ( COMMA scale= Number )? RPAREN )? -> ^( TOK_DECIMAL ( $prec)? ( $scale)? ) | KW_VARCHAR LPAREN length= Number RPAREN -> ^( TOK_VARCHAR $length) | KW_CHAR LPAREN length= Number RPAREN -> ^( TOK_CHAR $length) );
	public final HiveParser.primitiveType_return primitiveType() throws RecognitionException {
		HiveParser.primitiveType_return retval = new HiveParser.primitiveType_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token prec=null;
		Token scale=null;
		Token length=null;
		Token KW_TINYINT949=null;
		Token KW_SMALLINT950=null;
		Token KW_INT951=null;
		Token KW_BIGINT952=null;
		Token KW_BOOLEAN953=null;
		Token KW_FLOAT954=null;
		Token KW_REAL955=null;
		Token KW_DOUBLE956=null;
		Token KW_PRECISION957=null;
		Token KW_DATE958=null;
		Token KW_DATETIME959=null;
		Token KW_TIMESTAMP960=null;
		Token KW_TIMESTAMPLOCALTZ961=null;
		Token KW_TIMESTAMP962=null;
		Token KW_WITH963=null;
		Token KW_LOCAL964=null;
		Token KW_TIME965=null;
		Token KW_ZONE966=null;
		Token KW_STRING967=null;
		Token KW_BINARY968=null;
		Token KW_DECIMAL969=null;
		Token LPAREN970=null;
		Token COMMA971=null;
		Token RPAREN972=null;
		Token KW_VARCHAR973=null;
		Token LPAREN974=null;
		Token RPAREN975=null;
		Token KW_CHAR976=null;
		Token LPAREN977=null;
		Token RPAREN978=null;

		ASTNode prec_tree=null;
		ASTNode scale_tree=null;
		ASTNode length_tree=null;
		ASTNode KW_TINYINT949_tree=null;
		ASTNode KW_SMALLINT950_tree=null;
		ASTNode KW_INT951_tree=null;
		ASTNode KW_BIGINT952_tree=null;
		ASTNode KW_BOOLEAN953_tree=null;
		ASTNode KW_FLOAT954_tree=null;
		ASTNode KW_REAL955_tree=null;
		ASTNode KW_DOUBLE956_tree=null;
		ASTNode KW_PRECISION957_tree=null;
		ASTNode KW_DATE958_tree=null;
		ASTNode KW_DATETIME959_tree=null;
		ASTNode KW_TIMESTAMP960_tree=null;
		ASTNode KW_TIMESTAMPLOCALTZ961_tree=null;
		ASTNode KW_TIMESTAMP962_tree=null;
		ASTNode KW_WITH963_tree=null;
		ASTNode KW_LOCAL964_tree=null;
		ASTNode KW_TIME965_tree=null;
		ASTNode KW_ZONE966_tree=null;
		ASTNode KW_STRING967_tree=null;
		ASTNode KW_BINARY968_tree=null;
		ASTNode KW_DECIMAL969_tree=null;
		ASTNode LPAREN970_tree=null;
		ASTNode COMMA971_tree=null;
		ASTNode RPAREN972_tree=null;
		ASTNode KW_VARCHAR973_tree=null;
		ASTNode LPAREN974_tree=null;
		ASTNode RPAREN975_tree=null;
		ASTNode KW_CHAR976_tree=null;
		ASTNode LPAREN977_tree=null;
		ASTNode RPAREN978_tree=null;
		RewriteRuleTokenStream stream_KW_DATETIME=new RewriteRuleTokenStream(adaptor,"token KW_DATETIME");
		RewriteRuleTokenStream stream_KW_TIMESTAMP=new RewriteRuleTokenStream(adaptor,"token KW_TIMESTAMP");
		RewriteRuleTokenStream stream_KW_BOOLEAN=new RewriteRuleTokenStream(adaptor,"token KW_BOOLEAN");
		RewriteRuleTokenStream stream_KW_DOUBLE=new RewriteRuleTokenStream(adaptor,"token KW_DOUBLE");
		RewriteRuleTokenStream stream_KW_TIME=new RewriteRuleTokenStream(adaptor,"token KW_TIME");
		RewriteRuleTokenStream stream_KW_CHAR=new RewriteRuleTokenStream(adaptor,"token KW_CHAR");
		RewriteRuleTokenStream stream_KW_INT=new RewriteRuleTokenStream(adaptor,"token KW_INT");
		RewriteRuleTokenStream stream_KW_DECIMAL=new RewriteRuleTokenStream(adaptor,"token KW_DECIMAL");
		RewriteRuleTokenStream stream_KW_ZONE=new RewriteRuleTokenStream(adaptor,"token KW_ZONE");
		RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
		RewriteRuleTokenStream stream_KW_TINYINT=new RewriteRuleTokenStream(adaptor,"token KW_TINYINT");
		RewriteRuleTokenStream stream_KW_REAL=new RewriteRuleTokenStream(adaptor,"token KW_REAL");
		RewriteRuleTokenStream stream_KW_PRECISION=new RewriteRuleTokenStream(adaptor,"token KW_PRECISION");
		RewriteRuleTokenStream stream_KW_LOCAL=new RewriteRuleTokenStream(adaptor,"token KW_LOCAL");
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_SMALLINT=new RewriteRuleTokenStream(adaptor,"token KW_SMALLINT");
		RewriteRuleTokenStream stream_KW_DATE=new RewriteRuleTokenStream(adaptor,"token KW_DATE");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_BIGINT=new RewriteRuleTokenStream(adaptor,"token KW_BIGINT");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_STRING=new RewriteRuleTokenStream(adaptor,"token KW_STRING");
		RewriteRuleTokenStream stream_KW_VARCHAR=new RewriteRuleTokenStream(adaptor,"token KW_VARCHAR");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_FLOAT=new RewriteRuleTokenStream(adaptor,"token KW_FLOAT");
		RewriteRuleTokenStream stream_KW_TIMESTAMPLOCALTZ=new RewriteRuleTokenStream(adaptor,"token KW_TIMESTAMPLOCALTZ");
		RewriteRuleTokenStream stream_KW_BINARY=new RewriteRuleTokenStream(adaptor,"token KW_BINARY");

		 pushMsg(retval.start,"primitive type specification", state); 
		try {
			// HiveParser.g:2567:5: ( KW_TINYINT -> TOK_TINYINT | KW_SMALLINT -> TOK_SMALLINT | KW_INT -> TOK_INT | KW_BIGINT -> TOK_BIGINT | KW_BOOLEAN -> TOK_BOOLEAN | KW_FLOAT -> TOK_FLOAT | KW_REAL -> TOK_FLOAT | KW_DOUBLE ( KW_PRECISION )? -> TOK_DOUBLE | KW_DATE -> TOK_DATE | KW_DATETIME -> TOK_DATETIME | KW_TIMESTAMP -> TOK_TIMESTAMP | KW_TIMESTAMPLOCALTZ -> TOK_TIMESTAMPLOCALTZ | KW_TIMESTAMP KW_WITH KW_LOCAL KW_TIME KW_ZONE -> TOK_TIMESTAMPLOCALTZ | KW_STRING -> TOK_STRING | KW_BINARY -> TOK_BINARY | KW_DECIMAL ( LPAREN prec= Number ( COMMA scale= Number )? RPAREN )? -> ^( TOK_DECIMAL ( $prec)? ( $scale)? ) | KW_VARCHAR LPAREN length= Number RPAREN -> ^( TOK_VARCHAR $length) | KW_CHAR LPAREN length= Number RPAREN -> ^( TOK_CHAR $length) )
			int alt299=18;
			switch ( input.LA(1) ) {
			case KW_TINYINT:
				{
				alt299=1;
				}
				break;
			case KW_SMALLINT:
				{
				alt299=2;
				}
				break;
			case KW_INT:
				{
				alt299=3;
				}
				break;
			case KW_BIGINT:
				{
				alt299=4;
				}
				break;
			case KW_BOOLEAN:
				{
				alt299=5;
				}
				break;
			case KW_FLOAT:
				{
				alt299=6;
				}
				break;
			case KW_REAL:
				{
				alt299=7;
				}
				break;
			case KW_DOUBLE:
				{
				alt299=8;
				}
				break;
			case KW_DATE:
				{
				alt299=9;
				}
				break;
			case KW_DATETIME:
				{
				alt299=10;
				}
				break;
			case KW_TIMESTAMP:
				{
				int LA299_11 = input.LA(2);
				if ( (LA299_11==KW_WITH) ) {
					alt299=13;
				}
				else if ( (LA299_11==EOF||LA299_11==COMMA||LA299_11==GREATERTHAN||LA299_11==KW_AFTER||LA299_11==KW_CASCADE||(LA299_11 >= KW_CHECK && LA299_11 <= KW_CLUSTER)||LA299_11==KW_COMMENT||LA299_11==KW_CONSTRAINT||LA299_11==KW_DEFAULT||LA299_11==KW_DISTRIBUTE||LA299_11==KW_EXCEPT||LA299_11==KW_FIRST||LA299_11==KW_FROM||LA299_11==KW_GROUP||LA299_11==KW_HAVING||LA299_11==KW_INSERT||LA299_11==KW_INTERSECT||LA299_11==KW_LATERAL||LA299_11==KW_LIMIT||LA299_11==KW_MAP||LA299_11==KW_MINUS||LA299_11==KW_NOT||LA299_11==KW_ORDER||LA299_11==KW_PRIMARY||LA299_11==KW_RECORDREADER||(LA299_11 >= KW_REDUCE && LA299_11 <= KW_REFERENCES)||LA299_11==KW_RESTRICT||LA299_11==KW_ROW||LA299_11==KW_SELECT||LA299_11==KW_SORT||LA299_11==KW_UNION||LA299_11==KW_UNIQUE||LA299_11==KW_WHERE||LA299_11==KW_WINDOW||LA299_11==RPAREN) ) {
					alt299=11;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 299, 11, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_TIMESTAMPLOCALTZ:
				{
				alt299=12;
				}
				break;
			case KW_STRING:
				{
				alt299=14;
				}
				break;
			case KW_BINARY:
				{
				alt299=15;
				}
				break;
			case KW_DECIMAL:
				{
				alt299=16;
				}
				break;
			case KW_VARCHAR:
				{
				alt299=17;
				}
				break;
			case KW_CHAR:
				{
				alt299=18;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 299, 0, input);
				throw nvae;
			}
			switch (alt299) {
				case 1 :
					// HiveParser.g:2567:7: KW_TINYINT
					{
					KW_TINYINT949=(Token)match(input,KW_TINYINT,FOLLOW_KW_TINYINT_in_primitiveType16202); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TINYINT.add(KW_TINYINT949);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2567:24: -> TOK_TINYINT
					{
						adaptor.addChild(root_0, (ASTNode)adaptor.create(TOK_TINYINT, "TOK_TINYINT"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:2568:7: KW_SMALLINT
					{
					KW_SMALLINT950=(Token)match(input,KW_SMALLINT,FOLLOW_KW_SMALLINT_in_primitiveType16223); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SMALLINT.add(KW_SMALLINT950);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2568:24: -> TOK_SMALLINT
					{
						adaptor.addChild(root_0, (ASTNode)adaptor.create(TOK_SMALLINT, "TOK_SMALLINT"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// HiveParser.g:2569:7: KW_INT
					{
					KW_INT951=(Token)match(input,KW_INT,FOLLOW_KW_INT_in_primitiveType16243); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INT.add(KW_INT951);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2569:24: -> TOK_INT
					{
						adaptor.addChild(root_0, (ASTNode)adaptor.create(TOK_INT, "TOK_INT"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// HiveParser.g:2570:7: KW_BIGINT
					{
					KW_BIGINT952=(Token)match(input,KW_BIGINT,FOLLOW_KW_BIGINT_in_primitiveType16268); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_BIGINT.add(KW_BIGINT952);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2570:24: -> TOK_BIGINT
					{
						adaptor.addChild(root_0, (ASTNode)adaptor.create(TOK_BIGINT, "TOK_BIGINT"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// HiveParser.g:2571:7: KW_BOOLEAN
					{
					KW_BOOLEAN953=(Token)match(input,KW_BOOLEAN,FOLLOW_KW_BOOLEAN_in_primitiveType16290); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_BOOLEAN.add(KW_BOOLEAN953);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2571:24: -> TOK_BOOLEAN
					{
						adaptor.addChild(root_0, (ASTNode)adaptor.create(TOK_BOOLEAN, "TOK_BOOLEAN"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 6 :
					// HiveParser.g:2572:7: KW_FLOAT
					{
					KW_FLOAT954=(Token)match(input,KW_FLOAT,FOLLOW_KW_FLOAT_in_primitiveType16311); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_FLOAT.add(KW_FLOAT954);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2572:24: -> TOK_FLOAT
					{
						adaptor.addChild(root_0, (ASTNode)adaptor.create(TOK_FLOAT, "TOK_FLOAT"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 7 :
					// HiveParser.g:2573:7: KW_REAL
					{
					KW_REAL955=(Token)match(input,KW_REAL,FOLLOW_KW_REAL_in_primitiveType16334); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_REAL.add(KW_REAL955);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2573:23: -> TOK_FLOAT
					{
						adaptor.addChild(root_0, (ASTNode)adaptor.create(TOK_FLOAT, "TOK_FLOAT"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 8 :
					// HiveParser.g:2574:7: KW_DOUBLE ( KW_PRECISION )?
					{
					KW_DOUBLE956=(Token)match(input,KW_DOUBLE,FOLLOW_KW_DOUBLE_in_primitiveType16358); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DOUBLE.add(KW_DOUBLE956);

					// HiveParser.g:2574:17: ( KW_PRECISION )?
					int alt296=2;
					int LA296_0 = input.LA(1);
					if ( (LA296_0==KW_PRECISION) ) {
						alt296=1;
					}
					switch (alt296) {
						case 1 :
							// HiveParser.g:2574:17: KW_PRECISION
							{
							KW_PRECISION957=(Token)match(input,KW_PRECISION,FOLLOW_KW_PRECISION_in_primitiveType16360); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_PRECISION.add(KW_PRECISION957);

							}
							break;

					}

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2574:37: -> TOK_DOUBLE
					{
						adaptor.addChild(root_0, (ASTNode)adaptor.create(TOK_DOUBLE, "TOK_DOUBLE"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 9 :
					// HiveParser.g:2575:7: KW_DATE
					{
					KW_DATE958=(Token)match(input,KW_DATE,FOLLOW_KW_DATE_in_primitiveType16382); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DATE.add(KW_DATE958);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2575:24: -> TOK_DATE
					{
						adaptor.addChild(root_0, (ASTNode)adaptor.create(TOK_DATE, "TOK_DATE"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 10 :
					// HiveParser.g:2576:7: KW_DATETIME
					{
					KW_DATETIME959=(Token)match(input,KW_DATETIME,FOLLOW_KW_DATETIME_in_primitiveType16406); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DATETIME.add(KW_DATETIME959);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2576:24: -> TOK_DATETIME
					{
						adaptor.addChild(root_0, (ASTNode)adaptor.create(TOK_DATETIME, "TOK_DATETIME"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 11 :
					// HiveParser.g:2577:7: KW_TIMESTAMP
					{
					KW_TIMESTAMP960=(Token)match(input,KW_TIMESTAMP,FOLLOW_KW_TIMESTAMP_in_primitiveType16426); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TIMESTAMP.add(KW_TIMESTAMP960);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2577:24: -> TOK_TIMESTAMP
					{
						adaptor.addChild(root_0, (ASTNode)adaptor.create(TOK_TIMESTAMP, "TOK_TIMESTAMP"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 12 :
					// HiveParser.g:2578:7: KW_TIMESTAMPLOCALTZ
					{
					KW_TIMESTAMPLOCALTZ961=(Token)match(input,KW_TIMESTAMPLOCALTZ,FOLLOW_KW_TIMESTAMPLOCALTZ_in_primitiveType16445); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TIMESTAMPLOCALTZ.add(KW_TIMESTAMPLOCALTZ961);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2578:29: -> TOK_TIMESTAMPLOCALTZ
					{
						adaptor.addChild(root_0, (ASTNode)adaptor.create(TOK_TIMESTAMPLOCALTZ, "TOK_TIMESTAMPLOCALTZ"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 13 :
					// HiveParser.g:2580:7: KW_TIMESTAMP KW_WITH KW_LOCAL KW_TIME KW_ZONE
					{
					KW_TIMESTAMP962=(Token)match(input,KW_TIMESTAMP,FOLLOW_KW_TIMESTAMP_in_primitiveType16467); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TIMESTAMP.add(KW_TIMESTAMP962);

					KW_WITH963=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_primitiveType16469); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH963);

					KW_LOCAL964=(Token)match(input,KW_LOCAL,FOLLOW_KW_LOCAL_in_primitiveType16471); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_LOCAL.add(KW_LOCAL964);

					KW_TIME965=(Token)match(input,KW_TIME,FOLLOW_KW_TIME_in_primitiveType16473); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TIME.add(KW_TIME965);

					KW_ZONE966=(Token)match(input,KW_ZONE,FOLLOW_KW_ZONE_in_primitiveType16475); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ZONE.add(KW_ZONE966);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2580:53: -> TOK_TIMESTAMPLOCALTZ
					{
						adaptor.addChild(root_0, (ASTNode)adaptor.create(TOK_TIMESTAMPLOCALTZ, "TOK_TIMESTAMPLOCALTZ"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 14 :
					// HiveParser.g:2585:7: KW_STRING
					{
					KW_STRING967=(Token)match(input,KW_STRING,FOLLOW_KW_STRING_in_primitiveType16507); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_STRING.add(KW_STRING967);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2585:24: -> TOK_STRING
					{
						adaptor.addChild(root_0, (ASTNode)adaptor.create(TOK_STRING, "TOK_STRING"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 15 :
					// HiveParser.g:2586:7: KW_BINARY
					{
					KW_BINARY968=(Token)match(input,KW_BINARY,FOLLOW_KW_BINARY_in_primitiveType16529); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_BINARY.add(KW_BINARY968);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2586:24: -> TOK_BINARY
					{
						adaptor.addChild(root_0, (ASTNode)adaptor.create(TOK_BINARY, "TOK_BINARY"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 16 :
					// HiveParser.g:2587:7: KW_DECIMAL ( LPAREN prec= Number ( COMMA scale= Number )? RPAREN )?
					{
					KW_DECIMAL969=(Token)match(input,KW_DECIMAL,FOLLOW_KW_DECIMAL_in_primitiveType16551); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DECIMAL.add(KW_DECIMAL969);

					// HiveParser.g:2587:18: ( LPAREN prec= Number ( COMMA scale= Number )? RPAREN )?
					int alt298=2;
					int LA298_0 = input.LA(1);
					if ( (LA298_0==LPAREN) ) {
						alt298=1;
					}
					switch (alt298) {
						case 1 :
							// HiveParser.g:2587:19: LPAREN prec= Number ( COMMA scale= Number )? RPAREN
							{
							LPAREN970=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_primitiveType16554); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN970);

							prec=(Token)match(input,Number,FOLLOW_Number_in_primitiveType16558); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_Number.add(prec);

							// HiveParser.g:2587:38: ( COMMA scale= Number )?
							int alt297=2;
							int LA297_0 = input.LA(1);
							if ( (LA297_0==COMMA) ) {
								alt297=1;
							}
							switch (alt297) {
								case 1 :
									// HiveParser.g:2587:39: COMMA scale= Number
									{
									COMMA971=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitiveType16561); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_COMMA.add(COMMA971);

									scale=(Token)match(input,Number,FOLLOW_Number_in_primitiveType16565); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_Number.add(scale);

									}
									break;

							}

							RPAREN972=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_primitiveType16569); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN972);

							}
							break;

					}

					// AST REWRITE
					// elements: prec, scale
					// token labels: prec, scale
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_prec=new RewriteRuleTokenStream(adaptor,"token prec",prec);
					RewriteRuleTokenStream stream_scale=new RewriteRuleTokenStream(adaptor,"token scale",scale);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2587:69: -> ^( TOK_DECIMAL ( $prec)? ( $scale)? )
					{
						// HiveParser.g:2587:72: ^( TOK_DECIMAL ( $prec)? ( $scale)? )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DECIMAL, "TOK_DECIMAL"), root_1);
						// HiveParser.g:2587:87: ( $prec)?
						if ( stream_prec.hasNext() ) {
							adaptor.addChild(root_1, stream_prec.nextNode());
						}
						stream_prec.reset();

						// HiveParser.g:2587:94: ( $scale)?
						if ( stream_scale.hasNext() ) {
							adaptor.addChild(root_1, stream_scale.nextNode());
						}
						stream_scale.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 17 :
					// HiveParser.g:2588:7: KW_VARCHAR LPAREN length= Number RPAREN
					{
					KW_VARCHAR973=(Token)match(input,KW_VARCHAR,FOLLOW_KW_VARCHAR_in_primitiveType16593); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_VARCHAR.add(KW_VARCHAR973);

					LPAREN974=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_primitiveType16595); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN974);

					length=(Token)match(input,Number,FOLLOW_Number_in_primitiveType16599); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_Number.add(length);

					RPAREN975=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_primitiveType16601); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN975);

					// AST REWRITE
					// elements: length
					// token labels: length
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_length=new RewriteRuleTokenStream(adaptor,"token length",length);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2588:51: -> ^( TOK_VARCHAR $length)
					{
						// HiveParser.g:2588:57: ^( TOK_VARCHAR $length)
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_VARCHAR, "TOK_VARCHAR"), root_1);
						adaptor.addChild(root_1, stream_length.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 18 :
					// HiveParser.g:2589:7: KW_CHAR LPAREN length= Number RPAREN
					{
					KW_CHAR976=(Token)match(input,KW_CHAR,FOLLOW_KW_CHAR_in_primitiveType16626); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CHAR.add(KW_CHAR976);

					LPAREN977=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_primitiveType16628); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN977);

					length=(Token)match(input,Number,FOLLOW_Number_in_primitiveType16632); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_Number.add(length);

					RPAREN978=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_primitiveType16634); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN978);

					// AST REWRITE
					// elements: length
					// token labels: length
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_length=new RewriteRuleTokenStream(adaptor,"token length",length);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2589:48: -> ^( TOK_CHAR $length)
					{
						// HiveParser.g:2589:54: ^( TOK_CHAR $length)
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_CHAR, "TOK_CHAR"), root_1);
						adaptor.addChild(root_1, stream_length.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "primitiveType"


	public static class listType_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "listType"
	// HiveParser.g:2592:1: listType : KW_ARRAY LESSTHAN type GREATERTHAN -> ^( TOK_LIST type ) ;
	public final HiveParser.listType_return listType() throws RecognitionException {
		HiveParser.listType_return retval = new HiveParser.listType_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_ARRAY979=null;
		Token LESSTHAN980=null;
		Token GREATERTHAN982=null;
		ParserRuleReturnScope type981 =null;

		ASTNode KW_ARRAY979_tree=null;
		ASTNode LESSTHAN980_tree=null;
		ASTNode GREATERTHAN982_tree=null;
		RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
		RewriteRuleTokenStream stream_KW_ARRAY=new RewriteRuleTokenStream(adaptor,"token KW_ARRAY");
		RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");

		 pushMsg(retval.start,"list type", state); 
		try {
			// HiveParser.g:2595:5: ( KW_ARRAY LESSTHAN type GREATERTHAN -> ^( TOK_LIST type ) )
			// HiveParser.g:2595:7: KW_ARRAY LESSTHAN type GREATERTHAN
			{
			KW_ARRAY979=(Token)match(input,KW_ARRAY,FOLLOW_KW_ARRAY_in_listType16678); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ARRAY.add(KW_ARRAY979);

			LESSTHAN980=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_listType16680); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LESSTHAN.add(LESSTHAN980);

			pushFollow(FOLLOW_type_in_listType16682);
			type981=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type.add(type981.getTree());
			GREATERTHAN982=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_listType16684); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_GREATERTHAN.add(GREATERTHAN982);

			// AST REWRITE
			// elements: type
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2595:44: -> ^( TOK_LIST type )
			{
				// HiveParser.g:2595:47: ^( TOK_LIST type )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_LIST, "TOK_LIST"), root_1);
				adaptor.addChild(root_1, stream_type.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "listType"


	public static class structType_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "structType"
	// HiveParser.g:2598:1: structType : KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN -> ^( TOK_STRUCT columnNameColonTypeList ) ;
	public final HiveParser.structType_return structType() throws RecognitionException {
		HiveParser.structType_return retval = new HiveParser.structType_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_STRUCT983=null;
		Token LESSTHAN984=null;
		Token GREATERTHAN986=null;
		ParserRuleReturnScope columnNameColonTypeList985 =null;

		ASTNode KW_STRUCT983_tree=null;
		ASTNode LESSTHAN984_tree=null;
		ASTNode GREATERTHAN986_tree=null;
		RewriteRuleTokenStream stream_KW_STRUCT=new RewriteRuleTokenStream(adaptor,"token KW_STRUCT");
		RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
		RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
		RewriteRuleSubtreeStream stream_columnNameColonTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameColonTypeList");

		 pushMsg(retval.start,"struct type", state); 
		try {
			// HiveParser.g:2601:5: ( KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN -> ^( TOK_STRUCT columnNameColonTypeList ) )
			// HiveParser.g:2601:7: KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN
			{
			KW_STRUCT983=(Token)match(input,KW_STRUCT,FOLLOW_KW_STRUCT_in_structType16721); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_STRUCT.add(KW_STRUCT983);

			LESSTHAN984=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_structType16723); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LESSTHAN.add(LESSTHAN984);

			pushFollow(FOLLOW_columnNameColonTypeList_in_structType16725);
			columnNameColonTypeList985=columnNameColonTypeList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameColonTypeList.add(columnNameColonTypeList985.getTree());
			GREATERTHAN986=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_structType16727); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_GREATERTHAN.add(GREATERTHAN986);

			// AST REWRITE
			// elements: columnNameColonTypeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2601:62: -> ^( TOK_STRUCT columnNameColonTypeList )
			{
				// HiveParser.g:2601:65: ^( TOK_STRUCT columnNameColonTypeList )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_STRUCT, "TOK_STRUCT"), root_1);
				adaptor.addChild(root_1, stream_columnNameColonTypeList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "structType"


	public static class mapType_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "mapType"
	// HiveParser.g:2604:1: mapType : KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN -> ^( TOK_MAP $left $right) ;
	public final HiveParser.mapType_return mapType() throws RecognitionException {
		HiveParser.mapType_return retval = new HiveParser.mapType_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_MAP987=null;
		Token LESSTHAN988=null;
		Token COMMA989=null;
		Token GREATERTHAN990=null;
		ParserRuleReturnScope left =null;
		ParserRuleReturnScope right =null;

		ASTNode KW_MAP987_tree=null;
		ASTNode LESSTHAN988_tree=null;
		ASTNode COMMA989_tree=null;
		ASTNode GREATERTHAN990_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_MAP=new RewriteRuleTokenStream(adaptor,"token KW_MAP");
		RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
		RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");

		 pushMsg(retval.start,"map type", state); 
		try {
			// HiveParser.g:2607:5: ( KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN -> ^( TOK_MAP $left $right) )
			// HiveParser.g:2607:7: KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN
			{
			KW_MAP987=(Token)match(input,KW_MAP,FOLLOW_KW_MAP_in_mapType16762); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_MAP.add(KW_MAP987);

			LESSTHAN988=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_mapType16764); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LESSTHAN.add(LESSTHAN988);

			pushFollow(FOLLOW_primitiveType_in_mapType16768);
			left=primitiveType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_primitiveType.add(left.getTree());
			COMMA989=(Token)match(input,COMMA,FOLLOW_COMMA_in_mapType16770); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_COMMA.add(COMMA989);

			pushFollow(FOLLOW_type_in_mapType16774);
			right=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type.add(right.getTree());
			GREATERTHAN990=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_mapType16776); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_GREATERTHAN.add(GREATERTHAN990);

			// AST REWRITE
			// elements: right, left
			// token labels: 
			// rule labels: left, right, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"rule left",left!=null?left.getTree():null);
			RewriteRuleSubtreeStream stream_right=new RewriteRuleSubtreeStream(adaptor,"rule right",right!=null?right.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2608:5: -> ^( TOK_MAP $left $right)
			{
				// HiveParser.g:2608:8: ^( TOK_MAP $left $right)
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_MAP, "TOK_MAP"), root_1);
				adaptor.addChild(root_1, stream_left.nextTree());
				adaptor.addChild(root_1, stream_right.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "mapType"


	public static class unionType_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "unionType"
	// HiveParser.g:2611:1: unionType : KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN -> ^( TOK_UNIONTYPE colTypeList ) ;
	public final HiveParser.unionType_return unionType() throws RecognitionException {
		HiveParser.unionType_return retval = new HiveParser.unionType_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_UNIONTYPE991=null;
		Token LESSTHAN992=null;
		Token GREATERTHAN994=null;
		ParserRuleReturnScope colTypeList993 =null;

		ASTNode KW_UNIONTYPE991_tree=null;
		ASTNode LESSTHAN992_tree=null;
		ASTNode GREATERTHAN994_tree=null;
		RewriteRuleTokenStream stream_KW_UNIONTYPE=new RewriteRuleTokenStream(adaptor,"token KW_UNIONTYPE");
		RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
		RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
		RewriteRuleSubtreeStream stream_colTypeList=new RewriteRuleSubtreeStream(adaptor,"rule colTypeList");

		 pushMsg(retval.start,"uniontype type", state); 
		try {
			// HiveParser.g:2614:5: ( KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN -> ^( TOK_UNIONTYPE colTypeList ) )
			// HiveParser.g:2614:7: KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN
			{
			KW_UNIONTYPE991=(Token)match(input,KW_UNIONTYPE,FOLLOW_KW_UNIONTYPE_in_unionType16819); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_UNIONTYPE.add(KW_UNIONTYPE991);

			LESSTHAN992=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_unionType16821); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LESSTHAN.add(LESSTHAN992);

			pushFollow(FOLLOW_colTypeList_in_unionType16823);
			colTypeList993=colTypeList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_colTypeList.add(colTypeList993.getTree());
			GREATERTHAN994=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_unionType16825); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_GREATERTHAN.add(GREATERTHAN994);

			// AST REWRITE
			// elements: colTypeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2614:53: -> ^( TOK_UNIONTYPE colTypeList )
			{
				// HiveParser.g:2614:56: ^( TOK_UNIONTYPE colTypeList )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_UNIONTYPE, "TOK_UNIONTYPE"), root_1);
				adaptor.addChild(root_1, stream_colTypeList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unionType"


	public static class setOperator_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "setOperator"
	// HiveParser.g:2617:1: setOperator : ( KW_UNION KW_ALL -> ^( TOK_UNIONALL ) | KW_UNION ( KW_DISTINCT )? -> ^( TOK_UNIONDISTINCT ) | KW_INTERSECT KW_ALL -> ^( TOK_INTERSECTALL ) | KW_INTERSECT ( KW_DISTINCT )? -> ^( TOK_INTERSECTDISTINCT ) | KW_EXCEPT KW_ALL -> ^( TOK_EXCEPTALL ) | KW_EXCEPT ( KW_DISTINCT )? -> ^( TOK_EXCEPTDISTINCT ) | KW_MINUS KW_ALL -> ^( TOK_EXCEPTALL ) | KW_MINUS ( KW_DISTINCT )? -> ^( TOK_EXCEPTDISTINCT ) );
	public final HiveParser.setOperator_return setOperator() throws RecognitionException {
		HiveParser.setOperator_return retval = new HiveParser.setOperator_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_UNION995=null;
		Token KW_ALL996=null;
		Token KW_UNION997=null;
		Token KW_DISTINCT998=null;
		Token KW_INTERSECT999=null;
		Token KW_ALL1000=null;
		Token KW_INTERSECT1001=null;
		Token KW_DISTINCT1002=null;
		Token KW_EXCEPT1003=null;
		Token KW_ALL1004=null;
		Token KW_EXCEPT1005=null;
		Token KW_DISTINCT1006=null;
		Token KW_MINUS1007=null;
		Token KW_ALL1008=null;
		Token KW_MINUS1009=null;
		Token KW_DISTINCT1010=null;

		ASTNode KW_UNION995_tree=null;
		ASTNode KW_ALL996_tree=null;
		ASTNode KW_UNION997_tree=null;
		ASTNode KW_DISTINCT998_tree=null;
		ASTNode KW_INTERSECT999_tree=null;
		ASTNode KW_ALL1000_tree=null;
		ASTNode KW_INTERSECT1001_tree=null;
		ASTNode KW_DISTINCT1002_tree=null;
		ASTNode KW_EXCEPT1003_tree=null;
		ASTNode KW_ALL1004_tree=null;
		ASTNode KW_EXCEPT1005_tree=null;
		ASTNode KW_DISTINCT1006_tree=null;
		ASTNode KW_MINUS1007_tree=null;
		ASTNode KW_ALL1008_tree=null;
		ASTNode KW_MINUS1009_tree=null;
		ASTNode KW_DISTINCT1010_tree=null;
		RewriteRuleTokenStream stream_KW_INTERSECT=new RewriteRuleTokenStream(adaptor,"token KW_INTERSECT");
		RewriteRuleTokenStream stream_KW_EXCEPT=new RewriteRuleTokenStream(adaptor,"token KW_EXCEPT");
		RewriteRuleTokenStream stream_KW_UNION=new RewriteRuleTokenStream(adaptor,"token KW_UNION");
		RewriteRuleTokenStream stream_KW_DISTINCT=new RewriteRuleTokenStream(adaptor,"token KW_DISTINCT");
		RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
		RewriteRuleTokenStream stream_KW_MINUS=new RewriteRuleTokenStream(adaptor,"token KW_MINUS");

		 pushMsg(retval.start,"set operator", state); 
		try {
			// HiveParser.g:2620:5: ( KW_UNION KW_ALL -> ^( TOK_UNIONALL ) | KW_UNION ( KW_DISTINCT )? -> ^( TOK_UNIONDISTINCT ) | KW_INTERSECT KW_ALL -> ^( TOK_INTERSECTALL ) | KW_INTERSECT ( KW_DISTINCT )? -> ^( TOK_INTERSECTDISTINCT ) | KW_EXCEPT KW_ALL -> ^( TOK_EXCEPTALL ) | KW_EXCEPT ( KW_DISTINCT )? -> ^( TOK_EXCEPTDISTINCT ) | KW_MINUS KW_ALL -> ^( TOK_EXCEPTALL ) | KW_MINUS ( KW_DISTINCT )? -> ^( TOK_EXCEPTDISTINCT ) )
			int alt304=8;
			switch ( input.LA(1) ) {
			case KW_UNION:
				{
				int LA304_1 = input.LA(2);
				if ( (LA304_1==KW_ALL) ) {
					alt304=1;
				}
				else if ( (LA304_1==KW_DISTINCT||LA304_1==KW_FROM||LA304_1==KW_MAP||LA304_1==KW_REDUCE||LA304_1==KW_SELECT||LA304_1==LPAREN) ) {
					alt304=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 304, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_INTERSECT:
				{
				int LA304_2 = input.LA(2);
				if ( (LA304_2==KW_ALL) ) {
					alt304=3;
				}
				else if ( (LA304_2==KW_DISTINCT||LA304_2==KW_FROM||LA304_2==KW_MAP||LA304_2==KW_REDUCE||LA304_2==KW_SELECT||LA304_2==LPAREN) ) {
					alt304=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 304, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_EXCEPT:
				{
				int LA304_3 = input.LA(2);
				if ( (LA304_3==KW_ALL) ) {
					alt304=5;
				}
				else if ( (LA304_3==KW_DISTINCT||LA304_3==KW_FROM||LA304_3==KW_MAP||LA304_3==KW_REDUCE||LA304_3==KW_SELECT||LA304_3==LPAREN) ) {
					alt304=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 304, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_MINUS:
				{
				int LA304_4 = input.LA(2);
				if ( (LA304_4==KW_ALL) ) {
					alt304=7;
				}
				else if ( (LA304_4==KW_DISTINCT||LA304_4==KW_FROM||LA304_4==KW_MAP||LA304_4==KW_REDUCE||LA304_4==KW_SELECT||LA304_4==LPAREN) ) {
					alt304=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 304, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 304, 0, input);
				throw nvae;
			}
			switch (alt304) {
				case 1 :
					// HiveParser.g:2620:7: KW_UNION KW_ALL
					{
					KW_UNION995=(Token)match(input,KW_UNION,FOLLOW_KW_UNION_in_setOperator16860); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_UNION.add(KW_UNION995);

					KW_ALL996=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_setOperator16862); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALL.add(KW_ALL996);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2620:23: -> ^( TOK_UNIONALL )
					{
						// HiveParser.g:2620:26: ^( TOK_UNIONALL )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_UNIONALL, "TOK_UNIONALL"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:2621:7: KW_UNION ( KW_DISTINCT )?
					{
					KW_UNION997=(Token)match(input,KW_UNION,FOLLOW_KW_UNION_in_setOperator16876); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_UNION.add(KW_UNION997);

					// HiveParser.g:2621:16: ( KW_DISTINCT )?
					int alt300=2;
					int LA300_0 = input.LA(1);
					if ( (LA300_0==KW_DISTINCT) ) {
						alt300=1;
					}
					switch (alt300) {
						case 1 :
							// HiveParser.g:2621:16: KW_DISTINCT
							{
							KW_DISTINCT998=(Token)match(input,KW_DISTINCT,FOLLOW_KW_DISTINCT_in_setOperator16878); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_DISTINCT.add(KW_DISTINCT998);

							}
							break;

					}

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2621:29: -> ^( TOK_UNIONDISTINCT )
					{
						// HiveParser.g:2621:32: ^( TOK_UNIONDISTINCT )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_UNIONDISTINCT, "TOK_UNIONDISTINCT"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// HiveParser.g:2622:7: KW_INTERSECT KW_ALL
					{
					KW_INTERSECT999=(Token)match(input,KW_INTERSECT,FOLLOW_KW_INTERSECT_in_setOperator16893); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INTERSECT.add(KW_INTERSECT999);

					KW_ALL1000=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_setOperator16895); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALL.add(KW_ALL1000);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2622:27: -> ^( TOK_INTERSECTALL )
					{
						// HiveParser.g:2622:30: ^( TOK_INTERSECTALL )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_INTERSECTALL, "TOK_INTERSECTALL"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// HiveParser.g:2623:7: KW_INTERSECT ( KW_DISTINCT )?
					{
					KW_INTERSECT1001=(Token)match(input,KW_INTERSECT,FOLLOW_KW_INTERSECT_in_setOperator16909); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INTERSECT.add(KW_INTERSECT1001);

					// HiveParser.g:2623:20: ( KW_DISTINCT )?
					int alt301=2;
					int LA301_0 = input.LA(1);
					if ( (LA301_0==KW_DISTINCT) ) {
						alt301=1;
					}
					switch (alt301) {
						case 1 :
							// HiveParser.g:2623:20: KW_DISTINCT
							{
							KW_DISTINCT1002=(Token)match(input,KW_DISTINCT,FOLLOW_KW_DISTINCT_in_setOperator16911); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_DISTINCT.add(KW_DISTINCT1002);

							}
							break;

					}

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2623:33: -> ^( TOK_INTERSECTDISTINCT )
					{
						// HiveParser.g:2623:36: ^( TOK_INTERSECTDISTINCT )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_INTERSECTDISTINCT, "TOK_INTERSECTDISTINCT"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// HiveParser.g:2624:7: KW_EXCEPT KW_ALL
					{
					KW_EXCEPT1003=(Token)match(input,KW_EXCEPT,FOLLOW_KW_EXCEPT_in_setOperator16926); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_EXCEPT.add(KW_EXCEPT1003);

					KW_ALL1004=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_setOperator16928); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALL.add(KW_ALL1004);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2624:24: -> ^( TOK_EXCEPTALL )
					{
						// HiveParser.g:2624:27: ^( TOK_EXCEPTALL )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_EXCEPTALL, "TOK_EXCEPTALL"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 6 :
					// HiveParser.g:2625:7: KW_EXCEPT ( KW_DISTINCT )?
					{
					KW_EXCEPT1005=(Token)match(input,KW_EXCEPT,FOLLOW_KW_EXCEPT_in_setOperator16942); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_EXCEPT.add(KW_EXCEPT1005);

					// HiveParser.g:2625:17: ( KW_DISTINCT )?
					int alt302=2;
					int LA302_0 = input.LA(1);
					if ( (LA302_0==KW_DISTINCT) ) {
						alt302=1;
					}
					switch (alt302) {
						case 1 :
							// HiveParser.g:2625:17: KW_DISTINCT
							{
							KW_DISTINCT1006=(Token)match(input,KW_DISTINCT,FOLLOW_KW_DISTINCT_in_setOperator16944); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_DISTINCT.add(KW_DISTINCT1006);

							}
							break;

					}

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2625:30: -> ^( TOK_EXCEPTDISTINCT )
					{
						// HiveParser.g:2625:33: ^( TOK_EXCEPTDISTINCT )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_EXCEPTDISTINCT, "TOK_EXCEPTDISTINCT"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 7 :
					// HiveParser.g:2626:7: KW_MINUS KW_ALL
					{
					KW_MINUS1007=(Token)match(input,KW_MINUS,FOLLOW_KW_MINUS_in_setOperator16959); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_MINUS.add(KW_MINUS1007);

					KW_ALL1008=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_setOperator16961); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALL.add(KW_ALL1008);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2626:23: -> ^( TOK_EXCEPTALL )
					{
						// HiveParser.g:2626:26: ^( TOK_EXCEPTALL )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_EXCEPTALL, "TOK_EXCEPTALL"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 8 :
					// HiveParser.g:2627:7: KW_MINUS ( KW_DISTINCT )?
					{
					KW_MINUS1009=(Token)match(input,KW_MINUS,FOLLOW_KW_MINUS_in_setOperator16975); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_MINUS.add(KW_MINUS1009);

					// HiveParser.g:2627:16: ( KW_DISTINCT )?
					int alt303=2;
					int LA303_0 = input.LA(1);
					if ( (LA303_0==KW_DISTINCT) ) {
						alt303=1;
					}
					switch (alt303) {
						case 1 :
							// HiveParser.g:2627:16: KW_DISTINCT
							{
							KW_DISTINCT1010=(Token)match(input,KW_DISTINCT,FOLLOW_KW_DISTINCT_in_setOperator16977); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_DISTINCT.add(KW_DISTINCT1010);

							}
							break;

					}

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2627:29: -> ^( TOK_EXCEPTDISTINCT )
					{
						// HiveParser.g:2627:32: ^( TOK_EXCEPTDISTINCT )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_EXCEPTDISTINCT, "TOK_EXCEPTDISTINCT"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "setOperator"


	public static class queryStatementExpression_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "queryStatementExpression"
	// HiveParser.g:2630:1: queryStatementExpression : (w= withClause )? queryStatementExpressionBody -> queryStatementExpressionBody ;
	public final HiveParser.queryStatementExpression_return queryStatementExpression() throws RecognitionException {
		HiveParser.queryStatementExpression_return retval = new HiveParser.queryStatementExpression_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope w =null;
		ParserRuleReturnScope queryStatementExpressionBody1011 =null;

		RewriteRuleSubtreeStream stream_withClause=new RewriteRuleSubtreeStream(adaptor,"rule withClause");
		RewriteRuleSubtreeStream stream_queryStatementExpressionBody=new RewriteRuleSubtreeStream(adaptor,"rule queryStatementExpressionBody");

		try {
			// HiveParser.g:2631:5: ( (w= withClause )? queryStatementExpressionBody -> queryStatementExpressionBody )
			// HiveParser.g:2636:5: (w= withClause )? queryStatementExpressionBody
			{
			// HiveParser.g:2636:5: (w= withClause )?
			int alt305=2;
			int LA305_0 = input.LA(1);
			if ( (LA305_0==KW_WITH) ) {
				alt305=1;
			}
			switch (alt305) {
				case 1 :
					// HiveParser.g:2636:6: w= withClause
					{
					pushFollow(FOLLOW_withClause_in_queryStatementExpression17014);
					w=withClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_withClause.add(w.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_queryStatementExpressionBody_in_queryStatementExpression17022);
			queryStatementExpressionBody1011=queryStatementExpressionBody();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_queryStatementExpressionBody.add(queryStatementExpressionBody1011.getTree());
			if ( state.backtracking==0 ) {
			      if ((w!=null?((ASTNode)w.getTree()):null) != null) {
			      (queryStatementExpressionBody1011!=null?((ASTNode)queryStatementExpressionBody1011.getTree()):null).insertChild(0, (w!=null?((ASTNode)w.getTree()):null));
			      }
			    }
			// AST REWRITE
			// elements: queryStatementExpressionBody
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2642:5: -> queryStatementExpressionBody
			{
				adaptor.addChild(root_0, stream_queryStatementExpressionBody.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "queryStatementExpression"


	public static class queryStatementExpressionBody_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "queryStatementExpressionBody"
	// HiveParser.g:2645:1: queryStatementExpressionBody : ( fromStatement | regularBody );
	public final HiveParser.queryStatementExpressionBody_return queryStatementExpressionBody() throws RecognitionException {
		HiveParser.queryStatementExpressionBody_return retval = new HiveParser.queryStatementExpressionBody_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope fromStatement1012 =null;
		ParserRuleReturnScope regularBody1013 =null;


		try {
			// HiveParser.g:2646:5: ( fromStatement | regularBody )
			int alt306=2;
			int LA306_0 = input.LA(1);
			if ( (LA306_0==KW_FROM) ) {
				alt306=1;
			}
			else if ( (LA306_0==KW_INSERT||LA306_0==KW_MAP||LA306_0==KW_REDUCE||LA306_0==KW_SELECT||LA306_0==LPAREN) ) {
				alt306=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 306, 0, input);
				throw nvae;
			}

			switch (alt306) {
				case 1 :
					// HiveParser.g:2647:5: fromStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_fromStatement_in_queryStatementExpressionBody17054);
					fromStatement1012=fromStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, fromStatement1012.getTree());

					}
					break;
				case 2 :
					// HiveParser.g:2648:7: regularBody
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_regularBody_in_queryStatementExpressionBody17062);
					regularBody1013=regularBody();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, regularBody1013.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "queryStatementExpressionBody"


	public static class withClause_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "withClause"
	// HiveParser.g:2651:1: withClause : KW_WITH cteStatement ( COMMA cteStatement )* -> ^( TOK_CTE ( cteStatement )+ ) ;
	public final HiveParser.withClause_return withClause() throws RecognitionException {
		HiveParser.withClause_return retval = new HiveParser.withClause_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_WITH1014=null;
		Token COMMA1016=null;
		ParserRuleReturnScope cteStatement1015 =null;
		ParserRuleReturnScope cteStatement1017 =null;

		ASTNode KW_WITH1014_tree=null;
		ASTNode COMMA1016_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleSubtreeStream stream_cteStatement=new RewriteRuleSubtreeStream(adaptor,"rule cteStatement");

		try {
			// HiveParser.g:2652:3: ( KW_WITH cteStatement ( COMMA cteStatement )* -> ^( TOK_CTE ( cteStatement )+ ) )
			// HiveParser.g:2653:3: KW_WITH cteStatement ( COMMA cteStatement )*
			{
			KW_WITH1014=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_withClause17079); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH1014);

			pushFollow(FOLLOW_cteStatement_in_withClause17081);
			cteStatement1015=cteStatement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_cteStatement.add(cteStatement1015.getTree());
			// HiveParser.g:2653:24: ( COMMA cteStatement )*
			loop307:
			while (true) {
				int alt307=2;
				int LA307_0 = input.LA(1);
				if ( (LA307_0==COMMA) ) {
					alt307=1;
				}

				switch (alt307) {
				case 1 :
					// HiveParser.g:2653:25: COMMA cteStatement
					{
					COMMA1016=(Token)match(input,COMMA,FOLLOW_COMMA_in_withClause17084); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA1016);

					pushFollow(FOLLOW_cteStatement_in_withClause17086);
					cteStatement1017=cteStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_cteStatement.add(cteStatement1017.getTree());
					}
					break;

				default :
					break loop307;
				}
			}

			// AST REWRITE
			// elements: cteStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2653:46: -> ^( TOK_CTE ( cteStatement )+ )
			{
				// HiveParser.g:2653:49: ^( TOK_CTE ( cteStatement )+ )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_CTE, "TOK_CTE"), root_1);
				if ( !(stream_cteStatement.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_cteStatement.hasNext() ) {
					adaptor.addChild(root_1, stream_cteStatement.nextTree());
				}
				stream_cteStatement.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "withClause"


	public static class cteStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "cteStatement"
	// HiveParser.g:2656:1: cteStatement : identifier KW_AS LPAREN queryStatementExpression RPAREN -> ^( TOK_SUBQUERY queryStatementExpression identifier ) ;
	public final HiveParser.cteStatement_return cteStatement() throws RecognitionException {
		HiveParser.cteStatement_return retval = new HiveParser.cteStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_AS1019=null;
		Token LPAREN1020=null;
		Token RPAREN1022=null;
		ParserRuleReturnScope identifier1018 =null;
		ParserRuleReturnScope queryStatementExpression1021 =null;

		ASTNode KW_AS1019_tree=null;
		ASTNode LPAREN1020_tree=null;
		ASTNode RPAREN1022_tree=null;
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_queryStatementExpression=new RewriteRuleSubtreeStream(adaptor,"rule queryStatementExpression");

		try {
			// HiveParser.g:2657:4: ( identifier KW_AS LPAREN queryStatementExpression RPAREN -> ^( TOK_SUBQUERY queryStatementExpression identifier ) )
			// HiveParser.g:2658:4: identifier KW_AS LPAREN queryStatementExpression RPAREN
			{
			pushFollow(FOLLOW_identifier_in_cteStatement17112);
			identifier1018=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(identifier1018.getTree());
			KW_AS1019=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_cteStatement17114); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS1019);

			LPAREN1020=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_cteStatement17116); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN1020);

			pushFollow(FOLLOW_queryStatementExpression_in_cteStatement17118);
			queryStatementExpression1021=queryStatementExpression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_queryStatementExpression.add(queryStatementExpression1021.getTree());
			RPAREN1022=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cteStatement17120); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN1022);

			// AST REWRITE
			// elements: queryStatementExpression, identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2659:4: -> ^( TOK_SUBQUERY queryStatementExpression identifier )
			{
				// HiveParser.g:2659:7: ^( TOK_SUBQUERY queryStatementExpression identifier )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY"), root_1);
				adaptor.addChild(root_1, stream_queryStatementExpression.nextTree());
				adaptor.addChild(root_1, stream_identifier.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cteStatement"


	public static class fromStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "fromStatement"
	// HiveParser.g:2662:1: fromStatement : ( singleFromStatement -> singleFromStatement ) (u= setOperator r= singleFromStatement -> ^( $u $r) )* -> {u != null}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) ->;
	public final HiveParser.fromStatement_return fromStatement() throws RecognitionException {
		HiveParser.fromStatement_return retval = new HiveParser.fromStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope u =null;
		ParserRuleReturnScope r =null;
		ParserRuleReturnScope singleFromStatement1023 =null;

		RewriteRuleSubtreeStream stream_setOperator=new RewriteRuleSubtreeStream(adaptor,"rule setOperator");
		RewriteRuleSubtreeStream stream_singleFromStatement=new RewriteRuleSubtreeStream(adaptor,"rule singleFromStatement");

		try {
			// HiveParser.g:2663:3: ( ( singleFromStatement -> singleFromStatement ) (u= setOperator r= singleFromStatement -> ^( $u $r) )* -> {u != null}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) ->)
			// HiveParser.g:2663:3: ( singleFromStatement -> singleFromStatement ) (u= setOperator r= singleFromStatement -> ^( $u $r) )*
			{
			// HiveParser.g:2663:3: ( singleFromStatement -> singleFromStatement )
			// HiveParser.g:2663:4: singleFromStatement
			{
			pushFollow(FOLLOW_singleFromStatement_in_fromStatement17143);
			singleFromStatement1023=singleFromStatement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_singleFromStatement.add(singleFromStatement1023.getTree());
			// AST REWRITE
			// elements: singleFromStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2663:25: -> singleFromStatement
			{
				adaptor.addChild(root_0, stream_singleFromStatement.nextTree());
			}


			retval.tree = root_0;
			}

			}

			// HiveParser.g:2664:2: (u= setOperator r= singleFromStatement -> ^( $u $r) )*
			loop308:
			while (true) {
				int alt308=2;
				int LA308_0 = input.LA(1);
				if ( (LA308_0==KW_EXCEPT||LA308_0==KW_INTERSECT||LA308_0==KW_MINUS||LA308_0==KW_UNION) ) {
					alt308=1;
				}

				switch (alt308) {
				case 1 :
					// HiveParser.g:2664:3: u= setOperator r= singleFromStatement
					{
					pushFollow(FOLLOW_setOperator_in_fromStatement17155);
					u=setOperator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_setOperator.add(u.getTree());
					pushFollow(FOLLOW_singleFromStatement_in_fromStatement17159);
					r=singleFromStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_singleFromStatement.add(r.getTree());
					// AST REWRITE
					// elements: u, r
					// token labels: 
					// rule labels: r, u, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_r=new RewriteRuleSubtreeStream(adaptor,"rule r",r!=null?r.getTree():null);
					RewriteRuleSubtreeStream stream_u=new RewriteRuleSubtreeStream(adaptor,"rule u",u!=null?u.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2665:4: -> ^( $u $r)
					{
						// HiveParser.g:2665:7: ^( $u $r)
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot(stream_u.nextNode(), root_1);
						adaptor.addChild(root_1, retval.tree);
						adaptor.addChild(root_1, stream_r.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

				default :
					break loop308;
				}
			}

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2667:3: -> {u != null}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) )
			if (u != null) {
				// HiveParser.g:2667:19: ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
				// HiveParser.g:2668:9: ^( TOK_FROM ^( TOK_SUBQUERY ) )
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_FROM, "TOK_FROM"), root_2);
				// HiveParser.g:2669:11: ^( TOK_SUBQUERY )
				{
				ASTNode root_3 = (ASTNode)adaptor.nil();
				root_3 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY"), root_3);
				adaptor.addChild(root_3, retval.tree);
				adaptor.addChild(root_3, adaptor.create(Identifier, generateUnionAlias()));
				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_1, root_2);
				}

				// HiveParser.g:2674:9: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) )
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);
				// HiveParser.g:2675:12: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
				{
				ASTNode root_3 = (ASTNode)adaptor.nil();
				root_3 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_3);
				// HiveParser.g:2675:30: ^( TOK_DIR TOK_TMP_FILE )
				{
				ASTNode root_4 = (ASTNode)adaptor.nil();
				root_4 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DIR, "TOK_DIR"), root_4);
				adaptor.addChild(root_4, (ASTNode)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));
				adaptor.addChild(root_3, root_4);
				}

				adaptor.addChild(root_2, root_3);
				}

				// HiveParser.g:2676:12: ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) )
				{
				ASTNode root_3 = (ASTNode)adaptor.nil();
				root_3 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SELECT, "TOK_SELECT"), root_3);
				// HiveParser.g:2676:25: ^( TOK_SELEXPR TOK_SETCOLREF )
				{
				ASTNode root_4 = (ASTNode)adaptor.nil();
				root_4 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_4);
				adaptor.addChild(root_4, (ASTNode)adaptor.create(TOK_SETCOLREF, "TOK_SETCOLREF"));
				adaptor.addChild(root_3, root_4);
				}

				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2679:5: ->
			{
				adaptor.addChild(root_0, retval.tree);
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "fromStatement"


	public static class singleFromStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "singleFromStatement"
	// HiveParser.g:2683:1: singleFromStatement : fromClause (b+= body )+ -> ^( TOK_QUERY fromClause ( body )+ ) ;
	public final HiveParser.singleFromStatement_return singleFromStatement() throws RecognitionException {
		HiveParser.singleFromStatement_return retval = new HiveParser.singleFromStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		List<Object> list_b=null;
		ParserRuleReturnScope fromClause1024 =null;
		RuleReturnScope b = null;
		RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
		RewriteRuleSubtreeStream stream_body=new RewriteRuleSubtreeStream(adaptor,"rule body");

		try {
			// HiveParser.g:2684:5: ( fromClause (b+= body )+ -> ^( TOK_QUERY fromClause ( body )+ ) )
			// HiveParser.g:2685:5: fromClause (b+= body )+
			{
			pushFollow(FOLLOW_fromClause_in_singleFromStatement17365);
			fromClause1024=fromClause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_fromClause.add(fromClause1024.getTree());
			// HiveParser.g:2686:5: (b+= body )+
			int cnt309=0;
			loop309:
			while (true) {
				int alt309=2;
				int LA309_0 = input.LA(1);
				if ( (LA309_0==KW_INSERT||LA309_0==KW_MAP||LA309_0==KW_REDUCE||LA309_0==KW_SELECT) ) {
					alt309=1;
				}

				switch (alt309) {
				case 1 :
					// HiveParser.g:2686:7: b+= body
					{
					pushFollow(FOLLOW_body_in_singleFromStatement17375);
					b=body();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_body.add(b.getTree());
					if (list_b==null) list_b=new ArrayList<Object>();
					list_b.add(b.getTree());
					}
					break;

				default :
					if ( cnt309 >= 1 ) break loop309;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(309, input);
					throw eee;
				}
				cnt309++;
			}

			// AST REWRITE
			// elements: fromClause, body
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2686:18: -> ^( TOK_QUERY fromClause ( body )+ )
			{
				// HiveParser.g:2686:21: ^( TOK_QUERY fromClause ( body )+ )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
				adaptor.addChild(root_1, stream_fromClause.nextTree());
				if ( !(stream_body.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_body.hasNext() ) {
					adaptor.addChild(root_1, stream_body.nextTree());
				}
				stream_body.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "singleFromStatement"


	public static class regularBody_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "regularBody"
	// HiveParser.g:2695:1: regularBody : (i= insertClause (s= selectStatement ->| valuesClause -> ^( TOK_QUERY ^( TOK_INSERT ^( TOK_SELECT ^( TOK_SELEXPR ^( TOK_FUNCTION Identifier[\"inline\"] valuesClause ) ) ) ) ) ) | selectStatement );
	public final HiveParser.regularBody_return regularBody() throws RecognitionException {
		HiveParser.regularBody_return retval = new HiveParser.regularBody_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope i =null;
		ParserRuleReturnScope s =null;
		ParserRuleReturnScope valuesClause1025 =null;
		ParserRuleReturnScope selectStatement1026 =null;

		RewriteRuleSubtreeStream stream_insertClause=new RewriteRuleSubtreeStream(adaptor,"rule insertClause");
		RewriteRuleSubtreeStream stream_valuesClause=new RewriteRuleSubtreeStream(adaptor,"rule valuesClause");
		RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");

		try {
			// HiveParser.g:2696:4: (i= insertClause (s= selectStatement ->| valuesClause -> ^( TOK_QUERY ^( TOK_INSERT ^( TOK_SELECT ^( TOK_SELEXPR ^( TOK_FUNCTION Identifier[\"inline\"] valuesClause ) ) ) ) ) ) | selectStatement )
			int alt311=2;
			int LA311_0 = input.LA(1);
			if ( (LA311_0==KW_INSERT) ) {
				alt311=1;
			}
			else if ( (LA311_0==KW_MAP||LA311_0==KW_REDUCE||LA311_0==KW_SELECT||LA311_0==LPAREN) ) {
				alt311=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 311, 0, input);
				throw nvae;
			}

			switch (alt311) {
				case 1 :
					// HiveParser.g:2697:4: i= insertClause (s= selectStatement ->| valuesClause -> ^( TOK_QUERY ^( TOK_INSERT ^( TOK_SELECT ^( TOK_SELEXPR ^( TOK_FUNCTION Identifier[\"inline\"] valuesClause ) ) ) ) ) )
					{
					pushFollow(FOLLOW_insertClause_in_regularBody17412);
					i=insertClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_insertClause.add(i.getTree());
					// HiveParser.g:2698:4: (s= selectStatement ->| valuesClause -> ^( TOK_QUERY ^( TOK_INSERT ^( TOK_SELECT ^( TOK_SELEXPR ^( TOK_FUNCTION Identifier[\"inline\"] valuesClause ) ) ) ) ) )
					int alt310=2;
					int LA310_0 = input.LA(1);
					if ( (LA310_0==KW_MAP||LA310_0==KW_REDUCE||LA310_0==KW_SELECT||LA310_0==LPAREN) ) {
						alt310=1;
					}
					else if ( (LA310_0==KW_VALUES) ) {
						alt310=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 310, 0, input);
						throw nvae;
					}

					switch (alt310) {
						case 1 :
							// HiveParser.g:2699:4: s= selectStatement
							{
							pushFollow(FOLLOW_selectStatement_in_regularBody17424);
							s=selectStatement();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_selectStatement.add(s.getTree());
							if ( state.backtracking==0 ) {(s!=null?((ASTNode)s.getTree()):null).getFirstChildWithType(TOK_INSERT).replaceChildren(0, 0, (i!=null?((ASTNode)i.getTree()):null));}
							// AST REWRITE
							// elements: 
							// token labels: 
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

							root_0 = (ASTNode)adaptor.nil();
							// 2700:82: ->
							{
								adaptor.addChild(root_0, (s!=null?((ASTNode)s.getTree()):null));
							}


							retval.tree = root_0;
							}

							}
							break;
						case 2 :
							// HiveParser.g:2702:6: valuesClause
							{
							pushFollow(FOLLOW_valuesClause_in_regularBody17449);
							valuesClause1025=valuesClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_valuesClause.add(valuesClause1025.getTree());
							// AST REWRITE
							// elements: valuesClause
							// token labels: 
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

							root_0 = (ASTNode)adaptor.nil();
							// 2703:7: -> ^( TOK_QUERY ^( TOK_INSERT ^( TOK_SELECT ^( TOK_SELEXPR ^( TOK_FUNCTION Identifier[\"inline\"] valuesClause ) ) ) ) )
							{
								// HiveParser.g:2703:10: ^( TOK_QUERY ^( TOK_INSERT ^( TOK_SELECT ^( TOK_SELEXPR ^( TOK_FUNCTION Identifier[\"inline\"] valuesClause ) ) ) ) )
								{
								ASTNode root_1 = (ASTNode)adaptor.nil();
								root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
								// HiveParser.g:2704:13: ^( TOK_INSERT ^( TOK_SELECT ^( TOK_SELEXPR ^( TOK_FUNCTION Identifier[\"inline\"] valuesClause ) ) ) )
								{
								ASTNode root_2 = (ASTNode)adaptor.nil();
								root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);
								adaptor.addChild(root_2, (i!=null?((ASTNode)i.getTree()):null));
								// HiveParser.g:2704:36: ^( TOK_SELECT ^( TOK_SELEXPR ^( TOK_FUNCTION Identifier[\"inline\"] valuesClause ) ) )
								{
								ASTNode root_3 = (ASTNode)adaptor.nil();
								root_3 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SELECT, "TOK_SELECT"), root_3);
								// HiveParser.g:2704:49: ^( TOK_SELEXPR ^( TOK_FUNCTION Identifier[\"inline\"] valuesClause ) )
								{
								ASTNode root_4 = (ASTNode)adaptor.nil();
								root_4 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_4);
								// HiveParser.g:2704:63: ^( TOK_FUNCTION Identifier[\"inline\"] valuesClause )
								{
								ASTNode root_5 = (ASTNode)adaptor.nil();
								root_5 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_5);
								adaptor.addChild(root_5, (ASTNode)adaptor.create(Identifier, "inline"));
								adaptor.addChild(root_5, stream_valuesClause.nextTree());
								adaptor.addChild(root_4, root_5);
								}

								adaptor.addChild(root_3, root_4);
								}

								adaptor.addChild(root_2, root_3);
								}

								adaptor.addChild(root_1, root_2);
								}

								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;

					}

					}
					break;
				case 2 :
					// HiveParser.g:2708:4: selectStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_selectStatement_in_regularBody17522);
					selectStatement1026=selectStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, selectStatement1026.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "regularBody"


	public static class atomSelectStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "atomSelectStatement"
	// HiveParser.g:2711:1: atomSelectStatement : (s= selectClause (f= fromClause )? (w= whereClause )? (g= groupByClause )? (h= havingClause )? (win= window_clause )? -> ^( TOK_QUERY ( $f)? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $win)? ) ) | LPAREN ! selectStatement RPAREN !);
	public final HiveParser.atomSelectStatement_return atomSelectStatement() throws RecognitionException {
		HiveParser.atomSelectStatement_return retval = new HiveParser.atomSelectStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token LPAREN1027=null;
		Token RPAREN1029=null;
		ParserRuleReturnScope s =null;
		ParserRuleReturnScope f =null;
		ParserRuleReturnScope w =null;
		ParserRuleReturnScope g =null;
		ParserRuleReturnScope h =null;
		ParserRuleReturnScope win =null;
		ParserRuleReturnScope selectStatement1028 =null;

		ASTNode LPAREN1027_tree=null;
		ASTNode RPAREN1029_tree=null;
		RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
		RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
		RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
		RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
		RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
		RewriteRuleSubtreeStream stream_window_clause=new RewriteRuleSubtreeStream(adaptor,"rule window_clause");

		try {
			// HiveParser.g:2712:4: (s= selectClause (f= fromClause )? (w= whereClause )? (g= groupByClause )? (h= havingClause )? (win= window_clause )? -> ^( TOK_QUERY ( $f)? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $win)? ) ) | LPAREN ! selectStatement RPAREN !)
			int alt317=2;
			int LA317_0 = input.LA(1);
			if ( (LA317_0==KW_MAP||LA317_0==KW_REDUCE||LA317_0==KW_SELECT) ) {
				alt317=1;
			}
			else if ( (LA317_0==LPAREN) ) {
				alt317=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 317, 0, input);
				throw nvae;
			}

			switch (alt317) {
				case 1 :
					// HiveParser.g:2713:4: s= selectClause (f= fromClause )? (w= whereClause )? (g= groupByClause )? (h= havingClause )? (win= window_clause )?
					{
					pushFollow(FOLLOW_selectClause_in_atomSelectStatement17542);
					s=selectClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_selectClause.add(s.getTree());
					// HiveParser.g:2714:5: (f= fromClause )?
					int alt312=2;
					int LA312_0 = input.LA(1);
					if ( (LA312_0==KW_FROM) ) {
						alt312=1;
					}
					switch (alt312) {
						case 1 :
							// HiveParser.g:2714:5: f= fromClause
							{
							pushFollow(FOLLOW_fromClause_in_atomSelectStatement17549);
							f=fromClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_fromClause.add(f.getTree());
							}
							break;

					}

					// HiveParser.g:2715:5: (w= whereClause )?
					int alt313=2;
					int LA313_0 = input.LA(1);
					if ( (LA313_0==KW_WHERE) ) {
						alt313=1;
					}
					switch (alt313) {
						case 1 :
							// HiveParser.g:2715:5: w= whereClause
							{
							pushFollow(FOLLOW_whereClause_in_atomSelectStatement17557);
							w=whereClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_whereClause.add(w.getTree());
							}
							break;

					}

					// HiveParser.g:2716:5: (g= groupByClause )?
					int alt314=2;
					int LA314_0 = input.LA(1);
					if ( (LA314_0==KW_GROUP) ) {
						alt314=1;
					}
					switch (alt314) {
						case 1 :
							// HiveParser.g:2716:5: g= groupByClause
							{
							pushFollow(FOLLOW_groupByClause_in_atomSelectStatement17565);
							g=groupByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_groupByClause.add(g.getTree());
							}
							break;

					}

					// HiveParser.g:2717:5: (h= havingClause )?
					int alt315=2;
					int LA315_0 = input.LA(1);
					if ( (LA315_0==KW_HAVING) ) {
						alt315=1;
					}
					switch (alt315) {
						case 1 :
							// HiveParser.g:2717:5: h= havingClause
							{
							pushFollow(FOLLOW_havingClause_in_atomSelectStatement17573);
							h=havingClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_havingClause.add(h.getTree());
							}
							break;

					}

					// HiveParser.g:2718:7: (win= window_clause )?
					int alt316=2;
					int LA316_0 = input.LA(1);
					if ( (LA316_0==KW_WINDOW) ) {
						alt316=1;
					}
					switch (alt316) {
						case 1 :
							// HiveParser.g:2718:7: win= window_clause
							{
							pushFollow(FOLLOW_window_clause_in_atomSelectStatement17581);
							win=window_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_window_clause.add(win.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: win, s, h, f, w, g
					// token labels: 
					// rule labels: s, f, w, g, h, win, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.getTree():null);
					RewriteRuleSubtreeStream stream_f=new RewriteRuleSubtreeStream(adaptor,"rule f",f!=null?f.getTree():null);
					RewriteRuleSubtreeStream stream_w=new RewriteRuleSubtreeStream(adaptor,"rule w",w!=null?w.getTree():null);
					RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.getTree():null);
					RewriteRuleSubtreeStream stream_h=new RewriteRuleSubtreeStream(adaptor,"rule h",h!=null?h.getTree():null);
					RewriteRuleSubtreeStream stream_win=new RewriteRuleSubtreeStream(adaptor,"rule win",win!=null?win.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2719:4: -> ^( TOK_QUERY ( $f)? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $win)? ) )
					{
						// HiveParser.g:2719:7: ^( TOK_QUERY ( $f)? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $win)? ) )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
						// HiveParser.g:2719:20: ( $f)?
						if ( stream_f.hasNext() ) {
							adaptor.addChild(root_1, stream_f.nextTree());
						}
						stream_f.reset();

						// HiveParser.g:2719:23: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $win)? )
						{
						ASTNode root_2 = (ASTNode)adaptor.nil();
						root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);
						// HiveParser.g:2719:36: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
						{
						ASTNode root_3 = (ASTNode)adaptor.nil();
						root_3 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_3);
						// HiveParser.g:2719:54: ^( TOK_DIR TOK_TMP_FILE )
						{
						ASTNode root_4 = (ASTNode)adaptor.nil();
						root_4 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DIR, "TOK_DIR"), root_4);
						adaptor.addChild(root_4, (ASTNode)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));
						adaptor.addChild(root_3, root_4);
						}

						adaptor.addChild(root_2, root_3);
						}

						adaptor.addChild(root_2, stream_s.nextTree());
						// HiveParser.g:2720:26: ( $w)?
						if ( stream_w.hasNext() ) {
							adaptor.addChild(root_2, stream_w.nextTree());
						}
						stream_w.reset();

						// HiveParser.g:2720:30: ( $g)?
						if ( stream_g.hasNext() ) {
							adaptor.addChild(root_2, stream_g.nextTree());
						}
						stream_g.reset();

						// HiveParser.g:2720:34: ( $h)?
						if ( stream_h.hasNext() ) {
							adaptor.addChild(root_2, stream_h.nextTree());
						}
						stream_h.reset();

						// HiveParser.g:2720:38: ( $win)?
						if ( stream_win.hasNext() ) {
							adaptor.addChild(root_2, stream_win.nextTree());
						}
						stream_win.reset();

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:2722:4: LPAREN ! selectStatement RPAREN !
					{
					root_0 = (ASTNode)adaptor.nil();


					LPAREN1027=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_atomSelectStatement17659); if (state.failed) return retval;
					pushFollow(FOLLOW_selectStatement_in_atomSelectStatement17662);
					selectStatement1028=selectStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, selectStatement1028.getTree());

					RPAREN1029=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_atomSelectStatement17664); if (state.failed) return retval;
					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "atomSelectStatement"


	public static class selectStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "selectStatement"
	// HiveParser.g:2725:1: selectStatement : a= atomSelectStatement (set= setOpSelectStatement[$atomSelectStatement.tree] )? (o= orderByClause )? (c= clusterByClause )? (d= distributeByClause )? (sort= sortByClause )? (l= limitClause )? -> {set == null}? -> {o==null && c==null && d==null && sort==null && l==null}? -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ( $o)? ( $c)? ( $d)? ( $sort)? ( $l)? ) ) ;
	public final HiveParser.selectStatement_return selectStatement() throws RecognitionException {
		HiveParser.selectStatement_return retval = new HiveParser.selectStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope a =null;
		ParserRuleReturnScope set =null;
		ParserRuleReturnScope o =null;
		ParserRuleReturnScope c =null;
		ParserRuleReturnScope d =null;
		ParserRuleReturnScope sort =null;
		ParserRuleReturnScope l =null;

		RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
		RewriteRuleSubtreeStream stream_setOpSelectStatement=new RewriteRuleSubtreeStream(adaptor,"rule setOpSelectStatement");
		RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
		RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
		RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
		RewriteRuleSubtreeStream stream_atomSelectStatement=new RewriteRuleSubtreeStream(adaptor,"rule atomSelectStatement");
		RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");

		try {
			// HiveParser.g:2726:4: (a= atomSelectStatement (set= setOpSelectStatement[$atomSelectStatement.tree] )? (o= orderByClause )? (c= clusterByClause )? (d= distributeByClause )? (sort= sortByClause )? (l= limitClause )? -> {set == null}? -> {o==null && c==null && d==null && sort==null && l==null}? -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ( $o)? ( $c)? ( $d)? ( $sort)? ( $l)? ) ) )
			// HiveParser.g:2727:4: a= atomSelectStatement (set= setOpSelectStatement[$atomSelectStatement.tree] )? (o= orderByClause )? (c= clusterByClause )? (d= distributeByClause )? (sort= sortByClause )? (l= limitClause )?
			{
			pushFollow(FOLLOW_atomSelectStatement_in_selectStatement17685);
			a=atomSelectStatement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_atomSelectStatement.add(a.getTree());
			// HiveParser.g:2728:7: (set= setOpSelectStatement[$atomSelectStatement.tree] )?
			int alt318=2;
			int LA318_0 = input.LA(1);
			if ( (LA318_0==KW_EXCEPT||LA318_0==KW_INTERSECT||LA318_0==KW_MINUS||LA318_0==KW_UNION) ) {
				alt318=1;
			}
			switch (alt318) {
				case 1 :
					// HiveParser.g:2728:7: set= setOpSelectStatement[$atomSelectStatement.tree]
					{
					pushFollow(FOLLOW_setOpSelectStatement_in_selectStatement17692);
					set=setOpSelectStatement((a!=null?((ASTNode)a.getTree()):null));
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_setOpSelectStatement.add(set.getTree());
					}
					break;

			}

			// HiveParser.g:2729:5: (o= orderByClause )?
			int alt319=2;
			int LA319_0 = input.LA(1);
			if ( (LA319_0==KW_ORDER) ) {
				alt319=1;
			}
			switch (alt319) {
				case 1 :
					// HiveParser.g:2729:5: o= orderByClause
					{
					pushFollow(FOLLOW_orderByClause_in_selectStatement17701);
					o=orderByClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_orderByClause.add(o.getTree());
					}
					break;

			}

			// HiveParser.g:2730:5: (c= clusterByClause )?
			int alt320=2;
			int LA320_0 = input.LA(1);
			if ( (LA320_0==KW_CLUSTER) ) {
				alt320=1;
			}
			switch (alt320) {
				case 1 :
					// HiveParser.g:2730:5: c= clusterByClause
					{
					pushFollow(FOLLOW_clusterByClause_in_selectStatement17709);
					c=clusterByClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_clusterByClause.add(c.getTree());
					}
					break;

			}

			// HiveParser.g:2731:5: (d= distributeByClause )?
			int alt321=2;
			int LA321_0 = input.LA(1);
			if ( (LA321_0==KW_DISTRIBUTE) ) {
				alt321=1;
			}
			switch (alt321) {
				case 1 :
					// HiveParser.g:2731:5: d= distributeByClause
					{
					pushFollow(FOLLOW_distributeByClause_in_selectStatement17717);
					d=distributeByClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_distributeByClause.add(d.getTree());
					}
					break;

			}

			// HiveParser.g:2732:8: (sort= sortByClause )?
			int alt322=2;
			int LA322_0 = input.LA(1);
			if ( (LA322_0==KW_SORT) ) {
				alt322=1;
			}
			switch (alt322) {
				case 1 :
					// HiveParser.g:2732:8: sort= sortByClause
					{
					pushFollow(FOLLOW_sortByClause_in_selectStatement17725);
					sort=sortByClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_sortByClause.add(sort.getTree());
					}
					break;

			}

			// HiveParser.g:2733:5: (l= limitClause )?
			int alt323=2;
			int LA323_0 = input.LA(1);
			if ( (LA323_0==KW_LIMIT) ) {
				alt323=1;
			}
			switch (alt323) {
				case 1 :
					// HiveParser.g:2733:5: l= limitClause
					{
					pushFollow(FOLLOW_limitClause_in_selectStatement17733);
					l=limitClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_limitClause.add(l.getTree());
					}
					break;

			}

			if ( state.backtracking==0 ) {
			   if(set == null){
			   (a!=null?((ASTNode)a.getTree()):null).getFirstChildWithType(TOK_INSERT).addChild((o!=null?((ASTNode)o.getTree()):null));
			   (a!=null?((ASTNode)a.getTree()):null).getFirstChildWithType(TOK_INSERT).addChild((c!=null?((ASTNode)c.getTree()):null));
			   (a!=null?((ASTNode)a.getTree()):null).getFirstChildWithType(TOK_INSERT).addChild((d!=null?((ASTNode)d.getTree()):null));
			   (a!=null?((ASTNode)a.getTree()):null).getFirstChildWithType(TOK_INSERT).addChild((sort!=null?((ASTNode)sort.getTree()):null));
			   (a!=null?((ASTNode)a.getTree()):null).getFirstChildWithType(TOK_INSERT).addChild((l!=null?((ASTNode)l.getTree()):null));
			   }
			   }
			// AST REWRITE
			// elements: c, sort, l, d, o
			// token labels: 
			// rule labels: c, d, sort, l, retval, o
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.getTree():null);
			RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.getTree():null);
			RewriteRuleSubtreeStream stream_sort=new RewriteRuleSubtreeStream(adaptor,"rule sort",sort!=null?sort.getTree():null);
			RewriteRuleSubtreeStream stream_l=new RewriteRuleSubtreeStream(adaptor,"rule l",l!=null?l.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_o=new RewriteRuleSubtreeStream(adaptor,"rule o",o!=null?o.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2743:4: -> {set == null}?
			if (set == null) {
				adaptor.addChild(root_0, (a!=null?((ASTNode)a.getTree()):null));
			}

			else // 2745:4: -> {o==null && c==null && d==null && sort==null && l==null}?
			if (o==null && c==null && d==null && sort==null && l==null) {
				adaptor.addChild(root_0, (set!=null?((ASTNode)set.getTree()):null));
			}

			else // 2747:4: -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ( $o)? ( $c)? ( $d)? ( $sort)? ( $l)? ) )
			{
				// HiveParser.g:2747:7: ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ( $o)? ( $c)? ( $d)? ( $sort)? ( $l)? ) )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
				// HiveParser.g:2748:11: ^( TOK_FROM ^( TOK_SUBQUERY ) )
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_FROM, "TOK_FROM"), root_2);
				// HiveParser.g:2749:13: ^( TOK_SUBQUERY )
				{
				ASTNode root_3 = (ASTNode)adaptor.nil();
				root_3 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY"), root_3);
				adaptor.addChild(root_3, (set!=null?((ASTNode)set.getTree()):null));
				adaptor.addChild(root_3, adaptor.create(Identifier, generateUnionAlias()));
				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_1, root_2);
				}

				// HiveParser.g:2754:11: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ( $o)? ( $c)? ( $d)? ( $sort)? ( $l)? )
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);
				// HiveParser.g:2755:14: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
				{
				ASTNode root_3 = (ASTNode)adaptor.nil();
				root_3 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_3);
				// HiveParser.g:2755:32: ^( TOK_DIR TOK_TMP_FILE )
				{
				ASTNode root_4 = (ASTNode)adaptor.nil();
				root_4 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DIR, "TOK_DIR"), root_4);
				adaptor.addChild(root_4, (ASTNode)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));
				adaptor.addChild(root_3, root_4);
				}

				adaptor.addChild(root_2, root_3);
				}

				// HiveParser.g:2756:14: ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) )
				{
				ASTNode root_3 = (ASTNode)adaptor.nil();
				root_3 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SELECT, "TOK_SELECT"), root_3);
				// HiveParser.g:2756:27: ^( TOK_SELEXPR TOK_SETCOLREF )
				{
				ASTNode root_4 = (ASTNode)adaptor.nil();
				root_4 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_4);
				adaptor.addChild(root_4, (ASTNode)adaptor.create(TOK_SETCOLREF, "TOK_SETCOLREF"));
				adaptor.addChild(root_3, root_4);
				}

				adaptor.addChild(root_2, root_3);
				}

				// HiveParser.g:2757:15: ( $o)?
				if ( stream_o.hasNext() ) {
					adaptor.addChild(root_2, stream_o.nextTree());
				}
				stream_o.reset();

				// HiveParser.g:2757:19: ( $c)?
				if ( stream_c.hasNext() ) {
					adaptor.addChild(root_2, stream_c.nextTree());
				}
				stream_c.reset();

				// HiveParser.g:2757:23: ( $d)?
				if ( stream_d.hasNext() ) {
					adaptor.addChild(root_2, stream_d.nextTree());
				}
				stream_d.reset();

				// HiveParser.g:2757:27: ( $sort)?
				if ( stream_sort.hasNext() ) {
					adaptor.addChild(root_2, stream_sort.nextTree());
				}
				stream_sort.reset();

				// HiveParser.g:2757:34: ( $l)?
				if ( stream_l.hasNext() ) {
					adaptor.addChild(root_2, stream_l.nextTree());
				}
				stream_l.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "selectStatement"


	public static class setOpSelectStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "setOpSelectStatement"
	// HiveParser.g:2762:1: setOpSelectStatement[CommonTree t] : (u= setOperator b= atomSelectStatement -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()!=HiveParser.TOK_UNIONDISTINCT}? ^( $u $b) -> {$setOpSelectStatement.tree == null && ((CommonTree)u.getTree()).getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) -> ^( $u $b) )+ -> {$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_UNIONALL\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_INTERSECTDISTINCT\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_INTERSECTALL\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_EXCEPTDISTINCT\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_EXCEPTALL}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) ->;
	public final HiveParser.setOpSelectStatement_return setOpSelectStatement(CommonTree t) throws RecognitionException {
		HiveParser.setOpSelectStatement_return retval = new HiveParser.setOpSelectStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope u =null;
		ParserRuleReturnScope b =null;

		RewriteRuleSubtreeStream stream_setOperator=new RewriteRuleSubtreeStream(adaptor,"rule setOperator");
		RewriteRuleSubtreeStream stream_atomSelectStatement=new RewriteRuleSubtreeStream(adaptor,"rule atomSelectStatement");

		try {
			// HiveParser.g:2763:4: ( (u= setOperator b= atomSelectStatement -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()!=HiveParser.TOK_UNIONDISTINCT}? ^( $u $b) -> {$setOpSelectStatement.tree == null && ((CommonTree)u.getTree()).getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) -> ^( $u $b) )+ -> {$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_UNIONALL\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_INTERSECTDISTINCT\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_INTERSECTALL\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_EXCEPTDISTINCT\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_EXCEPTALL}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) ->)
			// HiveParser.g:2764:4: (u= setOperator b= atomSelectStatement -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()!=HiveParser.TOK_UNIONDISTINCT}? ^( $u $b) -> {$setOpSelectStatement.tree == null && ((CommonTree)u.getTree()).getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) -> ^( $u $b) )+
			{
			// HiveParser.g:2764:4: (u= setOperator b= atomSelectStatement -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()!=HiveParser.TOK_UNIONDISTINCT}? ^( $u $b) -> {$setOpSelectStatement.tree == null && ((CommonTree)u.getTree()).getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) -> ^( $u $b) )+
			int cnt324=0;
			loop324:
			while (true) {
				int alt324=2;
				int LA324_0 = input.LA(1);
				if ( (LA324_0==KW_EXCEPT||LA324_0==KW_INTERSECT||LA324_0==KW_MINUS||LA324_0==KW_UNION) ) {
					alt324=1;
				}

				switch (alt324) {
				case 1 :
					// HiveParser.g:2764:5: u= setOperator b= atomSelectStatement
					{
					pushFollow(FOLLOW_setOperator_in_setOpSelectStatement17998);
					u=setOperator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_setOperator.add(u.getTree());
					pushFollow(FOLLOW_atomSelectStatement_in_setOpSelectStatement18002);
					b=atomSelectStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_atomSelectStatement.add(b.getTree());
					// AST REWRITE
					// elements: b, b, u, b, u, b
					// token labels: 
					// rule labels: b, u, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.getTree():null);
					RewriteRuleSubtreeStream stream_u=new RewriteRuleSubtreeStream(adaptor,"rule u",u!=null?u.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2765:4: -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) )
					if (retval.tree != null && ((CommonTree)u.getTree()).getType()==HiveParser.TOK_UNIONDISTINCT) {
						// HiveParser.g:2766:7: ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
						// HiveParser.g:2767:11: ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) )
						{
						ASTNode root_2 = (ASTNode)adaptor.nil();
						root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_FROM, "TOK_FROM"), root_2);
						// HiveParser.g:2768:13: ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) )
						{
						ASTNode root_3 = (ASTNode)adaptor.nil();
						root_3 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY"), root_3);
						// HiveParser.g:2769:15: ^( TOK_UNIONALL $b)
						{
						ASTNode root_4 = (ASTNode)adaptor.nil();
						root_4 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_UNIONALL, "TOK_UNIONALL"), root_4);
						adaptor.addChild(root_4, retval.tree);
						adaptor.addChild(root_4, stream_b.nextTree());
						adaptor.addChild(root_3, root_4);
						}

						adaptor.addChild(root_3, adaptor.create(Identifier, generateUnionAlias()));
						adaptor.addChild(root_2, root_3);
						}

						adaptor.addChild(root_1, root_2);
						}

						// HiveParser.g:2773:11: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) )
						{
						ASTNode root_2 = (ASTNode)adaptor.nil();
						root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);
						// HiveParser.g:2774:14: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
						{
						ASTNode root_3 = (ASTNode)adaptor.nil();
						root_3 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_3);
						// HiveParser.g:2774:32: ^( TOK_DIR TOK_TMP_FILE )
						{
						ASTNode root_4 = (ASTNode)adaptor.nil();
						root_4 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DIR, "TOK_DIR"), root_4);
						adaptor.addChild(root_4, (ASTNode)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));
						adaptor.addChild(root_3, root_4);
						}

						adaptor.addChild(root_2, root_3);
						}

						// HiveParser.g:2775:14: ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) )
						{
						ASTNode root_3 = (ASTNode)adaptor.nil();
						root_3 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SELECTDI, "TOK_SELECTDI"), root_3);
						// HiveParser.g:2775:29: ^( TOK_SELEXPR TOK_SETCOLREF )
						{
						ASTNode root_4 = (ASTNode)adaptor.nil();
						root_4 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_4);
						adaptor.addChild(root_4, (ASTNode)adaptor.create(TOK_SETCOLREF, "TOK_SETCOLREF"));
						adaptor.addChild(root_3, root_4);
						}

						adaptor.addChild(root_2, root_3);
						}

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}

					else // 2778:4: -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()!=HiveParser.TOK_UNIONDISTINCT}? ^( $u $b)
					if (retval.tree != null && ((CommonTree)u.getTree()).getType()!=HiveParser.TOK_UNIONDISTINCT) {
						// HiveParser.g:2779:7: ^( $u $b)
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot(stream_u.nextNode(), root_1);
						adaptor.addChild(root_1, retval.tree);
						adaptor.addChild(root_1, stream_b.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}

					else // 2780:4: -> {$setOpSelectStatement.tree == null && ((CommonTree)u.getTree()).getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) )
					if (retval.tree == null && ((CommonTree)u.getTree()).getType()==HiveParser.TOK_UNIONDISTINCT) {
						// HiveParser.g:2781:7: ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
						// HiveParser.g:2782:11: ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) )
						{
						ASTNode root_2 = (ASTNode)adaptor.nil();
						root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_FROM, "TOK_FROM"), root_2);
						// HiveParser.g:2783:13: ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) )
						{
						ASTNode root_3 = (ASTNode)adaptor.nil();
						root_3 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY"), root_3);
						// HiveParser.g:2784:15: ^( TOK_UNIONALL $b)
						{
						ASTNode root_4 = (ASTNode)adaptor.nil();
						root_4 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_UNIONALL, "TOK_UNIONALL"), root_4);
						adaptor.addChild(root_4, t);
						adaptor.addChild(root_4, stream_b.nextTree());
						adaptor.addChild(root_3, root_4);
						}

						adaptor.addChild(root_3, adaptor.create(Identifier, generateUnionAlias()));
						adaptor.addChild(root_2, root_3);
						}

						adaptor.addChild(root_1, root_2);
						}

						// HiveParser.g:2788:11: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) )
						{
						ASTNode root_2 = (ASTNode)adaptor.nil();
						root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);
						// HiveParser.g:2789:13: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
						{
						ASTNode root_3 = (ASTNode)adaptor.nil();
						root_3 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_3);
						// HiveParser.g:2789:31: ^( TOK_DIR TOK_TMP_FILE )
						{
						ASTNode root_4 = (ASTNode)adaptor.nil();
						root_4 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DIR, "TOK_DIR"), root_4);
						adaptor.addChild(root_4, (ASTNode)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));
						adaptor.addChild(root_3, root_4);
						}

						adaptor.addChild(root_2, root_3);
						}

						// HiveParser.g:2790:13: ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) )
						{
						ASTNode root_3 = (ASTNode)adaptor.nil();
						root_3 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SELECTDI, "TOK_SELECTDI"), root_3);
						// HiveParser.g:2790:28: ^( TOK_SELEXPR TOK_SETCOLREF )
						{
						ASTNode root_4 = (ASTNode)adaptor.nil();
						root_4 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_4);
						adaptor.addChild(root_4, (ASTNode)adaptor.create(TOK_SETCOLREF, "TOK_SETCOLREF"));
						adaptor.addChild(root_3, root_4);
						}

						adaptor.addChild(root_2, root_3);
						}

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}

					else // 2793:4: -> ^( $u $b)
					{
						// HiveParser.g:2793:7: ^( $u $b)
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot(stream_u.nextNode(), root_1);
						adaptor.addChild(root_1, t);
						adaptor.addChild(root_1, stream_b.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

				default :
					if ( cnt324 >= 1 ) break loop324;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(324, input);
					throw eee;
				}
				cnt324++;
			}

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2795:4: -> {$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_UNIONALL\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_INTERSECTDISTINCT\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_INTERSECTALL\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_EXCEPTDISTINCT\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_EXCEPTALL}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) )
			if (retval.tree.getChild(0).getType()==HiveParser.TOK_UNIONALL
			   ||retval.tree.getChild(0).getType()==HiveParser.TOK_INTERSECTDISTINCT
			   ||retval.tree.getChild(0).getType()==HiveParser.TOK_INTERSECTALL
			   ||retval.tree.getChild(0).getType()==HiveParser.TOK_EXCEPTDISTINCT
			   ||retval.tree.getChild(0).getType()==HiveParser.TOK_EXCEPTALL) {
				// HiveParser.g:2800:7: ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
				// HiveParser.g:2801:11: ^( TOK_FROM ^( TOK_SUBQUERY ) )
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_FROM, "TOK_FROM"), root_2);
				// HiveParser.g:2802:13: ^( TOK_SUBQUERY )
				{
				ASTNode root_3 = (ASTNode)adaptor.nil();
				root_3 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY"), root_3);
				adaptor.addChild(root_3, retval.tree);
				adaptor.addChild(root_3, adaptor.create(Identifier, generateUnionAlias()));
				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_1, root_2);
				}

				// HiveParser.g:2807:11: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) )
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);
				// HiveParser.g:2808:14: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
				{
				ASTNode root_3 = (ASTNode)adaptor.nil();
				root_3 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_3);
				// HiveParser.g:2808:32: ^( TOK_DIR TOK_TMP_FILE )
				{
				ASTNode root_4 = (ASTNode)adaptor.nil();
				root_4 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DIR, "TOK_DIR"), root_4);
				adaptor.addChild(root_4, (ASTNode)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));
				adaptor.addChild(root_3, root_4);
				}

				adaptor.addChild(root_2, root_3);
				}

				// HiveParser.g:2809:14: ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) )
				{
				ASTNode root_3 = (ASTNode)adaptor.nil();
				root_3 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SELECT, "TOK_SELECT"), root_3);
				// HiveParser.g:2809:27: ^( TOK_SELEXPR TOK_SETCOLREF )
				{
				ASTNode root_4 = (ASTNode)adaptor.nil();
				root_4 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_4);
				adaptor.addChild(root_4, (ASTNode)adaptor.create(TOK_SETCOLREF, "TOK_SETCOLREF"));
				adaptor.addChild(root_3, root_4);
				}

				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2812:4: ->
			{
				adaptor.addChild(root_0, retval.tree);
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "setOpSelectStatement"


	public static class selectStatementWithCTE_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "selectStatementWithCTE"
	// HiveParser.g:2815:1: selectStatementWithCTE : (w= withClause )? selectStatement -> selectStatement ;
	public final HiveParser.selectStatementWithCTE_return selectStatementWithCTE() throws RecognitionException {
		HiveParser.selectStatementWithCTE_return retval = new HiveParser.selectStatementWithCTE_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope w =null;
		ParserRuleReturnScope selectStatement1030 =null;

		RewriteRuleSubtreeStream stream_withClause=new RewriteRuleSubtreeStream(adaptor,"rule withClause");
		RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");

		try {
			// HiveParser.g:2816:5: ( (w= withClause )? selectStatement -> selectStatement )
			// HiveParser.g:2817:5: (w= withClause )? selectStatement
			{
			// HiveParser.g:2817:5: (w= withClause )?
			int alt325=2;
			int LA325_0 = input.LA(1);
			if ( (LA325_0==KW_WITH) ) {
				alt325=1;
			}
			switch (alt325) {
				case 1 :
					// HiveParser.g:2817:6: w= withClause
					{
					pushFollow(FOLLOW_withClause_in_selectStatementWithCTE18637);
					w=withClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_withClause.add(w.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_selectStatement_in_selectStatementWithCTE18645);
			selectStatement1030=selectStatement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_selectStatement.add(selectStatement1030.getTree());
			if ( state.backtracking==0 ) {
			      if ((w!=null?((ASTNode)w.getTree()):null) != null) {
			      (selectStatement1030!=null?((ASTNode)selectStatement1030.getTree()):null).insertChild(0, (w!=null?((ASTNode)w.getTree()):null));
			      }
			    }
			// AST REWRITE
			// elements: selectStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2823:5: -> selectStatement
			{
				adaptor.addChild(root_0, stream_selectStatement.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "selectStatementWithCTE"


	public static class body_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "body"
	// HiveParser.g:2826:1: body : ( insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( window_clause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? ) | selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( window_clause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? ) );
	public final HiveParser.body_return body() throws RecognitionException {
		HiveParser.body_return retval = new HiveParser.body_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope insertClause1031 =null;
		ParserRuleReturnScope selectClause1032 =null;
		ParserRuleReturnScope lateralView1033 =null;
		ParserRuleReturnScope whereClause1034 =null;
		ParserRuleReturnScope groupByClause1035 =null;
		ParserRuleReturnScope havingClause1036 =null;
		ParserRuleReturnScope window_clause1037 =null;
		ParserRuleReturnScope orderByClause1038 =null;
		ParserRuleReturnScope clusterByClause1039 =null;
		ParserRuleReturnScope distributeByClause1040 =null;
		ParserRuleReturnScope sortByClause1041 =null;
		ParserRuleReturnScope limitClause1042 =null;
		ParserRuleReturnScope selectClause1043 =null;
		ParserRuleReturnScope lateralView1044 =null;
		ParserRuleReturnScope whereClause1045 =null;
		ParserRuleReturnScope groupByClause1046 =null;
		ParserRuleReturnScope havingClause1047 =null;
		ParserRuleReturnScope window_clause1048 =null;
		ParserRuleReturnScope orderByClause1049 =null;
		ParserRuleReturnScope clusterByClause1050 =null;
		ParserRuleReturnScope distributeByClause1051 =null;
		ParserRuleReturnScope sortByClause1052 =null;
		ParserRuleReturnScope limitClause1053 =null;

		RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
		RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
		RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
		RewriteRuleSubtreeStream stream_lateralView=new RewriteRuleSubtreeStream(adaptor,"rule lateralView");
		RewriteRuleSubtreeStream stream_insertClause=new RewriteRuleSubtreeStream(adaptor,"rule insertClause");
		RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
		RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
		RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
		RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
		RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
		RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
		RewriteRuleSubtreeStream stream_window_clause=new RewriteRuleSubtreeStream(adaptor,"rule window_clause");

		try {
			// HiveParser.g:2827:4: ( insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( window_clause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? ) | selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( window_clause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? ) )
			int alt346=2;
			int LA346_0 = input.LA(1);
			if ( (LA346_0==KW_INSERT) ) {
				alt346=1;
			}
			else if ( (LA346_0==KW_MAP||LA346_0==KW_REDUCE||LA346_0==KW_SELECT) ) {
				alt346=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 346, 0, input);
				throw nvae;
			}

			switch (alt346) {
				case 1 :
					// HiveParser.g:2828:4: insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( window_clause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )?
					{
					pushFollow(FOLLOW_insertClause_in_body18675);
					insertClause1031=insertClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_insertClause.add(insertClause1031.getTree());
					pushFollow(FOLLOW_selectClause_in_body18680);
					selectClause1032=selectClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_selectClause.add(selectClause1032.getTree());
					// HiveParser.g:2830:4: ( lateralView )?
					int alt326=2;
					int LA326_0 = input.LA(1);
					if ( (LA326_0==COMMA||LA326_0==KW_LATERAL) ) {
						alt326=1;
					}
					switch (alt326) {
						case 1 :
							// HiveParser.g:2830:4: lateralView
							{
							pushFollow(FOLLOW_lateralView_in_body18685);
							lateralView1033=lateralView();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_lateralView.add(lateralView1033.getTree());
							}
							break;

					}

					// HiveParser.g:2831:4: ( whereClause )?
					int alt327=2;
					int LA327_0 = input.LA(1);
					if ( (LA327_0==KW_WHERE) ) {
						alt327=1;
					}
					switch (alt327) {
						case 1 :
							// HiveParser.g:2831:4: whereClause
							{
							pushFollow(FOLLOW_whereClause_in_body18691);
							whereClause1034=whereClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_whereClause.add(whereClause1034.getTree());
							}
							break;

					}

					// HiveParser.g:2832:4: ( groupByClause )?
					int alt328=2;
					int LA328_0 = input.LA(1);
					if ( (LA328_0==KW_GROUP) ) {
						alt328=1;
					}
					switch (alt328) {
						case 1 :
							// HiveParser.g:2832:4: groupByClause
							{
							pushFollow(FOLLOW_groupByClause_in_body18697);
							groupByClause1035=groupByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_groupByClause.add(groupByClause1035.getTree());
							}
							break;

					}

					// HiveParser.g:2833:4: ( havingClause )?
					int alt329=2;
					int LA329_0 = input.LA(1);
					if ( (LA329_0==KW_HAVING) ) {
						alt329=1;
					}
					switch (alt329) {
						case 1 :
							// HiveParser.g:2833:4: havingClause
							{
							pushFollow(FOLLOW_havingClause_in_body18703);
							havingClause1036=havingClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_havingClause.add(havingClause1036.getTree());
							}
							break;

					}

					// HiveParser.g:2834:4: ( window_clause )?
					int alt330=2;
					int LA330_0 = input.LA(1);
					if ( (LA330_0==KW_WINDOW) ) {
						alt330=1;
					}
					switch (alt330) {
						case 1 :
							// HiveParser.g:2834:4: window_clause
							{
							pushFollow(FOLLOW_window_clause_in_body18709);
							window_clause1037=window_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_window_clause.add(window_clause1037.getTree());
							}
							break;

					}

					// HiveParser.g:2835:4: ( orderByClause )?
					int alt331=2;
					int LA331_0 = input.LA(1);
					if ( (LA331_0==KW_ORDER) ) {
						alt331=1;
					}
					switch (alt331) {
						case 1 :
							// HiveParser.g:2835:4: orderByClause
							{
							pushFollow(FOLLOW_orderByClause_in_body18715);
							orderByClause1038=orderByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_orderByClause.add(orderByClause1038.getTree());
							}
							break;

					}

					// HiveParser.g:2836:4: ( clusterByClause )?
					int alt332=2;
					int LA332_0 = input.LA(1);
					if ( (LA332_0==KW_CLUSTER) ) {
						alt332=1;
					}
					switch (alt332) {
						case 1 :
							// HiveParser.g:2836:4: clusterByClause
							{
							pushFollow(FOLLOW_clusterByClause_in_body18721);
							clusterByClause1039=clusterByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_clusterByClause.add(clusterByClause1039.getTree());
							}
							break;

					}

					// HiveParser.g:2837:4: ( distributeByClause )?
					int alt333=2;
					int LA333_0 = input.LA(1);
					if ( (LA333_0==KW_DISTRIBUTE) ) {
						alt333=1;
					}
					switch (alt333) {
						case 1 :
							// HiveParser.g:2837:4: distributeByClause
							{
							pushFollow(FOLLOW_distributeByClause_in_body18727);
							distributeByClause1040=distributeByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_distributeByClause.add(distributeByClause1040.getTree());
							}
							break;

					}

					// HiveParser.g:2838:4: ( sortByClause )?
					int alt334=2;
					int LA334_0 = input.LA(1);
					if ( (LA334_0==KW_SORT) ) {
						alt334=1;
					}
					switch (alt334) {
						case 1 :
							// HiveParser.g:2838:4: sortByClause
							{
							pushFollow(FOLLOW_sortByClause_in_body18733);
							sortByClause1041=sortByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_sortByClause.add(sortByClause1041.getTree());
							}
							break;

					}

					// HiveParser.g:2839:4: ( limitClause )?
					int alt335=2;
					int LA335_0 = input.LA(1);
					if ( (LA335_0==KW_LIMIT) ) {
						alt335=1;
					}
					switch (alt335) {
						case 1 :
							// HiveParser.g:2839:4: limitClause
							{
							pushFollow(FOLLOW_limitClause_in_body18739);
							limitClause1042=limitClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_limitClause.add(limitClause1042.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: clusterByClause, insertClause, selectClause, lateralView, sortByClause, havingClause, orderByClause, distributeByClause, window_clause, whereClause, groupByClause, limitClause
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2839:17: -> ^( TOK_INSERT insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? )
					{
						// HiveParser.g:2839:20: ^( TOK_INSERT insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_1);
						adaptor.addChild(root_1, stream_insertClause.nextTree());
						adaptor.addChild(root_1, stream_selectClause.nextTree());
						// HiveParser.g:2840:35: ( lateralView )?
						if ( stream_lateralView.hasNext() ) {
							adaptor.addChild(root_1, stream_lateralView.nextTree());
						}
						stream_lateralView.reset();

						// HiveParser.g:2840:48: ( whereClause )?
						if ( stream_whereClause.hasNext() ) {
							adaptor.addChild(root_1, stream_whereClause.nextTree());
						}
						stream_whereClause.reset();

						// HiveParser.g:2840:61: ( groupByClause )?
						if ( stream_groupByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_groupByClause.nextTree());
						}
						stream_groupByClause.reset();

						// HiveParser.g:2840:76: ( havingClause )?
						if ( stream_havingClause.hasNext() ) {
							adaptor.addChild(root_1, stream_havingClause.nextTree());
						}
						stream_havingClause.reset();

						// HiveParser.g:2840:90: ( orderByClause )?
						if ( stream_orderByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_orderByClause.nextTree());
						}
						stream_orderByClause.reset();

						// HiveParser.g:2840:105: ( clusterByClause )?
						if ( stream_clusterByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_clusterByClause.nextTree());
						}
						stream_clusterByClause.reset();

						// HiveParser.g:2841:22: ( distributeByClause )?
						if ( stream_distributeByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_distributeByClause.nextTree());
						}
						stream_distributeByClause.reset();

						// HiveParser.g:2841:42: ( sortByClause )?
						if ( stream_sortByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_sortByClause.nextTree());
						}
						stream_sortByClause.reset();

						// HiveParser.g:2841:56: ( window_clause )?
						if ( stream_window_clause.hasNext() ) {
							adaptor.addChild(root_1, stream_window_clause.nextTree());
						}
						stream_window_clause.reset();

						// HiveParser.g:2841:71: ( limitClause )?
						if ( stream_limitClause.hasNext() ) {
							adaptor.addChild(root_1, stream_limitClause.nextTree());
						}
						stream_limitClause.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:2843:4: selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( window_clause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )?
					{
					pushFollow(FOLLOW_selectClause_in_body18832);
					selectClause1043=selectClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_selectClause.add(selectClause1043.getTree());
					// HiveParser.g:2844:4: ( lateralView )?
					int alt336=2;
					int LA336_0 = input.LA(1);
					if ( (LA336_0==COMMA||LA336_0==KW_LATERAL) ) {
						alt336=1;
					}
					switch (alt336) {
						case 1 :
							// HiveParser.g:2844:4: lateralView
							{
							pushFollow(FOLLOW_lateralView_in_body18837);
							lateralView1044=lateralView();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_lateralView.add(lateralView1044.getTree());
							}
							break;

					}

					// HiveParser.g:2845:4: ( whereClause )?
					int alt337=2;
					int LA337_0 = input.LA(1);
					if ( (LA337_0==KW_WHERE) ) {
						alt337=1;
					}
					switch (alt337) {
						case 1 :
							// HiveParser.g:2845:4: whereClause
							{
							pushFollow(FOLLOW_whereClause_in_body18843);
							whereClause1045=whereClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_whereClause.add(whereClause1045.getTree());
							}
							break;

					}

					// HiveParser.g:2846:4: ( groupByClause )?
					int alt338=2;
					int LA338_0 = input.LA(1);
					if ( (LA338_0==KW_GROUP) ) {
						alt338=1;
					}
					switch (alt338) {
						case 1 :
							// HiveParser.g:2846:4: groupByClause
							{
							pushFollow(FOLLOW_groupByClause_in_body18849);
							groupByClause1046=groupByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_groupByClause.add(groupByClause1046.getTree());
							}
							break;

					}

					// HiveParser.g:2847:4: ( havingClause )?
					int alt339=2;
					int LA339_0 = input.LA(1);
					if ( (LA339_0==KW_HAVING) ) {
						alt339=1;
					}
					switch (alt339) {
						case 1 :
							// HiveParser.g:2847:4: havingClause
							{
							pushFollow(FOLLOW_havingClause_in_body18855);
							havingClause1047=havingClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_havingClause.add(havingClause1047.getTree());
							}
							break;

					}

					// HiveParser.g:2848:4: ( window_clause )?
					int alt340=2;
					int LA340_0 = input.LA(1);
					if ( (LA340_0==KW_WINDOW) ) {
						alt340=1;
					}
					switch (alt340) {
						case 1 :
							// HiveParser.g:2848:4: window_clause
							{
							pushFollow(FOLLOW_window_clause_in_body18861);
							window_clause1048=window_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_window_clause.add(window_clause1048.getTree());
							}
							break;

					}

					// HiveParser.g:2849:4: ( orderByClause )?
					int alt341=2;
					int LA341_0 = input.LA(1);
					if ( (LA341_0==KW_ORDER) ) {
						alt341=1;
					}
					switch (alt341) {
						case 1 :
							// HiveParser.g:2849:4: orderByClause
							{
							pushFollow(FOLLOW_orderByClause_in_body18867);
							orderByClause1049=orderByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_orderByClause.add(orderByClause1049.getTree());
							}
							break;

					}

					// HiveParser.g:2850:4: ( clusterByClause )?
					int alt342=2;
					int LA342_0 = input.LA(1);
					if ( (LA342_0==KW_CLUSTER) ) {
						alt342=1;
					}
					switch (alt342) {
						case 1 :
							// HiveParser.g:2850:4: clusterByClause
							{
							pushFollow(FOLLOW_clusterByClause_in_body18873);
							clusterByClause1050=clusterByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_clusterByClause.add(clusterByClause1050.getTree());
							}
							break;

					}

					// HiveParser.g:2851:4: ( distributeByClause )?
					int alt343=2;
					int LA343_0 = input.LA(1);
					if ( (LA343_0==KW_DISTRIBUTE) ) {
						alt343=1;
					}
					switch (alt343) {
						case 1 :
							// HiveParser.g:2851:4: distributeByClause
							{
							pushFollow(FOLLOW_distributeByClause_in_body18879);
							distributeByClause1051=distributeByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_distributeByClause.add(distributeByClause1051.getTree());
							}
							break;

					}

					// HiveParser.g:2852:4: ( sortByClause )?
					int alt344=2;
					int LA344_0 = input.LA(1);
					if ( (LA344_0==KW_SORT) ) {
						alt344=1;
					}
					switch (alt344) {
						case 1 :
							// HiveParser.g:2852:4: sortByClause
							{
							pushFollow(FOLLOW_sortByClause_in_body18885);
							sortByClause1052=sortByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_sortByClause.add(sortByClause1052.getTree());
							}
							break;

					}

					// HiveParser.g:2853:4: ( limitClause )?
					int alt345=2;
					int LA345_0 = input.LA(1);
					if ( (LA345_0==KW_LIMIT) ) {
						alt345=1;
					}
					switch (alt345) {
						case 1 :
							// HiveParser.g:2853:4: limitClause
							{
							pushFollow(FOLLOW_limitClause_in_body18891);
							limitClause1053=limitClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_limitClause.add(limitClause1053.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: window_clause, limitClause, clusterByClause, distributeByClause, havingClause, sortByClause, groupByClause, selectClause, lateralView, whereClause, orderByClause
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2853:17: -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? )
					{
						// HiveParser.g:2853:20: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_1);
						// HiveParser.g:2853:33: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
						{
						ASTNode root_2 = (ASTNode)adaptor.nil();
						root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_2);
						// HiveParser.g:2853:51: ^( TOK_DIR TOK_TMP_FILE )
						{
						ASTNode root_3 = (ASTNode)adaptor.nil();
						root_3 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DIR, "TOK_DIR"), root_3);
						adaptor.addChild(root_3, (ASTNode)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));
						adaptor.addChild(root_2, root_3);
						}

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_1, stream_selectClause.nextTree());
						// HiveParser.g:2854:35: ( lateralView )?
						if ( stream_lateralView.hasNext() ) {
							adaptor.addChild(root_1, stream_lateralView.nextTree());
						}
						stream_lateralView.reset();

						// HiveParser.g:2854:48: ( whereClause )?
						if ( stream_whereClause.hasNext() ) {
							adaptor.addChild(root_1, stream_whereClause.nextTree());
						}
						stream_whereClause.reset();

						// HiveParser.g:2854:61: ( groupByClause )?
						if ( stream_groupByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_groupByClause.nextTree());
						}
						stream_groupByClause.reset();

						// HiveParser.g:2854:76: ( havingClause )?
						if ( stream_havingClause.hasNext() ) {
							adaptor.addChild(root_1, stream_havingClause.nextTree());
						}
						stream_havingClause.reset();

						// HiveParser.g:2854:90: ( orderByClause )?
						if ( stream_orderByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_orderByClause.nextTree());
						}
						stream_orderByClause.reset();

						// HiveParser.g:2854:105: ( clusterByClause )?
						if ( stream_clusterByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_clusterByClause.nextTree());
						}
						stream_clusterByClause.reset();

						// HiveParser.g:2855:22: ( distributeByClause )?
						if ( stream_distributeByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_distributeByClause.nextTree());
						}
						stream_distributeByClause.reset();

						// HiveParser.g:2855:42: ( sortByClause )?
						if ( stream_sortByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_sortByClause.nextTree());
						}
						stream_sortByClause.reset();

						// HiveParser.g:2855:56: ( window_clause )?
						if ( stream_window_clause.hasNext() ) {
							adaptor.addChild(root_1, stream_window_clause.nextTree());
						}
						stream_window_clause.reset();

						// HiveParser.g:2855:71: ( limitClause )?
						if ( stream_limitClause.hasNext() ) {
							adaptor.addChild(root_1, stream_limitClause.nextTree());
						}
						stream_limitClause.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "body"


	public static class insertClause_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "insertClause"
	// HiveParser.g:2858:1: insertClause : ( KW_INSERT KW_OVERWRITE destination ( ifNotExists )? -> ^( TOK_DESTINATION destination ( ifNotExists )? ) | KW_INSERT KW_INTO ( KW_TABLE )? tableOrPartition ( LPAREN targetCols= columnNameList RPAREN )? -> ^( TOK_INSERT_INTO tableOrPartition ( $targetCols)? ) );
	public final HiveParser.insertClause_return insertClause() throws RecognitionException {
		HiveParser.insertClause_return retval = new HiveParser.insertClause_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_INSERT1054=null;
		Token KW_OVERWRITE1055=null;
		Token KW_INSERT1058=null;
		Token KW_INTO1059=null;
		Token KW_TABLE1060=null;
		Token LPAREN1062=null;
		Token RPAREN1063=null;
		ParserRuleReturnScope targetCols =null;
		ParserRuleReturnScope destination1056 =null;
		ParserRuleReturnScope ifNotExists1057 =null;
		ParserRuleReturnScope tableOrPartition1061 =null;

		ASTNode KW_INSERT1054_tree=null;
		ASTNode KW_OVERWRITE1055_tree=null;
		ASTNode KW_INSERT1058_tree=null;
		ASTNode KW_INTO1059_tree=null;
		ASTNode KW_TABLE1060_tree=null;
		ASTNode LPAREN1062_tree=null;
		ASTNode RPAREN1063_tree=null;
		RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_INSERT=new RewriteRuleTokenStream(adaptor,"token KW_INSERT");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_OVERWRITE=new RewriteRuleTokenStream(adaptor,"token KW_OVERWRITE");
		RewriteRuleSubtreeStream stream_destination=new RewriteRuleSubtreeStream(adaptor,"rule destination");
		RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");

		 pushMsg(retval.start,"insert clause", state); 
		try {
			// HiveParser.g:2861:4: ( KW_INSERT KW_OVERWRITE destination ( ifNotExists )? -> ^( TOK_DESTINATION destination ( ifNotExists )? ) | KW_INSERT KW_INTO ( KW_TABLE )? tableOrPartition ( LPAREN targetCols= columnNameList RPAREN )? -> ^( TOK_INSERT_INTO tableOrPartition ( $targetCols)? ) )
			int alt350=2;
			int LA350_0 = input.LA(1);
			if ( (LA350_0==KW_INSERT) ) {
				int LA350_1 = input.LA(2);
				if ( (LA350_1==KW_OVERWRITE) ) {
					alt350=1;
				}
				else if ( (LA350_1==KW_INTO) ) {
					alt350=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 350, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 350, 0, input);
				throw nvae;
			}

			switch (alt350) {
				case 1 :
					// HiveParser.g:2862:6: KW_INSERT KW_OVERWRITE destination ( ifNotExists )?
					{
					KW_INSERT1054=(Token)match(input,KW_INSERT,FOLLOW_KW_INSERT_in_insertClause19012); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INSERT.add(KW_INSERT1054);

					KW_OVERWRITE1055=(Token)match(input,KW_OVERWRITE,FOLLOW_KW_OVERWRITE_in_insertClause19014); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_OVERWRITE.add(KW_OVERWRITE1055);

					pushFollow(FOLLOW_destination_in_insertClause19016);
					destination1056=destination();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_destination.add(destination1056.getTree());
					// HiveParser.g:2862:41: ( ifNotExists )?
					int alt347=2;
					int LA347_0 = input.LA(1);
					if ( (LA347_0==KW_IF) ) {
						alt347=1;
					}
					switch (alt347) {
						case 1 :
							// HiveParser.g:2862:41: ifNotExists
							{
							pushFollow(FOLLOW_ifNotExists_in_insertClause19018);
							ifNotExists1057=ifNotExists();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_ifNotExists.add(ifNotExists1057.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: ifNotExists, destination
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2862:54: -> ^( TOK_DESTINATION destination ( ifNotExists )? )
					{
						// HiveParser.g:2862:57: ^( TOK_DESTINATION destination ( ifNotExists )? )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_1);
						adaptor.addChild(root_1, stream_destination.nextTree());
						// HiveParser.g:2862:87: ( ifNotExists )?
						if ( stream_ifNotExists.hasNext() ) {
							adaptor.addChild(root_1, stream_ifNotExists.nextTree());
						}
						stream_ifNotExists.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:2863:6: KW_INSERT KW_INTO ( KW_TABLE )? tableOrPartition ( LPAREN targetCols= columnNameList RPAREN )?
					{
					KW_INSERT1058=(Token)match(input,KW_INSERT,FOLLOW_KW_INSERT_in_insertClause19037); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INSERT.add(KW_INSERT1058);

					KW_INTO1059=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_insertClause19039); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INTO.add(KW_INTO1059);

					// HiveParser.g:2863:24: ( KW_TABLE )?
					int alt348=2;
					int LA348_0 = input.LA(1);
					if ( (LA348_0==KW_TABLE) ) {
						alt348=1;
					}
					switch (alt348) {
						case 1 :
							// HiveParser.g:2863:24: KW_TABLE
							{
							KW_TABLE1060=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_insertClause19041); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE1060);

							}
							break;

					}

					pushFollow(FOLLOW_tableOrPartition_in_insertClause19044);
					tableOrPartition1061=tableOrPartition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableOrPartition.add(tableOrPartition1061.getTree());
					// HiveParser.g:2863:51: ( LPAREN targetCols= columnNameList RPAREN )?
					int alt349=2;
					int LA349_0 = input.LA(1);
					if ( (LA349_0==LPAREN) ) {
						int LA349_1 = input.LA(2);
						if ( (LA349_1==Identifier||(LA349_1 >= KW_ABORT && LA349_1 <= KW_AFTER)||LA349_1==KW_ALLOC_FRACTION||LA349_1==KW_ANALYZE||LA349_1==KW_ARCHIVE||(LA349_1 >= KW_ASC && LA349_1 <= KW_AST)||(LA349_1 >= KW_AUTOCOMMIT && LA349_1 <= KW_BEFORE)||(LA349_1 >= KW_BUCKET && LA349_1 <= KW_BUCKETS)||(LA349_1 >= KW_CACHE && LA349_1 <= KW_CASCADE)||LA349_1==KW_CHANGE||(LA349_1 >= KW_CHECK && LA349_1 <= KW_COLLECTION)||(LA349_1 >= KW_COLUMNS && LA349_1 <= KW_COMMENT)||(LA349_1 >= KW_COMPACT && LA349_1 <= KW_CONCATENATE)||LA349_1==KW_CONTINUE||LA349_1==KW_DATA||(LA349_1 >= KW_DATABASES && LA349_1 <= KW_DEBUG)||(LA349_1 >= KW_DEFAULT && LA349_1 <= KW_DEFINED)||(LA349_1 >= KW_DELIMITED && LA349_1 <= KW_DESC)||(LA349_1 >= KW_DETAIL && LA349_1 <= KW_DISABLE)||(LA349_1 >= KW_DISTRIBUTE && LA349_1 <= KW_DO)||LA349_1==KW_DOW||(LA349_1 >= KW_DUMP && LA349_1 <= KW_ELEM_TYPE)||LA349_1==KW_ENABLE||(LA349_1 >= KW_ENFORCED && LA349_1 <= KW_ESCAPED)||LA349_1==KW_EXCLUSIVE||(LA349_1 >= KW_EXPLAIN && LA349_1 <= KW_EXPRESSION)||(LA349_1 >= KW_FIELDS && LA349_1 <= KW_FIRST)||(LA349_1 >= KW_FORMAT && LA349_1 <= KW_FORMATTED)||LA349_1==KW_FUNCTIONS||LA349_1==KW_GROUP||(LA349_1 >= KW_HOUR && LA349_1 <= KW_IDXPROPERTIES)||(LA349_1 >= KW_INDEX && LA349_1 <= KW_INDEXES)||(LA349_1 >= KW_INPATH && LA349_1 <= KW_INPUTFORMAT)||(LA349_1 >= KW_ISOLATION && LA349_1 <= KW_JAR)||(LA349_1 >= KW_KEY && LA349_1 <= KW_LAST)||LA349_1==KW_LEVEL||(LA349_1 >= KW_LIMIT && LA349_1 <= KW_LOAD)||(LA349_1 >= KW_LOCATION && LA349_1 <= KW_LONG)||LA349_1==KW_MANAGEMENT||(LA349_1 >= KW_MAPJOIN && LA349_1 <= KW_MATERIALIZED)||LA349_1==KW_METADATA||(LA349_1 >= KW_MINUTE && LA349_1 <= KW_MONTH)||(LA349_1 >= KW_MOVE && LA349_1 <= KW_MSCK)||(LA349_1 >= KW_NORELY && LA349_1 <= KW_NOSCAN)||LA349_1==KW_NOVALIDATE||LA349_1==KW_NULLS||LA349_1==KW_OFFSET||(LA349_1 >= KW_OPERATOR && LA349_1 <= KW_OPTION)||LA349_1==KW_ORDER||(LA349_1 >= KW_OUTPUTDRIVER && LA349_1 <= KW_OUTPUTFORMAT)||(LA349_1 >= KW_OVERWRITE && LA349_1 <= KW_OWNER)||(LA349_1 >= KW_PARTITIONED && LA349_1 <= KW_PATH)||(LA349_1 >= KW_PLAN && LA349_1 <= KW_POOL)||LA349_1==KW_PRINCIPALS||(LA349_1 >= KW_PURGE && LA349_1 <= KW_QUERY_PARALLELISM)||LA349_1==KW_READ||(LA349_1 >= KW_REBUILD && LA349_1 <= KW_RECORDWRITER)||(LA349_1 >= KW_RELOAD && LA349_1 <= KW_RESTRICT)||LA349_1==KW_REWRITE||(LA349_1 >= KW_ROLE && LA349_1 <= KW_ROLES)||(LA349_1 >= KW_SCHEDULING_POLICY && LA349_1 <= KW_SECOND)||(LA349_1 >= KW_SEMI && LA349_1 <= KW_SERVER)||(LA349_1 >= KW_SETS && LA349_1 <= KW_SKEWED)||(LA349_1 >= KW_SNAPSHOT && LA349_1 <= KW_SSL)||(LA349_1 >= KW_STATISTICS && LA349_1 <= KW_SUMMARY)||LA349_1==KW_TABLES||(LA349_1 >= KW_TBLPROPERTIES && LA349_1 <= KW_TERMINATED)||LA349_1==KW_TINYINT||(LA349_1 >= KW_TOUCH && LA349_1 <= KW_TRANSACTIONS)||LA349_1==KW_UNARCHIVE||LA349_1==KW_UNDO||LA349_1==KW_UNIONTYPE||(LA349_1 >= KW_UNKNOWN && LA349_1 <= KW_UNSIGNED)||(LA349_1 >= KW_URI && LA349_1 <= KW_USE)||(LA349_1 >= KW_UTC && LA349_1 <= KW_VALIDATE)||LA349_1==KW_VALUE_TYPE||(LA349_1 >= KW_VECTORIZATION && LA349_1 <= KW_WEEK)||LA349_1==KW_WHILE||(LA349_1 >= KW_WORK && LA349_1 <= KW_ZONE)||LA349_1==KW_BATCH||LA349_1==KW_DAYOFWEEK||LA349_1==KW_HOLD_DDLTIME||LA349_1==KW_IGNORE||LA349_1==KW_NO_DROP||LA349_1==KW_OFFLINE||LA349_1==KW_PROTECTION||LA349_1==KW_READONLY||LA349_1==KW_TIMESTAMPTZ) ) {
							alt349=1;
						}
					}
					switch (alt349) {
						case 1 :
							// HiveParser.g:2863:52: LPAREN targetCols= columnNameList RPAREN
							{
							LPAREN1062=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertClause19047); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN1062);

							pushFollow(FOLLOW_columnNameList_in_insertClause19051);
							targetCols=columnNameList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_columnNameList.add(targetCols.getTree());
							RPAREN1063=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertClause19053); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN1063);

							}
							break;

					}

					// AST REWRITE
					// elements: tableOrPartition, targetCols
					// token labels: 
					// rule labels: targetCols, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_targetCols=new RewriteRuleSubtreeStream(adaptor,"rule targetCols",targetCols!=null?targetCols.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2864:8: -> ^( TOK_INSERT_INTO tableOrPartition ( $targetCols)? )
					{
						// HiveParser.g:2864:11: ^( TOK_INSERT_INTO tableOrPartition ( $targetCols)? )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_INSERT_INTO, "TOK_INSERT_INTO"), root_1);
						adaptor.addChild(root_1, stream_tableOrPartition.nextTree());
						// HiveParser.g:2864:47: ( $targetCols)?
						if ( stream_targetCols.hasNext() ) {
							adaptor.addChild(root_1, stream_targetCols.nextTree());
						}
						stream_targetCols.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insertClause"


	public static class destination_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "destination"
	// HiveParser.g:2867:1: destination : ( (local= KW_LOCAL )? KW_DIRECTORY StringLiteral ( tableRowFormat )? ( tableFileFormat )? -> ^( TOK_DIR StringLiteral ( $local)? ( tableRowFormat )? ( tableFileFormat )? ) | KW_TABLE tableOrPartition -> tableOrPartition );
	public final HiveParser.destination_return destination() throws RecognitionException {
		HiveParser.destination_return retval = new HiveParser.destination_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token local=null;
		Token KW_DIRECTORY1064=null;
		Token StringLiteral1065=null;
		Token KW_TABLE1068=null;
		ParserRuleReturnScope tableRowFormat1066 =null;
		ParserRuleReturnScope tableFileFormat1067 =null;
		ParserRuleReturnScope tableOrPartition1069 =null;

		ASTNode local_tree=null;
		ASTNode KW_DIRECTORY1064_tree=null;
		ASTNode StringLiteral1065_tree=null;
		ASTNode KW_TABLE1068_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_DIRECTORY=new RewriteRuleTokenStream(adaptor,"token KW_DIRECTORY");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_LOCAL=new RewriteRuleTokenStream(adaptor,"token KW_LOCAL");
		RewriteRuleSubtreeStream stream_tableRowFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormat");
		RewriteRuleSubtreeStream stream_tableFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableFileFormat");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");

		 pushMsg(retval.start,"destination specification", state); 
		try {
			// HiveParser.g:2870:4: ( (local= KW_LOCAL )? KW_DIRECTORY StringLiteral ( tableRowFormat )? ( tableFileFormat )? -> ^( TOK_DIR StringLiteral ( $local)? ( tableRowFormat )? ( tableFileFormat )? ) | KW_TABLE tableOrPartition -> tableOrPartition )
			int alt354=2;
			int LA354_0 = input.LA(1);
			if ( (LA354_0==KW_DIRECTORY||LA354_0==KW_LOCAL) ) {
				alt354=1;
			}
			else if ( (LA354_0==KW_TABLE) ) {
				alt354=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 354, 0, input);
				throw nvae;
			}

			switch (alt354) {
				case 1 :
					// HiveParser.g:2871:6: (local= KW_LOCAL )? KW_DIRECTORY StringLiteral ( tableRowFormat )? ( tableFileFormat )?
					{
					// HiveParser.g:2871:6: (local= KW_LOCAL )?
					int alt351=2;
					int LA351_0 = input.LA(1);
					if ( (LA351_0==KW_LOCAL) ) {
						alt351=1;
					}
					switch (alt351) {
						case 1 :
							// HiveParser.g:2871:7: local= KW_LOCAL
							{
							local=(Token)match(input,KW_LOCAL,FOLLOW_KW_LOCAL_in_destination19109); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_LOCAL.add(local);

							}
							break;

					}

					KW_DIRECTORY1064=(Token)match(input,KW_DIRECTORY,FOLLOW_KW_DIRECTORY_in_destination19113); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DIRECTORY.add(KW_DIRECTORY1064);

					StringLiteral1065=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_destination19115); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral1065);

					// HiveParser.g:2871:53: ( tableRowFormat )?
					int alt352=2;
					int LA352_0 = input.LA(1);
					if ( (LA352_0==KW_ROW) ) {
						alt352=1;
					}
					switch (alt352) {
						case 1 :
							// HiveParser.g:2871:53: tableRowFormat
							{
							pushFollow(FOLLOW_tableRowFormat_in_destination19117);
							tableRowFormat1066=tableRowFormat();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableRowFormat.add(tableRowFormat1066.getTree());
							}
							break;

					}

					// HiveParser.g:2871:69: ( tableFileFormat )?
					int alt353=2;
					int LA353_0 = input.LA(1);
					if ( (LA353_0==KW_STORED) ) {
						alt353=1;
					}
					switch (alt353) {
						case 1 :
							// HiveParser.g:2871:69: tableFileFormat
							{
							pushFollow(FOLLOW_tableFileFormat_in_destination19120);
							tableFileFormat1067=tableFileFormat();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableFileFormat.add(tableFileFormat1067.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: local, tableFileFormat, tableRowFormat, StringLiteral
					// token labels: local
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_local=new RewriteRuleTokenStream(adaptor,"token local",local);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2872:8: -> ^( TOK_DIR StringLiteral ( $local)? ( tableRowFormat )? ( tableFileFormat )? )
					{
						// HiveParser.g:2872:11: ^( TOK_DIR StringLiteral ( $local)? ( tableRowFormat )? ( tableFileFormat )? )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DIR, "TOK_DIR"), root_1);
						adaptor.addChild(root_1, stream_StringLiteral.nextNode());
						// HiveParser.g:2872:36: ( $local)?
						if ( stream_local.hasNext() ) {
							adaptor.addChild(root_1, stream_local.nextNode());
						}
						stream_local.reset();

						// HiveParser.g:2872:43: ( tableRowFormat )?
						if ( stream_tableRowFormat.hasNext() ) {
							adaptor.addChild(root_1, stream_tableRowFormat.nextTree());
						}
						stream_tableRowFormat.reset();

						// HiveParser.g:2872:59: ( tableFileFormat )?
						if ( stream_tableFileFormat.hasNext() ) {
							adaptor.addChild(root_1, stream_tableFileFormat.nextTree());
						}
						stream_tableFileFormat.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:2873:6: KW_TABLE tableOrPartition
					{
					KW_TABLE1068=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_destination19153); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE1068);

					pushFollow(FOLLOW_tableOrPartition_in_destination19155);
					tableOrPartition1069=tableOrPartition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableOrPartition.add(tableOrPartition1069.getTree());
					// AST REWRITE
					// elements: tableOrPartition
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2873:32: -> tableOrPartition
					{
						adaptor.addChild(root_0, stream_tableOrPartition.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "destination"


	public static class limitClause_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "limitClause"
	// HiveParser.g:2876:1: limitClause : ( KW_LIMIT ( (offset= Number COMMA )? num= Number ) -> ^( TOK_LIMIT ( $offset)? $num) | KW_LIMIT num= Number KW_OFFSET offset= Number -> ^( TOK_LIMIT ( $offset)? $num) );
	public final HiveParser.limitClause_return limitClause() throws RecognitionException {
		HiveParser.limitClause_return retval = new HiveParser.limitClause_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token offset=null;
		Token num=null;
		Token KW_LIMIT1070=null;
		Token COMMA1071=null;
		Token KW_LIMIT1072=null;
		Token KW_OFFSET1073=null;

		ASTNode offset_tree=null;
		ASTNode num_tree=null;
		ASTNode KW_LIMIT1070_tree=null;
		ASTNode COMMA1071_tree=null;
		ASTNode KW_LIMIT1072_tree=null;
		ASTNode KW_OFFSET1073_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
		RewriteRuleTokenStream stream_KW_LIMIT=new RewriteRuleTokenStream(adaptor,"token KW_LIMIT");
		RewriteRuleTokenStream stream_KW_OFFSET=new RewriteRuleTokenStream(adaptor,"token KW_OFFSET");

		 pushMsg(retval.start,"limit clause", state); 
		try {
			// HiveParser.g:2879:4: ( KW_LIMIT ( (offset= Number COMMA )? num= Number ) -> ^( TOK_LIMIT ( $offset)? $num) | KW_LIMIT num= Number KW_OFFSET offset= Number -> ^( TOK_LIMIT ( $offset)? $num) )
			int alt356=2;
			int LA356_0 = input.LA(1);
			if ( (LA356_0==KW_LIMIT) ) {
				int LA356_1 = input.LA(2);
				if ( (LA356_1==Number) ) {
					int LA356_2 = input.LA(3);
					if ( (LA356_2==KW_OFFSET) ) {
						alt356=2;
					}
					else if ( (LA356_2==EOF||LA356_2==COMMA||LA356_2==KW_EXCEPT||LA356_2==KW_INSERT||LA356_2==KW_INTERSECT||LA356_2==KW_MAP||LA356_2==KW_MINUS||LA356_2==KW_REDUCE||LA356_2==KW_SELECT||LA356_2==KW_UNION||LA356_2==RPAREN) ) {
						alt356=1;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 356, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 356, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 356, 0, input);
				throw nvae;
			}

			switch (alt356) {
				case 1 :
					// HiveParser.g:2880:4: KW_LIMIT ( (offset= Number COMMA )? num= Number )
					{
					KW_LIMIT1070=(Token)match(input,KW_LIMIT,FOLLOW_KW_LIMIT_in_limitClause19187); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_LIMIT.add(KW_LIMIT1070);

					// HiveParser.g:2880:13: ( (offset= Number COMMA )? num= Number )
					// HiveParser.g:2880:14: (offset= Number COMMA )? num= Number
					{
					// HiveParser.g:2880:14: (offset= Number COMMA )?
					int alt355=2;
					int LA355_0 = input.LA(1);
					if ( (LA355_0==Number) ) {
						int LA355_1 = input.LA(2);
						if ( (LA355_1==COMMA) ) {
							alt355=1;
						}
					}
					switch (alt355) {
						case 1 :
							// HiveParser.g:2880:15: offset= Number COMMA
							{
							offset=(Token)match(input,Number,FOLLOW_Number_in_limitClause19193); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_Number.add(offset);

							COMMA1071=(Token)match(input,COMMA,FOLLOW_COMMA_in_limitClause19195); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA1071);

							}
							break;

					}

					num=(Token)match(input,Number,FOLLOW_Number_in_limitClause19201); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_Number.add(num);

					}

					// AST REWRITE
					// elements: offset, num
					// token labels: offset, num
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_offset=new RewriteRuleTokenStream(adaptor,"token offset",offset);
					RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2880:49: -> ^( TOK_LIMIT ( $offset)? $num)
					{
						// HiveParser.g:2880:52: ^( TOK_LIMIT ( $offset)? $num)
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_LIMIT, "TOK_LIMIT"), root_1);
						// HiveParser.g:2880:64: ( $offset)?
						if ( stream_offset.hasNext() ) {
							adaptor.addChild(root_1, stream_offset.nextNode());
						}
						stream_offset.reset();

						adaptor.addChild(root_1, stream_num.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:2881:6: KW_LIMIT num= Number KW_OFFSET offset= Number
					{
					KW_LIMIT1072=(Token)match(input,KW_LIMIT,FOLLOW_KW_LIMIT_in_limitClause19224); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_LIMIT.add(KW_LIMIT1072);

					num=(Token)match(input,Number,FOLLOW_Number_in_limitClause19228); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_Number.add(num);

					KW_OFFSET1073=(Token)match(input,KW_OFFSET,FOLLOW_KW_OFFSET_in_limitClause19230); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_OFFSET.add(KW_OFFSET1073);

					offset=(Token)match(input,Number,FOLLOW_Number_in_limitClause19234); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_Number.add(offset);

					// AST REWRITE
					// elements: offset, num
					// token labels: offset, num
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_offset=new RewriteRuleTokenStream(adaptor,"token offset",offset);
					RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2881:50: -> ^( TOK_LIMIT ( $offset)? $num)
					{
						// HiveParser.g:2881:53: ^( TOK_LIMIT ( $offset)? $num)
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_LIMIT, "TOK_LIMIT"), root_1);
						// HiveParser.g:2881:65: ( $offset)?
						if ( stream_offset.hasNext() ) {
							adaptor.addChild(root_1, stream_offset.nextNode());
						}
						stream_offset.reset();

						adaptor.addChild(root_1, stream_num.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "limitClause"


	public static class deleteStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "deleteStatement"
	// HiveParser.g:2885:1: deleteStatement : KW_DELETE KW_FROM tableName ( whereClause )? -> ^( TOK_DELETE_FROM tableName ( whereClause )? ) ;
	public final HiveParser.deleteStatement_return deleteStatement() throws RecognitionException {
		HiveParser.deleteStatement_return retval = new HiveParser.deleteStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_DELETE1074=null;
		Token KW_FROM1075=null;
		ParserRuleReturnScope tableName1076 =null;
		ParserRuleReturnScope whereClause1077 =null;

		ASTNode KW_DELETE1074_tree=null;
		ASTNode KW_FROM1075_tree=null;
		RewriteRuleTokenStream stream_KW_DELETE=new RewriteRuleTokenStream(adaptor,"token KW_DELETE");
		RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
		RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg(retval.start,"delete statement", state); 
		try {
			// HiveParser.g:2888:4: ( KW_DELETE KW_FROM tableName ( whereClause )? -> ^( TOK_DELETE_FROM tableName ( whereClause )? ) )
			// HiveParser.g:2889:4: KW_DELETE KW_FROM tableName ( whereClause )?
			{
			KW_DELETE1074=(Token)match(input,KW_DELETE,FOLLOW_KW_DELETE_in_deleteStatement19278); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DELETE.add(KW_DELETE1074);

			KW_FROM1075=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_deleteStatement19280); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM1075);

			pushFollow(FOLLOW_tableName_in_deleteStatement19282);
			tableName1076=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tableName1076.getTree());
			// HiveParser.g:2889:32: ( whereClause )?
			int alt357=2;
			int LA357_0 = input.LA(1);
			if ( (LA357_0==KW_WHERE) ) {
				alt357=1;
			}
			switch (alt357) {
				case 1 :
					// HiveParser.g:2889:33: whereClause
					{
					pushFollow(FOLLOW_whereClause_in_deleteStatement19285);
					whereClause1077=whereClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_whereClause.add(whereClause1077.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: tableName, whereClause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2889:47: -> ^( TOK_DELETE_FROM tableName ( whereClause )? )
			{
				// HiveParser.g:2889:50: ^( TOK_DELETE_FROM tableName ( whereClause )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_DELETE_FROM, "TOK_DELETE_FROM"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				// HiveParser.g:2889:78: ( whereClause )?
				if ( stream_whereClause.hasNext() ) {
					adaptor.addChild(root_1, stream_whereClause.nextTree());
				}
				stream_whereClause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "deleteStatement"


	public static class columnAssignmentClause_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnAssignmentClause"
	// HiveParser.g:2893:1: columnAssignmentClause : tableOrColumn EQUAL ^ precedencePlusExpression ;
	public final HiveParser.columnAssignmentClause_return columnAssignmentClause() throws RecognitionException {
		HiveParser.columnAssignmentClause_return retval = new HiveParser.columnAssignmentClause_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token EQUAL1079=null;
		ParserRuleReturnScope tableOrColumn1078 =null;
		ParserRuleReturnScope precedencePlusExpression1080 =null;

		ASTNode EQUAL1079_tree=null;

		try {
			// HiveParser.g:2894:4: ( tableOrColumn EQUAL ^ precedencePlusExpression )
			// HiveParser.g:2895:4: tableOrColumn EQUAL ^ precedencePlusExpression
			{
			root_0 = (ASTNode)adaptor.nil();


			pushFollow(FOLLOW_tableOrColumn_in_columnAssignmentClause19318);
			tableOrColumn1078=tableOrColumn();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, tableOrColumn1078.getTree());

			EQUAL1079=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_columnAssignmentClause19320); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			EQUAL1079_tree = (ASTNode)adaptor.create(EQUAL1079);
			root_0 = (ASTNode)adaptor.becomeRoot(EQUAL1079_tree, root_0);
			}

			pushFollow(FOLLOW_precedencePlusExpression_in_columnAssignmentClause19323);
			precedencePlusExpression1080=precedencePlusExpression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, precedencePlusExpression1080.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnAssignmentClause"


	public static class setColumnsClause_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "setColumnsClause"
	// HiveParser.g:2899:1: setColumnsClause : KW_SET columnAssignmentClause ( COMMA columnAssignmentClause )* -> ^( TOK_SET_COLUMNS_CLAUSE ( columnAssignmentClause )* ) ;
	public final HiveParser.setColumnsClause_return setColumnsClause() throws RecognitionException {
		HiveParser.setColumnsClause_return retval = new HiveParser.setColumnsClause_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_SET1081=null;
		Token COMMA1083=null;
		ParserRuleReturnScope columnAssignmentClause1082 =null;
		ParserRuleReturnScope columnAssignmentClause1084 =null;

		ASTNode KW_SET1081_tree=null;
		ASTNode COMMA1083_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_columnAssignmentClause=new RewriteRuleSubtreeStream(adaptor,"rule columnAssignmentClause");

		try {
			// HiveParser.g:2900:4: ( KW_SET columnAssignmentClause ( COMMA columnAssignmentClause )* -> ^( TOK_SET_COLUMNS_CLAUSE ( columnAssignmentClause )* ) )
			// HiveParser.g:2901:4: KW_SET columnAssignmentClause ( COMMA columnAssignmentClause )*
			{
			KW_SET1081=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_setColumnsClause19343); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET1081);

			pushFollow(FOLLOW_columnAssignmentClause_in_setColumnsClause19345);
			columnAssignmentClause1082=columnAssignmentClause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnAssignmentClause.add(columnAssignmentClause1082.getTree());
			// HiveParser.g:2901:34: ( COMMA columnAssignmentClause )*
			loop358:
			while (true) {
				int alt358=2;
				int LA358_0 = input.LA(1);
				if ( (LA358_0==COMMA) ) {
					alt358=1;
				}

				switch (alt358) {
				case 1 :
					// HiveParser.g:2901:35: COMMA columnAssignmentClause
					{
					COMMA1083=(Token)match(input,COMMA,FOLLOW_COMMA_in_setColumnsClause19348); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA1083);

					pushFollow(FOLLOW_columnAssignmentClause_in_setColumnsClause19350);
					columnAssignmentClause1084=columnAssignmentClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnAssignmentClause.add(columnAssignmentClause1084.getTree());
					}
					break;

				default :
					break loop358;
				}
			}

			// AST REWRITE
			// elements: columnAssignmentClause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2901:66: -> ^( TOK_SET_COLUMNS_CLAUSE ( columnAssignmentClause )* )
			{
				// HiveParser.g:2901:69: ^( TOK_SET_COLUMNS_CLAUSE ( columnAssignmentClause )* )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SET_COLUMNS_CLAUSE, "TOK_SET_COLUMNS_CLAUSE"), root_1);
				// HiveParser.g:2901:94: ( columnAssignmentClause )*
				while ( stream_columnAssignmentClause.hasNext() ) {
					adaptor.addChild(root_1, stream_columnAssignmentClause.nextTree());
				}
				stream_columnAssignmentClause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "setColumnsClause"


	public static class updateStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "updateStatement"
	// HiveParser.g:2908:1: updateStatement : KW_UPDATE tableName setColumnsClause ( whereClause )? -> ^( TOK_UPDATE_TABLE tableName setColumnsClause ( whereClause )? ) ;
	public final HiveParser.updateStatement_return updateStatement() throws RecognitionException {
		HiveParser.updateStatement_return retval = new HiveParser.updateStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_UPDATE1085=null;
		ParserRuleReturnScope tableName1086 =null;
		ParserRuleReturnScope setColumnsClause1087 =null;
		ParserRuleReturnScope whereClause1088 =null;

		ASTNode KW_UPDATE1085_tree=null;
		RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
		RewriteRuleSubtreeStream stream_setColumnsClause=new RewriteRuleSubtreeStream(adaptor,"rule setColumnsClause");
		RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg(retval.start,"update statement", state); 
		try {
			// HiveParser.g:2911:4: ( KW_UPDATE tableName setColumnsClause ( whereClause )? -> ^( TOK_UPDATE_TABLE tableName setColumnsClause ( whereClause )? ) )
			// HiveParser.g:2912:4: KW_UPDATE tableName setColumnsClause ( whereClause )?
			{
			KW_UPDATE1085=(Token)match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_updateStatement19392); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_UPDATE.add(KW_UPDATE1085);

			pushFollow(FOLLOW_tableName_in_updateStatement19394);
			tableName1086=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tableName1086.getTree());
			pushFollow(FOLLOW_setColumnsClause_in_updateStatement19396);
			setColumnsClause1087=setColumnsClause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_setColumnsClause.add(setColumnsClause1087.getTree());
			// HiveParser.g:2912:41: ( whereClause )?
			int alt359=2;
			int LA359_0 = input.LA(1);
			if ( (LA359_0==KW_WHERE) ) {
				alt359=1;
			}
			switch (alt359) {
				case 1 :
					// HiveParser.g:2912:41: whereClause
					{
					pushFollow(FOLLOW_whereClause_in_updateStatement19398);
					whereClause1088=whereClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_whereClause.add(whereClause1088.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: whereClause, tableName, setColumnsClause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2912:54: -> ^( TOK_UPDATE_TABLE tableName setColumnsClause ( whereClause )? )
			{
				// HiveParser.g:2912:57: ^( TOK_UPDATE_TABLE tableName setColumnsClause ( whereClause )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_UPDATE_TABLE, "TOK_UPDATE_TABLE"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				adaptor.addChild(root_1, stream_setColumnsClause.nextTree());
				// HiveParser.g:2912:103: ( whereClause )?
				if ( stream_whereClause.hasNext() ) {
					adaptor.addChild(root_1, stream_whereClause.nextTree());
				}
				stream_whereClause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "updateStatement"


	public static class sqlTransactionStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "sqlTransactionStatement"
	// HiveParser.g:2919:1: sqlTransactionStatement : ( startTransactionStatement | commitStatement | rollbackStatement | setAutoCommitStatement );
	public final HiveParser.sqlTransactionStatement_return sqlTransactionStatement() throws RecognitionException {
		HiveParser.sqlTransactionStatement_return retval = new HiveParser.sqlTransactionStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope startTransactionStatement1089 =null;
		ParserRuleReturnScope commitStatement1090 =null;
		ParserRuleReturnScope rollbackStatement1091 =null;
		ParserRuleReturnScope setAutoCommitStatement1092 =null;


		 pushMsg(retval.start,"transaction statement", state); 
		try {
			// HiveParser.g:2922:3: ( startTransactionStatement | commitStatement | rollbackStatement | setAutoCommitStatement )
			int alt360=4;
			switch ( input.LA(1) ) {
			case KW_START:
				{
				alt360=1;
				}
				break;
			case KW_COMMIT:
				{
				alt360=2;
				}
				break;
			case KW_ROLLBACK:
				{
				alt360=3;
				}
				break;
			case KW_SET:
				{
				alt360=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 360, 0, input);
				throw nvae;
			}
			switch (alt360) {
				case 1 :
					// HiveParser.g:2923:3: startTransactionStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_startTransactionStatement_in_sqlTransactionStatement19440);
					startTransactionStatement1089=startTransactionStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, startTransactionStatement1089.getTree());

					}
					break;
				case 2 :
					// HiveParser.g:2924:4: commitStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_commitStatement_in_sqlTransactionStatement19445);
					commitStatement1090=commitStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, commitStatement1090.getTree());

					}
					break;
				case 3 :
					// HiveParser.g:2925:4: rollbackStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_rollbackStatement_in_sqlTransactionStatement19450);
					rollbackStatement1091=rollbackStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, rollbackStatement1091.getTree());

					}
					break;
				case 4 :
					// HiveParser.g:2926:4: setAutoCommitStatement
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_setAutoCommitStatement_in_sqlTransactionStatement19455);
					setAutoCommitStatement1092=setAutoCommitStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, setAutoCommitStatement1092.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sqlTransactionStatement"


	public static class startTransactionStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "startTransactionStatement"
	// HiveParser.g:2929:1: startTransactionStatement : KW_START KW_TRANSACTION ( transactionMode ( COMMA transactionMode )* )? -> ^( TOK_START_TRANSACTION ( transactionMode )* ) ;
	public final HiveParser.startTransactionStatement_return startTransactionStatement() throws RecognitionException {
		HiveParser.startTransactionStatement_return retval = new HiveParser.startTransactionStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_START1093=null;
		Token KW_TRANSACTION1094=null;
		Token COMMA1096=null;
		ParserRuleReturnScope transactionMode1095 =null;
		ParserRuleReturnScope transactionMode1097 =null;

		ASTNode KW_START1093_tree=null;
		ASTNode KW_TRANSACTION1094_tree=null;
		ASTNode COMMA1096_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_START=new RewriteRuleTokenStream(adaptor,"token KW_START");
		RewriteRuleTokenStream stream_KW_TRANSACTION=new RewriteRuleTokenStream(adaptor,"token KW_TRANSACTION");
		RewriteRuleSubtreeStream stream_transactionMode=new RewriteRuleSubtreeStream(adaptor,"rule transactionMode");

		try {
			// HiveParser.g:2930:3: ( KW_START KW_TRANSACTION ( transactionMode ( COMMA transactionMode )* )? -> ^( TOK_START_TRANSACTION ( transactionMode )* ) )
			// HiveParser.g:2931:3: KW_START KW_TRANSACTION ( transactionMode ( COMMA transactionMode )* )?
			{
			KW_START1093=(Token)match(input,KW_START,FOLLOW_KW_START_in_startTransactionStatement19469); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_START.add(KW_START1093);

			KW_TRANSACTION1094=(Token)match(input,KW_TRANSACTION,FOLLOW_KW_TRANSACTION_in_startTransactionStatement19471); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TRANSACTION.add(KW_TRANSACTION1094);

			// HiveParser.g:2931:27: ( transactionMode ( COMMA transactionMode )* )?
			int alt362=2;
			int LA362_0 = input.LA(1);
			if ( (LA362_0==KW_ISOLATION||LA362_0==KW_READ) ) {
				alt362=1;
			}
			switch (alt362) {
				case 1 :
					// HiveParser.g:2931:29: transactionMode ( COMMA transactionMode )*
					{
					pushFollow(FOLLOW_transactionMode_in_startTransactionStatement19475);
					transactionMode1095=transactionMode();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_transactionMode.add(transactionMode1095.getTree());
					// HiveParser.g:2931:46: ( COMMA transactionMode )*
					loop361:
					while (true) {
						int alt361=2;
						int LA361_0 = input.LA(1);
						if ( (LA361_0==COMMA) ) {
							alt361=1;
						}

						switch (alt361) {
						case 1 :
							// HiveParser.g:2931:48: COMMA transactionMode
							{
							COMMA1096=(Token)match(input,COMMA,FOLLOW_COMMA_in_startTransactionStatement19480); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA1096);

							pushFollow(FOLLOW_transactionMode_in_startTransactionStatement19482);
							transactionMode1097=transactionMode();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_transactionMode.add(transactionMode1097.getTree());
							}
							break;

						default :
							break loop361;
						}
					}

					}
					break;

			}

			// AST REWRITE
			// elements: transactionMode
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2931:77: -> ^( TOK_START_TRANSACTION ( transactionMode )* )
			{
				// HiveParser.g:2931:80: ^( TOK_START_TRANSACTION ( transactionMode )* )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_START_TRANSACTION, "TOK_START_TRANSACTION"), root_1);
				// HiveParser.g:2931:104: ( transactionMode )*
				while ( stream_transactionMode.hasNext() ) {
					adaptor.addChild(root_1, stream_transactionMode.nextTree());
				}
				stream_transactionMode.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "startTransactionStatement"


	public static class transactionMode_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "transactionMode"
	// HiveParser.g:2934:1: transactionMode : ( isolationLevel | transactionAccessMode -> ^( TOK_TXN_ACCESS_MODE transactionAccessMode ) );
	public final HiveParser.transactionMode_return transactionMode() throws RecognitionException {
		HiveParser.transactionMode_return retval = new HiveParser.transactionMode_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope isolationLevel1098 =null;
		ParserRuleReturnScope transactionAccessMode1099 =null;

		RewriteRuleSubtreeStream stream_transactionAccessMode=new RewriteRuleSubtreeStream(adaptor,"rule transactionAccessMode");

		try {
			// HiveParser.g:2935:3: ( isolationLevel | transactionAccessMode -> ^( TOK_TXN_ACCESS_MODE transactionAccessMode ) )
			int alt363=2;
			int LA363_0 = input.LA(1);
			if ( (LA363_0==KW_ISOLATION) ) {
				alt363=1;
			}
			else if ( (LA363_0==KW_READ) ) {
				alt363=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 363, 0, input);
				throw nvae;
			}

			switch (alt363) {
				case 1 :
					// HiveParser.g:2936:3: isolationLevel
					{
					root_0 = (ASTNode)adaptor.nil();


					pushFollow(FOLLOW_isolationLevel_in_transactionMode19513);
					isolationLevel1098=isolationLevel();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, isolationLevel1098.getTree());

					}
					break;
				case 2 :
					// HiveParser.g:2937:5: transactionAccessMode
					{
					pushFollow(FOLLOW_transactionAccessMode_in_transactionMode19519);
					transactionAccessMode1099=transactionAccessMode();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_transactionAccessMode.add(transactionAccessMode1099.getTree());
					// AST REWRITE
					// elements: transactionAccessMode
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2937:27: -> ^( TOK_TXN_ACCESS_MODE transactionAccessMode )
					{
						// HiveParser.g:2937:30: ^( TOK_TXN_ACCESS_MODE transactionAccessMode )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TXN_ACCESS_MODE, "TOK_TXN_ACCESS_MODE"), root_1);
						adaptor.addChild(root_1, stream_transactionAccessMode.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "transactionMode"


	public static class transactionAccessMode_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "transactionAccessMode"
	// HiveParser.g:2940:1: transactionAccessMode : ( KW_READ KW_ONLY -> TOK_TXN_READ_ONLY | KW_READ KW_WRITE -> TOK_TXN_READ_WRITE );
	public final HiveParser.transactionAccessMode_return transactionAccessMode() throws RecognitionException {
		HiveParser.transactionAccessMode_return retval = new HiveParser.transactionAccessMode_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_READ1100=null;
		Token KW_ONLY1101=null;
		Token KW_READ1102=null;
		Token KW_WRITE1103=null;

		ASTNode KW_READ1100_tree=null;
		ASTNode KW_ONLY1101_tree=null;
		ASTNode KW_READ1102_tree=null;
		ASTNode KW_WRITE1103_tree=null;
		RewriteRuleTokenStream stream_KW_READ=new RewriteRuleTokenStream(adaptor,"token KW_READ");
		RewriteRuleTokenStream stream_KW_ONLY=new RewriteRuleTokenStream(adaptor,"token KW_ONLY");
		RewriteRuleTokenStream stream_KW_WRITE=new RewriteRuleTokenStream(adaptor,"token KW_WRITE");

		try {
			// HiveParser.g:2941:3: ( KW_READ KW_ONLY -> TOK_TXN_READ_ONLY | KW_READ KW_WRITE -> TOK_TXN_READ_WRITE )
			int alt364=2;
			int LA364_0 = input.LA(1);
			if ( (LA364_0==KW_READ) ) {
				int LA364_1 = input.LA(2);
				if ( (LA364_1==KW_ONLY) ) {
					alt364=1;
				}
				else if ( (LA364_1==KW_WRITE) ) {
					alt364=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 364, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 364, 0, input);
				throw nvae;
			}

			switch (alt364) {
				case 1 :
					// HiveParser.g:2942:3: KW_READ KW_ONLY
					{
					KW_READ1100=(Token)match(input,KW_READ,FOLLOW_KW_READ_in_transactionAccessMode19542); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_READ.add(KW_READ1100);

					KW_ONLY1101=(Token)match(input,KW_ONLY,FOLLOW_KW_ONLY_in_transactionAccessMode19544); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ONLY.add(KW_ONLY1101);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2942:19: -> TOK_TXN_READ_ONLY
					{
						adaptor.addChild(root_0, (ASTNode)adaptor.create(TOK_TXN_READ_ONLY, "TOK_TXN_READ_ONLY"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:2943:5: KW_READ KW_WRITE
					{
					KW_READ1102=(Token)match(input,KW_READ,FOLLOW_KW_READ_in_transactionAccessMode19554); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_READ.add(KW_READ1102);

					KW_WRITE1103=(Token)match(input,KW_WRITE,FOLLOW_KW_WRITE_in_transactionAccessMode19556); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_WRITE.add(KW_WRITE1103);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 2943:22: -> TOK_TXN_READ_WRITE
					{
						adaptor.addChild(root_0, (ASTNode)adaptor.create(TOK_TXN_READ_WRITE, "TOK_TXN_READ_WRITE"));
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "transactionAccessMode"


	public static class isolationLevel_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "isolationLevel"
	// HiveParser.g:2946:1: isolationLevel : KW_ISOLATION KW_LEVEL levelOfIsolation -> ^( TOK_ISOLATION_LEVEL levelOfIsolation ) ;
	public final HiveParser.isolationLevel_return isolationLevel() throws RecognitionException {
		HiveParser.isolationLevel_return retval = new HiveParser.isolationLevel_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_ISOLATION1104=null;
		Token KW_LEVEL1105=null;
		ParserRuleReturnScope levelOfIsolation1106 =null;

		ASTNode KW_ISOLATION1104_tree=null;
		ASTNode KW_LEVEL1105_tree=null;
		RewriteRuleTokenStream stream_KW_LEVEL=new RewriteRuleTokenStream(adaptor,"token KW_LEVEL");
		RewriteRuleTokenStream stream_KW_ISOLATION=new RewriteRuleTokenStream(adaptor,"token KW_ISOLATION");
		RewriteRuleSubtreeStream stream_levelOfIsolation=new RewriteRuleSubtreeStream(adaptor,"rule levelOfIsolation");

		try {
			// HiveParser.g:2947:3: ( KW_ISOLATION KW_LEVEL levelOfIsolation -> ^( TOK_ISOLATION_LEVEL levelOfIsolation ) )
			// HiveParser.g:2948:3: KW_ISOLATION KW_LEVEL levelOfIsolation
			{
			KW_ISOLATION1104=(Token)match(input,KW_ISOLATION,FOLLOW_KW_ISOLATION_in_isolationLevel19575); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ISOLATION.add(KW_ISOLATION1104);

			KW_LEVEL1105=(Token)match(input,KW_LEVEL,FOLLOW_KW_LEVEL_in_isolationLevel19577); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LEVEL.add(KW_LEVEL1105);

			pushFollow(FOLLOW_levelOfIsolation_in_isolationLevel19579);
			levelOfIsolation1106=levelOfIsolation();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_levelOfIsolation.add(levelOfIsolation1106.getTree());
			// AST REWRITE
			// elements: levelOfIsolation
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2948:42: -> ^( TOK_ISOLATION_LEVEL levelOfIsolation )
			{
				// HiveParser.g:2948:45: ^( TOK_ISOLATION_LEVEL levelOfIsolation )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ISOLATION_LEVEL, "TOK_ISOLATION_LEVEL"), root_1);
				adaptor.addChild(root_1, stream_levelOfIsolation.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "isolationLevel"


	public static class levelOfIsolation_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "levelOfIsolation"
	// HiveParser.g:2952:1: levelOfIsolation : KW_SNAPSHOT -> TOK_ISOLATION_SNAPSHOT ;
	public final HiveParser.levelOfIsolation_return levelOfIsolation() throws RecognitionException {
		HiveParser.levelOfIsolation_return retval = new HiveParser.levelOfIsolation_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_SNAPSHOT1107=null;

		ASTNode KW_SNAPSHOT1107_tree=null;
		RewriteRuleTokenStream stream_KW_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token KW_SNAPSHOT");

		try {
			// HiveParser.g:2953:3: ( KW_SNAPSHOT -> TOK_ISOLATION_SNAPSHOT )
			// HiveParser.g:2954:3: KW_SNAPSHOT
			{
			KW_SNAPSHOT1107=(Token)match(input,KW_SNAPSHOT,FOLLOW_KW_SNAPSHOT_in_levelOfIsolation19604); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SNAPSHOT.add(KW_SNAPSHOT1107);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2954:15: -> TOK_ISOLATION_SNAPSHOT
			{
				adaptor.addChild(root_0, (ASTNode)adaptor.create(TOK_ISOLATION_SNAPSHOT, "TOK_ISOLATION_SNAPSHOT"));
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "levelOfIsolation"


	public static class commitStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "commitStatement"
	// HiveParser.g:2957:1: commitStatement : KW_COMMIT ( KW_WORK )? -> TOK_COMMIT ;
	public final HiveParser.commitStatement_return commitStatement() throws RecognitionException {
		HiveParser.commitStatement_return retval = new HiveParser.commitStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_COMMIT1108=null;
		Token KW_WORK1109=null;

		ASTNode KW_COMMIT1108_tree=null;
		ASTNode KW_WORK1109_tree=null;
		RewriteRuleTokenStream stream_KW_WORK=new RewriteRuleTokenStream(adaptor,"token KW_WORK");
		RewriteRuleTokenStream stream_KW_COMMIT=new RewriteRuleTokenStream(adaptor,"token KW_COMMIT");

		try {
			// HiveParser.g:2958:3: ( KW_COMMIT ( KW_WORK )? -> TOK_COMMIT )
			// HiveParser.g:2959:3: KW_COMMIT ( KW_WORK )?
			{
			KW_COMMIT1108=(Token)match(input,KW_COMMIT,FOLLOW_KW_COMMIT_in_commitStatement19623); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_COMMIT.add(KW_COMMIT1108);

			// HiveParser.g:2959:13: ( KW_WORK )?
			int alt365=2;
			int LA365_0 = input.LA(1);
			if ( (LA365_0==KW_WORK) ) {
				alt365=1;
			}
			switch (alt365) {
				case 1 :
					// HiveParser.g:2959:15: KW_WORK
					{
					KW_WORK1109=(Token)match(input,KW_WORK,FOLLOW_KW_WORK_in_commitStatement19627); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_WORK.add(KW_WORK1109);

					}
					break;

			}

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2959:26: -> TOK_COMMIT
			{
				adaptor.addChild(root_0, (ASTNode)adaptor.create(TOK_COMMIT, "TOK_COMMIT"));
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "commitStatement"


	public static class rollbackStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "rollbackStatement"
	// HiveParser.g:2962:1: rollbackStatement : KW_ROLLBACK ( KW_WORK )? -> TOK_ROLLBACK ;
	public final HiveParser.rollbackStatement_return rollbackStatement() throws RecognitionException {
		HiveParser.rollbackStatement_return retval = new HiveParser.rollbackStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_ROLLBACK1110=null;
		Token KW_WORK1111=null;

		ASTNode KW_ROLLBACK1110_tree=null;
		ASTNode KW_WORK1111_tree=null;
		RewriteRuleTokenStream stream_KW_ROLLBACK=new RewriteRuleTokenStream(adaptor,"token KW_ROLLBACK");
		RewriteRuleTokenStream stream_KW_WORK=new RewriteRuleTokenStream(adaptor,"token KW_WORK");

		try {
			// HiveParser.g:2963:3: ( KW_ROLLBACK ( KW_WORK )? -> TOK_ROLLBACK )
			// HiveParser.g:2964:3: KW_ROLLBACK ( KW_WORK )?
			{
			KW_ROLLBACK1110=(Token)match(input,KW_ROLLBACK,FOLLOW_KW_ROLLBACK_in_rollbackStatement19649); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ROLLBACK.add(KW_ROLLBACK1110);

			// HiveParser.g:2964:15: ( KW_WORK )?
			int alt366=2;
			int LA366_0 = input.LA(1);
			if ( (LA366_0==KW_WORK) ) {
				alt366=1;
			}
			switch (alt366) {
				case 1 :
					// HiveParser.g:2964:17: KW_WORK
					{
					KW_WORK1111=(Token)match(input,KW_WORK,FOLLOW_KW_WORK_in_rollbackStatement19653); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_WORK.add(KW_WORK1111);

					}
					break;

			}

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2964:28: -> TOK_ROLLBACK
			{
				adaptor.addChild(root_0, (ASTNode)adaptor.create(TOK_ROLLBACK, "TOK_ROLLBACK"));
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rollbackStatement"


	public static class setAutoCommitStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "setAutoCommitStatement"
	// HiveParser.g:2966:1: setAutoCommitStatement : KW_SET KW_AUTOCOMMIT booleanValueTok -> ^( TOK_SET_AUTOCOMMIT booleanValueTok ) ;
	public final HiveParser.setAutoCommitStatement_return setAutoCommitStatement() throws RecognitionException {
		HiveParser.setAutoCommitStatement_return retval = new HiveParser.setAutoCommitStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_SET1112=null;
		Token KW_AUTOCOMMIT1113=null;
		ParserRuleReturnScope booleanValueTok1114 =null;

		ASTNode KW_SET1112_tree=null;
		ASTNode KW_AUTOCOMMIT1113_tree=null;
		RewriteRuleTokenStream stream_KW_AUTOCOMMIT=new RewriteRuleTokenStream(adaptor,"token KW_AUTOCOMMIT");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_booleanValueTok=new RewriteRuleSubtreeStream(adaptor,"rule booleanValueTok");

		try {
			// HiveParser.g:2967:3: ( KW_SET KW_AUTOCOMMIT booleanValueTok -> ^( TOK_SET_AUTOCOMMIT booleanValueTok ) )
			// HiveParser.g:2968:3: KW_SET KW_AUTOCOMMIT booleanValueTok
			{
			KW_SET1112=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_setAutoCommitStatement19674); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET1112);

			KW_AUTOCOMMIT1113=(Token)match(input,KW_AUTOCOMMIT,FOLLOW_KW_AUTOCOMMIT_in_setAutoCommitStatement19676); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_AUTOCOMMIT.add(KW_AUTOCOMMIT1113);

			pushFollow(FOLLOW_booleanValueTok_in_setAutoCommitStatement19678);
			booleanValueTok1114=booleanValueTok();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_booleanValueTok.add(booleanValueTok1114.getTree());
			// AST REWRITE
			// elements: booleanValueTok
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2968:40: -> ^( TOK_SET_AUTOCOMMIT booleanValueTok )
			{
				// HiveParser.g:2968:43: ^( TOK_SET_AUTOCOMMIT booleanValueTok )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_SET_AUTOCOMMIT, "TOK_SET_AUTOCOMMIT"), root_1);
				adaptor.addChild(root_1, stream_booleanValueTok.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "setAutoCommitStatement"


	public static class abortTransactionStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "abortTransactionStatement"
	// HiveParser.g:2974:1: abortTransactionStatement : KW_ABORT KW_TRANSACTIONS ( Number )+ -> ^( TOK_ABORT_TRANSACTIONS ( Number )+ ) ;
	public final HiveParser.abortTransactionStatement_return abortTransactionStatement() throws RecognitionException {
		HiveParser.abortTransactionStatement_return retval = new HiveParser.abortTransactionStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_ABORT1115=null;
		Token KW_TRANSACTIONS1116=null;
		Token Number1117=null;

		ASTNode KW_ABORT1115_tree=null;
		ASTNode KW_TRANSACTIONS1116_tree=null;
		ASTNode Number1117_tree=null;
		RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
		RewriteRuleTokenStream stream_KW_TRANSACTIONS=new RewriteRuleTokenStream(adaptor,"token KW_TRANSACTIONS");
		RewriteRuleTokenStream stream_KW_ABORT=new RewriteRuleTokenStream(adaptor,"token KW_ABORT");

		 pushMsg(retval.start,"abort transactions statement", state); 
		try {
			// HiveParser.g:2977:3: ( KW_ABORT KW_TRANSACTIONS ( Number )+ -> ^( TOK_ABORT_TRANSACTIONS ( Number )+ ) )
			// HiveParser.g:2978:3: KW_ABORT KW_TRANSACTIONS ( Number )+
			{
			KW_ABORT1115=(Token)match(input,KW_ABORT,FOLLOW_KW_ABORT_in_abortTransactionStatement19713); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ABORT.add(KW_ABORT1115);

			KW_TRANSACTIONS1116=(Token)match(input,KW_TRANSACTIONS,FOLLOW_KW_TRANSACTIONS_in_abortTransactionStatement19715); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TRANSACTIONS.add(KW_TRANSACTIONS1116);

			// HiveParser.g:2978:28: ( Number )+
			int cnt367=0;
			loop367:
			while (true) {
				int alt367=2;
				int LA367_0 = input.LA(1);
				if ( (LA367_0==Number) ) {
					alt367=1;
				}

				switch (alt367) {
				case 1 :
					// HiveParser.g:2978:30: Number
					{
					Number1117=(Token)match(input,Number,FOLLOW_Number_in_abortTransactionStatement19719); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_Number.add(Number1117);

					}
					break;

				default :
					if ( cnt367 >= 1 ) break loop367;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(367, input);
					throw eee;
				}
				cnt367++;
			}

			// AST REWRITE
			// elements: Number
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2978:40: -> ^( TOK_ABORT_TRANSACTIONS ( Number )+ )
			{
				// HiveParser.g:2978:43: ^( TOK_ABORT_TRANSACTIONS ( Number )+ )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_ABORT_TRANSACTIONS, "TOK_ABORT_TRANSACTIONS"), root_1);
				if ( !(stream_Number.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_Number.hasNext() ) {
					adaptor.addChild(root_1, stream_Number.nextNode());
				}
				stream_Number.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "abortTransactionStatement"


	public static class mergeStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "mergeStatement"
	// HiveParser.g:2985:1: mergeStatement : KW_MERGE ( QUERY_HINT )? KW_INTO tableName ( ( KW_AS )? identifier )? KW_USING joinSourcePart KW_ON expression whenClauses -> ^( TOK_MERGE ^( TOK_TABREF tableName ( identifier )? ) joinSourcePart expression ( QUERY_HINT )? whenClauses ) ;
	public final HiveParser.mergeStatement_return mergeStatement() throws RecognitionException {
		HiveParser.mergeStatement_return retval = new HiveParser.mergeStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_MERGE1118=null;
		Token QUERY_HINT1119=null;
		Token KW_INTO1120=null;
		Token KW_AS1122=null;
		Token KW_USING1124=null;
		Token KW_ON1126=null;
		ParserRuleReturnScope tableName1121 =null;
		ParserRuleReturnScope identifier1123 =null;
		ParserRuleReturnScope joinSourcePart1125 =null;
		ParserRuleReturnScope expression1127 =null;
		ParserRuleReturnScope whenClauses1128 =null;

		ASTNode KW_MERGE1118_tree=null;
		ASTNode QUERY_HINT1119_tree=null;
		ASTNode KW_INTO1120_tree=null;
		ASTNode KW_AS1122_tree=null;
		ASTNode KW_USING1124_tree=null;
		ASTNode KW_ON1126_tree=null;
		RewriteRuleTokenStream stream_KW_MERGE=new RewriteRuleTokenStream(adaptor,"token KW_MERGE");
		RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
		RewriteRuleTokenStream stream_KW_USING=new RewriteRuleTokenStream(adaptor,"token KW_USING");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_QUERY_HINT=new RewriteRuleTokenStream(adaptor,"token QUERY_HINT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_whenClauses=new RewriteRuleSubtreeStream(adaptor,"rule whenClauses");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
		RewriteRuleSubtreeStream stream_joinSourcePart=new RewriteRuleSubtreeStream(adaptor,"rule joinSourcePart");

		 pushMsg(retval.start,"MERGE statement", state); 
		try {
			// HiveParser.g:2988:4: ( KW_MERGE ( QUERY_HINT )? KW_INTO tableName ( ( KW_AS )? identifier )? KW_USING joinSourcePart KW_ON expression whenClauses -> ^( TOK_MERGE ^( TOK_TABREF tableName ( identifier )? ) joinSourcePart expression ( QUERY_HINT )? whenClauses ) )
			// HiveParser.g:2989:4: KW_MERGE ( QUERY_HINT )? KW_INTO tableName ( ( KW_AS )? identifier )? KW_USING joinSourcePart KW_ON expression whenClauses
			{
			KW_MERGE1118=(Token)match(input,KW_MERGE,FOLLOW_KW_MERGE_in_mergeStatement19765); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_MERGE.add(KW_MERGE1118);

			// HiveParser.g:2989:13: ( QUERY_HINT )?
			int alt368=2;
			int LA368_0 = input.LA(1);
			if ( (LA368_0==QUERY_HINT) ) {
				alt368=1;
			}
			switch (alt368) {
				case 1 :
					// HiveParser.g:2989:13: QUERY_HINT
					{
					QUERY_HINT1119=(Token)match(input,QUERY_HINT,FOLLOW_QUERY_HINT_in_mergeStatement19767); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_QUERY_HINT.add(QUERY_HINT1119);

					}
					break;

			}

			KW_INTO1120=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_mergeStatement19770); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_INTO.add(KW_INTO1120);

			pushFollow(FOLLOW_tableName_in_mergeStatement19772);
			tableName1121=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tableName1121.getTree());
			// HiveParser.g:2989:43: ( ( KW_AS )? identifier )?
			int alt370=2;
			int LA370_0 = input.LA(1);
			if ( (LA370_0==Identifier||(LA370_0 >= KW_ABORT && LA370_0 <= KW_AFTER)||LA370_0==KW_ALLOC_FRACTION||LA370_0==KW_ANALYZE||LA370_0==KW_ARCHIVE||(LA370_0 >= KW_AS && LA370_0 <= KW_AST)||(LA370_0 >= KW_AUTOCOMMIT && LA370_0 <= KW_BEFORE)||(LA370_0 >= KW_BUCKET && LA370_0 <= KW_BUCKETS)||(LA370_0 >= KW_CACHE && LA370_0 <= KW_CASCADE)||LA370_0==KW_CHANGE||(LA370_0 >= KW_CHECK && LA370_0 <= KW_COLLECTION)||(LA370_0 >= KW_COLUMNS && LA370_0 <= KW_COMMENT)||(LA370_0 >= KW_COMPACT && LA370_0 <= KW_CONCATENATE)||LA370_0==KW_CONTINUE||LA370_0==KW_DATA||(LA370_0 >= KW_DATABASES && LA370_0 <= KW_DEBUG)||(LA370_0 >= KW_DEFAULT && LA370_0 <= KW_DEFINED)||(LA370_0 >= KW_DELIMITED && LA370_0 <= KW_DESC)||(LA370_0 >= KW_DETAIL && LA370_0 <= KW_DISABLE)||(LA370_0 >= KW_DISTRIBUTE && LA370_0 <= KW_DO)||LA370_0==KW_DOW||(LA370_0 >= KW_DUMP && LA370_0 <= KW_ELEM_TYPE)||LA370_0==KW_ENABLE||(LA370_0 >= KW_ENFORCED && LA370_0 <= KW_ESCAPED)||LA370_0==KW_EXCLUSIVE||(LA370_0 >= KW_EXPLAIN && LA370_0 <= KW_EXPRESSION)||(LA370_0 >= KW_FIELDS && LA370_0 <= KW_FIRST)||(LA370_0 >= KW_FORMAT && LA370_0 <= KW_FORMATTED)||LA370_0==KW_FUNCTIONS||LA370_0==KW_GROUP||(LA370_0 >= KW_HOUR && LA370_0 <= KW_IDXPROPERTIES)||(LA370_0 >= KW_INDEX && LA370_0 <= KW_INDEXES)||(LA370_0 >= KW_INPATH && LA370_0 <= KW_INPUTFORMAT)||(LA370_0 >= KW_ISOLATION && LA370_0 <= KW_JAR)||(LA370_0 >= KW_KEY && LA370_0 <= KW_LAST)||LA370_0==KW_LEVEL||(LA370_0 >= KW_LIMIT && LA370_0 <= KW_LOAD)||(LA370_0 >= KW_LOCATION && LA370_0 <= KW_LONG)||LA370_0==KW_MANAGEMENT||(LA370_0 >= KW_MAPJOIN && LA370_0 <= KW_MATERIALIZED)||LA370_0==KW_METADATA||(LA370_0 >= KW_MINUTE && LA370_0 <= KW_MONTH)||(LA370_0 >= KW_MOVE && LA370_0 <= KW_MSCK)||(LA370_0 >= KW_NORELY && LA370_0 <= KW_NOSCAN)||LA370_0==KW_NOVALIDATE||LA370_0==KW_NULLS||LA370_0==KW_OFFSET||(LA370_0 >= KW_OPERATOR && LA370_0 <= KW_OPTION)||LA370_0==KW_ORDER||(LA370_0 >= KW_OUTPUTDRIVER && LA370_0 <= KW_OUTPUTFORMAT)||(LA370_0 >= KW_OVERWRITE && LA370_0 <= KW_OWNER)||(LA370_0 >= KW_PARTITIONED && LA370_0 <= KW_PATH)||(LA370_0 >= KW_PLAN && LA370_0 <= KW_POOL)||LA370_0==KW_PRINCIPALS||(LA370_0 >= KW_PURGE && LA370_0 <= KW_QUERY_PARALLELISM)||LA370_0==KW_READ||(LA370_0 >= KW_REBUILD && LA370_0 <= KW_RECORDWRITER)||(LA370_0 >= KW_RELOAD && LA370_0 <= KW_RESTRICT)||LA370_0==KW_REWRITE||(LA370_0 >= KW_ROLE && LA370_0 <= KW_ROLES)||(LA370_0 >= KW_SCHEDULING_POLICY && LA370_0 <= KW_SECOND)||(LA370_0 >= KW_SEMI && LA370_0 <= KW_SERVER)||(LA370_0 >= KW_SETS && LA370_0 <= KW_SKEWED)||(LA370_0 >= KW_SNAPSHOT && LA370_0 <= KW_SSL)||(LA370_0 >= KW_STATISTICS && LA370_0 <= KW_SUMMARY)||LA370_0==KW_TABLES||(LA370_0 >= KW_TBLPROPERTIES && LA370_0 <= KW_TERMINATED)||LA370_0==KW_TINYINT||(LA370_0 >= KW_TOUCH && LA370_0 <= KW_TRANSACTIONS)||LA370_0==KW_UNARCHIVE||LA370_0==KW_UNDO||LA370_0==KW_UNIONTYPE||(LA370_0 >= KW_UNKNOWN && LA370_0 <= KW_UNSIGNED)||(LA370_0 >= KW_URI && LA370_0 <= KW_USE)||(LA370_0 >= KW_UTC && LA370_0 <= KW_VALIDATE)||LA370_0==KW_VALUE_TYPE||(LA370_0 >= KW_VECTORIZATION && LA370_0 <= KW_WEEK)||LA370_0==KW_WHILE||(LA370_0 >= KW_WORK && LA370_0 <= KW_ZONE)||LA370_0==KW_BATCH||LA370_0==KW_DAYOFWEEK||LA370_0==KW_HOLD_DDLTIME||LA370_0==KW_IGNORE||LA370_0==KW_NO_DROP||LA370_0==KW_OFFLINE||LA370_0==KW_PROTECTION||LA370_0==KW_READONLY||LA370_0==KW_TIMESTAMPTZ) ) {
				alt370=1;
			}
			switch (alt370) {
				case 1 :
					// HiveParser.g:2989:44: ( KW_AS )? identifier
					{
					// HiveParser.g:2989:44: ( KW_AS )?
					int alt369=2;
					int LA369_0 = input.LA(1);
					if ( (LA369_0==KW_AS) ) {
						alt369=1;
					}
					switch (alt369) {
						case 1 :
							// HiveParser.g:2989:44: KW_AS
							{
							KW_AS1122=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_mergeStatement19775); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS1122);

							}
							break;

					}

					pushFollow(FOLLOW_identifier_in_mergeStatement19778);
					identifier1123=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(identifier1123.getTree());
					}
					break;

			}

			KW_USING1124=(Token)match(input,KW_USING,FOLLOW_KW_USING_in_mergeStatement19782); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_USING.add(KW_USING1124);

			pushFollow(FOLLOW_joinSourcePart_in_mergeStatement19784);
			joinSourcePart1125=joinSourcePart();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_joinSourcePart.add(joinSourcePart1125.getTree());
			KW_ON1126=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_mergeStatement19786); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON1126);

			pushFollow(FOLLOW_expression_in_mergeStatement19788);
			expression1127=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expression.add(expression1127.getTree());
			pushFollow(FOLLOW_whenClauses_in_mergeStatement19790);
			whenClauses1128=whenClauses();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_whenClauses.add(whenClauses1128.getTree());
			// AST REWRITE
			// elements: tableName, QUERY_HINT, identifier, joinSourcePart, expression, whenClauses
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 2990:6: -> ^( TOK_MERGE ^( TOK_TABREF tableName ( identifier )? ) joinSourcePart expression ( QUERY_HINT )? whenClauses )
			{
				// HiveParser.g:2990:9: ^( TOK_MERGE ^( TOK_TABREF tableName ( identifier )? ) joinSourcePart expression ( QUERY_HINT )? whenClauses )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_MERGE, "TOK_MERGE"), root_1);
				// HiveParser.g:2990:21: ^( TOK_TABREF tableName ( identifier )? )
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_TABREF, "TOK_TABREF"), root_2);
				adaptor.addChild(root_2, stream_tableName.nextTree());
				// HiveParser.g:2990:44: ( identifier )?
				if ( stream_identifier.hasNext() ) {
					adaptor.addChild(root_2, stream_identifier.nextTree());
				}
				stream_identifier.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_1, stream_joinSourcePart.nextTree());
				adaptor.addChild(root_1, stream_expression.nextTree());
				// HiveParser.g:2990:83: ( QUERY_HINT )?
				if ( stream_QUERY_HINT.hasNext() ) {
					adaptor.addChild(root_1, stream_QUERY_HINT.nextNode());
				}
				stream_QUERY_HINT.reset();

				adaptor.addChild(root_1, stream_whenClauses.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "mergeStatement"


	public static class whenClauses_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "whenClauses"
	// HiveParser.g:2998:1: whenClauses : ( whenMatchedAndClause | whenMatchedThenClause )* ( whenNotMatchedClause )? ;
	public final HiveParser.whenClauses_return whenClauses() throws RecognitionException {
		HiveParser.whenClauses_return retval = new HiveParser.whenClauses_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		ParserRuleReturnScope whenMatchedAndClause1129 =null;
		ParserRuleReturnScope whenMatchedThenClause1130 =null;
		ParserRuleReturnScope whenNotMatchedClause1131 =null;


		try {
			// HiveParser.g:2999:4: ( ( whenMatchedAndClause | whenMatchedThenClause )* ( whenNotMatchedClause )? )
			// HiveParser.g:3000:4: ( whenMatchedAndClause | whenMatchedThenClause )* ( whenNotMatchedClause )?
			{
			root_0 = (ASTNode)adaptor.nil();


			// HiveParser.g:3000:4: ( whenMatchedAndClause | whenMatchedThenClause )*
			loop371:
			while (true) {
				int alt371=3;
				int LA371_0 = input.LA(1);
				if ( (LA371_0==KW_WHEN) ) {
					int LA371_1 = input.LA(2);
					if ( (LA371_1==KW_MATCHED) ) {
						int LA371_4 = input.LA(3);
						if ( (LA371_4==KW_AND) ) {
							alt371=1;
						}
						else if ( (LA371_4==KW_THEN) ) {
							alt371=2;
						}

					}

				}

				switch (alt371) {
				case 1 :
					// HiveParser.g:3000:5: whenMatchedAndClause
					{
					pushFollow(FOLLOW_whenMatchedAndClause_in_whenClauses19839);
					whenMatchedAndClause1129=whenMatchedAndClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, whenMatchedAndClause1129.getTree());

					}
					break;
				case 2 :
					// HiveParser.g:3000:26: whenMatchedThenClause
					{
					pushFollow(FOLLOW_whenMatchedThenClause_in_whenClauses19841);
					whenMatchedThenClause1130=whenMatchedThenClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, whenMatchedThenClause1130.getTree());

					}
					break;

				default :
					break loop371;
				}
			}

			// HiveParser.g:3000:50: ( whenNotMatchedClause )?
			int alt372=2;
			int LA372_0 = input.LA(1);
			if ( (LA372_0==KW_WHEN) ) {
				alt372=1;
			}
			switch (alt372) {
				case 1 :
					// HiveParser.g:3000:50: whenNotMatchedClause
					{
					pushFollow(FOLLOW_whenNotMatchedClause_in_whenClauses19845);
					whenNotMatchedClause1131=whenNotMatchedClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, whenNotMatchedClause1131.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "whenClauses"


	public static class whenNotMatchedClause_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "whenNotMatchedClause"
	// HiveParser.g:3002:1: whenNotMatchedClause : KW_WHEN KW_NOT KW_MATCHED ( KW_AND expression )? KW_THEN KW_INSERT KW_VALUES valueRowConstructor -> ^( TOK_NOT_MATCHED ^( TOK_INSERT valueRowConstructor ) ( expression )? ) ;
	public final HiveParser.whenNotMatchedClause_return whenNotMatchedClause() throws RecognitionException {
		HiveParser.whenNotMatchedClause_return retval = new HiveParser.whenNotMatchedClause_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_WHEN1132=null;
		Token KW_NOT1133=null;
		Token KW_MATCHED1134=null;
		Token KW_AND1135=null;
		Token KW_THEN1137=null;
		Token KW_INSERT1138=null;
		Token KW_VALUES1139=null;
		ParserRuleReturnScope expression1136 =null;
		ParserRuleReturnScope valueRowConstructor1140 =null;

		ASTNode KW_WHEN1132_tree=null;
		ASTNode KW_NOT1133_tree=null;
		ASTNode KW_MATCHED1134_tree=null;
		ASTNode KW_AND1135_tree=null;
		ASTNode KW_THEN1137_tree=null;
		ASTNode KW_INSERT1138_tree=null;
		ASTNode KW_VALUES1139_tree=null;
		RewriteRuleTokenStream stream_KW_WHEN=new RewriteRuleTokenStream(adaptor,"token KW_WHEN");
		RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
		RewriteRuleTokenStream stream_KW_AND=new RewriteRuleTokenStream(adaptor,"token KW_AND");
		RewriteRuleTokenStream stream_KW_THEN=new RewriteRuleTokenStream(adaptor,"token KW_THEN");
		RewriteRuleTokenStream stream_KW_INSERT=new RewriteRuleTokenStream(adaptor,"token KW_INSERT");
		RewriteRuleTokenStream stream_KW_MATCHED=new RewriteRuleTokenStream(adaptor,"token KW_MATCHED");
		RewriteRuleTokenStream stream_KW_VALUES=new RewriteRuleTokenStream(adaptor,"token KW_VALUES");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_valueRowConstructor=new RewriteRuleSubtreeStream(adaptor,"rule valueRowConstructor");

		 pushMsg(retval.start,"WHEN NOT MATCHED clause", state); 
		try {
			// HiveParser.g:3005:4: ( KW_WHEN KW_NOT KW_MATCHED ( KW_AND expression )? KW_THEN KW_INSERT KW_VALUES valueRowConstructor -> ^( TOK_NOT_MATCHED ^( TOK_INSERT valueRowConstructor ) ( expression )? ) )
			// HiveParser.g:3006:3: KW_WHEN KW_NOT KW_MATCHED ( KW_AND expression )? KW_THEN KW_INSERT KW_VALUES valueRowConstructor
			{
			KW_WHEN1132=(Token)match(input,KW_WHEN,FOLLOW_KW_WHEN_in_whenNotMatchedClause19872); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_WHEN.add(KW_WHEN1132);

			KW_NOT1133=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_whenNotMatchedClause19874); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT1133);

			KW_MATCHED1134=(Token)match(input,KW_MATCHED,FOLLOW_KW_MATCHED_in_whenNotMatchedClause19876); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_MATCHED.add(KW_MATCHED1134);

			// HiveParser.g:3006:29: ( KW_AND expression )?
			int alt373=2;
			int LA373_0 = input.LA(1);
			if ( (LA373_0==KW_AND) ) {
				alt373=1;
			}
			switch (alt373) {
				case 1 :
					// HiveParser.g:3006:30: KW_AND expression
					{
					KW_AND1135=(Token)match(input,KW_AND,FOLLOW_KW_AND_in_whenNotMatchedClause19879); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_AND.add(KW_AND1135);

					pushFollow(FOLLOW_expression_in_whenNotMatchedClause19881);
					expression1136=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expression.add(expression1136.getTree());
					}
					break;

			}

			KW_THEN1137=(Token)match(input,KW_THEN,FOLLOW_KW_THEN_in_whenNotMatchedClause19885); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_THEN.add(KW_THEN1137);

			KW_INSERT1138=(Token)match(input,KW_INSERT,FOLLOW_KW_INSERT_in_whenNotMatchedClause19887); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_INSERT.add(KW_INSERT1138);

			KW_VALUES1139=(Token)match(input,KW_VALUES,FOLLOW_KW_VALUES_in_whenNotMatchedClause19889); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_VALUES.add(KW_VALUES1139);

			pushFollow(FOLLOW_valueRowConstructor_in_whenNotMatchedClause19891);
			valueRowConstructor1140=valueRowConstructor();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_valueRowConstructor.add(valueRowConstructor1140.getTree());
			// AST REWRITE
			// elements: expression, valueRowConstructor
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 3006:98: -> ^( TOK_NOT_MATCHED ^( TOK_INSERT valueRowConstructor ) ( expression )? )
			{
				// HiveParser.g:3007:5: ^( TOK_NOT_MATCHED ^( TOK_INSERT valueRowConstructor ) ( expression )? )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_NOT_MATCHED, "TOK_NOT_MATCHED"), root_1);
				// HiveParser.g:3007:23: ^( TOK_INSERT valueRowConstructor )
				{
				ASTNode root_2 = (ASTNode)adaptor.nil();
				root_2 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);
				adaptor.addChild(root_2, stream_valueRowConstructor.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// HiveParser.g:3007:57: ( expression )?
				if ( stream_expression.hasNext() ) {
					adaptor.addChild(root_1, stream_expression.nextTree());
				}
				stream_expression.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "whenNotMatchedClause"


	public static class whenMatchedAndClause_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "whenMatchedAndClause"
	// HiveParser.g:3009:1: whenMatchedAndClause : KW_WHEN KW_MATCHED KW_AND expression KW_THEN updateOrDelete -> ^( TOK_MATCHED updateOrDelete expression ) ;
	public final HiveParser.whenMatchedAndClause_return whenMatchedAndClause() throws RecognitionException {
		HiveParser.whenMatchedAndClause_return retval = new HiveParser.whenMatchedAndClause_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_WHEN1141=null;
		Token KW_MATCHED1142=null;
		Token KW_AND1143=null;
		Token KW_THEN1145=null;
		ParserRuleReturnScope expression1144 =null;
		ParserRuleReturnScope updateOrDelete1146 =null;

		ASTNode KW_WHEN1141_tree=null;
		ASTNode KW_MATCHED1142_tree=null;
		ASTNode KW_AND1143_tree=null;
		ASTNode KW_THEN1145_tree=null;
		RewriteRuleTokenStream stream_KW_WHEN=new RewriteRuleTokenStream(adaptor,"token KW_WHEN");
		RewriteRuleTokenStream stream_KW_AND=new RewriteRuleTokenStream(adaptor,"token KW_AND");
		RewriteRuleTokenStream stream_KW_THEN=new RewriteRuleTokenStream(adaptor,"token KW_THEN");
		RewriteRuleTokenStream stream_KW_MATCHED=new RewriteRuleTokenStream(adaptor,"token KW_MATCHED");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_updateOrDelete=new RewriteRuleSubtreeStream(adaptor,"rule updateOrDelete");

		 pushMsg(retval.start,"WHEN MATCHED AND clause", state); 
		try {
			// HiveParser.g:3012:3: ( KW_WHEN KW_MATCHED KW_AND expression KW_THEN updateOrDelete -> ^( TOK_MATCHED updateOrDelete expression ) )
			// HiveParser.g:3013:3: KW_WHEN KW_MATCHED KW_AND expression KW_THEN updateOrDelete
			{
			KW_WHEN1141=(Token)match(input,KW_WHEN,FOLLOW_KW_WHEN_in_whenMatchedAndClause19934); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_WHEN.add(KW_WHEN1141);

			KW_MATCHED1142=(Token)match(input,KW_MATCHED,FOLLOW_KW_MATCHED_in_whenMatchedAndClause19936); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_MATCHED.add(KW_MATCHED1142);

			KW_AND1143=(Token)match(input,KW_AND,FOLLOW_KW_AND_in_whenMatchedAndClause19938); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_AND.add(KW_AND1143);

			pushFollow(FOLLOW_expression_in_whenMatchedAndClause19940);
			expression1144=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expression.add(expression1144.getTree());
			KW_THEN1145=(Token)match(input,KW_THEN,FOLLOW_KW_THEN_in_whenMatchedAndClause19942); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_THEN.add(KW_THEN1145);

			pushFollow(FOLLOW_updateOrDelete_in_whenMatchedAndClause19944);
			updateOrDelete1146=updateOrDelete();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_updateOrDelete.add(updateOrDelete1146.getTree());
			// AST REWRITE
			// elements: updateOrDelete, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 3013:63: -> ^( TOK_MATCHED updateOrDelete expression )
			{
				// HiveParser.g:3014:5: ^( TOK_MATCHED updateOrDelete expression )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_MATCHED, "TOK_MATCHED"), root_1);
				adaptor.addChild(root_1, stream_updateOrDelete.nextTree());
				adaptor.addChild(root_1, stream_expression.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "whenMatchedAndClause"


	public static class whenMatchedThenClause_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "whenMatchedThenClause"
	// HiveParser.g:3016:1: whenMatchedThenClause : KW_WHEN KW_MATCHED KW_THEN updateOrDelete -> ^( TOK_MATCHED updateOrDelete ) ;
	public final HiveParser.whenMatchedThenClause_return whenMatchedThenClause() throws RecognitionException {
		HiveParser.whenMatchedThenClause_return retval = new HiveParser.whenMatchedThenClause_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_WHEN1147=null;
		Token KW_MATCHED1148=null;
		Token KW_THEN1149=null;
		ParserRuleReturnScope updateOrDelete1150 =null;

		ASTNode KW_WHEN1147_tree=null;
		ASTNode KW_MATCHED1148_tree=null;
		ASTNode KW_THEN1149_tree=null;
		RewriteRuleTokenStream stream_KW_WHEN=new RewriteRuleTokenStream(adaptor,"token KW_WHEN");
		RewriteRuleTokenStream stream_KW_THEN=new RewriteRuleTokenStream(adaptor,"token KW_THEN");
		RewriteRuleTokenStream stream_KW_MATCHED=new RewriteRuleTokenStream(adaptor,"token KW_MATCHED");
		RewriteRuleSubtreeStream stream_updateOrDelete=new RewriteRuleSubtreeStream(adaptor,"rule updateOrDelete");

		 pushMsg(retval.start,"WHEN MATCHED THEN clause", state); 
		try {
			// HiveParser.g:3019:3: ( KW_WHEN KW_MATCHED KW_THEN updateOrDelete -> ^( TOK_MATCHED updateOrDelete ) )
			// HiveParser.g:3020:3: KW_WHEN KW_MATCHED KW_THEN updateOrDelete
			{
			KW_WHEN1147=(Token)match(input,KW_WHEN,FOLLOW_KW_WHEN_in_whenMatchedThenClause19982); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_WHEN.add(KW_WHEN1147);

			KW_MATCHED1148=(Token)match(input,KW_MATCHED,FOLLOW_KW_MATCHED_in_whenMatchedThenClause19984); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_MATCHED.add(KW_MATCHED1148);

			KW_THEN1149=(Token)match(input,KW_THEN,FOLLOW_KW_THEN_in_whenMatchedThenClause19986); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_THEN.add(KW_THEN1149);

			pushFollow(FOLLOW_updateOrDelete_in_whenMatchedThenClause19988);
			updateOrDelete1150=updateOrDelete();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_updateOrDelete.add(updateOrDelete1150.getTree());
			// AST REWRITE
			// elements: updateOrDelete
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 3020:45: -> ^( TOK_MATCHED updateOrDelete )
			{
				// HiveParser.g:3021:6: ^( TOK_MATCHED updateOrDelete )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_MATCHED, "TOK_MATCHED"), root_1);
				adaptor.addChild(root_1, stream_updateOrDelete.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "whenMatchedThenClause"


	public static class updateOrDelete_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "updateOrDelete"
	// HiveParser.g:3023:1: updateOrDelete : ( KW_UPDATE setColumnsClause -> ^( TOK_UPDATE setColumnsClause ) | KW_DELETE -> TOK_DELETE );
	public final HiveParser.updateOrDelete_return updateOrDelete() throws RecognitionException {
		HiveParser.updateOrDelete_return retval = new HiveParser.updateOrDelete_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_UPDATE1151=null;
		Token KW_DELETE1153=null;
		ParserRuleReturnScope setColumnsClause1152 =null;

		ASTNode KW_UPDATE1151_tree=null;
		ASTNode KW_DELETE1153_tree=null;
		RewriteRuleTokenStream stream_KW_DELETE=new RewriteRuleTokenStream(adaptor,"token KW_DELETE");
		RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
		RewriteRuleSubtreeStream stream_setColumnsClause=new RewriteRuleSubtreeStream(adaptor,"rule setColumnsClause");

		try {
			// HiveParser.g:3024:4: ( KW_UPDATE setColumnsClause -> ^( TOK_UPDATE setColumnsClause ) | KW_DELETE -> TOK_DELETE )
			int alt374=2;
			int LA374_0 = input.LA(1);
			if ( (LA374_0==KW_UPDATE) ) {
				alt374=1;
			}
			else if ( (LA374_0==KW_DELETE) ) {
				alt374=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 374, 0, input);
				throw nvae;
			}

			switch (alt374) {
				case 1 :
					// HiveParser.g:3025:4: KW_UPDATE setColumnsClause
					{
					KW_UPDATE1151=(Token)match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_updateOrDelete20017); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_UPDATE.add(KW_UPDATE1151);

					pushFollow(FOLLOW_setColumnsClause_in_updateOrDelete20019);
					setColumnsClause1152=setColumnsClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_setColumnsClause.add(setColumnsClause1152.getTree());
					// AST REWRITE
					// elements: setColumnsClause
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 3025:31: -> ^( TOK_UPDATE setColumnsClause )
					{
						// HiveParser.g:3025:34: ^( TOK_UPDATE setColumnsClause )
						{
						ASTNode root_1 = (ASTNode)adaptor.nil();
						root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_UPDATE, "TOK_UPDATE"), root_1);
						adaptor.addChild(root_1, stream_setColumnsClause.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// HiveParser.g:3027:4: KW_DELETE
					{
					KW_DELETE1153=(Token)match(input,KW_DELETE,FOLLOW_KW_DELETE_in_updateOrDelete20037); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DELETE.add(KW_DELETE1153);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (ASTNode)adaptor.nil();
					// 3027:14: -> TOK_DELETE
					{
						adaptor.addChild(root_0, (ASTNode)adaptor.create(TOK_DELETE, "TOK_DELETE"));
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "updateOrDelete"


	public static class killQueryStatement_return extends ParserRuleReturnScope {
		ASTNode tree;
		@Override
		public ASTNode getTree() { return tree; }
	};


	// $ANTLR start "killQueryStatement"
	// HiveParser.g:3033:1: killQueryStatement : KW_KILL KW_QUERY ( StringLiteral )+ -> ^( TOK_KILL_QUERY ( StringLiteral )+ ) ;
	public final HiveParser.killQueryStatement_return killQueryStatement() throws RecognitionException {
		HiveParser.killQueryStatement_return retval = new HiveParser.killQueryStatement_return();
		retval.start = input.LT(1);

		ASTNode root_0 = null;

		Token KW_KILL1154=null;
		Token KW_QUERY1155=null;
		Token StringLiteral1156=null;

		ASTNode KW_KILL1154_tree=null;
		ASTNode KW_QUERY1155_tree=null;
		ASTNode StringLiteral1156_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_KILL=new RewriteRuleTokenStream(adaptor,"token KW_KILL");
		RewriteRuleTokenStream stream_KW_QUERY=new RewriteRuleTokenStream(adaptor,"token KW_QUERY");

		 pushMsg(retval.start,"kill query statement", state); 
		try {
			// HiveParser.g:3036:3: ( KW_KILL KW_QUERY ( StringLiteral )+ -> ^( TOK_KILL_QUERY ( StringLiteral )+ ) )
			// HiveParser.g:3037:3: KW_KILL KW_QUERY ( StringLiteral )+
			{
			KW_KILL1154=(Token)match(input,KW_KILL,FOLLOW_KW_KILL_in_killQueryStatement20069); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_KILL.add(KW_KILL1154);

			KW_QUERY1155=(Token)match(input,KW_QUERY,FOLLOW_KW_QUERY_in_killQueryStatement20071); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_QUERY.add(KW_QUERY1155);

			// HiveParser.g:3037:20: ( StringLiteral )+
			int cnt375=0;
			loop375:
			while (true) {
				int alt375=2;
				int LA375_0 = input.LA(1);
				if ( (LA375_0==StringLiteral) ) {
					alt375=1;
				}

				switch (alt375) {
				case 1 :
					// HiveParser.g:3037:22: StringLiteral
					{
					StringLiteral1156=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_killQueryStatement20075); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral1156);

					}
					break;

				default :
					if ( cnt375 >= 1 ) break loop375;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(375, input);
					throw eee;
				}
				cnt375++;
			}

			// AST REWRITE
			// elements: StringLiteral
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (ASTNode)adaptor.nil();
			// 3037:39: -> ^( TOK_KILL_QUERY ( StringLiteral )+ )
			{
				// HiveParser.g:3037:42: ^( TOK_KILL_QUERY ( StringLiteral )+ )
				{
				ASTNode root_1 = (ASTNode)adaptor.nil();
				root_1 = (ASTNode)adaptor.becomeRoot((ASTNode)adaptor.create(TOK_KILL_QUERY, "TOK_KILL_QUERY"), root_1);
				if ( !(stream_StringLiteral.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_StringLiteral.hasNext() ) {
					adaptor.addChild(root_1, stream_StringLiteral.nextNode());
				}
				stream_StringLiteral.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "killQueryStatement"

	// $ANTLR start synpred1_HiveParser
	public final void synpred1_HiveParser_fragment() throws RecognitionException {
		// HiveParser.g:968:7: ( grantPrivileges )
		// HiveParser.g:968:8: grantPrivileges
		{
		pushFollow(FOLLOW_grantPrivileges_in_synpred1_HiveParser2830);
		grantPrivileges();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred1_HiveParser

	// $ANTLR start synpred2_HiveParser
	public final void synpred2_HiveParser_fragment() throws RecognitionException {
		// HiveParser.g:969:7: ( revokePrivileges )
		// HiveParser.g:969:8: revokePrivileges
		{
		pushFollow(FOLLOW_revokePrivileges_in_synpred2_HiveParser2844);
		revokePrivileges();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred2_HiveParser

	// $ANTLR start synpred3_HiveParser
	public final void synpred3_HiveParser_fragment() throws RecognitionException {
		// HiveParser.g:1157:7: ( alterStatementSuffixRename[true] )
		// HiveParser.g:1157:8: alterStatementSuffixRename[true]
		{
		pushFollow(FOLLOW_alterStatementSuffixRename_in_synpred3_HiveParser4376);
		alterStatementSuffixRename(true);
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred3_HiveParser

	// $ANTLR start synpred4_HiveParser
	public final void synpred4_HiveParser_fragment() throws RecognitionException {
		// HiveParser.g:1544:4: ( KW_ELEM_TYPE )
		// HiveParser.g:1544:5: KW_ELEM_TYPE
		{
		match(input,KW_ELEM_TYPE,FOLLOW_KW_ELEM_TYPE_in_synpred4_HiveParser7217); if (state.failed) return;

		}

	}
	// $ANTLR end synpred4_HiveParser

	// $ANTLR start synpred5_HiveParser
	public final void synpred5_HiveParser_fragment() throws RecognitionException {
		// HiveParser.g:1546:4: ( KW_KEY_TYPE )
		// HiveParser.g:1546:5: KW_KEY_TYPE
		{
		match(input,KW_KEY_TYPE,FOLLOW_KW_KEY_TYPE_in_synpred5_HiveParser7233); if (state.failed) return;

		}

	}
	// $ANTLR end synpred5_HiveParser

	// $ANTLR start synpred6_HiveParser
	public final void synpred6_HiveParser_fragment() throws RecognitionException {
		// HiveParser.g:1548:4: ( KW_VALUE_TYPE )
		// HiveParser.g:1548:5: KW_VALUE_TYPE
		{
		match(input,KW_VALUE_TYPE,FOLLOW_KW_VALUE_TYPE_in_synpred6_HiveParser7249); if (state.failed) return;

		}

	}
	// $ANTLR end synpred6_HiveParser

	// $ANTLR start synpred7_HiveParser
	public final void synpred7_HiveParser_fragment() throws RecognitionException {
		// HiveParser.g:1572:5: ( KW_DATABASE | KW_SCHEMA )
		// HiveParser.g:
		{
		if ( input.LA(1)==KW_DATABASE||input.LA(1)==KW_SCHEMA ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred7_HiveParser

	// $ANTLR start synpred8_HiveParser
	public final void synpred8_HiveParser_fragment() throws RecognitionException {
		// HiveParser.g:1574:5: ( KW_FUNCTION )
		// HiveParser.g:1574:6: KW_FUNCTION
		{
		match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_synpred8_HiveParser7456); if (state.failed) return;

		}

	}
	// $ANTLR end synpred8_HiveParser

	// $ANTLR start synpred9_HiveParser
	public final void synpred9_HiveParser_fragment() throws RecognitionException {
		// HiveParser.g:1576:5: ( KW_FORMATTED | KW_EXTENDED )
		// HiveParser.g:
		{
		if ( input.LA(1)==KW_EXTENDED||input.LA(1)==KW_FORMATTED ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred9_HiveParser

	// $ANTLR start synpred10_HiveParser
	public final void synpred10_HiveParser_fragment() throws RecognitionException {
		// HiveParser.g:1587:7: ( KW_COMPUTE )
		// HiveParser.g:1587:8: KW_COMPUTE
		{
		match(input,KW_COMPUTE,FOLLOW_KW_COMPUTE_in_synpred10_HiveParser7609); if (state.failed) return;

		}

	}
	// $ANTLR end synpred10_HiveParser

	// $ANTLR start synpred11_HiveParser
	public final void synpred11_HiveParser_fragment() throws RecognitionException {
		// HiveParser.g:1591:7: ( KW_CACHE )
		// HiveParser.g:1591:8: KW_CACHE
		{
		match(input,KW_CACHE,FOLLOW_KW_CACHE_in_synpred11_HiveParser7737); if (state.failed) return;

		}

	}
	// $ANTLR end synpred11_HiveParser

	// $ANTLR start synpred12_HiveParser
	public final void synpred12_HiveParser_fragment() throws RecognitionException {
		// HiveParser.g:1607:9: ( KW_DATABASE | KW_SCHEMA )
		// HiveParser.g:
		{
		if ( input.LA(1)==KW_DATABASE||input.LA(1)==KW_SCHEMA ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred12_HiveParser

	// $ANTLR start synpred13_HiveParser
	public final void synpred13_HiveParser_fragment() throws RecognitionException {
		// HiveParser.g:1616:7: ( KW_DATABASE | KW_SCHEMA )
		// HiveParser.g:
		{
		if ( input.LA(1)==KW_DATABASE||input.LA(1)==KW_SCHEMA ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred13_HiveParser

	// $ANTLR start synpred14_HiveParser
	public final void synpred14_HiveParser_fragment() throws RecognitionException {
		// HiveParser.g:1732:5: ( KW_ALL )
		// HiveParser.g:1732:6: KW_ALL
		{
		match(input,KW_ALL,FOLLOW_KW_ALL_in_synpred14_HiveParser9250); if (state.failed) return;

		}

	}
	// $ANTLR end synpred14_HiveParser

	// $ANTLR start synpred15_HiveParser
	public final void synpred15_HiveParser_fragment() throws RecognitionException {
		// HiveParser.g:1734:5: ( KW_NONE )
		// HiveParser.g:1734:6: KW_NONE
		{
		match(input,KW_NONE,FOLLOW_KW_NONE_in_synpred15_HiveParser9281); if (state.failed) return;

		}

	}
	// $ANTLR end synpred15_HiveParser

	// $ANTLR start synpred16_HiveParser
	public final void synpred16_HiveParser_fragment() throws RecognitionException {
		// HiveParser.g:1758:7: ( KW_ALL )
		// HiveParser.g:1758:8: KW_ALL
		{
		match(input,KW_ALL,FOLLOW_KW_ALL_in_synpred16_HiveParser9455); if (state.failed) return;

		}

	}
	// $ANTLR end synpred16_HiveParser

	// $ANTLR start synpred17_HiveParser
	public final void synpred17_HiveParser_fragment() throws RecognitionException {
		// HiveParser.g:2041:117: ( storedAsDirs )
		// HiveParser.g:2041:118: storedAsDirs
		{
		pushFollow(FOLLOW_storedAsDirs_in_synpred17_HiveParser11855);
		storedAsDirs();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred17_HiveParser

	// $ANTLR start synpred18_HiveParser
	public final void synpred18_HiveParser_fragment() throws RecognitionException {
		// HiveParser.g:2172:7: ( KW_STORED KW_AS KW_INPUTFORMAT )
		// HiveParser.g:2172:8: KW_STORED KW_AS KW_INPUTFORMAT
		{
		match(input,KW_STORED,FOLLOW_KW_STORED_in_synpred18_HiveParser12836); if (state.failed) return;

		match(input,KW_AS,FOLLOW_KW_AS_in_synpred18_HiveParser12838); if (state.failed) return;

		match(input,KW_INPUTFORMAT,FOLLOW_KW_INPUTFORMAT_in_synpred18_HiveParser12840); if (state.failed) return;

		}

	}
	// $ANTLR end synpred18_HiveParser

	// $ANTLR start synpred19_HiveParser
	public final void synpred19_HiveParser_fragment() throws RecognitionException {
		// HiveParser.g:2223:25: ( KW_ELEM_TYPE )
		// HiveParser.g:2223:26: KW_ELEM_TYPE
		{
		match(input,KW_ELEM_TYPE,FOLLOW_KW_ELEM_TYPE_in_synpred19_HiveParser13278); if (state.failed) return;

		}

	}
	// $ANTLR end synpred19_HiveParser

	// $ANTLR start synpred20_HiveParser
	public final void synpred20_HiveParser_fragment() throws RecognitionException {
		// HiveParser.g:2223:58: ( KW_KEY_TYPE )
		// HiveParser.g:2223:59: KW_KEY_TYPE
		{
		match(input,KW_KEY_TYPE,FOLLOW_KW_KEY_TYPE_in_synpred20_HiveParser13288); if (state.failed) return;

		}

	}
	// $ANTLR end synpred20_HiveParser

	// $ANTLR start synpred21_HiveParser
	public final void synpred21_HiveParser_fragment() throws RecognitionException {
		// HiveParser.g:2223:89: ( KW_VALUE_TYPE )
		// HiveParser.g:2223:90: KW_VALUE_TYPE
		{
		match(input,KW_VALUE_TYPE,FOLLOW_KW_VALUE_TYPE_in_synpred21_HiveParser13298); if (state.failed) return;

		}

	}
	// $ANTLR end synpred21_HiveParser

	// Delegated rules
	public HiveParser_ResourcePlanParser.resourcePlanDdlStatements_return resourcePlanDdlStatements() throws RecognitionException { return gResourcePlanParser.resourcePlanDdlStatements(); }

	public HiveParser_IdentifiersParser.precedenceEqualOperator_return precedenceEqualOperator() throws RecognitionException { return gIdentifiersParser.precedenceEqualOperator(); }

	public HiveParser_IdentifiersParser.precedenceStarExpression_return precedenceStarExpression() throws RecognitionException { return gIdentifiersParser.precedenceStarExpression(); }

	public HiveParser_FromClauseParser.viewName_return viewName() throws RecognitionException { return gFromClauseParser.viewName(); }

	public HiveParser_ResourcePlanParser.unmanaged_return unmanaged() throws RecognitionException { return gResourcePlanParser.unmanaged(); }

	public HiveParser_FromClauseParser.joinSource_return joinSource() throws RecognitionException { return gFromClauseParser.joinSource(); }

	public HiveParser_ResourcePlanParser.triggerExpressionStandalone_return triggerExpressionStandalone() throws RecognitionException { return gResourcePlanParser.triggerExpressionStandalone(); }

	public HiveParser_IdentifiersParser.dropPartitionSpec_return dropPartitionSpec() throws RecognitionException { return gIdentifiersParser.dropPartitionSpec(); }

	public HiveParser_IdentifiersParser.dateLiteral_return dateLiteral() throws RecognitionException { return gIdentifiersParser.dateLiteral(); }

	public HiveParser_IdentifiersParser.intervalExpression_return intervalExpression() throws RecognitionException { return gIdentifiersParser.intervalExpression(); }

	public HiveParser_FromClauseParser.joinToken_return joinToken() throws RecognitionException { return gFromClauseParser.joinToken(); }

	public HiveParser_IdentifiersParser.expressionsNotInParenthesis_return expressionsNotInParenthesis(boolean isStruct, boolean forceStruct) throws RecognitionException { return gIdentifiersParser.expressionsNotInParenthesis(isStruct, forceStruct); }

	public HiveParser_IdentifiersParser.intervalLiteral_return intervalLiteral() throws RecognitionException { return gIdentifiersParser.intervalLiteral(); }

	public HiveParser_ResourcePlanParser.disable_return disable() throws RecognitionException { return gResourcePlanParser.disable(); }

	public HiveParser_ResourcePlanParser.rpUnassign_return rpUnassign() throws RecognitionException { return gResourcePlanParser.rpUnassign(); }

	public HiveParser_IdentifiersParser.precedenceSimilarExpressionIn_return precedenceSimilarExpressionIn(CommonTree t) throws RecognitionException { return gIdentifiersParser.precedenceSimilarExpressionIn(t); }

	public HiveParser_FromClauseParser.tableAlias_return tableAlias() throws RecognitionException { return gFromClauseParser.tableAlias(); }

	public HiveParser_IdentifiersParser.functionIdentifier_return functionIdentifier() throws RecognitionException { return gIdentifiersParser.functionIdentifier(); }

	public HiveParser_SelectClauseParser.trfmClause_return trfmClause() throws RecognitionException { return gSelectClauseParser.trfmClause(); }

	public HiveParser_ResourcePlanParser.triggerActionExpression_return triggerActionExpression() throws RecognitionException { return gResourcePlanParser.triggerActionExpression(); }

	public HiveParser_ResourcePlanParser.replaceResourcePlanStatement_return replaceResourcePlanStatement() throws RecognitionException { return gResourcePlanParser.replaceResourcePlanStatement(); }

	public HiveParser_FromClauseParser.partitioningSpec_return partitioningSpec() throws RecognitionException { return gFromClauseParser.partitioningSpec(); }

	public HiveParser_ResourcePlanParser.poolAssignList_return poolAssignList() throws RecognitionException { return gResourcePlanParser.poolAssignList(); }

	public HiveParser_SelectClauseParser.selectExpression_return selectExpression() throws RecognitionException { return gSelectClauseParser.selectExpression(); }

	public HiveParser_ResourcePlanParser.comparisionOperator_return comparisionOperator() throws RecognitionException { return gResourcePlanParser.comparisionOperator(); }

	public HiveParser_IdentifiersParser.principalIdentifier_return principalIdentifier() throws RecognitionException { return gIdentifiersParser.principalIdentifier(); }

	public HiveParser_FromClauseParser.whereClause_return whereClause() throws RecognitionException { return gFromClauseParser.whereClause(); }

	public HiveParser_IdentifiersParser.timestampLiteral_return timestampLiteral() throws RecognitionException { return gIdentifiersParser.timestampLiteral(); }

	public HiveParser_IdentifiersParser.distributeByClause_return distributeByClause() throws RecognitionException { return gIdentifiersParser.distributeByClause(); }

	public HiveParser_IdentifiersParser.precedenceSimilarExpressionMain_return precedenceSimilarExpressionMain() throws RecognitionException { return gIdentifiersParser.precedenceSimilarExpressionMain(); }

	public HiveParser_IdentifiersParser.expressionsInParenthesis_return expressionsInParenthesis(boolean isStruct, boolean forceStruct) throws RecognitionException { return gIdentifiersParser.expressionsInParenthesis(isStruct, forceStruct); }

	public HiveParser_IdentifiersParser.orderByClause_return orderByClause() throws RecognitionException { return gIdentifiersParser.orderByClause(); }

	public HiveParser_IdentifiersParser.booleanValueTok_return booleanValueTok() throws RecognitionException { return gIdentifiersParser.booleanValueTok(); }

	public HiveParser_ResourcePlanParser.triggerAndExpression_return triggerAndExpression() throws RecognitionException { return gResourcePlanParser.triggerAndExpression(); }

	public HiveParser_ResourcePlanParser.dropTriggerStatement_return dropTriggerStatement() throws RecognitionException { return gResourcePlanParser.dropTriggerStatement(); }

	public HiveParser_IdentifiersParser.nonReserved_return nonReserved() throws RecognitionException { return gIdentifiersParser.nonReserved(); }

	public HiveParser_IdentifiersParser.rollupOldSyntax_return rollupOldSyntax() throws RecognitionException { return gIdentifiersParser.rollupOldSyntax(); }

	public HiveParser_IdentifiersParser.groupingExpressionSingle_return groupingExpressionSingle() throws RecognitionException { return gIdentifiersParser.groupingExpressionSingle(); }

	public HiveParser_SelectClauseParser.window_defn_return window_defn() throws RecognitionException { return gSelectClauseParser.window_defn(); }

	public HiveParser_FromClauseParser.valuesTableConstructor_return valuesTableConstructor() throws RecognitionException { return gFromClauseParser.valuesTableConstructor(); }

	public HiveParser_IdentifiersParser.precedenceBitwiseXorOperator_return precedenceBitwiseXorOperator() throws RecognitionException { return gIdentifiersParser.precedenceBitwiseXorOperator(); }

	public HiveParser_IdentifiersParser.precedenceDistinctOperator_return precedenceDistinctOperator() throws RecognitionException { return gIdentifiersParser.precedenceDistinctOperator(); }

	public HiveParser_FromClauseParser.tableAllColumns_return tableAllColumns() throws RecognitionException { return gFromClauseParser.tableAllColumns(); }

	public HiveParser_FromClauseParser.atomjoinSource_return atomjoinSource() throws RecognitionException { return gFromClauseParser.atomjoinSource(); }

	public HiveParser_FromClauseParser.uniqueJoinToken_return uniqueJoinToken() throws RecognitionException { return gFromClauseParser.uniqueJoinToken(); }

	public HiveParser_IdentifiersParser.timestampLocalTZLiteral_return timestampLocalTZLiteral() throws RecognitionException { return gIdentifiersParser.timestampLocalTZLiteral(); }

	public HiveParser_IdentifiersParser.constant_return constant() throws RecognitionException { return gIdentifiersParser.constant(); }

	public HiveParser_FromClauseParser.tableOrColumn_return tableOrColumn() throws RecognitionException { return gFromClauseParser.tableOrColumn(); }

	public HiveParser_ResourcePlanParser.triggerAtomExpression_return triggerAtomExpression() throws RecognitionException { return gResourcePlanParser.triggerAtomExpression(); }

	public HiveParser_IdentifiersParser.clusterByClause_return clusterByClause() throws RecognitionException { return gIdentifiersParser.clusterByClause(); }

	public HiveParser_SelectClauseParser.selectTrfmClause_return selectTrfmClause() throws RecognitionException { return gSelectClauseParser.selectTrfmClause(); }

	public HiveParser_ResourcePlanParser.alterPoolStatement_return alterPoolStatement() throws RecognitionException { return gResourcePlanParser.alterPoolStatement(); }

	public HiveParser_IdentifiersParser.precedenceSimilarExpressionAtom_return precedenceSimilarExpressionAtom(CommonTree t) throws RecognitionException { return gIdentifiersParser.precedenceSimilarExpressionAtom(t); }

	public HiveParser_FromClauseParser.lateralView_return lateralView() throws RecognitionException { return gFromClauseParser.lateralView(); }

	public HiveParser_ResourcePlanParser.alterResourcePlanStatement_return alterResourcePlanStatement() throws RecognitionException { return gResourcePlanParser.alterResourcePlanStatement(); }

	public HiveParser_IdentifiersParser.havingCondition_return havingCondition() throws RecognitionException { return gIdentifiersParser.havingCondition(); }

	public HiveParser_SelectClauseParser.window_specification_return window_specification() throws RecognitionException { return gSelectClauseParser.window_specification(); }

	public HiveParser_SelectClauseParser.window_frame_return window_frame() throws RecognitionException { return gSelectClauseParser.window_frame(); }

	public HiveParser_FromClauseParser.splitSample_return splitSample() throws RecognitionException { return gFromClauseParser.splitSample(); }

	public HiveParser_IdentifiersParser.groupByEmpty_return groupByEmpty() throws RecognitionException { return gIdentifiersParser.groupByEmpty(); }

	public HiveParser_SelectClauseParser.window_frame_boundary_return window_frame_boundary() throws RecognitionException { return gSelectClauseParser.window_frame_boundary(); }

	public HiveParser_SelectClauseParser.window_range_expression_return window_range_expression() throws RecognitionException { return gSelectClauseParser.window_range_expression(); }

	public HiveParser_IdentifiersParser.precedenceStarOperator_return precedenceStarOperator() throws RecognitionException { return gIdentifiersParser.precedenceStarOperator(); }

	public HiveParser_IdentifiersParser.dropPartitionOperator_return dropPartitionOperator() throws RecognitionException { return gIdentifiersParser.dropPartitionOperator(); }

	public HiveParser_IdentifiersParser.partitionVal_return partitionVal() throws RecognitionException { return gIdentifiersParser.partitionVal(); }

	public HiveParser_IdentifiersParser.sortByClause_return sortByClause() throws RecognitionException { return gIdentifiersParser.sortByClause(); }

	public HiveParser_ResourcePlanParser.enable_return enable() throws RecognitionException { return gResourcePlanParser.enable(); }

	public HiveParser_ResourcePlanParser.createTriggerStatement_return createTriggerStatement() throws RecognitionException { return gResourcePlanParser.createTriggerStatement(); }

	public HiveParser_ResourcePlanParser.rpAssign_return rpAssign() throws RecognitionException { return gResourcePlanParser.rpAssign(); }

	public HiveParser_IdentifiersParser.precedenceAndOperator_return precedenceAndOperator() throws RecognitionException { return gIdentifiersParser.precedenceAndOperator(); }

	public HiveParser_IdentifiersParser.precedenceOrOperator_return precedenceOrOperator() throws RecognitionException { return gIdentifiersParser.precedenceOrOperator(); }

	public HiveParser_ResourcePlanParser.rpAssignList_return rpAssignList() throws RecognitionException { return gResourcePlanParser.rpAssignList(); }

	public HiveParser_IdentifiersParser.columnRefOrderNotInParenthesis_return columnRefOrderNotInParenthesis() throws RecognitionException { return gIdentifiersParser.columnRefOrderNotInParenthesis(); }

	public HiveParser_ResourcePlanParser.triggerExpression_return triggerExpression() throws RecognitionException { return gResourcePlanParser.triggerExpression(); }

	public HiveParser_IdentifiersParser.extractExpression_return extractExpression() throws RecognitionException { return gIdentifiersParser.extractExpression(); }

	public HiveParser_FromClauseParser.searchCondition_return searchCondition() throws RecognitionException { return gFromClauseParser.searchCondition(); }

	public HiveParser_FromClauseParser.valueRowConstructor_return valueRowConstructor() throws RecognitionException { return gFromClauseParser.valueRowConstructor(); }

	public HiveParser_ResourcePlanParser.rpUnassignList_return rpUnassignList() throws RecognitionException { return gResourcePlanParser.rpUnassignList(); }

	public HiveParser_IdentifiersParser.intervalValue_return intervalValue() throws RecognitionException { return gIdentifiersParser.intervalValue(); }

	public HiveParser_SelectClauseParser.selectList_return selectList() throws RecognitionException { return gSelectClauseParser.selectList(); }

	public HiveParser_SelectClauseParser.window_value_expression_return window_value_expression() throws RecognitionException { return gSelectClauseParser.window_value_expression(); }

	public HiveParser_IdentifiersParser.precedenceBitwiseXorExpression_return precedenceBitwiseXorExpression() throws RecognitionException { return gIdentifiersParser.precedenceBitwiseXorExpression(); }

	public HiveParser_IdentifiersParser.whenExpression_return whenExpression() throws RecognitionException { return gIdentifiersParser.whenExpression(); }

	public HiveParser_IdentifiersParser.function_return function() throws RecognitionException { return gIdentifiersParser.function(); }

	public HiveParser_IdentifiersParser.charSetStringLiteral_return charSetStringLiteral() throws RecognitionException { return gIdentifiersParser.charSetStringLiteral(); }

	public HiveParser_IdentifiersParser.precedenceBitwiseOrExpression_return precedenceBitwiseOrExpression() throws RecognitionException { return gIdentifiersParser.precedenceBitwiseOrExpression(); }

	public HiveParser_ResourcePlanParser.dropMappingStatement_return dropMappingStatement() throws RecognitionException { return gResourcePlanParser.dropMappingStatement(); }

	public HiveParser_IdentifiersParser.booleanValue_return booleanValue() throws RecognitionException { return gIdentifiersParser.booleanValue(); }

	public HiveParser_IdentifiersParser.precedenceUnarySuffixExpression_return precedenceUnarySuffixExpression() throws RecognitionException { return gIdentifiersParser.precedenceUnarySuffixExpression(); }

	public HiveParser_IdentifiersParser.floorDateQualifiers_return floorDateQualifiers() throws RecognitionException { return gIdentifiersParser.floorDateQualifiers(); }

	public HiveParser_FromClauseParser.tableSource_return tableSource() throws RecognitionException { return gFromClauseParser.tableSource(); }

	public HiveParser_IdentifiersParser.precedenceSimilarExpressionPartNot_return precedenceSimilarExpressionPartNot(CommonTree t) throws RecognitionException { return gIdentifiersParser.precedenceSimilarExpressionPartNot(t); }

	public HiveParser_ResourcePlanParser.alterTriggerStatement_return alterTriggerStatement() throws RecognitionException { return gResourcePlanParser.alterTriggerStatement(); }

	public HiveParser_ResourcePlanParser.createPoolStatement_return createPoolStatement() throws RecognitionException { return gResourcePlanParser.createPoolStatement(); }

	public HiveParser_IdentifiersParser.descFuncNames_return descFuncNames() throws RecognitionException { return gIdentifiersParser.descFuncNames(); }

	public HiveParser_IdentifiersParser.functionName_return functionName() throws RecognitionException { return gIdentifiersParser.functionName(); }

	public HiveParser_SelectClauseParser.selectClause_return selectClause() throws RecognitionException { return gSelectClauseParser.selectClause(); }

	public HiveParser_ResourcePlanParser.triggerActionExpressionStandalone_return triggerActionExpressionStandalone() throws RecognitionException { return gResourcePlanParser.triggerActionExpressionStandalone(); }

	public HiveParser_ResourcePlanParser.activate_return activate() throws RecognitionException { return gResourcePlanParser.activate(); }

	public HiveParser_IdentifiersParser.precedenceSimilarExpression_return precedenceSimilarExpression() throws RecognitionException { return gIdentifiersParser.precedenceSimilarExpression(); }

	public HiveParser_SelectClauseParser.selectItem_return selectItem() throws RecognitionException { return gSelectClauseParser.selectItem(); }

	public HiveParser_ResourcePlanParser.dropPoolStatement_return dropPoolStatement() throws RecognitionException { return gResourcePlanParser.dropPoolStatement(); }

	public HiveParser_IdentifiersParser.precedenceFieldExpression_return precedenceFieldExpression() throws RecognitionException { return gIdentifiersParser.precedenceFieldExpression(); }

	public HiveParser_FromClauseParser.expressionList_return expressionList() throws RecognitionException { return gFromClauseParser.expressionList(); }

	public HiveParser_IdentifiersParser.precedenceRegexpOperator_return precedenceRegexpOperator() throws RecognitionException { return gIdentifiersParser.precedenceRegexpOperator(); }

	public HiveParser_IdentifiersParser.precedenceNotOperator_return precedenceNotOperator() throws RecognitionException { return gIdentifiersParser.precedenceNotOperator(); }

	public HiveParser_IdentifiersParser.havingClause_return havingClause() throws RecognitionException { return gIdentifiersParser.havingClause(); }

	public HiveParser_IdentifiersParser.precedenceSimilarExpressionPart_return precedenceSimilarExpressionPart(CommonTree t) throws RecognitionException { return gIdentifiersParser.precedenceSimilarExpressionPart(t); }

	public HiveParser_IdentifiersParser.precedenceBitwiseOrOperator_return precedenceBitwiseOrOperator() throws RecognitionException { return gIdentifiersParser.precedenceBitwiseOrOperator(); }

	public HiveParser_ResourcePlanParser.poolAssign_return poolAssign() throws RecognitionException { return gResourcePlanParser.poolAssign(); }

	public HiveParser_IdentifiersParser.precedenceAmpersandOperator_return precedenceAmpersandOperator() throws RecognitionException { return gIdentifiersParser.precedenceAmpersandOperator(); }

	public HiveParser_FromClauseParser.partitionTableFunctionSource_return partitionTableFunctionSource() throws RecognitionException { return gFromClauseParser.partitionTableFunctionSource(); }

	public HiveParser_IdentifiersParser.precedenceNotExpression_return precedenceNotExpression() throws RecognitionException { return gIdentifiersParser.precedenceNotExpression(); }

	public HiveParser_IdentifiersParser.precedenceOrExpression_return precedenceOrExpression() throws RecognitionException { return gIdentifiersParser.precedenceOrExpression(); }

	public HiveParser_IdentifiersParser.precedencePlusExpression_return precedencePlusExpression() throws RecognitionException { return gIdentifiersParser.precedencePlusExpression(); }

	public HiveParser_FromClauseParser.uniqueJoinTableSource_return uniqueJoinTableSource() throws RecognitionException { return gFromClauseParser.uniqueJoinTableSource(); }

	public HiveParser_IdentifiersParser.precedenceUnaryOperator_return precedenceUnaryOperator() throws RecognitionException { return gIdentifiersParser.precedenceUnaryOperator(); }

	public HiveParser_FromClauseParser.tableBucketSample_return tableBucketSample() throws RecognitionException { return gFromClauseParser.tableBucketSample(); }

	public HiveParser_IdentifiersParser.intervalQualifiers_return intervalQualifiers() throws RecognitionException { return gIdentifiersParser.intervalQualifiers(); }

	public HiveParser_FromClauseParser.partitionedTableFunction_return partitionedTableFunction() throws RecognitionException { return gFromClauseParser.partitionedTableFunction(); }

	public HiveParser_IdentifiersParser.precedenceUnaryPrefixExpression_return precedenceUnaryPrefixExpression() throws RecognitionException { return gIdentifiersParser.precedenceUnaryPrefixExpression(); }

	public HiveParser_ResourcePlanParser.globalWmStatement_return globalWmStatement() throws RecognitionException { return gResourcePlanParser.globalWmStatement(); }

	public HiveParser_IdentifiersParser.precedencePlusOperator_return precedencePlusOperator() throws RecognitionException { return gIdentifiersParser.precedencePlusOperator(); }

	public HiveParser_IdentifiersParser.partitionByClause_return partitionByClause() throws RecognitionException { return gIdentifiersParser.partitionByClause(); }

	public HiveParser_FromClauseParser.tableName_return tableName() throws RecognitionException { return gFromClauseParser.tableName(); }

	public HiveParser_ResourcePlanParser.createMappingStatement_return createMappingStatement() throws RecognitionException { return gResourcePlanParser.createMappingStatement(); }

	public HiveParser_IdentifiersParser.dropPartitionVal_return dropPartitionVal() throws RecognitionException { return gIdentifiersParser.dropPartitionVal(); }

	public HiveParser_IdentifiersParser.caseExpression_return caseExpression() throws RecognitionException { return gIdentifiersParser.caseExpression(); }

	public HiveParser_IdentifiersParser.floorExpression_return floorExpression() throws RecognitionException { return gIdentifiersParser.floorExpression(); }

	public HiveParser_IdentifiersParser.expressionPart_return expressionPart(CommonTree t, boolean isStruct) throws RecognitionException { return gIdentifiersParser.expressionPart(t, isStruct); }

	public HiveParser_IdentifiersParser.groupByClause_return groupByClause() throws RecognitionException { return gIdentifiersParser.groupByClause(); }

	public HiveParser_SelectClauseParser.window_clause_return window_clause() throws RecognitionException { return gSelectClauseParser.window_clause(); }

	public HiveParser_IdentifiersParser.castExpression_return castExpression() throws RecognitionException { return gIdentifiersParser.castExpression(); }

	public HiveParser_SelectClauseParser.selectExpressionList_return selectExpressionList() throws RecognitionException { return gSelectClauseParser.selectExpressionList(); }

	public HiveParser_ResourcePlanParser.withReplace_return withReplace() throws RecognitionException { return gResourcePlanParser.withReplace(); }

	public HiveParser_IdentifiersParser.sysFuncNames_return sysFuncNames() throws RecognitionException { return gIdentifiersParser.sysFuncNames(); }

	public HiveParser_IdentifiersParser.precedenceAndExpression_return precedenceAndExpression() throws RecognitionException { return gIdentifiersParser.precedenceAndExpression(); }

	public HiveParser_IdentifiersParser.columnRefOrderInParenthesis_return columnRefOrderInParenthesis() throws RecognitionException { return gIdentifiersParser.columnRefOrderInParenthesis(); }

	public HiveParser_FromClauseParser.joinSourcePart_return joinSourcePart() throws RecognitionException { return gFromClauseParser.joinSourcePart(); }

	public HiveParser_IdentifiersParser.timeQualifiers_return timeQualifiers() throws RecognitionException { return gIdentifiersParser.timeQualifiers(); }

	public HiveParser_IdentifiersParser.expressions_return expressions() throws RecognitionException { return gIdentifiersParser.expressions(); }

	public HiveParser_FromClauseParser.uniqueJoinSource_return uniqueJoinSource() throws RecognitionException { return gFromClauseParser.uniqueJoinSource(); }

	public HiveParser_SelectClauseParser.window_frame_start_boundary_return window_frame_start_boundary() throws RecognitionException { return gSelectClauseParser.window_frame_start_boundary(); }

	public HiveParser_FromClauseParser.uniqueJoinExpr_return uniqueJoinExpr() throws RecognitionException { return gFromClauseParser.uniqueJoinExpr(); }

	public HiveParser_ResourcePlanParser.poolPath_return poolPath() throws RecognitionException { return gResourcePlanParser.poolPath(); }

	public HiveParser_FromClauseParser.virtualTableSource_return virtualTableSource() throws RecognitionException { return gFromClauseParser.virtualTableSource(); }

	public HiveParser_ResourcePlanParser.dropResourcePlanStatement_return dropResourcePlanStatement() throws RecognitionException { return gResourcePlanParser.dropResourcePlanStatement(); }

	public HiveParser_IdentifiersParser.tableOrPartition_return tableOrPartition() throws RecognitionException { return gIdentifiersParser.tableOrPartition(); }

	public HiveParser_IdentifiersParser.groupingSetExpression_return groupingSetExpression() throws RecognitionException { return gIdentifiersParser.groupingSetExpression(); }

	public HiveParser_FromClauseParser.fromSource_return fromSource() throws RecognitionException { return gFromClauseParser.fromSource(); }

	public HiveParser_ResourcePlanParser.triggerOrExpression_return triggerOrExpression() throws RecognitionException { return gResourcePlanParser.triggerOrExpression(); }

	public HiveParser_FromClauseParser.valuesClause_return valuesClause() throws RecognitionException { return gFromClauseParser.valuesClause(); }

	public HiveParser_IdentifiersParser.rollupStandard_return rollupStandard() throws RecognitionException { return gIdentifiersParser.rollupStandard(); }

	public HiveParser_IdentifiersParser.identifier_return identifier() throws RecognitionException { return gIdentifiersParser.identifier(); }

	public HiveParser_IdentifiersParser.precedenceConcatenateExpression_return precedenceConcatenateExpression() throws RecognitionException { return gIdentifiersParser.precedenceConcatenateExpression(); }

	public HiveParser_IdentifiersParser.precedenceConcatenateOperator_return precedenceConcatenateOperator() throws RecognitionException { return gIdentifiersParser.precedenceConcatenateOperator(); }

	public HiveParser_IdentifiersParser.stringLiteralSequence_return stringLiteralSequence() throws RecognitionException { return gIdentifiersParser.stringLiteralSequence(); }

	public HiveParser_FromClauseParser.aliasList_return aliasList() throws RecognitionException { return gFromClauseParser.aliasList(); }

	public HiveParser_IdentifiersParser.expression_return expression() throws RecognitionException { return gIdentifiersParser.expression(); }

	public HiveParser_IdentifiersParser.partitionSpec_return partitionSpec() throws RecognitionException { return gIdentifiersParser.partitionSpec(); }

	public HiveParser_IdentifiersParser.precedenceSimilarOperator_return precedenceSimilarOperator() throws RecognitionException { return gIdentifiersParser.precedenceSimilarOperator(); }

	public HiveParser_FromClauseParser.subQuerySource_return subQuerySource() throws RecognitionException { return gFromClauseParser.subQuerySource(); }

	public HiveParser_IdentifiersParser.precedenceEqualExpression_return precedenceEqualExpression() throws RecognitionException { return gIdentifiersParser.precedenceEqualExpression(); }

	public HiveParser_ResourcePlanParser.triggerLiteral_return triggerLiteral() throws RecognitionException { return gResourcePlanParser.triggerLiteral(); }

	public HiveParser_ResourcePlanParser.createResourcePlanStatement_return createResourcePlanStatement() throws RecognitionException { return gResourcePlanParser.createResourcePlanStatement(); }

	public HiveParser_IdentifiersParser.groupingSetExpressionMultiple_return groupingSetExpressionMultiple() throws RecognitionException { return gIdentifiersParser.groupingSetExpressionMultiple(); }

	public HiveParser_ResourcePlanParser.alterMappingStatement_return alterMappingStatement() throws RecognitionException { return gResourcePlanParser.alterMappingStatement(); }

	public HiveParser_FromClauseParser.fromClause_return fromClause() throws RecognitionException { return gFromClauseParser.fromClause(); }

	public HiveParser_IdentifiersParser.groupby_expression_return groupby_expression() throws RecognitionException { return gIdentifiersParser.groupby_expression(); }

	public HiveParser_FromClauseParser.tableSample_return tableSample() throws RecognitionException { return gFromClauseParser.tableSample(); }

	public HiveParser_IdentifiersParser.subQueryExpression_return subQueryExpression() throws RecognitionException { return gIdentifiersParser.subQueryExpression(); }

	public HiveParser_IdentifiersParser.precedenceAmpersandExpression_return precedenceAmpersandExpression() throws RecognitionException { return gIdentifiersParser.precedenceAmpersandExpression(); }

	public HiveParser_IdentifiersParser.isCondition_return isCondition() throws RecognitionException { return gIdentifiersParser.isCondition(); }

	public HiveParser_IdentifiersParser.atomExpression_return atomExpression() throws RecognitionException { return gIdentifiersParser.atomExpression(); }

	public HiveParser_IdentifiersParser.sql11ReservedKeywordsUsedAsFunctionName_return sql11ReservedKeywordsUsedAsFunctionName() throws RecognitionException { return gIdentifiersParser.sql11ReservedKeywordsUsedAsFunctionName(); }

	public final boolean synpred18_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred18_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred21_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred21_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred7_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred7_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred11_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred11_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred15_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred15_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred13_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred13_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred10_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred10_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred8_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred8_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred4_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred4_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred2_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred2_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred6_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred6_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred19_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred19_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred14_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred14_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred17_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred17_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred20_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred20_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred12_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred12_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred3_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred3_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred9_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred9_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred16_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred16_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred5_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred5_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred1_HiveParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred1_HiveParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}


	protected DFA2 dfa2 = new DFA2(this);
	protected DFA28 dfa28 = new DFA28(this);
	protected DFA231 dfa231 = new DFA231(this);
	protected DFA274 dfa274 = new DFA274(this);
	protected DFA289 dfa289 = new DFA289(this);
	static final String DFA2_eotS =
		"\142\uffff";
	static final String DFA2_eofS =
		"\142\uffff";
	static final String DFA2_minS =
		"\1\32\25\uffff\1\32\113\uffff";
	static final String DFA2_maxS =
		"\1\u016f\25\uffff\1\u016f\113\uffff";
	static final String DFA2_acceptS =
		"\1\uffff\1\2\45\uffff\1\1\72\uffff";
	static final String DFA2_specialS =
		"\142\uffff}>";
	static final String[] DFA2_transitionS = {
			"\1\1\7\uffff\1\1\1\26\7\uffff\2\47\30\uffff\1\1\7\uffff\1\1\15\uffff"+
			"\1\47\4\uffff\1\1\1\uffff\1\47\2\1\3\uffff\1\1\5\uffff\1\1\3\uffff\1"+
			"\1\10\uffff\1\1\1\uffff\1\47\17\uffff\1\47\1\1\3\uffff\1\1\6\uffff\1"+
			"\1\7\uffff\1\1\14\uffff\1\1\10\uffff\1\1\2\uffff\1\1\2\47\3\uffff\1\1"+
			"\4\uffff\1\1\6\uffff\1\1\60\uffff\1\1\2\uffff\1\1\2\uffff\1\47\1\uffff"+
			"\2\1\3\uffff\1\1\5\uffff\1\1\7\uffff\1\1\4\uffff\1\1\2\uffff\1\1\7\uffff"+
			"\1\1\33\uffff\1\1\10\uffff\1\1\3\uffff\1\1\1\uffff\1\1\10\uffff\1\47"+
			"\10\uffff\1\1\11\uffff\1\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\47\7\uffff\2\47\7\uffff\2\47\30\uffff\1\47\7\uffff\1\47\15\uffff"+
			"\1\47\4\uffff\1\47\1\uffff\3\47\3\uffff\1\47\5\uffff\1\47\3\uffff\1\47"+
			"\10\uffff\1\47\1\uffff\1\47\17\uffff\2\47\3\uffff\1\47\6\uffff\1\47\7"+
			"\uffff\1\47\14\uffff\1\47\10\uffff\1\47\2\uffff\3\47\3\uffff\1\47\4\uffff"+
			"\1\47\6\uffff\1\47\60\uffff\1\47\2\uffff\1\47\2\uffff\1\47\1\uffff\2"+
			"\47\3\uffff\1\47\5\uffff\1\47\7\uffff\1\47\4\uffff\1\47\2\uffff\1\47"+
			"\7\uffff\1\47\10\uffff\1\1\22\uffff\1\47\10\uffff\1\47\3\uffff\1\47\1"+
			"\uffff\1\47\10\uffff\1\47\10\uffff\1\47\11\uffff\1\47",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
	static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
	static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
	static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
	static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
	static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
	static final short[][] DFA2_transition;

	static {
		int numStates = DFA2_transitionS.length;
		DFA2_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
		}
	}

	protected class DFA2 extends DFA {

		public DFA2(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 2;
			this.eot = DFA2_eot;
			this.eof = DFA2_eof;
			this.min = DFA2_min;
			this.max = DFA2_max;
			this.accept = DFA2_accept;
			this.special = DFA2_special;
			this.transition = DFA2_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 800:6: ( explainOption )*";
		}
	}

	static final String DFA28_eotS =
		"\u008e\uffff";
	static final String DFA28_eofS =
		"\u008e\uffff";
	static final String DFA28_minS =
		"\1\32\1\46\1\uffff\1\46\1\uffff\1\46\2\uffff\1\103\3\uffff\2\125\2\30"+
		"\7\uffff\1\176\22\uffff\1\u0090\65\uffff\1\11\1\uffff\1\11\13\uffff\1"+
		"\11\1\uffff\1\11\16\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
		"\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0";
	static final String DFA28_maxS =
		"\1\u0153\1\u015d\1\uffff\1\u015d\1\uffff\1\u015d\2\uffff\1\u015e\3\uffff"+
		"\2\u0131\2\u0292\7\uffff\1\u013f\22\uffff\1\u00be\65\uffff\1\u016f\1\uffff"+
		"\1\u016f\13\uffff\1\u016f\1\uffff\1\u016f\16\uffff\1\0\1\uffff\1\0\1\uffff"+
		"\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0";
	static final String DFA28_acceptS =
		"\2\uffff\1\2\1\uffff\1\6\1\uffff\1\10\2\uffff\1\12\1\22\1\24\4\uffff\1"+
		"\43\1\45\1\46\1\47\2\uffff\1\14\1\uffff\1\31\3\uffff\1\1\1\uffff\1\4\2"+
		"\uffff\1\13\1\uffff\1\17\3\uffff\1\5\1\15\1\16\1\uffff\1\32\3\uffff\1"+
		"\3\1\uffff\1\21\3\uffff\1\7\12\uffff\1\11\15\uffff\1\35\1\36\1\37\1\40"+
		"\1\44\2\uffff\1\25\1\27\1\uffff\1\26\1\30\1\uffff\5\33\1\uffff\1\33\1"+
		"\uffff\2\33\1\41\2\uffff\6\34\1\uffff\1\34\1\uffff\2\34\1\42\3\uffff\1"+
		"\20\4\uffff\1\23\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1"+
		"\uffff\1\34\1\uffff\1\34\1\uffff\1\34\1\uffff\1\34\1\uffff";
	static final String DFA28_specialS =
		"\16\uffff\1\0\1\1\120\uffff\1\2\1\uffff\1\3\13\uffff\1\4\1\uffff\1\5\16"+
		"\uffff\1\6\1\uffff\1\7\1\uffff\1\10\1\uffff\1\11\1\uffff\1\12\1\uffff"+
		"\1\13\1\uffff\1\14\1\uffff\1\15}>";
	static final String[] DFA28_transitionS = {
			"\1\21\7\uffff\1\5\1\13\51\uffff\1\1\25\uffff\2\6\3\uffff\1\23\5\uffff"+
			"\1\3\3\uffff\1\23\37\uffff\1\16\33\uffff\1\22\13\uffff\1\14\21\uffff"+
			"\1\11\63\uffff\1\12\5\uffff\1\23\3\uffff\1\17\22\uffff\1\20\2\uffff\1"+
			"\10\43\uffff\1\4\10\uffff\1\15\5\uffff\1\2",
			"\1\23\56\uffff\1\34\50\uffff\1\36\21\uffff\1\43\2\uffff\1\23\60\uffff"+
			"\1\26\25\uffff\1\41\20\uffff\1\23\34\uffff\1\23\5\uffff\1\30\6\uffff"+
			"\1\34\33\uffff\1\36\3\uffff\1\27\11\uffff\1\36\2\uffff\1\23\21\uffff"+
			"\1\23\10\uffff\1\41",
			"",
			"\1\23\56\uffff\1\57\72\uffff\1\61\2\uffff\1\23\60\uffff\1\51\46\uffff"+
			"\1\23\34\uffff\1\23\5\uffff\1\53\6\uffff\1\57\33\uffff\1\47\3\uffff\1"+
			"\52\14\uffff\1\23\21\uffff\1\23\10\uffff\1\50",
			"",
			"\1\23\56\uffff\1\65\75\uffff\1\23\60\uffff\1\65\46\uffff\1\23\34\uffff"+
			"\1\23\14\uffff\1\65\33\uffff\1\65\20\uffff\1\23\21\uffff\1\23\10\uffff"+
			"\1\65",
			"",
			"",
			"\1\100\3\uffff\1\100\2\uffff\1\100\2\uffff\1\100\2\uffff\1\122\5\uffff"+
			"\1\100\72\uffff\1\100\1\116\50\uffff\1\100\10\uffff\1\100\40\uffff\1"+
			"\100\12\uffff\1\120\27\uffff\1\100\5\uffff\1\117\1\121\6\uffff\1\100"+
			"\32\uffff\2\100\1\uffff\1\100\13\uffff\1\100\35\uffff\1\100",
			"",
			"",
			"",
			"\1\126\u00bf\uffff\1\126\33\uffff\1\125",
			"\1\131\u00bf\uffff\1\131\33\uffff\1\130",
			"\1\145\1\uffff\6\145\1\133\1\145\1\134\1\145\3\uffff\1\145\2\uffff\2"+
			"\145\1\uffff\2\145\5\uffff\2\145\1\uffff\2\145\2\uffff\1\145\1\uffff"+
			"\5\145\1\uffff\2\145\1\uffff\4\145\2\uffff\1\145\1\136\6\uffff\1\145"+
			"\1\uffff\6\145\1\uffff\3\145\1\144\3\145\1\uffff\4\145\1\uffff\2\145"+
			"\1\uffff\1\145\1\137\2\145\1\uffff\1\145\1\uffff\2\145\2\uffff\1\145"+
			"\1\uffff\3\145\5\uffff\4\145\6\uffff\2\145\3\uffff\1\145\1\uffff\1\145"+
			"\2\uffff\2\145\3\uffff\2\145\1\uffff\3\145\1\143\5\uffff\3\145\1\uffff"+
			"\5\145\3\uffff\1\145\1\uffff\3\145\1\uffff\1\145\1\140\3\145\1\uffff"+
			"\1\145\1\uffff\4\145\1\uffff\1\145\1\uffff\2\145\1\uffff\2\145\1\uffff"+
			"\2\145\1\uffff\1\145\1\uffff\1\145\1\uffff\1\145\2\uffff\2\145\1\uffff"+
			"\1\145\2\uffff\2\145\1\uffff\2\145\1\uffff\3\145\1\uffff\4\145\4\uffff"+
			"\1\145\1\uffff\4\145\1\uffff\1\145\2\uffff\3\145\3\uffff\12\145\1\uffff"+
			"\1\145\2\uffff\2\145\4\uffff\4\145\1\141\4\145\1\uffff\3\145\1\142\1"+
			"\145\1\uffff\4\145\1\uffff\7\145\2\uffff\1\145\1\uffff\3\145\4\uffff"+
			"\1\145\1\uffff\4\145\4\uffff\1\145\1\uffff\1\145\1\uffff\1\145\2\uffff"+
			"\5\145\1\135\2\145\2\uffff\3\145\1\uffff\1\145\1\uffff\5\145\2\uffff"+
			"\1\145\2\uffff\5\145\75\uffff\1\145\44\uffff\1\145\57\uffff\1\145\3\uffff"+
			"\1\145\56\uffff\1\145\3\uffff\1\145\31\uffff\1\145\6\uffff\1\145\74\uffff"+
			"\1\145",
			"\1\163\1\uffff\6\163\1\151\1\163\1\152\1\163\3\uffff\1\163\2\uffff\2"+
			"\163\1\uffff\2\163\5\uffff\2\163\1\uffff\2\163\2\uffff\1\163\1\uffff"+
			"\5\163\1\uffff\2\163\1\uffff\4\163\2\uffff\1\163\1\154\6\uffff\1\163"+
			"\1\uffff\6\163\1\uffff\3\163\1\162\3\163\1\uffff\4\163\1\uffff\2\163"+
			"\1\uffff\1\163\1\155\2\163\1\uffff\1\163\1\uffff\2\163\2\uffff\1\163"+
			"\1\uffff\3\163\5\uffff\4\163\6\uffff\2\163\3\uffff\1\163\1\150\1\163"+
			"\2\uffff\2\163\3\uffff\2\163\1\uffff\3\163\1\161\5\uffff\3\163\1\uffff"+
			"\5\163\3\uffff\1\163\1\uffff\3\163\1\uffff\1\163\1\156\3\163\1\uffff"+
			"\1\163\1\uffff\4\163\1\uffff\1\163\1\uffff\2\163\1\uffff\2\163\1\uffff"+
			"\2\163\1\uffff\1\163\1\uffff\1\163\1\uffff\1\163\2\uffff\2\163\1\uffff"+
			"\1\163\2\uffff\2\163\1\uffff\2\163\1\uffff\3\163\1\uffff\4\163\4\uffff"+
			"\1\163\1\uffff\4\163\1\uffff\1\163\2\uffff\3\163\3\uffff\12\163\1\uffff"+
			"\1\163\2\uffff\2\163\4\uffff\4\163\1\157\4\163\1\uffff\3\163\1\160\1"+
			"\163\1\uffff\4\163\1\uffff\7\163\2\uffff\1\163\1\uffff\3\163\4\uffff"+
			"\1\163\1\uffff\4\163\4\uffff\1\163\1\uffff\1\163\1\uffff\1\163\2\uffff"+
			"\5\163\1\153\2\163\2\uffff\3\163\1\uffff\1\163\1\uffff\5\163\2\uffff"+
			"\1\163\2\uffff\5\163\75\uffff\1\163\44\uffff\1\163\57\uffff\1\163\3\uffff"+
			"\1\163\56\uffff\1\163\3\uffff\1\163\31\uffff\1\163\6\uffff\1\163\74\uffff"+
			"\1\163",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\36\21\uffff\1\43\55\uffff\1\167\162\uffff\1\36\15\uffff\1\36",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\61\55\uffff\1\174",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\177\u00cc\uffff\1\u0080\145\uffff\1\u0081\62\uffff\1\176",
			"",
			"\1\u0083\u00cc\uffff\1\u0084\145\uffff\1\u0085\62\uffff\1\u0082",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\u0087\u0084\uffff\1\u0089\107\uffff\1\u0088\u0098\uffff\1\u0086",
			"",
			"\1\u008b\u0084\uffff\1\u008d\107\uffff\1\u008c\u0098\uffff\1\u008a",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff"
	};

	static final short[] DFA28_eot = DFA.unpackEncodedString(DFA28_eotS);
	static final short[] DFA28_eof = DFA.unpackEncodedString(DFA28_eofS);
	static final char[] DFA28_min = DFA.unpackEncodedStringToUnsignedChars(DFA28_minS);
	static final char[] DFA28_max = DFA.unpackEncodedStringToUnsignedChars(DFA28_maxS);
	static final short[] DFA28_accept = DFA.unpackEncodedString(DFA28_acceptS);
	static final short[] DFA28_special = DFA.unpackEncodedString(DFA28_specialS);
	static final short[][] DFA28_transition;

	static {
		int numStates = DFA28_transitionS.length;
		DFA28_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA28_transition[i] = DFA.unpackEncodedString(DFA28_transitionS[i]);
		}
	}

	protected class DFA28 extends DFA {

		public DFA28(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 28;
			this.eot = DFA28_eot;
			this.eof = DFA28_eof;
			this.min = DFA28_min;
			this.max = DFA28_max;
			this.accept = DFA28_accept;
			this.special = DFA28_special;
			this.transition = DFA28_transition;
		}
		@Override
		public String getDescription() {
			return "939:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | truncateTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | createMaterializedViewStatement | dropViewStatement | dropMaterializedViewStatement | createFunctionStatement | createMacroStatement | dropFunctionStatement | reloadFunctionStatement | dropMacroStatement | analyzeStatement | lockStatement | unlockStatement | lockDatabase | unlockDatabase | createRoleStatement | dropRoleStatement | ( grantPrivileges )=> grantPrivileges | ( revokePrivileges )=> revokePrivileges | showGrants | showRoleGrants | showRolePrincipals | showRoles | grantRole | revokeRole | setRole | showCurrentRole | abortTransactionStatement | killQueryStatement | resourcePlanDdlStatements );";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA28_14 = input.LA(1);
						 
						int index28_14 = input.index();
						input.rewind();
						s = -1;
						if ( (LA28_14==KW_ALL) && (synpred1_HiveParser())) {s = 91;}
						else if ( (LA28_14==KW_ALTER) && (synpred1_HiveParser())) {s = 92;}
						else if ( (LA28_14==KW_UPDATE) && (synpred1_HiveParser())) {s = 93;}
						else if ( (LA28_14==KW_CREATE) && (synpred1_HiveParser())) {s = 94;}
						else if ( (LA28_14==KW_DROP) && (synpred1_HiveParser())) {s = 95;}
						else if ( (LA28_14==KW_LOCK) ) {s = 96;}
						else if ( (LA28_14==KW_SELECT) && (synpred1_HiveParser())) {s = 97;}
						else if ( (LA28_14==KW_SHOW_DATABASE) ) {s = 98;}
						else if ( (LA28_14==KW_INSERT) && (synpred1_HiveParser())) {s = 99;}
						else if ( (LA28_14==KW_DELETE) && (synpred1_HiveParser())) {s = 100;}
						else if ( (LA28_14==Identifier||(LA28_14 >= KW_ABORT && LA28_14 <= KW_AFTER)||LA28_14==KW_ALLOC_FRACTION||LA28_14==KW_ANALYZE||LA28_14==KW_ARCHIVE||(LA28_14 >= KW_ASC && LA28_14 <= KW_AST)||(LA28_14 >= KW_AUTOCOMMIT && LA28_14 <= KW_BEFORE)||(LA28_14 >= KW_BUCKET && LA28_14 <= KW_BUCKETS)||(LA28_14 >= KW_CACHE && LA28_14 <= KW_CASCADE)||LA28_14==KW_CHANGE||(LA28_14 >= KW_CHECK && LA28_14 <= KW_COLLECTION)||(LA28_14 >= KW_COLUMNS && LA28_14 <= KW_COMMENT)||(LA28_14 >= KW_COMPACT && LA28_14 <= KW_CONCATENATE)||LA28_14==KW_CONTINUE||LA28_14==KW_DATA||(LA28_14 >= KW_DATABASES && LA28_14 <= KW_DEBUG)||(LA28_14 >= KW_DEFAULT && LA28_14 <= KW_DEFINED)||(LA28_14 >= KW_DELIMITED && LA28_14 <= KW_DESC)||(LA28_14 >= KW_DETAIL && LA28_14 <= KW_DISABLE)||(LA28_14 >= KW_DISTRIBUTE && LA28_14 <= KW_DO)||LA28_14==KW_DOW||(LA28_14 >= KW_DUMP && LA28_14 <= KW_ELEM_TYPE)||LA28_14==KW_ENABLE||(LA28_14 >= KW_ENFORCED && LA28_14 <= KW_ESCAPED)||LA28_14==KW_EXCLUSIVE||(LA28_14 >= KW_EXPLAIN && LA28_14 <= KW_EXPRESSION)||(LA28_14 >= KW_FIELDS && LA28_14 <= KW_FIRST)||(LA28_14 >= KW_FORMAT && LA28_14 <= KW_FORMATTED)||LA28_14==KW_FUNCTIONS||LA28_14==KW_GROUP||(LA28_14 >= KW_HOUR && LA28_14 <= KW_IDXPROPERTIES)||(LA28_14 >= KW_INDEX && LA28_14 <= KW_INDEXES)||(LA28_14 >= KW_INPATH && LA28_14 <= KW_INPUTFORMAT)||(LA28_14 >= KW_ISOLATION && LA28_14 <= KW_JAR)||(LA28_14 >= KW_KEY && LA28_14 <= KW_LAST)||LA28_14==KW_LEVEL||(LA28_14 >= KW_LIMIT && LA28_14 <= KW_LOAD)||LA28_14==KW_LOCATION||(LA28_14 >= KW_LOCKS && LA28_14 <= KW_LONG)||LA28_14==KW_MANAGEMENT||(LA28_14 >= KW_MAPJOIN && LA28_14 <= KW_MATERIALIZED)||LA28_14==KW_METADATA||(LA28_14 >= KW_MINUTE && LA28_14 <= KW_MONTH)||(LA28_14 >= KW_MOVE && LA28_14 <= KW_MSCK)||(LA28_14 >= KW_NORELY && LA28_14 <= KW_NOSCAN)||LA28_14==KW_NOVALIDATE||LA28_14==KW_NULLS||LA28_14==KW_OFFSET||(LA28_14 >= KW_OPERATOR && LA28_14 <= KW_OPTION)||LA28_14==KW_ORDER||(LA28_14 >= KW_OUTPUTDRIVER && LA28_14 <= KW_OUTPUTFORMAT)||(LA28_14 >= KW_OVERWRITE && LA28_14 <= KW_OWNER)||(LA28_14 >= KW_PARTITIONED && LA28_14 <= KW_PATH)||(LA28_14 >= KW_PLAN && LA28_14 <= KW_POOL)||LA28_14==KW_PRINCIPALS||(LA28_14 >= KW_PURGE && LA28_14 <= KW_QUERY_PARALLELISM)||LA28_14==KW_READ||(LA28_14 >= KW_REBUILD && LA28_14 <= KW_RECORDWRITER)||(LA28_14 >= KW_RELOAD && LA28_14 <= KW_RESTRICT)||LA28_14==KW_REWRITE||(LA28_14 >= KW_ROLE && LA28_14 <= KW_ROLES)||(LA28_14 >= KW_SCHEDULING_POLICY && LA28_14 <= KW_SECOND)||(LA28_14 >= KW_SEMI && LA28_14 <= KW_SERVER)||(LA28_14 >= KW_SETS && LA28_14 <= KW_SHOW)||LA28_14==KW_SKEWED||(LA28_14 >= KW_SNAPSHOT && LA28_14 <= KW_SSL)||(LA28_14 >= KW_STATISTICS && LA28_14 <= KW_SUMMARY)||LA28_14==KW_TABLES||(LA28_14 >= KW_TBLPROPERTIES && LA28_14 <= KW_TERMINATED)||LA28_14==KW_TINYINT||(LA28_14 >= KW_TOUCH && LA28_14 <= KW_TRANSACTIONS)||LA28_14==KW_UNARCHIVE||LA28_14==KW_UNDO||LA28_14==KW_UNIONTYPE||(LA28_14 >= KW_UNKNOWN && LA28_14 <= KW_UNSIGNED)||(LA28_14 >= KW_URI && LA28_14 <= KW_USE)||(LA28_14 >= KW_UTC && LA28_14 <= KW_VALIDATE)||LA28_14==KW_VALUE_TYPE||(LA28_14 >= KW_VECTORIZATION && LA28_14 <= KW_WEEK)||LA28_14==KW_WHILE||(LA28_14 >= KW_WORK && LA28_14 <= KW_ZONE)||LA28_14==KW_BATCH||LA28_14==KW_DAYOFWEEK||LA28_14==KW_HOLD_DDLTIME||LA28_14==KW_IGNORE||LA28_14==KW_NO_DROP||LA28_14==KW_OFFLINE||LA28_14==KW_PROTECTION||LA28_14==KW_READONLY||LA28_14==KW_TIMESTAMPTZ) ) {s = 101;}
						 
						input.seek(index28_14);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA28_15 = input.LA(1);
						 
						int index28_15 = input.index();
						input.rewind();
						s = -1;
						if ( (LA28_15==KW_GRANT) && (synpred2_HiveParser())) {s = 104;}
						else if ( (LA28_15==KW_ALL) && (synpred2_HiveParser())) {s = 105;}
						else if ( (LA28_15==KW_ALTER) && (synpred2_HiveParser())) {s = 106;}
						else if ( (LA28_15==KW_UPDATE) && (synpred2_HiveParser())) {s = 107;}
						else if ( (LA28_15==KW_CREATE) && (synpred2_HiveParser())) {s = 108;}
						else if ( (LA28_15==KW_DROP) && (synpred2_HiveParser())) {s = 109;}
						else if ( (LA28_15==KW_LOCK) ) {s = 110;}
						else if ( (LA28_15==KW_SELECT) && (synpred2_HiveParser())) {s = 111;}
						else if ( (LA28_15==KW_SHOW_DATABASE) ) {s = 112;}
						else if ( (LA28_15==KW_INSERT) && (synpred2_HiveParser())) {s = 113;}
						else if ( (LA28_15==KW_DELETE) && (synpred2_HiveParser())) {s = 114;}
						else if ( (LA28_15==Identifier||(LA28_15 >= KW_ABORT && LA28_15 <= KW_AFTER)||LA28_15==KW_ALLOC_FRACTION||LA28_15==KW_ANALYZE||LA28_15==KW_ARCHIVE||(LA28_15 >= KW_ASC && LA28_15 <= KW_AST)||(LA28_15 >= KW_AUTOCOMMIT && LA28_15 <= KW_BEFORE)||(LA28_15 >= KW_BUCKET && LA28_15 <= KW_BUCKETS)||(LA28_15 >= KW_CACHE && LA28_15 <= KW_CASCADE)||LA28_15==KW_CHANGE||(LA28_15 >= KW_CHECK && LA28_15 <= KW_COLLECTION)||(LA28_15 >= KW_COLUMNS && LA28_15 <= KW_COMMENT)||(LA28_15 >= KW_COMPACT && LA28_15 <= KW_CONCATENATE)||LA28_15==KW_CONTINUE||LA28_15==KW_DATA||(LA28_15 >= KW_DATABASES && LA28_15 <= KW_DEBUG)||(LA28_15 >= KW_DEFAULT && LA28_15 <= KW_DEFINED)||(LA28_15 >= KW_DELIMITED && LA28_15 <= KW_DESC)||(LA28_15 >= KW_DETAIL && LA28_15 <= KW_DISABLE)||(LA28_15 >= KW_DISTRIBUTE && LA28_15 <= KW_DO)||LA28_15==KW_DOW||(LA28_15 >= KW_DUMP && LA28_15 <= KW_ELEM_TYPE)||LA28_15==KW_ENABLE||(LA28_15 >= KW_ENFORCED && LA28_15 <= KW_ESCAPED)||LA28_15==KW_EXCLUSIVE||(LA28_15 >= KW_EXPLAIN && LA28_15 <= KW_EXPRESSION)||(LA28_15 >= KW_FIELDS && LA28_15 <= KW_FIRST)||(LA28_15 >= KW_FORMAT && LA28_15 <= KW_FORMATTED)||LA28_15==KW_FUNCTIONS||LA28_15==KW_GROUP||(LA28_15 >= KW_HOUR && LA28_15 <= KW_IDXPROPERTIES)||(LA28_15 >= KW_INDEX && LA28_15 <= KW_INDEXES)||(LA28_15 >= KW_INPATH && LA28_15 <= KW_INPUTFORMAT)||(LA28_15 >= KW_ISOLATION && LA28_15 <= KW_JAR)||(LA28_15 >= KW_KEY && LA28_15 <= KW_LAST)||LA28_15==KW_LEVEL||(LA28_15 >= KW_LIMIT && LA28_15 <= KW_LOAD)||LA28_15==KW_LOCATION||(LA28_15 >= KW_LOCKS && LA28_15 <= KW_LONG)||LA28_15==KW_MANAGEMENT||(LA28_15 >= KW_MAPJOIN && LA28_15 <= KW_MATERIALIZED)||LA28_15==KW_METADATA||(LA28_15 >= KW_MINUTE && LA28_15 <= KW_MONTH)||(LA28_15 >= KW_MOVE && LA28_15 <= KW_MSCK)||(LA28_15 >= KW_NORELY && LA28_15 <= KW_NOSCAN)||LA28_15==KW_NOVALIDATE||LA28_15==KW_NULLS||LA28_15==KW_OFFSET||(LA28_15 >= KW_OPERATOR && LA28_15 <= KW_OPTION)||LA28_15==KW_ORDER||(LA28_15 >= KW_OUTPUTDRIVER && LA28_15 <= KW_OUTPUTFORMAT)||(LA28_15 >= KW_OVERWRITE && LA28_15 <= KW_OWNER)||(LA28_15 >= KW_PARTITIONED && LA28_15 <= KW_PATH)||(LA28_15 >= KW_PLAN && LA28_15 <= KW_POOL)||LA28_15==KW_PRINCIPALS||(LA28_15 >= KW_PURGE && LA28_15 <= KW_QUERY_PARALLELISM)||LA28_15==KW_READ||(LA28_15 >= KW_REBUILD && LA28_15 <= KW_RECORDWRITER)||(LA28_15 >= KW_RELOAD && LA28_15 <= KW_RESTRICT)||LA28_15==KW_REWRITE||(LA28_15 >= KW_ROLE && LA28_15 <= KW_ROLES)||(LA28_15 >= KW_SCHEDULING_POLICY && LA28_15 <= KW_SECOND)||(LA28_15 >= KW_SEMI && LA28_15 <= KW_SERVER)||(LA28_15 >= KW_SETS && LA28_15 <= KW_SHOW)||LA28_15==KW_SKEWED||(LA28_15 >= KW_SNAPSHOT && LA28_15 <= KW_SSL)||(LA28_15 >= KW_STATISTICS && LA28_15 <= KW_SUMMARY)||LA28_15==KW_TABLES||(LA28_15 >= KW_TBLPROPERTIES && LA28_15 <= KW_TERMINATED)||LA28_15==KW_TINYINT||(LA28_15 >= KW_TOUCH && LA28_15 <= KW_TRANSACTIONS)||LA28_15==KW_UNARCHIVE||LA28_15==KW_UNDO||LA28_15==KW_UNIONTYPE||(LA28_15 >= KW_UNKNOWN && LA28_15 <= KW_UNSIGNED)||(LA28_15 >= KW_URI && LA28_15 <= KW_USE)||(LA28_15 >= KW_UTC && LA28_15 <= KW_VALIDATE)||LA28_15==KW_VALUE_TYPE||(LA28_15 >= KW_VECTORIZATION && LA28_15 <= KW_WEEK)||LA28_15==KW_WHILE||(LA28_15 >= KW_WORK && LA28_15 <= KW_ZONE)||LA28_15==KW_BATCH||LA28_15==KW_DAYOFWEEK||LA28_15==KW_HOLD_DDLTIME||LA28_15==KW_IGNORE||LA28_15==KW_NO_DROP||LA28_15==KW_OFFLINE||LA28_15==KW_PROTECTION||LA28_15==KW_READONLY||LA28_15==KW_TIMESTAMPTZ) ) {s = 115;}
						 
						input.seek(index28_15);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA28_96 = input.LA(1);
						 
						int index28_96 = input.index();
						input.rewind();
						s = -1;
						if ( (LA28_96==LPAREN) && (synpred1_HiveParser())) {s = 126;}
						else if ( (LA28_96==COMMA) ) {s = 127;}
						else if ( (LA28_96==KW_ON) && (synpred1_HiveParser())) {s = 128;}
						else if ( (LA28_96==KW_TO) ) {s = 129;}
						 
						input.seek(index28_96);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA28_98 = input.LA(1);
						 
						int index28_98 = input.index();
						input.rewind();
						s = -1;
						if ( (LA28_98==LPAREN) && (synpred1_HiveParser())) {s = 130;}
						else if ( (LA28_98==COMMA) ) {s = 131;}
						else if ( (LA28_98==KW_ON) && (synpred1_HiveParser())) {s = 132;}
						else if ( (LA28_98==KW_TO) ) {s = 133;}
						 
						input.seek(index28_98);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA28_110 = input.LA(1);
						 
						int index28_110 = input.index();
						input.rewind();
						s = -1;
						if ( (LA28_110==LPAREN) && (synpred2_HiveParser())) {s = 134;}
						else if ( (LA28_110==COMMA) ) {s = 135;}
						else if ( (LA28_110==KW_ON) && (synpred2_HiveParser())) {s = 136;}
						else if ( (LA28_110==KW_FROM) ) {s = 137;}
						 
						input.seek(index28_110);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA28_112 = input.LA(1);
						 
						int index28_112 = input.index();
						input.rewind();
						s = -1;
						if ( (LA28_112==LPAREN) && (synpred2_HiveParser())) {s = 138;}
						else if ( (LA28_112==COMMA) ) {s = 139;}
						else if ( (LA28_112==KW_ON) && (synpred2_HiveParser())) {s = 140;}
						else if ( (LA28_112==KW_FROM) ) {s = 141;}
						 
						input.seek(index28_112);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA28_127 = input.LA(1);
						 
						int index28_127 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveParser()) ) {s = 132;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index28_127);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA28_129 = input.LA(1);
						 
						int index28_129 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveParser()) ) {s = 132;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index28_129);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA28_131 = input.LA(1);
						 
						int index28_131 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveParser()) ) {s = 132;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index28_131);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA28_133 = input.LA(1);
						 
						int index28_133 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveParser()) ) {s = 132;}
						else if ( (true) ) {s = 101;}
						 
						input.seek(index28_133);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA28_135 = input.LA(1);
						 
						int index28_135 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveParser()) ) {s = 140;}
						else if ( (true) ) {s = 115;}
						 
						input.seek(index28_135);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA28_137 = input.LA(1);
						 
						int index28_137 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveParser()) ) {s = 140;}
						else if ( (true) ) {s = 115;}
						 
						input.seek(index28_137);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA28_139 = input.LA(1);
						 
						int index28_139 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveParser()) ) {s = 140;}
						else if ( (true) ) {s = 115;}
						 
						input.seek(index28_139);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA28_141 = input.LA(1);
						 
						int index28_141 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveParser()) ) {s = 140;}
						else if ( (true) ) {s = 115;}
						 
						input.seek(index28_141);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 28, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA231_eotS =
		"\136\uffff";
	static final String DFA231_eofS =
		"\1\2\135\uffff";
	static final String DFA231_minS =
		"\1\11\1\14\42\uffff\1\4\71\uffff";
	static final String DFA231_maxS =
		"\1\u017c\1\u0292\42\uffff\1\u0180\71\uffff";
	static final String DFA231_acceptS =
		"\2\uffff\1\2\75\uffff\1\1\35\uffff";
	static final String DFA231_specialS =
		"\136\uffff}>";
	static final String[] DFA231_transitionS = {
			"\1\2\37\uffff\1\2\24\uffff\1\2\53\uffff\1\2\13\uffff\1\2\27\uffff\1\2"+
			"\4\uffff\1\2\1\uffff\1\2\2\uffff\1\2\10\uffff\1\2\1\uffff\1\2\14\uffff"+
			"\1\2\4\uffff\2\2\2\uffff\1\2\6\uffff\1\1\6\uffff\1\2\12\uffff\1\2\10"+
			"\uffff\1\2\10\uffff\1\2\26\uffff\3\2\32\uffff\1\2\14\uffff\1\2\5\uffff"+
			"\1\2\10\uffff\1\2\23\uffff\1\2\14\uffff\1\2\3\uffff\1\2\10\uffff\1\2"+
			"\1\uffff\1\2\12\uffff\1\2\14\uffff\1\2",
			"\1\2\13\uffff\10\2\1\uffff\1\2\1\uffff\1\2\3\uffff\2\2\1\uffff\2\2\1"+
			"\uffff\2\2\1\uffff\3\2\1\uffff\2\2\1\uffff\5\2\1\uffff\5\2\1\uffff\2"+
			"\2\1\uffff\4\2\2\uffff\1\2\4\uffff\2\2\1\uffff\1\2\1\uffff\6\2\1\uffff"+
			"\3\2\1\uffff\3\2\1\uffff\4\2\1\uffff\4\2\1\uffff\2\2\1\uffff\1\2\1\uffff"+
			"\2\2\2\uffff\5\2\2\uffff\2\2\1\uffff\6\2\4\uffff\2\2\3\uffff\1\2\1\uffff"+
			"\2\2\1\uffff\3\2\2\uffff\2\2\1\uffff\3\2\1\uffff\1\2\1\uffff\1\2\2\uffff"+
			"\3\2\1\uffff\1\2\1\44\3\2\3\uffff\1\2\1\uffff\3\2\1\uffff\5\2\1\uffff"+
			"\6\2\1\uffff\1\2\1\uffff\2\2\1\uffff\2\2\1\uffff\6\2\1\uffff\1\2\2\uffff"+
			"\2\2\1\uffff\1\2\2\uffff\2\2\1\uffff\2\2\1\uffff\3\2\1\uffff\4\2\4\uffff"+
			"\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\4\2\3\uffff\12\2\1\uffff\1\2\2\uffff"+
			"\2\2\4\uffff\4\2\1\uffff\4\2\1\uffff\12\2\1\uffff\7\2\2\uffff\1\2\1\uffff"+
			"\3\2\2\uffff\3\2\1\uffff\4\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\5\2\1\uffff\2\2\2\uffff\3\2\1\uffff\1\2\1\uffff\5\2\2\uffff"+
			"\1\2\2\uffff\5\2\4\uffff\1\2\2\uffff\1\2\2\uffff\3\2\10\uffff\3\2\45"+
			"\uffff\1\2\44\uffff\1\2\57\uffff\1\2\3\uffff\1\2\56\uffff\1\2\3\uffff"+
			"\1\2\31\uffff\1\2\6\uffff\1\2\74\uffff\1\2",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\3\2\2\uffff\2\2\2\uffff\2\2\1\uffff\1\2\1\uffff\2\2\1\uffff\2\2\15"+
			"\uffff\1\2\12\uffff\1\2\152\uffff\1\2\13\uffff\1\2\15\uffff\1\2\33\uffff"+
			"\1\2\11\uffff\1\2\41\uffff\1\2\2\uffff\1\2\15\uffff\1\2\4\uffff\1\2\43"+
			"\uffff\1\100\36\uffff\1\2\26\uffff\2\2\1\uffff\2\2\1\uffff\3\2\2\uffff"+
			"\1\2\10\uffff\1\2",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA231_eot = DFA.unpackEncodedString(DFA231_eotS);
	static final short[] DFA231_eof = DFA.unpackEncodedString(DFA231_eofS);
	static final char[] DFA231_min = DFA.unpackEncodedStringToUnsignedChars(DFA231_minS);
	static final char[] DFA231_max = DFA.unpackEncodedStringToUnsignedChars(DFA231_maxS);
	static final short[] DFA231_accept = DFA.unpackEncodedString(DFA231_acceptS);
	static final short[] DFA231_special = DFA.unpackEncodedString(DFA231_specialS);
	static final short[][] DFA231_transition;

	static {
		int numStates = DFA231_transitionS.length;
		DFA231_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA231_transition[i] = DFA.unpackEncodedString(DFA231_transitionS[i]);
		}
	}

	protected class DFA231 extends DFA {

		public DFA231(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 231;
			this.eot = DFA231_eot;
			this.eof = DFA231_eof;
			this.min = DFA231_min;
			this.max = DFA231_max;
			this.accept = DFA231_accept;
			this.special = DFA231_special;
			this.transition = DFA231_transition;
		}
		@Override
		public String getDescription() {
			return "2078:103: ( tableRowFormatMapKeysIdentifier )?";
		}
	}

	static final String DFA274_eotS =
		"\u00e5\uffff";
	static final String DFA274_eofS =
		"\u00e5\uffff";
	static final String DFA274_minS =
		"\1\30\4\uffff\1\14\10\uffff\1\11\1\uffff\1\11\17\uffff\1\11\2\uffff\7"+
		"\11\1\uffff\1\4\1\u016c\3\uffff\1\u016c\1\4\u00b3\uffff";
	static final String DFA274_maxS =
		"\1\u0292\4\uffff\1\u0292\10\uffff\1\u0181\1\uffff\1\u0181\17\uffff\1\u017c"+
		"\2\uffff\7\u017c\1\uffff\1\u0180\1\u016f\3\uffff\1\u016f\1\u0180\u00b3"+
		"\uffff";
	static final String DFA274_acceptS =
		"\1\uffff\1\1\4\uffff\1\2\5\uffff\1\1\22\uffff\1\1\2\uffff\1\1\7\uffff"+
		"\1\1\172\uffff\1\1\41\uffff\1\1\35\uffff";
	static final String DFA274_specialS =
		"\u00e5\uffff}>";
	static final String[] DFA274_transitionS = {
			"\1\6\1\uffff\6\6\1\uffff\1\6\1\uffff\1\6\3\uffff\1\6\2\uffff\2\6\1\uffff"+
			"\2\6\5\uffff\2\6\1\uffff\2\6\2\uffff\1\6\1\uffff\1\5\4\6\1\uffff\2\6"+
			"\1\uffff\4\6\1\uffff\1\1\1\6\7\uffff\1\6\1\uffff\6\6\1\uffff\3\6\1\uffff"+
			"\3\6\1\uffff\4\6\1\uffff\2\6\1\uffff\1\6\1\uffff\2\6\1\uffff\1\6\1\uffff"+
			"\2\6\2\uffff\1\6\1\uffff\3\6\5\uffff\4\6\5\uffff\1\1\2\6\3\uffff\1\6"+
			"\1\uffff\1\6\2\uffff\2\6\3\uffff\2\6\1\uffff\3\6\6\uffff\3\6\1\uffff"+
			"\5\6\3\uffff\1\6\1\uffff\3\6\1\uffff\5\6\1\uffff\1\6\1\uffff\4\6\1\uffff"+
			"\1\6\1\uffff\2\6\1\uffff\2\6\1\uffff\2\6\1\uffff\1\6\1\uffff\1\6\1\uffff"+
			"\1\6\2\uffff\2\6\1\uffff\1\6\2\uffff\2\6\1\uffff\2\6\1\uffff\3\6\1\uffff"+
			"\4\6\3\uffff\1\1\1\6\1\uffff\4\6\1\uffff\1\6\2\uffff\3\6\3\uffff\12\6"+
			"\1\uffff\1\6\2\uffff\2\6\4\uffff\4\6\1\uffff\4\6\1\uffff\5\6\1\uffff"+
			"\4\6\1\uffff\7\6\2\uffff\1\6\1\uffff\3\6\4\uffff\1\6\1\uffff\4\6\4\uffff"+
			"\1\6\1\uffff\1\6\1\uffff\1\6\1\1\1\uffff\5\6\1\uffff\2\6\2\uffff\3\6"+
			"\1\uffff\1\6\1\uffff\5\6\2\uffff\1\6\2\uffff\5\6\75\uffff\1\6\44\uffff"+
			"\1\6\57\uffff\1\6\3\uffff\1\6\56\uffff\1\6\3\uffff\1\6\31\uffff\1\6\6"+
			"\uffff\1\6\74\uffff\1\6",
			"",
			"",
			"",
			"",
			"\1\14\13\uffff\2\14\6\52\1\uffff\1\52\1\uffff\1\52\3\uffff\1\52\1\54"+
			"\1\uffff\2\52\1\uffff\2\52\1\uffff\1\44\1\51\1\45\1\uffff\2\52\1\uffff"+
			"\2\52\2\14\1\52\1\6\5\52\1\uffff\2\52\1\uffff\4\52\2\uffff\1\52\4\uffff"+
			"\2\14\1\uffff\1\52\1\uffff\1\52\1\14\1\42\3\52\1\6\3\52\1\uffff\3\52"+
			"\1\uffff\4\52\1\uffff\2\52\1\50\1\52\1\uffff\2\52\1\uffff\1\52\1\uffff"+
			"\2\52\2\uffff\1\52\1\37\3\52\2\uffff\2\14\1\uffff\4\52\1\46\1\14\4\uffff"+
			"\2\52\3\uffff\1\52\1\uffff\2\52\1\uffff\3\52\2\uffff\2\52\1\uffff\3\52"+
			"\1\uffff\1\43\1\uffff\1\14\2\uffff\3\52\1\uffff\5\52\3\uffff\1\52\1\uffff"+
			"\3\52\1\uffff\5\52\1\uffff\1\52\1\60\4\52\1\uffff\1\52\1\uffff\2\52\1"+
			"\uffff\2\52\1\uffff\2\52\1\1\1\52\1\14\1\52\1\uffff\1\52\2\uffff\2\52"+
			"\1\uffff\1\52\2\uffff\2\52\1\uffff\2\52\1\uffff\3\52\1\uffff\4\52\4\uffff"+
			"\1\52\1\uffff\4\52\1\uffff\1\52\1\uffff\1\47\3\52\3\uffff\12\52\1\uffff"+
			"\1\52\2\uffff\2\52\4\uffff\4\52\1\uffff\4\52\1\uffff\5\52\1\40\4\52\1"+
			"\uffff\5\52\1\53\1\52\2\uffff\1\52\1\uffff\3\52\2\uffff\1\16\1\20\1\37"+
			"\1\uffff\4\52\2\uffff\1\14\1\uffff\1\52\1\uffff\1\52\1\uffff\1\61\2\uffff"+
			"\1\14\4\52\1\uffff\2\52\2\uffff\3\52\1\uffff\1\52\1\6\5\52\2\uffff\1"+
			"\52\2\uffff\5\52\4\uffff\1\14\2\uffff\1\1\2\uffff\1\1\1\14\1\1\11\uffff"+
			"\2\1\45\uffff\1\52\44\uffff\1\52\57\uffff\1\52\3\uffff\1\52\56\uffff"+
			"\1\52\3\uffff\1\52\31\uffff\1\52\6\uffff\1\52\74\uffff\1\52",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\6\63\uffff\1\6\6\uffff\1\6\6\uffff\1\6\21\uffff\1\6\162\uffff\1\6"+
			"\36\uffff\1\6\16\uffff\1\6\113\uffff\1\6\32\uffff\1\6\11\uffff\1\52\14"+
			"\uffff\1\6\4\uffff\1\52",
			"",
			"\1\6\63\uffff\1\6\6\uffff\1\6\6\uffff\1\6\21\uffff\1\6\162\uffff\1\6"+
			"\36\uffff\1\6\16\uffff\1\6\113\uffff\1\6\61\uffff\1\6\4\uffff\1\52",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\6\63\uffff\1\6\6\uffff\1\6\6\uffff\1\6\21\uffff\1\6\162\uffff\1\6"+
			"\36\uffff\1\6\16\uffff\1\6\113\uffff\1\6\44\uffff\1\52\14\uffff\1\6",
			"",
			"",
			"\1\6\63\uffff\1\6\6\uffff\1\6\6\uffff\1\6\21\uffff\1\6\162\uffff\1\6"+
			"\36\uffff\1\6\16\uffff\1\6\113\uffff\1\6\44\uffff\1\52\14\uffff\1\6",
			"\1\6\63\uffff\1\6\6\uffff\1\6\6\uffff\1\6\21\uffff\1\6\162\uffff\1\6"+
			"\36\uffff\1\6\16\uffff\1\6\113\uffff\1\6\44\uffff\1\52\14\uffff\1\6",
			"\1\6\63\uffff\1\6\6\uffff\1\6\6\uffff\1\6\21\uffff\1\6\162\uffff\1\6"+
			"\36\uffff\1\6\16\uffff\1\6\113\uffff\1\6\44\uffff\1\52\14\uffff\1\6",
			"\1\6\63\uffff\1\6\6\uffff\1\6\6\uffff\1\6\21\uffff\1\6\162\uffff\1\6"+
			"\36\uffff\1\6\16\uffff\1\6\113\uffff\1\6\44\uffff\1\52\14\uffff\1\6",
			"\1\6\63\uffff\1\6\6\uffff\1\6\6\uffff\1\6\21\uffff\1\6\162\uffff\1\6"+
			"\36\uffff\1\6\16\uffff\1\6\113\uffff\1\6\44\uffff\1\52\14\uffff\1\6",
			"\1\6\63\uffff\1\6\6\uffff\1\6\6\uffff\1\6\21\uffff\1\6\162\uffff\1\6"+
			"\34\uffff\1\6\1\uffff\1\6\16\uffff\1\6\113\uffff\1\6\44\uffff\1\52\14"+
			"\uffff\1\6",
			"\1\6\63\uffff\1\6\6\uffff\1\6\6\uffff\1\6\21\uffff\1\6\162\uffff\1\6"+
			"\36\uffff\1\6\16\uffff\1\6\113\uffff\1\6\44\uffff\1\52\14\uffff\1\6",
			"",
			"\3\52\2\uffff\2\52\2\uffff\2\52\1\uffff\1\52\1\uffff\2\52\1\uffff\2"+
			"\52\15\uffff\1\52\12\uffff\1\52\70\uffff\1\52\11\uffff\1\52\1\uffff\1"+
			"\52\45\uffff\1\52\13\uffff\1\52\15\uffff\1\52\33\uffff\1\52\11\uffff"+
			"\1\52\44\uffff\1\52\15\uffff\1\52\136\uffff\1\u00a5\1\52\1\uffff\2\52"+
			"\1\uffff\3\52\2\uffff\1\52\4\uffff\1\52\3\uffff\1\52",
			"\1\6\2\uffff\1\52",
			"",
			"",
			"",
			"\1\6\2\uffff\1\52",
			"\3\52\2\uffff\2\52\2\uffff\2\52\1\uffff\1\52\1\uffff\2\52\1\uffff\2"+
			"\52\15\uffff\1\52\12\uffff\1\52\70\uffff\1\52\11\uffff\1\52\1\uffff\1"+
			"\52\45\uffff\1\52\13\uffff\1\52\15\uffff\1\52\33\uffff\1\52\11\uffff"+
			"\1\52\44\uffff\1\52\15\uffff\1\52\136\uffff\1\u00c7\1\52\1\uffff\2\52"+
			"\1\uffff\3\52\2\uffff\1\52\4\uffff\1\52\3\uffff\1\52",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA274_eot = DFA.unpackEncodedString(DFA274_eotS);
	static final short[] DFA274_eof = DFA.unpackEncodedString(DFA274_eofS);
	static final char[] DFA274_min = DFA.unpackEncodedStringToUnsignedChars(DFA274_minS);
	static final char[] DFA274_max = DFA.unpackEncodedStringToUnsignedChars(DFA274_maxS);
	static final short[] DFA274_accept = DFA.unpackEncodedString(DFA274_acceptS);
	static final short[] DFA274_special = DFA.unpackEncodedString(DFA274_specialS);
	static final short[][] DFA274_transition;

	static {
		int numStates = DFA274_transitionS.length;
		DFA274_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA274_transition[i] = DFA.unpackEncodedString(DFA274_transitionS[i]);
		}
	}

	protected class DFA274 extends DFA {

		public DFA274(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 274;
			this.eot = DFA274_eot;
			this.eof = DFA274_eof;
			this.min = DFA274_min;
			this.max = DFA274_max;
			this.accept = DFA274_accept;
			this.special = DFA274_special;
			this.transition = DFA274_transition;
		}
		@Override
		public String getDescription() {
			return "2439:1: columnNameTypeOrConstraint : ( ( tableConstraint ) | ( columnNameTypeConstraint ) );";
		}
	}

	static final String DFA289_eotS =
		"\100\uffff";
	static final String DFA289_eofS =
		"\4\uffff\1\1\1\uffff\1\1\6\uffff\1\1\62\uffff";
	static final String DFA289_minS =
		"\1\14\2\uffff\1\20\1\11\1\u016f\1\11\6\uffff\1\11\62\uffff";
	static final String DFA289_maxS =
		"\1\u0292\2\uffff\1\u0181\1\u017c\1\u0181\1\u017c\6\uffff\1\u017c\62\uffff";
	static final String DFA289_acceptS =
		"\1\uffff\1\1\15\uffff\1\2\2\uffff\1\3\55\uffff";
	static final String DFA289_specialS =
		"\100\uffff}>";
	static final String[] DFA289_transitionS = {
			"\1\1\13\uffff\1\17\1\1\6\17\1\uffff\1\17\1\uffff\1\17\3\uffff\2\17\1"+
			"\uffff\2\17\1\uffff\2\17\1\uffff\3\17\1\uffff\2\17\1\uffff\2\17\1\uffff"+
			"\1\22\1\17\1\uffff\5\17\1\uffff\2\17\1\uffff\4\17\2\uffff\1\17\4\uffff"+
			"\1\4\1\6\1\uffff\1\17\1\uffff\1\17\1\3\4\17\1\uffff\3\17\1\uffff\3\17"+
			"\1\uffff\4\17\1\uffff\4\17\1\uffff\2\17\1\uffff\1\17\1\uffff\2\17\2\uffff"+
			"\1\17\1\uffff\3\17\3\uffff\1\1\1\uffff\5\17\5\uffff\2\17\3\uffff\1\17"+
			"\1\uffff\2\17\1\uffff\3\17\2\uffff\2\17\1\uffff\3\17\1\uffff\1\17\4\uffff"+
			"\3\17\1\uffff\5\17\3\uffff\1\17\1\uffff\3\17\1\uffff\5\17\1\uffff\6\17"+
			"\1\uffff\1\17\1\uffff\2\17\1\uffff\2\17\1\uffff\2\17\1\uffff\1\17\1\1"+
			"\1\17\1\uffff\1\17\2\uffff\2\17\1\uffff\1\17\2\uffff\2\17\1\uffff\2\17"+
			"\1\uffff\3\17\1\uffff\4\17\4\uffff\1\17\1\uffff\4\17\1\uffff\1\17\1\uffff"+
			"\4\17\3\uffff\12\17\1\uffff\1\17\2\uffff\2\17\4\uffff\4\17\1\uffff\4"+
			"\17\1\uffff\12\17\1\uffff\7\17\2\uffff\1\17\1\uffff\3\17\2\uffff\1\5"+
			"\1\1\1\17\1\uffff\4\17\2\uffff\1\1\1\uffff\1\17\1\uffff\1\17\1\uffff"+
			"\1\17\2\uffff\1\15\4\17\1\uffff\2\17\2\uffff\3\17\1\uffff\1\17\1\uffff"+
			"\5\17\2\uffff\1\17\2\uffff\5\17\12\uffff\2\1\12\uffff\1\1\46\uffff\1"+
			"\17\44\uffff\1\17\57\uffff\1\17\3\uffff\1\17\56\uffff\1\17\3\uffff\1"+
			"\17\31\uffff\1\17\6\uffff\1\17\74\uffff\1\17",
			"",
			"",
			"\1\17\u015e\uffff\1\17\21\uffff\1\1",
			"\1\1\25\uffff\1\1\30\uffff\1\1\13\uffff\1\1\43\uffff\1\1\11\uffff\1"+
			"\1\1\uffff\1\1\20\uffff\1\1\112\uffff\1\1\70\uffff\1\1\145\uffff\1\17"+
			"\14\uffff\1\1",
			"\1\17\21\uffff\1\1",
			"\1\1\25\uffff\1\1\30\uffff\1\1\13\uffff\1\1\43\uffff\1\1\11\uffff\1"+
			"\1\1\uffff\1\1\20\uffff\1\1\112\uffff\1\1\70\uffff\1\1\145\uffff\1\17"+
			"\14\uffff\1\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\1\6\uffff\1\17\16\uffff\1\1\30\uffff\1\1\13\uffff\1\1\43\uffff\1"+
			"\1\11\uffff\1\1\1\uffff\1\1\20\uffff\1\1\112\uffff\1\1\70\uffff\1\1\145"+
			"\uffff\1\17\14\uffff\1\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA289_eot = DFA.unpackEncodedString(DFA289_eotS);
	static final short[] DFA289_eof = DFA.unpackEncodedString(DFA289_eofS);
	static final char[] DFA289_min = DFA.unpackEncodedStringToUnsignedChars(DFA289_minS);
	static final char[] DFA289_max = DFA.unpackEncodedStringToUnsignedChars(DFA289_maxS);
	static final short[] DFA289_accept = DFA.unpackEncodedString(DFA289_acceptS);
	static final short[] DFA289_special = DFA.unpackEncodedString(DFA289_specialS);
	static final short[][] DFA289_transition;

	static {
		int numStates = DFA289_transitionS.length;
		DFA289_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA289_transition[i] = DFA.unpackEncodedString(DFA289_transitionS[i]);
		}
	}

	protected class DFA289 extends DFA {

		public DFA289(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 289;
			this.eot = DFA289_eot;
			this.eof = DFA289_eof;
			this.min = DFA289_min;
			this.max = DFA289_max;
			this.accept = DFA289_accept;
			this.special = DFA289_special;
			this.transition = DFA289_transition;
		}
		@Override
		public String getDescription() {
			return "2518:1: defaultVal : ( constant | function | castExpression );";
		}
	}

	public static final BitSet FOLLOW_explainStatement_in_statement1290 = new BitSet(new long[]{0x0000000000000000L});
	public static final BitSet FOLLOW_EOF_in_statement1292 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_execStatement_in_statement1297 = new BitSet(new long[]{0x0000000000000000L});
	public static final BitSet FOLLOW_EOF_in_statement1299 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_EXPLAIN_in_explainStatement1320 = new BitSet(new long[]{0x0000180C04000000L,0x2804411D08002020L,0x1C80400202046000L,0x2000000000001021L,0x0000010121010C69L,0x00008020100A2010L});
	public static final BitSet FOLLOW_explainOption_in_explainStatement1329 = new BitSet(new long[]{0x0000180C04000000L,0x2804411D08002020L,0x1C80400202046000L,0x2000000000001021L,0x0000010121010469L,0x00008020100A2010L});
	public static final BitSet FOLLOW_execStatement_in_explainStatement1332 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_REWRITE_in_explainStatement1363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200004000L,0x2000000000000001L,0x0000000001000000L,0x0000802000000000L});
	public static final BitSet FOLLOW_queryStatementExpression_in_explainStatement1365 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_explainOption1405 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FORMATTED_in_explainOption1413 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DEPENDENCY_in_explainOption1421 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOGICAL_in_explainOption1429 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_AUTHORIZATION_in_explainOption1437 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ANALYZE_in_explainOption1445 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_REOPTIMIZATION_in_explainOption1453 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCKS_in_explainOption1461 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_AST_in_explainOption1469 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_VECTORIZATION_in_explainOption1478 = new BitSet(new long[]{0x0000000000000002L,0x1000002000000000L,0x0000000000000000L,0x0000000001800000L,0x0000800000000000L});
	public static final BitSet FOLLOW_vectorizationOnly_in_explainOption1480 = new BitSet(new long[]{0x0000000000000002L,0x1000002000000000L,0x0000000000000000L,0x0000000001000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_vectorizatonDetail_in_explainOption1483 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DEBUG_in_explainOption1493 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ONLY_in_vectorizationOnly1520 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SUMMARY_in_vectorizatonDetail1557 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_OPERATOR_in_vectorizatonDetail1575 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_EXPRESSION_in_vectorizatonDetail1593 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DETAIL_in_vectorizatonDetail1611 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_queryStatementExpression_in_execStatement1648 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_loadStatement_in_execStatement1656 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportStatement_in_execStatement1664 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_importStatement_in_execStatement1672 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_replDumpStatement_in_execStatement1680 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_replLoadStatement_in_execStatement1688 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_replStatusStatement_in_execStatement1696 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ddlStatement_in_execStatement1704 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_deleteStatement_in_execStatement1712 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_updateStatement_in_execStatement1720 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sqlTransactionStatement_in_execStatement1728 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_mergeStatement_in_execStatement1736 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOAD_in_loadStatement1763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_KW_DATA_in_loadStatement1765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000040000000L});
	public static final BitSet FOLLOW_KW_LOCAL_in_loadStatement1770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_KW_INPATH_in_loadStatement1774 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_loadStatement1779 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_KW_OVERWRITE_in_loadStatement1785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_INTO_in_loadStatement1789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_loadStatement1791 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableOrPartition_in_loadStatement1796 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_inputFileFormat_in_loadStatement1799 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FOR_in_replicationClause1854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000080L});
	public static final BitSet FOLLOW_KW_METADATA_in_replicationClause1859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KW_REPLICATION_in_replicationClause1863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_LPAREN_in_replicationClause1865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_replicationClause1870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_replicationClause1873 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_EXPORT_in_exportStatement1917 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_exportStatement1925 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableOrPartition_in_exportStatement1930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_KW_TO_in_exportStatement1939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_exportStatement1944 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_replicationClause_in_exportStatement1953 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_IMPORT_in_importStatement2003 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_EXTERNAL_in_importStatement2018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_importStatement2022 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableOrPartition_in_importStatement2027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_KW_FROM_in_importStatement2041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_importStatement2046 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_tableLocation_in_importStatement2058 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_REPL_in_replDumpStatement2112 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_KW_DUMP_in_replDumpStatement2114 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_replDumpStatement2127 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DOT_in_replDumpStatement2131 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_replDumpStatement2135 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_FROM_in_replDumpStatement2148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_Number_in_replDumpStatement2153 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_TO_in_replDumpStatement2167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_Number_in_replDumpStatement2172 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_LIMIT_in_replDumpStatement2188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_Number_in_replDumpStatement2193 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_WITH_in_replDumpStatement2218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_replConfigs_in_replDumpStatement2222 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_REPL_in_replLoadStatement2302 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_KW_LOAD_in_replLoadStatement2304 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA703CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_replLoadStatement2318 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_DOT_in_replLoadStatement2322 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_replLoadStatement2326 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_KW_FROM_in_replLoadStatement2340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_replLoadStatement2345 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_WITH_in_replLoadStatement2357 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_replConfigs_in_replLoadStatement2361 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_replConfigs2433 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_replConfigsList_in_replConfigs2435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_replConfigs2437 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_keyValueProperty_in_replConfigsList2478 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_replConfigsList2481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_keyValueProperty_in_replConfigsList2483 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_KW_REPL_in_replStatusStatement2523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_KW_STATUS_in_replStatusStatement2525 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_replStatusStatement2538 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DOT_in_replStatusStatement2542 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_replStatusStatement2546 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_WITH_in_replStatusStatement2559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_replConfigs_in_replStatusStatement2563 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createDatabaseStatement_in_ddlStatement2621 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_switchDatabaseStatement_in_ddlStatement2629 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropDatabaseStatement_in_ddlStatement2637 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createTableStatement_in_ddlStatement2645 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropTableStatement_in_ddlStatement2653 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_truncateTableStatement_in_ddlStatement2661 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatement_in_ddlStatement2669 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_descStatement_in_ddlStatement2677 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showStatement_in_ddlStatement2685 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_metastoreCheck_in_ddlStatement2693 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createViewStatement_in_ddlStatement2701 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createMaterializedViewStatement_in_ddlStatement2709 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropViewStatement_in_ddlStatement2717 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropMaterializedViewStatement_in_ddlStatement2725 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createFunctionStatement_in_ddlStatement2733 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createMacroStatement_in_ddlStatement2741 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropFunctionStatement_in_ddlStatement2749 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_reloadFunctionStatement_in_ddlStatement2757 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropMacroStatement_in_ddlStatement2765 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_analyzeStatement_in_ddlStatement2773 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_lockStatement_in_ddlStatement2781 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unlockStatement_in_ddlStatement2789 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_lockDatabase_in_ddlStatement2797 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unlockDatabase_in_ddlStatement2805 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createRoleStatement_in_ddlStatement2813 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropRoleStatement_in_ddlStatement2821 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_grantPrivileges_in_ddlStatement2835 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_revokePrivileges_in_ddlStatement2849 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showGrants_in_ddlStatement2857 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showRoleGrants_in_ddlStatement2865 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showRolePrincipals_in_ddlStatement2873 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showRoles_in_ddlStatement2881 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_grantRole_in_ddlStatement2889 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_revokeRole_in_ddlStatement2897 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_setRole_in_ddlStatement2905 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showCurrentRole_in_ddlStatement2913 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_abortTransactionStatement_in_ddlStatement2921 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_killQueryStatement_in_ddlStatement2929 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_resourcePlanDdlStatements_in_ddlStatement2937 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_IF_in_ifExists2964 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_KW_EXISTS_in_ifExists2966 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RESTRICT_in_restrictOrCascade3003 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CASCADE_in_restrictOrCascade3021 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_IF_in_ifNotExists3058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_KW_NOT_in_ifNotExists3060 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_KW_EXISTS_in_ifNotExists3062 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FORCE_in_force3099 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ENABLE_in_rewriteEnabled3136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_KW_REWRITE_in_rewriteEnabled3138 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DISABLE_in_rewriteDisabled3175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_KW_REWRITE_in_rewriteDisabled3177 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_storedAsDirs3214 = new BitSet(new long[]{0x0000020000000000L});
	public static final BitSet FOLLOW_KW_AS_in_storedAsDirs3216 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_KW_DIRECTORIES_in_storedAsDirs3218 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_OR_in_orReplace3255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_REPLACE_in_orReplace3257 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createDatabaseStatement3294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_KW_DATABASE_in_createDatabaseStatement3297 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D9CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_createDatabaseStatement3299 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D9CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_ifNotExists_in_createDatabaseStatement3310 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_createDatabaseStatement3323 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L,0x0200000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_databaseComment_in_createDatabaseStatement3333 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_dbLocation_in_createDatabaseStatement3344 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_WITH_in_createDatabaseStatement3356 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_KW_DBPROPERTIES_in_createDatabaseStatement3358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_dbProperties_in_createDatabaseStatement3362 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCATION_in_dbLocation3423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_dbLocation3427 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_dbProperties3469 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_dbPropertiesList_in_dbProperties3471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_dbProperties3473 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_keyValueProperty_in_dbPropertiesList3514 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_dbPropertiesList3517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_keyValueProperty_in_dbPropertiesList3519 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_KW_USE_in_switchDatabaseStatement3558 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_switchDatabaseStatement3560 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropDatabaseStatement3599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_KW_DATABASE_in_dropDatabaseStatement3602 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D9CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_dropDatabaseStatement3604 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D9CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_ifExists_in_dropDatabaseStatement3607 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_dropDatabaseStatement3610 = new BitSet(new long[]{0x0100000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_restrictOrCascade_in_dropDatabaseStatement3612 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_databaseComment3658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_databaseComment3662 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createTableStatement3702 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8022000000000000L});
	public static final BitSet FOLLOW_KW_TEMPORARY_in_createTableStatement3707 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8002000000000000L});
	public static final BitSet FOLLOW_KW_TRANSACTIONAL_in_createTableStatement3714 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_EXTERNAL_in_createTableStatement3721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_createTableStatement3725 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D9CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_ifNotExists_in_createTableStatement3727 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableName_in_createTableStatement3732 = new BitSet(new long[]{0x8000020000000002L,0x0000000000000010L,0x0210000000000000L,0x0000001000000000L,0x0010080400040000L,0x0000800000000000L});
	public static final BitSet FOLLOW_KW_LIKE_in_createTableStatement3745 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableName_in_createTableStatement3749 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0010080000040000L});
	public static final BitSet FOLLOW_tableRowFormat_in_createTableStatement3760 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0010080000000000L});
	public static final BitSet FOLLOW_tableFileFormat_in_createTableStatement3772 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_tableLocation_in_createTableStatement3784 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createTableStatement3796 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_createTableStatement3809 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD01BDBL,0xBEE8FB81D8CA383CL,0x1CBD8F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF6A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_columnNameTypeOrConstraintList_in_createTableStatement3811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_createTableStatement3813 = new BitSet(new long[]{0x8000020000000002L,0x0000000000000010L,0x0200000000000000L,0x0000001000000000L,0x0010080400040000L});
	public static final BitSet FOLLOW_tableComment_in_createTableStatement3826 = new BitSet(new long[]{0x8000020000000002L,0x0000000000000000L,0x0200000000000000L,0x0000001000000000L,0x0010080400040000L});
	public static final BitSet FOLLOW_createTablePartitionSpec_in_createTableStatement3838 = new BitSet(new long[]{0x8000020000000002L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0010080400040000L});
	public static final BitSet FOLLOW_tableBuckets_in_createTableStatement3850 = new BitSet(new long[]{0x0000020000000002L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0010080400040000L});
	public static final BitSet FOLLOW_tableSkewed_in_createTableStatement3862 = new BitSet(new long[]{0x0000020000000002L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0010080000040000L});
	public static final BitSet FOLLOW_tableRowFormat_in_createTableStatement3874 = new BitSet(new long[]{0x0000020000000002L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0010080000000000L});
	public static final BitSet FOLLOW_tableFileFormat_in_createTableStatement3886 = new BitSet(new long[]{0x0000020000000002L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_tableLocation_in_createTableStatement3898 = new BitSet(new long[]{0x0000020000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createTableStatement3910 = new BitSet(new long[]{0x0000020000000002L});
	public static final BitSet FOLLOW_KW_AS_in_createTableStatement3923 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000001L,0x0000000001000000L,0x0000802000000000L});
	public static final BitSet FOLLOW_selectStatementWithCTE_in_createTableStatement3925 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TRUNCATE_in_truncateTableStatement4136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_truncateTableStatement4138 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tablePartitionPrefix_in_truncateTableStatement4140 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_COLUMNS_in_truncateTableStatement4143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_LPAREN_in_truncateTableStatement4145 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_columnNameList_in_truncateTableStatement4147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_truncateTableStatement4149 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_force_in_truncateTableStatement4153 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropTableStatement4194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_dropTableStatement4196 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D9CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_ifExists_in_dropTableStatement4198 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableName_in_dropTableStatement4201 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L,0x0004000000000000L});
	public static final BitSet FOLLOW_KW_PURGE_in_dropTableStatement4203 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_replicationClause_in_dropTableStatement4206 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALTER_in_alterStatement4255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_alterStatement4257 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableName_in_alterStatement4259 = new BitSet(new long[]{0x8800008020000000L,0x0080400000000240L,0x0000002000000000L,0x0000000800010000L,0x2000000420000044L,0x0000000000028020L});
	public static final BitSet FOLLOW_alterTableStatementSuffix_in_alterStatement4261 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALTER_in_alterStatement4279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_KW_VIEW_in_alterStatement4281 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableName_in_alterStatement4283 = new BitSet(new long[]{0x0000020020000000L,0x0000400000000000L,0x0000000000000000L,0x2000000000000001L,0x0000000021000004L,0x0000802000008000L});
	public static final BitSet FOLLOW_KW_AS_in_alterStatement4285 = new BitSet(new long[]{0x0000000020000000L,0x0000400000000000L,0x0000000000000000L,0x2000000000000001L,0x0000000021000004L,0x0000802000008000L});
	public static final BitSet FOLLOW_alterViewStatementSuffix_in_alterStatement4288 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALTER_in_alterStatement4306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_KW_MATERIALIZED_in_alterStatement4308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_KW_VIEW_in_alterStatement4310 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableName_in_alterStatement4312 = new BitSet(new long[]{0x0000000000000000L,0x0004010000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_alterMaterializedViewStatementSuffix_in_alterStatement4314 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALTER_in_alterStatement4336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_KW_DATABASE_in_alterStatement4339 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_alterStatement4341 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_alterDatabaseStatementSuffix_in_alterStatement4344 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixRename_in_alterTableStatementSuffix4382 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixDropPartitions_in_alterTableStatementSuffix4391 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixAddPartitions_in_alterTableStatementSuffix4400 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixTouch_in_alterTableStatementSuffix4409 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixArchive_in_alterTableStatementSuffix4417 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixUnArchive_in_alterTableStatementSuffix4425 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixProperties_in_alterTableStatementSuffix4433 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixSkewedby_in_alterTableStatementSuffix4441 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixExchangePartition_in_alterTableStatementSuffix4449 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementPartitionKeyType_in_alterTableStatementSuffix4457 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixDropConstraint_in_alterTableStatementSuffix4465 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixAddConstraint_in_alterTableStatementSuffix4473 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_partitionSpec_in_alterTableStatementSuffix4481 = new BitSet(new long[]{0x8800000020000000L,0x0000000000000240L,0x0000002000000000L,0x0000000000010000L,0x0000000020000044L,0x0000000000020000L});
	public static final BitSet FOLLOW_alterTblPartitionStatementSuffix_in_alterTableStatementSuffix4484 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixSetOwner_in_alterTableStatementSuffix4499 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixFileFormat_in_alterTblPartitionStatementSuffix4524 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixLocation_in_alterTblPartitionStatementSuffix4530 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixMergeFiles_in_alterTblPartitionStatementSuffix4536 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixSerdeProperties_in_alterTblPartitionStatementSuffix4542 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixRenamePart_in_alterTblPartitionStatementSuffix4548 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixBucketNum_in_alterTblPartitionStatementSuffix4554 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterTblPartitionStatementSuffixSkewedLocation_in_alterTblPartitionStatementSuffix4560 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixClusterbySortby_in_alterTblPartitionStatementSuffix4566 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixCompact_in_alterTblPartitionStatementSuffix4572 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixUpdateStatsCol_in_alterTblPartitionStatementSuffix4578 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixUpdateStats_in_alterTblPartitionStatementSuffix4584 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixRenameCol_in_alterTblPartitionStatementSuffix4590 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixAddCol_in_alterTblPartitionStatementSuffix4596 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixUpdateColumns_in_alterTblPartitionStatementSuffix4602 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_PARTITION_in_alterStatementPartitionKeyType4624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_KW_COLUMN_in_alterStatementPartitionKeyType4626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alterStatementPartitionKeyType4628 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_columnNameType_in_alterStatementPartitionKeyType4630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alterStatementPartitionKeyType4632 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterViewSuffixProperties_in_alterViewStatementSuffix4665 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixRename_in_alterViewStatementSuffix4673 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixAddPartitions_in_alterViewStatementSuffix4682 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixDropPartitions_in_alterViewStatementSuffix4691 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selectStatementWithCTE_in_alterViewStatementSuffix4700 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterMaterializedViewSuffixRewrite_in_alterMaterializedViewStatementSuffix4727 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterMaterializedViewSuffixRebuild_in_alterMaterializedViewStatementSuffix4735 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterDatabaseSuffixProperties_in_alterDatabaseStatementSuffix4762 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterDatabaseSuffixSetOwner_in_alterDatabaseStatementSuffix4770 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterDatabaseSuffixSetLocation_in_alterDatabaseStatementSuffix4778 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_alterDatabaseSuffixProperties4807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_KW_SET_in_alterDatabaseSuffixProperties4809 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_KW_DBPROPERTIES_in_alterDatabaseSuffixProperties4811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_dbProperties_in_alterDatabaseSuffixProperties4813 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_alterDatabaseSuffixSetOwner4857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_KW_SET_in_alterDatabaseSuffixSetOwner4859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_KW_OWNER_in_alterDatabaseSuffixSetOwner4861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000004000L,0x0000000000100000L});
	public static final BitSet FOLLOW_principalName_in_alterDatabaseSuffixSetOwner4863 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_alterDatabaseSuffixSetLocation4907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_KW_SET_in_alterDatabaseSuffixSetLocation4909 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_KW_LOCATION_in_alterDatabaseSuffixSetLocation4911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_alterDatabaseSuffixSetLocation4915 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RENAME_in_alterStatementSuffixRename4959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_KW_TO_in_alterStatementSuffixRename4961 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableName_in_alterStatementSuffixRename4963 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ADD_in_alterStatementSuffixAddCol5030 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_KW_REPLACE_in_alterStatementSuffixAddCol5036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_KW_COLUMNS_in_alterStatementSuffixAddCol5039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alterStatementSuffixAddCol5041 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_columnNameTypeList_in_alterStatementSuffixAddCol5043 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alterStatementSuffixAddCol5045 = new BitSet(new long[]{0x0100000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_restrictOrCascade_in_alterStatementSuffixAddCol5047 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ADD_in_alterStatementSuffixAddConstraint5123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_alterForeignKeyWithName_in_alterStatementSuffixAddConstraint5128 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterConstraintWithName_in_alterStatementSuffixAddConstraint5132 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UPDATE_in_alterStatementSuffixUpdateColumns5197 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_KW_COLUMNS_in_alterStatementSuffixUpdateColumns5199 = new BitSet(new long[]{0x0100000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_restrictOrCascade_in_alterStatementSuffixUpdateColumns5201 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_alterStatementSuffixDropConstraint5241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_KW_CONSTRAINT_in_alterStatementSuffixDropConstraint5243 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixDropConstraint5247 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CHANGE_in_alterStatementSuffixRenameCol5284 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DFL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_COLUMN_in_alterStatementSuffixRenameCol5286 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixRenameCol5291 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixRenameCol5295 = new BitSet(new long[]{0x1007010000000000L,0x0000100011800000L,0x0000000400000040L,0x0200000000000001L,0x0E00600800000000L,0x0000000008000200L});
	public static final BitSet FOLLOW_colType_in_alterStatementSuffixRenameCol5297 = new BitSet(new long[]{0x2100000080000002L,0x0000000020000810L,0x0000000000000020L,0x4000800000010000L,0x0000000000000200L,0x0000000000000400L});
	public static final BitSet FOLLOW_alterColumnConstraint_in_alterStatementSuffixRenameCol5299 = new BitSet(new long[]{0x0100000080000002L,0x0000000000000010L,0x0000000000000020L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_KW_COMMENT_in_alterStatementSuffixRenameCol5304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixRenameCol5308 = new BitSet(new long[]{0x0100000080000002L,0x0000000000000000L,0x0000000000000020L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_alterStatementChangeColPosition_in_alterStatementSuffixRenameCol5312 = new BitSet(new long[]{0x0100000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_restrictOrCascade_in_alterStatementSuffixRenameCol5315 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UPDATE_in_alterStatementSuffixUpdateStatsCol5373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_KW_STATISTICS_in_alterStatementSuffixUpdateStatsCol5375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_KW_FOR_in_alterStatementSuffixUpdateStatsCol5377 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DFL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_COLUMN_in_alterStatementSuffixUpdateStatsCol5379 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixUpdateStatsCol5384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixUpdateStatsCol5386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixUpdateStatsCol5388 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
	public static final BitSet FOLLOW_KW_COMMENT_in_alterStatementSuffixUpdateStatsCol5391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixUpdateStatsCol5395 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UPDATE_in_alterStatementSuffixUpdateStats5442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_KW_STATISTICS_in_alterStatementSuffixUpdateStats5444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixUpdateStats5446 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixUpdateStats5448 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FIRST_in_alterStatementChangeColPosition5478 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_AFTER_in_alterStatementChangeColPosition5480 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_alterStatementChangeColPosition5484 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ADD_in_alterStatementSuffixAddPartitions5537 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_ifNotExists_in_alterStatementSuffixAddPartitions5539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_alterStatementSuffixAddPartitionsElement_in_alterStatementSuffixAddPartitions5542 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitionsElement5605 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitionsElement5607 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TOUCH_in_alterStatementSuffixTouch5635 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixTouch5638 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_KW_ARCHIVE_in_alterStatementSuffixArchive5682 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixArchive5685 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_KW_UNARCHIVE_in_alterStatementSuffixUnArchive5729 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixUnArchive5732 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_KW_LOCATION_in_partitionLocation5782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_partitionLocation5786 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_alterStatementSuffixDropPartitions5823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_ifExists_in_alterStatementSuffixDropPartitions5825 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions5828 = new BitSet(new long[]{0x0000000000000202L,0x0000000000000000L,0x0000000000000200L,0x0004000000000000L});
	public static final BitSet FOLLOW_COMMA_in_alterStatementSuffixDropPartitions5831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions5833 = new BitSet(new long[]{0x0000000000000202L,0x0000000000000000L,0x0000000000000200L,0x0004000000000000L});
	public static final BitSet FOLLOW_KW_PURGE_in_alterStatementSuffixDropPartitions5837 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_replicationClause_in_alterStatementSuffixDropPartitions5840 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixProperties5922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties5924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixProperties5926 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNSET_in_alterStatementSuffixProperties5946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties5948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_ifExists_in_alterStatementSuffixProperties5950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixProperties5953 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterViewSuffixProperties5995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties5997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterViewSuffixProperties5999 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNSET_in_alterViewSuffixProperties6019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties6021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_ifExists_in_alterViewSuffixProperties6023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterViewSuffixProperties6026 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rewriteEnabled_in_alterMaterializedViewSuffixRewrite6071 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rewriteDisabled_in_alterMaterializedViewSuffixRewrite6077 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_REBUILD_in_alterMaterializedViewSuffixRebuild6118 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties6151 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_KW_SERDE_in_alterStatementSuffixSerdeProperties6153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixSerdeProperties6157 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_WITH_in_alterStatementSuffixSerdeProperties6160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties6162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties6164 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties6190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties6192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties6194 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableName_in_tablePartitionPrefix6231 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_partitionSpec_in_tablePartitionPrefix6233 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixFileFormat6268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_KW_FILEFORMAT_in_alterStatementSuffixFileFormat6270 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_fileFormat_in_alterStatementSuffixFileFormat6272 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NOT_in_alterStatementSuffixClusterbySortby6303 = new BitSet(new long[]{0x8000000000000000L});
	public static final BitSet FOLLOW_KW_CLUSTERED_in_alterStatementSuffixClusterbySortby6305 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NOT_in_alterStatementSuffixClusterbySortby6319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_KW_SORTED_in_alterStatementSuffixClusterbySortby6321 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableBuckets_in_alterStatementSuffixClusterbySortby6335 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterTblPartitionStatementSuffixSkewedLocation6366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_KW_SKEWED_in_alterTblPartitionStatementSuffixSkewedLocation6368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_KW_LOCATION_in_alterTblPartitionStatementSuffixSkewedLocation6370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_skewedLocations_in_alterTblPartitionStatementSuffixSkewedLocation6372 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_skewedLocations6413 = new BitSet(new long[]{0x0000000002001000L,0x0000000000860000L,0x0000000000000001L,0x0000000000040000L,0x0600000000000000L,0x0060800000001008L,0x0000000000000002L});
	public static final BitSet FOLLOW_skewedLocationsList_in_skewedLocations6415 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_skewedLocations6417 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_skewedLocationMap_in_skewedLocationsList6458 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_skewedLocationsList6461 = new BitSet(new long[]{0x0000000002001000L,0x0000000000860000L,0x0000000000000001L,0x0000000000040000L,0x0600000000000000L,0x0060800000001008L,0x0000000000000002L});
	public static final BitSet FOLLOW_skewedLocationMap_in_skewedLocationsList6463 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_skewedValueLocationElement_in_skewedLocationMap6509 = new BitSet(new long[]{0x0000000000040000L});
	public static final BitSet FOLLOW_EQUAL_in_skewedLocationMap6511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_skewedLocationMap6515 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixLocation6552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_KW_LOCATION_in_alterStatementSuffixLocation6554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixLocation6558 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableSkewed_in_alterStatementSuffixSkewedby6591 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NOT_in_alterStatementSuffixSkewedby6606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_KW_SKEWED_in_alterStatementSuffixSkewedby6608 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NOT_in_alterStatementSuffixSkewedby6621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_storedAsDirs_in_alterStatementSuffixSkewedby6623 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_EXCHANGE_in_alterStatementSuffixExchangePartition6654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixExchangePartition6656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_WITH_in_alterStatementSuffixExchangePartition6658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_alterStatementSuffixExchangePartition6660 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableName_in_alterStatementSuffixExchangePartition6664 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RENAME_in_alterStatementSuffixRenamePart6706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_KW_TO_in_alterStatementSuffixRenamePart6708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixRenamePart6710 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UPDATE_in_alterStatementSuffixStatsPart6748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_KW_STATISTICS_in_alterStatementSuffixStatsPart6750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_KW_FOR_in_alterStatementSuffixStatsPart6752 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DFL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_COLUMN_in_alterStatementSuffixStatsPart6754 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixStatsPart6759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixStatsPart6761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixStatsPart6763 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
	public static final BitSet FOLLOW_KW_COMMENT_in_alterStatementSuffixStatsPart6766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixStatsPart6770 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CONCATENATE_in_alterStatementSuffixMergeFiles6817 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INTO_in_alterStatementSuffixBucketNum6854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_Number_in_alterStatementSuffixBucketNum6858 = new BitSet(new long[]{0x0020000000000000L});
	public static final BitSet FOLLOW_KW_BUCKETS_in_alterStatementSuffixBucketNum6860 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_AND_in_blocking6888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_KW_WAIT_in_blocking6890 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COMPACT_in_alterStatementSuffixCompact6921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixCompact6925 = new BitSet(new long[]{0x0000001000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_blocking_in_alterStatementSuffixCompact6927 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_WITH_in_alterStatementSuffixCompact6931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_KW_OVERWRITE_in_alterStatementSuffixCompact6933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixCompact6935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixCompact6937 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixSetOwner6985 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_KW_OWNER_in_alterStatementSuffixSetOwner6987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000004000L,0x0000000000100000L});
	public static final BitSet FOLLOW_principalName_in_alterStatementSuffixSetOwner6989 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INPUTFORMAT_in_fileFormat7028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_fileFormat7032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_KW_OUTPUTFORMAT_in_fileFormat7034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_fileFormat7038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_KW_SERDE_in_fileFormat7040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_fileFormat7044 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_KW_INPUTDRIVER_in_fileFormat7047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_fileFormat7051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_KW_OUTPUTDRIVER_in_fileFormat7053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_fileFormat7057 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_fileFormat7098 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INPUTFORMAT_in_inputFileFormat7134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_inputFileFormat7138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_KW_SERDE_in_inputFileFormat7140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_inputFileFormat7144 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_tabTypeExpr7188 = new BitSet(new long[]{0xE9B06C8AFD010002L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_DOT_in_tabTypeExpr7191 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_tabTypeExpr7194 = new BitSet(new long[]{0xE9B06C8AFD000002L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_tabTypeExpr7202 = new BitSet(new long[]{0x0000000000010002L});
	public static final BitSet FOLLOW_DOT_in_tabTypeExpr7205 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_ELEM_TYPE_in_tabTypeExpr7222 = new BitSet(new long[]{0x0000000000010002L});
	public static final BitSet FOLLOW_KW_KEY_TYPE_in_tabTypeExpr7238 = new BitSet(new long[]{0x0000000000010002L});
	public static final BitSet FOLLOW_KW_VALUE_TYPE_in_tabTypeExpr7254 = new BitSet(new long[]{0x0000000000010002L});
	public static final BitSet FOLLOW_identifier_in_tabTypeExpr7261 = new BitSet(new long[]{0x0000000000010002L});
	public static final BitSet FOLLOW_tabTypeExpr_in_partTypeExpr7301 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_partitionSpec_in_partTypeExpr7303 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableName_in_tabPartColTypeExpr7343 = new BitSet(new long[]{0xE9B06C8AFD000002L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F7ECB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_partitionSpec_in_tabPartColTypeExpr7345 = new BitSet(new long[]{0xE9B06C8AFD000002L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_extColumnName_in_tabPartColTypeExpr7348 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DESCRIBE_in_descStatement7395 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x3D35ADEEEFF013DBL,0xBEE8FB81D8CB303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_DESC_in_descStatement7397 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x3D35ADEEEFF013DBL,0xBEE8FB81D8CB303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_DATABASE_in_descStatement7419 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x3D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_descStatement7421 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x3D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement7424 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_descStatement7430 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FUNCTION_in_descStatement7461 = new BitSet(new long[]{0xEBB7ED9AFD6C6070L,0x3D35BDEEEFD013DBL,0xBEF8FB85DDCA30FCL,0x9EBD0F76CF2BDB5FL,0xE874FEFFDEF0EBFFL,0x009C37CBF5CDF2A1L,0x0000010000000007L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement7463 = new BitSet(new long[]{0xEBB7ED9AFD6C6070L,0x1D35BDEEEFD013DBL,0xBEF8FB85DDCA30FCL,0x9EBD0F76CF2BDB5FL,0xE874FEFFDEF0EBFFL,0x009C37CBF5CDF2A1L,0x0000010000000007L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_descFuncNames_in_descStatement7469 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FORMATTED_in_descStatement7506 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement7510 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tabPartColTypeExpr_in_descStatement7515 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tabPartColTypeExpr_in_descStatement7542 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ANALYZE_in_analyzeStatement7584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_analyzeStatement7586 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableOrPartition_in_analyzeStatement7591 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_KW_COMPUTE_in_analyzeStatement7614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_KW_STATISTICS_in_analyzeStatement7616 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L,0x0000000000008000L});
	public static final BitSet FOLLOW_KW_NOSCAN_in_analyzeStatement7622 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FOR_in_analyzeStatement7682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_KW_COLUMNS_in_analyzeStatement7684 = new BitSet(new long[]{0xE9B06C8AFD000002L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_columnNameList_in_analyzeStatement7689 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CACHE_in_analyzeStatement7742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_METADATA_in_analyzeStatement7744 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement7788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_KW_DATABASES_in_showStatement7791 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_SCHEMAS_in_showStatement7793 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_LIKE_in_showStatement7797 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000002L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement7799 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement7818 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_KW_TABLES_in_showStatement7820 = new BitSet(new long[]{0xE9B06C8AFD000002L,0x1D35ADEEEFD013DBL,0xBEF8FB81DCCA703CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000002L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_FROM_in_showStatement7824 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_IN_in_showStatement7826 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_showStatement7831 = new BitSet(new long[]{0xE9B06C8AFD000002L,0x1D35ADEEEFD013DBL,0xBEF8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000002L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_LIKE_in_showStatement7836 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000002L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement7838 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement7840 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement7868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_KW_VIEWS_in_showStatement7870 = new BitSet(new long[]{0xE9B06C8AFD000002L,0x1D35ADEEEFD013DBL,0xBEF8FB81DCCA703CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000002L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_FROM_in_showStatement7874 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_IN_in_showStatement7876 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_showStatement7881 = new BitSet(new long[]{0xE9B06C8AFD000002L,0x1D35ADEEEFD013DBL,0xBEF8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000002L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_LIKE_in_showStatement7886 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000002L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement7888 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement7890 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement7918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_KW_MATERIALIZED_in_showStatement7920 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_KW_VIEWS_in_showStatement7922 = new BitSet(new long[]{0xE9B06C8AFD000002L,0x1D35ADEEEFD013DBL,0xBEF8FB81DCCA703CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000002L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_FROM_in_showStatement7926 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_IN_in_showStatement7928 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_showStatement7933 = new BitSet(new long[]{0xE9B06C8AFD000002L,0x1D35ADEEEFD013DBL,0xBEF8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000002L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_LIKE_in_showStatement7938 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000002L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement7940 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement7942 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement7970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_KW_COLUMNS_in_showStatement7972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004004000L});
	public static final BitSet FOLLOW_KW_FROM_in_showStatement7975 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_IN_in_showStatement7977 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableName_in_showStatement7980 = new BitSet(new long[]{0xE9B06C8AFD000002L,0x1D35ADEEEFD013DBL,0xBEF8FB81DCCA703CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000002L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_FROM_in_showStatement7984 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_IN_in_showStatement7986 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_showStatement7991 = new BitSet(new long[]{0xE9B06C8AFD000002L,0x1D35ADEEEFD013DBL,0xBEF8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000002L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_LIKE_in_showStatement7996 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000002L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement7998 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement8000 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement8033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_KW_FUNCTIONS_in_showStatement8035 = new BitSet(new long[]{0xE9B06C8AFD000002L,0x1D35ADEEEFD013DBL,0xBEF8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000002L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_LIKE_in_showStatement8038 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000002L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_showFunctionIdentifier_in_showStatement8040 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showFunctionIdentifier_in_showStatement8042 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement8065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_PARTITIONS_in_showStatement8067 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableName_in_showStatement8071 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_partitionSpec_in_showStatement8073 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement8094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_KW_CREATE_in_showStatement8096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0002000000200000L});
	public static final BitSet FOLLOW_KW_DATABASE_in_showStatement8117 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_showStatement8119 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_showStatement8124 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TABLE_in_showStatement8153 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableName_in_showStatement8157 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement8182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_showStatement8184 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_showStatement8186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000004004000L});
	public static final BitSet FOLLOW_KW_FROM_in_showStatement8190 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_IN_in_showStatement8192 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_showStatement8197 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_LIKE_in_showStatement8201 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000002L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement8203 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_partitionSpec_in_showStatement8205 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement8233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_showStatement8235 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableName_in_showStatement8237 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_LPAREN_in_showStatement8240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_showStatement8244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_showStatement8246 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement8268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_KW_LOCKS_in_showStatement8270 = new BitSet(new long[]{0xE9B06C8AFD000002L,0x3D35ADEEEFF013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_DATABASE_in_showStatement8295 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_showStatement8297 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_showStatement8303 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_showStatement8309 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_partTypeExpr_in_showStatement8343 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_showStatement8350 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement8382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KW_COMPACTIONS_in_showStatement8384 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement8398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_KW_TRANSACTIONS_in_showStatement8400 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement8414 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_CONF_in_showStatement8416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_showStatement8418 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement8434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_KW_RESOURCE_in_showStatement8436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000030000000000L});
	public static final BitSet FOLLOW_KW_PLAN_in_showStatement8455 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_showStatement8459 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_PLANS_in_showStatement8482 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCK_in_lockStatement8524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_lockStatement8526 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableName_in_lockStatement8528 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000800000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_partitionSpec_in_lockStatement8530 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_lockMode_in_lockStatement8533 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCK_in_lockDatabase8573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_KW_DATABASE_in_lockDatabase8576 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_lockDatabase8578 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_lockDatabase8584 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_lockMode_in_lockDatabase8587 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNLOCK_in_unlockStatement8656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_unlockStatement8658 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableName_in_unlockStatement8660 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_partitionSpec_in_unlockStatement8662 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNLOCK_in_unlockDatabase8702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_KW_DATABASE_in_unlockDatabase8705 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_unlockDatabase8707 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_unlockDatabase8713 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createRoleStatement8750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_KW_ROLE_in_createRoleStatement8752 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_createRoleStatement8756 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropRoleStatement8796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_KW_ROLE_in_dropRoleStatement8798 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_dropRoleStatement8802 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_GRANT_in_grantPrivileges8842 = new BitSet(new long[]{0x0000000500000000L,0x0000400100002000L,0x0400000200000000L,0x0000000000000000L,0x0000000201000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_privilegeList_in_grantPrivileges8846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x1000000000000000L});
	public static final BitSet FOLLOW_privilegeObject_in_grantPrivileges8854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_KW_TO_in_grantPrivileges8863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000004000L,0x0000000000100000L});
	public static final BitSet FOLLOW_principalSpecification_in_grantPrivileges8865 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_withGrantOption_in_grantPrivileges8873 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_REVOKE_in_revokePrivileges8922 = new BitSet(new long[]{0x0000000500000000L,0x0000400100002000L,0x0400000200040000L,0x0000000000000000L,0x0000000201000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_grantOptionFor_in_revokePrivileges8924 = new BitSet(new long[]{0x0000000500000000L,0x0000400100002000L,0x0400000200000000L,0x0000000000000000L,0x0000000201000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_privilegeList_in_revokePrivileges8927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000400000L});
	public static final BitSet FOLLOW_privilegeObject_in_revokePrivileges8929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_KW_FROM_in_revokePrivileges8932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000004000L,0x0000000000100000L});
	public static final BitSet FOLLOW_principalSpecification_in_revokePrivileges8934 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_GRANT_in_grantRole8981 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_ROLE_in_grantRole8983 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_grantRole8986 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_COMMA_in_grantRole8989 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_grantRole8991 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_KW_TO_in_grantRole8995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000004000L,0x0000000000100000L});
	public static final BitSet FOLLOW_principalSpecification_in_grantRole8997 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_withAdminOption_in_grantRole8999 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_REVOKE_in_revokeRole9045 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_adminOptionFor_in_revokeRole9047 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_ROLE_in_revokeRole9050 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_revokeRole9053 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_COMMA_in_revokeRole9056 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_revokeRole9058 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_KW_FROM_in_revokeRole9062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000004000L,0x0000000000100000L});
	public static final BitSet FOLLOW_principalSpecification_in_revokeRole9064 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showRoleGrants9109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_KW_ROLE_in_showRoleGrants9111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_GRANT_in_showRoleGrants9113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000004000L,0x0000000000100000L});
	public static final BitSet FOLLOW_principalName_in_showRoleGrants9115 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showRoles9155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_KW_ROLES_in_showRoles9157 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showCurrentRole9194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_KW_CURRENT_in_showCurrentRole9196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_KW_ROLES_in_showCurrentRole9198 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_setRole9235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_KW_ROLE_in_setRole9237 = new BitSet(new long[]{0xE9B06C8BFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2AFB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_ALL_in_setRole9258 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NONE_in_setRole9289 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_setRole9311 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showGrants9352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_GRANT_in_showGrants9354 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000080000L,0x0000000000400000L,0x0000000000004000L,0x0000000000100000L});
	public static final BitSet FOLLOW_principalName_in_showGrants9356 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_KW_ON_in_showGrants9360 = new BitSet(new long[]{0xE9B06C8BFD000000L,0x1D35ADEEEFF013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE876FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_privilegeIncludeColObject_in_showGrants9362 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showRolePrincipals9407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_KW_PRINCIPALS_in_showRolePrincipals9409 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_showRolePrincipals9413 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALL_in_privilegeIncludeColObject9460 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_privObjectCols_in_privilegeIncludeColObject9474 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ON_in_privilegeObject9509 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFF013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE876FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_privObject_in_privilegeObject9511 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DATABASE_in_privObject9538 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_privObject9540 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_privObject9543 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TABLE_in_privObject9559 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableName_in_privObject9562 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_partitionSpec_in_privObject9564 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_URI_in_privObject9584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_privObject9589 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SERVER_in_privObject9608 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_privObject9610 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DATABASE_in_privObjectCols9636 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_privObjectCols9638 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_privObjectCols9641 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TABLE_in_privObjectCols9657 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableName_in_privObjectCols9660 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_LPAREN_in_privObjectCols9663 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_columnNameList_in_privObjectCols9667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_privObjectCols9669 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_partitionSpec_in_privObjectCols9673 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_URI_in_privObjectCols9697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_privObjectCols9702 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SERVER_in_privObjectCols9721 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_privObjectCols9723 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_privlegeDef_in_privilegeList9758 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_privilegeList9761 = new BitSet(new long[]{0x0000000500000000L,0x0000400100002000L,0x0400000200000000L,0x0000000000000000L,0x0000000201000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_privlegeDef_in_privilegeList9763 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_privilegeType_in_privlegeDef9805 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_LPAREN_in_privlegeDef9808 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_columnNameList_in_privlegeDef9812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_privlegeDef9814 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALL_in_privilegeType9859 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALTER_in_privilegeType9873 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UPDATE_in_privilegeType9887 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_privilegeType9901 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_privilegeType9915 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCK_in_privilegeType9929 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SELECT_in_privilegeType9943 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_DATABASE_in_privilegeType9957 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INSERT_in_privilegeType9971 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DELETE_in_privilegeType9985 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_principalName_in_principalSpecification10018 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_principalSpecification10021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000004000L,0x0000000000100000L});
	public static final BitSet FOLLOW_principalName_in_principalSpecification10023 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_KW_USER_in_principalName10061 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x040007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_principalIdentifier_in_principalName10063 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_GROUP_in_principalName10079 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x040007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_principalIdentifier_in_principalName10081 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ROLE_in_principalName10097 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_principalName10099 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_WITH_in_withGrantOption10134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_GRANT_in_withGrantOption10136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_KW_OPTION_in_withGrantOption10138 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_GRANT_in_grantOptionFor10175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_KW_OPTION_in_grantOptionFor10177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_KW_FOR_in_grantOptionFor10179 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ADMIN_in_adminOptionFor10212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_KW_OPTION_in_adminOptionFor10214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_KW_FOR_in_adminOptionFor10216 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_WITH_in_withAdminOption10249 = new BitSet(new long[]{0x0000000040000000L});
	public static final BitSet FOLLOW_KW_ADMIN_in_withAdminOption10251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_KW_OPTION_in_withAdminOption10253 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_MSCK_in_metastoreCheck10290 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x0002000000000010L});
	public static final BitSet FOLLOW_KW_REPAIR_in_metastoreCheck10295 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_metastoreCheck10306 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableName_in_metastoreCheck10308 = new BitSet(new long[]{0x0000000020000002L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_KW_ADD_in_metastoreCheck10322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_DROP_in_metastoreCheck10328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_SYNC_in_metastoreCheck10334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_PARTITIONS_in_metastoreCheck10340 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_partitionSpec_in_metastoreCheck10356 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_resource_in_resourceList10421 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_resourceList10424 = new BitSet(new long[]{0x0000008000000000L,0x0000000000000000L,0x0000020000000008L});
	public static final BitSet FOLLOW_resource_in_resourceList10426 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_resourceType_in_resource10464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_resource10468 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_JAR_in_resourceType10505 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FILE_in_resourceType10519 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ARCHIVE_in_resourceType10533 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createFunctionStatement10564 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_KW_TEMPORARY_in_createFunctionStatement10569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_KW_FUNCTION_in_createFunctionStatement10573 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_functionIdentifier_in_createFunctionStatement10575 = new BitSet(new long[]{0x0000020000000000L});
	public static final BitSet FOLLOW_KW_AS_in_createFunctionStatement10577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_createFunctionStatement10579 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_KW_USING_in_createFunctionStatement10588 = new BitSet(new long[]{0x0000008000000000L,0x0000000000000000L,0x0000020000000008L});
	public static final BitSet FOLLOW_resourceList_in_createFunctionStatement10592 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropFunctionStatement10678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_KW_TEMPORARY_in_dropFunctionStatement10683 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_KW_FUNCTION_in_dropFunctionStatement10687 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D9CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_ifExists_in_dropFunctionStatement10689 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_functionIdentifier_in_dropFunctionStatement10692 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RELOAD_in_reloadFunctionStatement10770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_KW_FUNCTION_in_reloadFunctionStatement10772 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createMacroStatement10800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_KW_TEMPORARY_in_createMacroStatement10802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_KW_MACRO_in_createMacroStatement10804 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_Identifier_in_createMacroStatement10806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_LPAREN_in_createMacroStatement10814 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x100007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_columnNameTypeList_in_createMacroStatement10816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_createMacroStatement10819 = new BitSet(new long[]{0xEFB76D8AFF001000L,0x9F35BDEEEFD613DBL,0xBEE8FB95D9DA30FDL,0x1EBD0F76CB2FDB5FL,0xEE74FEFFDEF0CBFFL,0x00E487C9F5CDF2A9L,0x0000010000000006L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_expression_in_createMacroStatement10821 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropMacroStatement10865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_KW_TEMPORARY_in_dropMacroStatement10867 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_KW_MACRO_in_dropMacroStatement10869 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ifExists_in_dropMacroStatement10871 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_Identifier_in_dropMacroStatement10874 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createViewStatement10916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_orReplace_in_createViewStatement10919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_KW_VIEW_in_createViewStatement10923 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D9CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_ifNotExists_in_createViewStatement10926 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableName_in_createViewStatement10932 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000010L,0x0000000000000000L,0x0000001000000000L,0x0010000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_LPAREN_in_createViewStatement10943 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_columnNameCommentList_in_createViewStatement10945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_createViewStatement10947 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000010L,0x0000000000000000L,0x0000001000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_tableComment_in_createViewStatement10951 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_viewPartition_in_createViewStatement10954 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createViewStatement10965 = new BitSet(new long[]{0x0000020000000000L});
	public static final BitSet FOLLOW_KW_AS_in_createViewStatement10976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000001L,0x0000000001000000L,0x0000802000000000L});
	public static final BitSet FOLLOW_selectStatementWithCTE_in_createViewStatement10986 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_PARTITIONED_in_viewPartition11109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_KW_ON_in_viewPartition11111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_LPAREN_in_viewPartition11113 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_columnNameList_in_viewPartition11115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_viewPartition11117 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropViewStatement11156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_KW_VIEW_in_dropViewStatement11158 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D9CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_ifExists_in_dropViewStatement11160 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_viewName_in_dropViewStatement11163 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createMaterializedViewStatement11201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_KW_MATERIALIZED_in_createMaterializedViewStatement11203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_KW_VIEW_in_createMaterializedViewStatement11205 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D9CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_ifNotExists_in_createMaterializedViewStatement11208 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableName_in_createMaterializedViewStatement11214 = new BitSet(new long[]{0x0000020000000000L,0x0000010000000010L,0x0200000000000000L,0x0000001000000000L,0x0010080000040000L});
	public static final BitSet FOLLOW_rewriteDisabled_in_createMaterializedViewStatement11224 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000010L,0x0200000000000000L,0x0000001000000000L,0x0010080000040000L});
	public static final BitSet FOLLOW_tableComment_in_createMaterializedViewStatement11227 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000000L,0x0200000000000000L,0x0000001000000000L,0x0010080000040000L});
	public static final BitSet FOLLOW_tableRowFormat_in_createMaterializedViewStatement11230 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000000L,0x0200000000000000L,0x0000001000000000L,0x0010080000000000L});
	public static final BitSet FOLLOW_tableFileFormat_in_createMaterializedViewStatement11233 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000000L,0x0200000000000000L,0x0000001000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_tableLocation_in_createMaterializedViewStatement11236 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_viewPartition_in_createMaterializedViewStatement11247 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createMaterializedViewStatement11250 = new BitSet(new long[]{0x0000020000000000L});
	public static final BitSet FOLLOW_KW_AS_in_createMaterializedViewStatement11253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000001L,0x0000000001000000L,0x0000802000000000L});
	public static final BitSet FOLLOW_selectStatementWithCTE_in_createMaterializedViewStatement11255 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropMaterializedViewStatement11411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_KW_MATERIALIZED_in_dropMaterializedViewStatement11413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_KW_VIEW_in_dropMaterializedViewStatement11415 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D9CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_ifExists_in_dropMaterializedViewStatement11417 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_viewName_in_dropMaterializedViewStatement11420 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionIdentifier_in_showFunctionIdentifier11458 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_showFunctionIdentifier11466 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_showStmtIdentifier11493 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_showStmtIdentifier11501 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_tableComment11534 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_tableComment11538 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_PARTITIONED_in_createTablePartitionSpec11575 = new BitSet(new long[]{0x0040000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_createTablePartitionSpec11577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_LPAREN_in_createTablePartitionSpec11579 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_createTablePartitionColumnTypeSpec_in_createTablePartitionSpec11586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_createTablePartitionColumnSpec_in_createTablePartitionSpec11594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_createTablePartitionSpec11597 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_columnNameTypeConstraint_in_createTablePartitionColumnTypeSpec11644 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_createTablePartitionColumnTypeSpec11647 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_columnNameTypeConstraint_in_createTablePartitionColumnTypeSpec11649 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_columnName_in_createTablePartitionColumnSpec11691 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_createTablePartitionColumnSpec11694 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_columnName_in_createTablePartitionColumnSpec11696 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_KW_CLUSTERED_in_tableBuckets11744 = new BitSet(new long[]{0x0040000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableBuckets11746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_LPAREN_in_tableBuckets11748 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_columnNameList_in_tableBuckets11752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_tableBuckets11754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_KW_SORTED_in_tableBuckets11757 = new BitSet(new long[]{0x0040000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableBuckets11759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_LPAREN_in_tableBuckets11761 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_columnNameOrderList_in_tableBuckets11765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_tableBuckets11767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_INTO_in_tableBuckets11771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_Number_in_tableBuckets11775 = new BitSet(new long[]{0x0020000000000000L});
	public static final BitSet FOLLOW_KW_BUCKETS_in_tableBuckets11777 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SKEWED_in_tableSkewed11829 = new BitSet(new long[]{0x0040000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableSkewed11831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_LPAREN_in_tableSkewed11833 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_columnNameList_in_tableSkewed11837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_tableSkewed11839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_KW_ON_in_tableSkewed11841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_LPAREN_in_tableSkewed11843 = new BitSet(new long[]{0x0000000002001000L,0x0000000000860000L,0x0000000000000001L,0x0000000000040000L,0x0600000000000000L,0x0060800000001008L,0x0000000000000002L});
	public static final BitSet FOLLOW_skewedValueElement_in_tableSkewed11848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_tableSkewed11851 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_storedAsDirs_in_tableSkewed11860 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rowFormatSerde_in_rowFormat11908 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rowFormatDelimited_in_rowFormat11924 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RECORDREADER_in_recordReader11973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_recordReader11975 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RECORDWRITER_in_recordWriter12024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_recordWriter12026 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ROW_in_rowFormatSerde12075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_KW_FORMAT_in_rowFormatSerde12077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_KW_SERDE_in_rowFormatSerde12079 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_rowFormatSerde12083 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_WITH_in_rowFormatSerde12086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_rowFormatSerde12088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_tableProperties_in_rowFormatSerde12092 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ROW_in_rowFormatDelimited12144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_KW_FORMAT_in_rowFormatDelimited12146 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_KW_DELIMITED_in_rowFormatDelimited12148 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L,0x0040000000000004L,0x0000000000040001L});
	public static final BitSet FOLLOW_tableRowFormatFieldIdentifier_in_rowFormatDelimited12150 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L,0x0040000000000000L,0x0000000000040001L});
	public static final BitSet FOLLOW_tableRowFormatCollItemsIdentifier_in_rowFormatDelimited12153 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000000L,0x0000000000040001L});
	public static final BitSet FOLLOW_tableRowFormatMapKeysIdentifier_in_rowFormatDelimited12156 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableRowFormatLinesIdentifier_in_rowFormatDelimited12159 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableRowNullFormat_in_rowFormatDelimited12162 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rowFormatDelimited_in_tableRowFormat12221 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rowFormatSerde_in_tableRowFormat12241 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_tablePropertiesPrefixed12288 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_tableProperties_in_tablePropertiesPrefixed12291 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_tableProperties12324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_tablePropertiesList_in_tableProperties12326 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_tableProperties12328 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_keyValueProperty_in_tablePropertiesList12369 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_tablePropertiesList12372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_keyValueProperty_in_tablePropertiesList12374 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_keyProperty_in_tablePropertiesList12399 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_tablePropertiesList12402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_keyProperty_in_tablePropertiesList12404 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_StringLiteral_in_keyValueProperty12450 = new BitSet(new long[]{0x0000000000040000L});
	public static final BitSet FOLLOW_EQUAL_in_keyValueProperty12452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_keyValueProperty12456 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_keyProperty12503 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FIELDS_in_tableRowFormatFieldIdentifier12547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatFieldIdentifier12549 = new BitSet(new long[]{0x0040000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier12551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier12555 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
	public static final BitSet FOLLOW_KW_ESCAPED_in_tableRowFormatFieldIdentifier12558 = new BitSet(new long[]{0x0040000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier12560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier12564 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COLLECTION_in_tableRowFormatCollItemsIdentifier12616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_KW_ITEMS_in_tableRowFormatCollItemsIdentifier12618 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatCollItemsIdentifier12620 = new BitSet(new long[]{0x0040000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableRowFormatCollItemsIdentifier12622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatCollItemsIdentifier12626 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_MAP_in_tableRowFormatMapKeysIdentifier12672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_KW_KEYS_in_tableRowFormatMapKeysIdentifier12674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatMapKeysIdentifier12676 = new BitSet(new long[]{0x0040000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableRowFormatMapKeysIdentifier12678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatMapKeysIdentifier12682 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LINES_in_tableRowFormatLinesIdentifier12728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatLinesIdentifier12730 = new BitSet(new long[]{0x0040000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableRowFormatLinesIdentifier12732 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatLinesIdentifier12736 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NULL_in_tableRowNullFormat12782 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_KW_DEFINED_in_tableRowNullFormat12784 = new BitSet(new long[]{0x0000020000000000L});
	public static final BitSet FOLLOW_KW_AS_in_tableRowNullFormat12786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowNullFormat12790 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat12845 = new BitSet(new long[]{0x0000020000000000L});
	public static final BitSet FOLLOW_KW_AS_in_tableFileFormat12847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_KW_INPUTFORMAT_in_tableFileFormat12849 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat12853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_KW_OUTPUTFORMAT_in_tableFileFormat12855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat12859 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_KW_INPUTDRIVER_in_tableFileFormat12862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat12866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_KW_OUTPUTDRIVER_in_tableFileFormat12868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat12872 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat12910 = new BitSet(new long[]{0x0040000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableFileFormat12912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat12916 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_WITH_in_tableFileFormat12928 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_tableFileFormat12930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_tableProperties_in_tableFileFormat12934 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat12965 = new BitSet(new long[]{0x0000020000000000L});
	public static final BitSet FOLLOW_KW_AS_in_tableFileFormat12967 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_tableFileFormat12971 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCATION_in_tableLocation13019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_tableLocation13023 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_columnNameType_in_columnNameTypeList13059 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_columnNameTypeList13062 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_columnNameType_in_columnNameTypeList13064 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_columnNameTypeOrConstraint_in_columnNameTypeOrConstraintList13102 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_columnNameTypeOrConstraintList13105 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD01BDBL,0xBEE8FB81D8CA383CL,0x1CBD8F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF6A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_columnNameTypeOrConstraint_in_columnNameTypeOrConstraintList13107 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_columnNameColonType_in_columnNameColonTypeList13145 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_columnNameColonTypeList13148 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_columnNameColonType_in_columnNameColonTypeList13150 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_columnName_in_columnNameList13188 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_columnNameList13191 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_columnName_in_columnNameList13193 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_identifier_in_columnName13237 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_extColumnName13270 = new BitSet(new long[]{0x0000000000010002L});
	public static final BitSet FOLLOW_DOT_in_extColumnName13273 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_ELEM_TYPE_in_extColumnName13283 = new BitSet(new long[]{0x0000000000010002L});
	public static final BitSet FOLLOW_KW_KEY_TYPE_in_extColumnName13293 = new BitSet(new long[]{0x0000000000010002L});
	public static final BitSet FOLLOW_KW_VALUE_TYPE_in_extColumnName13303 = new BitSet(new long[]{0x0000000000010002L});
	public static final BitSet FOLLOW_identifier_in_extColumnName13307 = new BitSet(new long[]{0x0000000000010002L});
	public static final BitSet FOLLOW_columnNameOrder_in_columnNameOrderList13337 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_columnNameOrderList13340 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_columnNameOrder_in_columnNameOrderList13342 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_LPAREN_in_columnParenthesesList13380 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_columnNameList_in_columnParenthesesList13383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_columnParenthesesList13385 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_enableSpecification_in_enableValidateSpecification13413 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_validateSpecification_in_enableValidateSpecification13415 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_enforcedSpecification_in_enableValidateSpecification13424 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ENABLE_in_enableSpecification13451 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DISABLE_in_enableSpecification13465 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_VALIDATE_in_validateSpecification13498 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NOVALIDATE_in_validateSpecification13512 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ENFORCED_in_enforcedSpecification13545 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NOT_in_enforcedSpecification13559 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_ENFORCED_in_enforcedSpecification13561 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RELY_in_relySpecification13595 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NORELY_in_relySpecification13610 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CONSTRAINT_in_createConstraint13644 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_createConstraint13648 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_tableLevelConstraint_in_createConstraint13652 = new BitSet(new long[]{0x0000000000000002L,0x0014010000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_constraintOptsCreate_in_createConstraint13654 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CONSTRAINT_in_alterConstraintWithName13729 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_alterConstraintWithName13733 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_tableLevelConstraint_in_alterConstraintWithName13735 = new BitSet(new long[]{0x0000000000000002L,0x0014010000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_constraintOptsAlter_in_alterConstraintWithName13737 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pkUkConstraint_in_tableLevelConstraint13774 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_checkConstraint_in_tableLevelConstraint13782 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableConstraintType_in_pkUkConstraint13809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_columnParenthesesList_in_pkUkConstraint13813 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CHECK_in_checkConstraint13853 = new BitSet(new long[]{0xEFB76D8AFF001000L,0x9F35BDEEEFD613DBL,0xBEE8FB95D9DA30FDL,0x1EBD0F76CB2FDB5FL,0xEE74FEFFDEF0CBFFL,0x00E487C9F5CDF2A9L,0x0000010000000006L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_expression_in_checkConstraint13855 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CONSTRAINT_in_createForeignKey13895 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_createForeignKey13899 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_KW_FOREIGN_in_createForeignKey13903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_KW_KEY_in_createForeignKey13905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_columnParenthesesList_in_createForeignKey13909 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_KW_REFERENCES_in_createForeignKey13912 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableName_in_createForeignKey13916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_columnParenthesesList_in_createForeignKey13920 = new BitSet(new long[]{0x0000000000000002L,0x0014010000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_constraintOptsCreate_in_createForeignKey13922 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CONSTRAINT_in_alterForeignKeyWithName14015 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_alterForeignKeyWithName14019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_KW_FOREIGN_in_alterForeignKeyWithName14021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_KW_KEY_in_alterForeignKeyWithName14023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_columnParenthesesList_in_alterForeignKeyWithName14027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_KW_REFERENCES_in_alterForeignKeyWithName14030 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableName_in_alterForeignKeyWithName14034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_columnParenthesesList_in_alterForeignKeyWithName14038 = new BitSet(new long[]{0x0000000000000002L,0x0014010000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_constraintOptsAlter_in_alterForeignKeyWithName14040 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_skewedColumnValues_in_skewedValueElement14103 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_skewedColumnValuePairList_in_skewedValueElement14112 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList14139 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_skewedColumnValuePairList14142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList14144 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_LPAREN_in_skewedColumnValuePair14188 = new BitSet(new long[]{0x0000000002001000L,0x0000000000860000L,0x0000000000000001L,0x0000000000040000L,0x0600000000000000L,0x0060000000001008L,0x0000000000000002L});
	public static final BitSet FOLLOW_skewedColumnValues_in_skewedColumnValuePair14192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_skewedColumnValuePair14194 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_skewedColumnValue_in_skewedColumnValues14236 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_skewedColumnValues14239 = new BitSet(new long[]{0x0000000002001000L,0x0000000000860000L,0x0000000000000001L,0x0000000000040000L,0x0600000000000000L,0x0060000000001008L,0x0000000000000002L});
	public static final BitSet FOLLOW_skewedColumnValue_in_skewedColumnValues14241 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_constant_in_skewedColumnValue14285 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_skewedColumnValue_in_skewedValueLocationElement14318 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_skewedColumnValuePair_in_skewedValueLocationElement14327 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NULLS_in_nullOrdering14381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_KW_FIRST_in_nullOrdering14383 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NULLS_in_nullOrdering14397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_KW_LAST_in_nullOrdering14399 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_columnNameOrder14432 = new BitSet(new long[]{0x0000040000000002L,0x0000000800000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_orderSpecification_in_columnNameOrder14436 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_nullOrdering_in_columnNameOrder14441 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_columnNameComment_in_columnNameCommentList14668 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_columnNameCommentList14671 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_columnNameComment_in_columnNameCommentList14673 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_identifier_in_columnNameComment14713 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
	public static final BitSet FOLLOW_KW_COMMENT_in_columnNameComment14716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_columnNameComment14720 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_columnRefOrder14768 = new BitSet(new long[]{0x0000040000000002L,0x0000000800000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_orderSpecification_in_columnRefOrder14772 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_nullOrdering_in_columnRefOrder14777 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_columnNameType15006 = new BitSet(new long[]{0x1007010000000000L,0x0000100011800000L,0x0000000400000040L,0x0200000000000001L,0x0E00600800000000L,0x0000000008000200L});
	public static final BitSet FOLLOW_colType_in_columnNameType15008 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
	public static final BitSet FOLLOW_KW_COMMENT_in_columnNameType15011 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_columnNameType15015 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableConstraint_in_columnNameTypeOrConstraint15111 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_columnNameTypeConstraint_in_columnNameTypeOrConstraint15123 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createForeignKey_in_tableConstraint15154 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createConstraint_in_tableConstraint15166 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_columnNameTypeConstraint15197 = new BitSet(new long[]{0x1007010000000000L,0x0000100011800000L,0x0000000400000040L,0x0200000000000001L,0x0E00600800000000L,0x0000000008000200L});
	public static final BitSet FOLLOW_colType_in_columnNameTypeConstraint15199 = new BitSet(new long[]{0x2000000000000002L,0x0000000020000810L,0x0000000000000000L,0x4000800000010000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_columnConstraint_in_columnNameTypeConstraint15201 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
	public static final BitSet FOLLOW_KW_COMMENT_in_columnNameTypeConstraint15206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_columnNameTypeConstraint15210 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_foreignKeyConstraint_in_columnConstraint15274 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_colConstraint_in_columnConstraint15287 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CONSTRAINT_in_foreignKeyConstraint15318 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_foreignKeyConstraint15322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_KW_REFERENCES_in_foreignKeyConstraint15326 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableName_in_foreignKeyConstraint15330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_LPAREN_in_foreignKeyConstraint15332 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_columnName_in_foreignKeyConstraint15336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_foreignKeyConstraint15338 = new BitSet(new long[]{0x0000000000000002L,0x0014010000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_constraintOptsCreate_in_foreignKeyConstraint15340 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CONSTRAINT_in_colConstraint15448 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_colConstraint15452 = new BitSet(new long[]{0x2000000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000800000010000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_columnConstraintType_in_colConstraint15456 = new BitSet(new long[]{0x0000000000000002L,0x0014010000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_constraintOptsCreate_in_colConstraint15458 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterForeignKeyConstraint_in_alterColumnConstraint15536 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterColConstraint_in_alterColumnConstraint15549 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CONSTRAINT_in_alterForeignKeyConstraint15580 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_alterForeignKeyConstraint15584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_KW_REFERENCES_in_alterForeignKeyConstraint15588 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableName_in_alterForeignKeyConstraint15592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alterForeignKeyConstraint15594 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_columnName_in_alterForeignKeyConstraint15598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alterForeignKeyConstraint15600 = new BitSet(new long[]{0x0000000000000002L,0x0014010000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_constraintOptsAlter_in_alterForeignKeyConstraint15602 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CONSTRAINT_in_alterColConstraint15710 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_alterColConstraint15714 = new BitSet(new long[]{0x2000000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000800000010000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_columnConstraintType_in_alterColConstraint15718 = new BitSet(new long[]{0x0000000000000002L,0x0014010000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_constraintOptsAlter_in_alterColConstraint15720 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NOT_in_columnConstraintType15785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_NULL_in_columnConstraintType15787 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DEFAULT_in_columnConstraintType15808 = new BitSet(new long[]{0xEDB76D8AFF001000L,0x1D35BDEEEFD613DBL,0xBEE8FB85D9DA307DL,0x1EBD0F76CB2EDB5FL,0xEE74FEFFDEF0CBFFL,0x006007C9F5CDF2A9L,0x0000010000000002L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_defaultVal_in_columnConstraintType15810 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_checkConstraint_in_columnConstraintType15828 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableConstraintType_in_columnConstraintType15836 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constant_in_defaultVal15853 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_in_defaultVal15861 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_castExpression_in_defaultVal15869 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_PRIMARY_in_tableConstraintType15886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_KW_KEY_in_tableConstraintType15888 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNIQUE_in_tableConstraintType15906 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_enableValidateSpecification_in_constraintOptsCreate15941 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000002L});
	public static final BitSet FOLLOW_relySpecification_in_constraintOptsCreate15943 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_enableValidateSpecification_in_constraintOptsAlter15961 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000002L});
	public static final BitSet FOLLOW_relySpecification_in_constraintOptsAlter15963 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_columnNameColonType15993 = new BitSet(new long[]{0x0000000000000100L});
	public static final BitSet FOLLOW_COLON_in_columnNameColonType15995 = new BitSet(new long[]{0x1007010000000000L,0x0000100011800000L,0x0000000400000040L,0x0200000000000001L,0x0E00600800000000L,0x0000000008000200L});
	public static final BitSet FOLLOW_colType_in_columnNameColonType15997 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
	public static final BitSet FOLLOW_KW_COMMENT_in_columnNameColonType16000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_columnNameColonType16004 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_type_in_colType16088 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_colType_in_colTypeList16115 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_colTypeList16118 = new BitSet(new long[]{0x1007010000000000L,0x0000100011800000L,0x0000000400000040L,0x0200000000000001L,0x0E00600800000000L,0x0000000008000200L});
	public static final BitSet FOLLOW_colType_in_colTypeList16120 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_primitiveType_in_type16148 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_listType_in_type16156 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_structType_in_type16164 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_mapType_in_type16172 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unionType_in_type16180 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TINYINT_in_primitiveType16202 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SMALLINT_in_primitiveType16223 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INT_in_primitiveType16243 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_BIGINT_in_primitiveType16268 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_BOOLEAN_in_primitiveType16290 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FLOAT_in_primitiveType16311 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_REAL_in_primitiveType16334 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DOUBLE_in_primitiveType16358 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_KW_PRECISION_in_primitiveType16360 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DATE_in_primitiveType16382 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DATETIME_in_primitiveType16406 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TIMESTAMP_in_primitiveType16426 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TIMESTAMPLOCALTZ_in_primitiveType16445 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TIMESTAMP_in_primitiveType16467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_WITH_in_primitiveType16469 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_KW_LOCAL_in_primitiveType16471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_KW_TIME_in_primitiveType16473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_KW_ZONE_in_primitiveType16475 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STRING_in_primitiveType16507 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_BINARY_in_primitiveType16529 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DECIMAL_in_primitiveType16551 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_LPAREN_in_primitiveType16554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_Number_in_primitiveType16558 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_COMMA_in_primitiveType16561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_Number_in_primitiveType16565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_primitiveType16569 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_VARCHAR_in_primitiveType16593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_LPAREN_in_primitiveType16595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_Number_in_primitiveType16599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_primitiveType16601 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CHAR_in_primitiveType16626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_LPAREN_in_primitiveType16628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_Number_in_primitiveType16632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_primitiveType16634 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ARRAY_in_listType16678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_LESSTHAN_in_listType16680 = new BitSet(new long[]{0x1007010000000000L,0x0000100011800000L,0x0000000400000040L,0x0200000000000001L,0x0E00600800000000L,0x0000000008000200L});
	public static final BitSet FOLLOW_type_in_listType16682 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_GREATERTHAN_in_listType16684 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STRUCT_in_structType16721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_LESSTHAN_in_structType16723 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_columnNameColonTypeList_in_structType16725 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_GREATERTHAN_in_structType16727 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_MAP_in_mapType16762 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_LESSTHAN_in_mapType16764 = new BitSet(new long[]{0x1007000000000000L,0x0000100011800000L,0x0000000400000040L,0x0200000000000000L,0x0E00200800000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_primitiveType_in_mapType16768 = new BitSet(new long[]{0x0000000000000200L});
	public static final BitSet FOLLOW_COMMA_in_mapType16770 = new BitSet(new long[]{0x1007010000000000L,0x0000100011800000L,0x0000000400000040L,0x0200000000000001L,0x0E00600800000000L,0x0000000008000200L});
	public static final BitSet FOLLOW_type_in_mapType16774 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_GREATERTHAN_in_mapType16776 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNIONTYPE_in_unionType16819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_LESSTHAN_in_unionType16821 = new BitSet(new long[]{0x1007010000000000L,0x0000100011800000L,0x0000000400000040L,0x0200000000000001L,0x0E00600800000000L,0x0000000008000200L});
	public static final BitSet FOLLOW_colTypeList_in_unionType16823 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_GREATERTHAN_in_unionType16825 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNION_in_setOperator16860 = new BitSet(new long[]{0x0000000100000000L});
	public static final BitSet FOLLOW_KW_ALL_in_setOperator16862 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNION_in_setOperator16876 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
	public static final BitSet FOLLOW_KW_DISTINCT_in_setOperator16878 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INTERSECT_in_setOperator16893 = new BitSet(new long[]{0x0000000100000000L});
	public static final BitSet FOLLOW_KW_ALL_in_setOperator16895 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INTERSECT_in_setOperator16909 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
	public static final BitSet FOLLOW_KW_DISTINCT_in_setOperator16911 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_EXCEPT_in_setOperator16926 = new BitSet(new long[]{0x0000000100000000L});
	public static final BitSet FOLLOW_KW_ALL_in_setOperator16928 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_EXCEPT_in_setOperator16942 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
	public static final BitSet FOLLOW_KW_DISTINCT_in_setOperator16944 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_MINUS_in_setOperator16959 = new BitSet(new long[]{0x0000000100000000L});
	public static final BitSet FOLLOW_KW_ALL_in_setOperator16961 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_MINUS_in_setOperator16975 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
	public static final BitSet FOLLOW_KW_DISTINCT_in_setOperator16977 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_withClause_in_queryStatementExpression17014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200004000L,0x2000000000000001L,0x0000000001000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_queryStatementExpressionBody_in_queryStatementExpression17022 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fromStatement_in_queryStatementExpressionBody17054 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_regularBody_in_queryStatementExpressionBody17062 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_WITH_in_withClause17079 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_cteStatement_in_withClause17081 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_withClause17084 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_cteStatement_in_withClause17086 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_identifier_in_cteStatement17112 = new BitSet(new long[]{0x0000020000000000L});
	public static final BitSet FOLLOW_KW_AS_in_cteStatement17114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_LPAREN_in_cteStatement17116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200004000L,0x2000000000000001L,0x0000000001000000L,0x0000802000000000L});
	public static final BitSet FOLLOW_queryStatementExpression_in_cteStatement17118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cteStatement17120 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_singleFromStatement_in_fromStatement17143 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L,0x0000000800000000L,0x0000000000000080L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_setOperator_in_fromStatement17155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_singleFromStatement_in_fromStatement17159 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L,0x0000000800000000L,0x0000000000000080L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_fromClause_in_singleFromStatement17365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x2000000000000001L,0x0000000001000000L});
	public static final BitSet FOLLOW_body_in_singleFromStatement17375 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000000L,0x2000000000000001L,0x0000000001000000L});
	public static final BitSet FOLLOW_insertClause_in_regularBody17412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000001L,0x0000000001000000L,0x0000800002000000L});
	public static final BitSet FOLLOW_selectStatement_in_regularBody17424 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_valuesClause_in_regularBody17449 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selectStatement_in_regularBody17522 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selectClause_in_atomSelectStatement17542 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000284000L,0x0000000000000000L,0x0000000000000000L,0x0000001400000000L});
	public static final BitSet FOLLOW_fromClause_in_atomSelectStatement17549 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000280000L,0x0000000000000000L,0x0000000000000000L,0x0000001400000000L});
	public static final BitSet FOLLOW_whereClause_in_atomSelectStatement17557 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000280000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_groupByClause_in_atomSelectStatement17565 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_havingClause_in_atomSelectStatement17573 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_window_clause_in_atomSelectStatement17581 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_atomSelectStatement17659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000001L,0x0000000001000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_selectStatement_in_atomSelectStatement17662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_atomSelectStatement17664 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_atomSelectStatement_in_selectStatement17685 = new BitSet(new long[]{0x4000000000000002L,0x0040040000000000L,0x0020000800000000L,0x0000000008000080L,0x0000002000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_setOpSelectStatement_in_selectStatement17692 = new BitSet(new long[]{0x4000000000000002L,0x0000040000000000L,0x0020000000000000L,0x0000000008000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_orderByClause_in_selectStatement17701 = new BitSet(new long[]{0x4000000000000002L,0x0000040000000000L,0x0020000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_clusterByClause_in_selectStatement17709 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L,0x0020000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_distributeByClause_in_selectStatement17717 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_sortByClause_in_selectStatement17725 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_limitClause_in_selectStatement17733 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_setOperator_in_setOpSelectStatement17998 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000001L,0x0000000001000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_atomSelectStatement_in_setOpSelectStatement18002 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L,0x0000000800000000L,0x0000000000000080L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_withClause_in_selectStatementWithCTE18637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000001L,0x0000000001000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_selectStatement_in_selectStatementWithCTE18645 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insertClause_in_body18675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000001L,0x0000000001000000L});
	public static final BitSet FOLLOW_selectClause_in_body18680 = new BitSet(new long[]{0x4000000000000202L,0x0000040000000000L,0x0021000000280000L,0x0000000008000000L,0x0000002000000000L,0x0000001400000000L});
	public static final BitSet FOLLOW_lateralView_in_body18685 = new BitSet(new long[]{0x4000000000000002L,0x0000040000000000L,0x0020000000280000L,0x0000000008000000L,0x0000002000000000L,0x0000001400000000L});
	public static final BitSet FOLLOW_whereClause_in_body18691 = new BitSet(new long[]{0x4000000000000002L,0x0000040000000000L,0x0020000000280000L,0x0000000008000000L,0x0000002000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_groupByClause_in_body18697 = new BitSet(new long[]{0x4000000000000002L,0x0000040000000000L,0x0020000000200000L,0x0000000008000000L,0x0000002000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_havingClause_in_body18703 = new BitSet(new long[]{0x4000000000000002L,0x0000040000000000L,0x0020000000000000L,0x0000000008000000L,0x0000002000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_window_clause_in_body18709 = new BitSet(new long[]{0x4000000000000002L,0x0000040000000000L,0x0020000000000000L,0x0000000008000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_orderByClause_in_body18715 = new BitSet(new long[]{0x4000000000000002L,0x0000040000000000L,0x0020000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_clusterByClause_in_body18721 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L,0x0020000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_distributeByClause_in_body18727 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_sortByClause_in_body18733 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_limitClause_in_body18739 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selectClause_in_body18832 = new BitSet(new long[]{0x4000000000000202L,0x0000040000000000L,0x0021000000280000L,0x0000000008000000L,0x0000002000000000L,0x0000001400000000L});
	public static final BitSet FOLLOW_lateralView_in_body18837 = new BitSet(new long[]{0x4000000000000002L,0x0000040000000000L,0x0020000000280000L,0x0000000008000000L,0x0000002000000000L,0x0000001400000000L});
	public static final BitSet FOLLOW_whereClause_in_body18843 = new BitSet(new long[]{0x4000000000000002L,0x0000040000000000L,0x0020000000280000L,0x0000000008000000L,0x0000002000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_groupByClause_in_body18849 = new BitSet(new long[]{0x4000000000000002L,0x0000040000000000L,0x0020000000200000L,0x0000000008000000L,0x0000002000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_havingClause_in_body18855 = new BitSet(new long[]{0x4000000000000002L,0x0000040000000000L,0x0020000000000000L,0x0000000008000000L,0x0000002000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_window_clause_in_body18861 = new BitSet(new long[]{0x4000000000000002L,0x0000040000000000L,0x0020000000000000L,0x0000000008000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_orderByClause_in_body18867 = new BitSet(new long[]{0x4000000000000002L,0x0000040000000000L,0x0020000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_clusterByClause_in_body18873 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L,0x0020000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_distributeByClause_in_body18879 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_sortByClause_in_body18885 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_limitClause_in_body18891 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INSERT_in_insertClause19012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_KW_OVERWRITE_in_insertClause19014 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L,0x0100000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_destination_in_insertClause19016 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_ifNotExists_in_insertClause19018 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INSERT_in_insertClause19037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_INTO_in_insertClause19039 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE876FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_TABLE_in_insertClause19041 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableOrPartition_in_insertClause19044 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_LPAREN_in_insertClause19047 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_columnNameList_in_insertClause19051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_insertClause19053 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCAL_in_destination19109 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_KW_DIRECTORY_in_destination19113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_destination19115 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000040000L});
	public static final BitSet FOLLOW_tableRowFormat_in_destination19117 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_tableFileFormat_in_destination19120 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TABLE_in_destination19153 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableOrPartition_in_destination19155 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LIMIT_in_limitClause19187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_Number_in_limitClause19193 = new BitSet(new long[]{0x0000000000000200L});
	public static final BitSet FOLLOW_COMMA_in_limitClause19195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_Number_in_limitClause19201 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LIMIT_in_limitClause19224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_Number_in_limitClause19228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_KW_OFFSET_in_limitClause19230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_Number_in_limitClause19234 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DELETE_in_deleteStatement19278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_KW_FROM_in_deleteStatement19280 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableName_in_deleteStatement19282 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_whereClause_in_deleteStatement19285 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableOrColumn_in_columnAssignmentClause19318 = new BitSet(new long[]{0x0000000000040000L});
	public static final BitSet FOLLOW_EQUAL_in_columnAssignmentClause19320 = new BitSet(new long[]{0xEFB76D8AFF001000L,0x9D35BDEEEFD613DBL,0xBEE8FB95D9DA30FDL,0x1EBD0F76CB2EDB5FL,0xEE74FEFFDEF0CBFFL,0x00E487C9F5CDF2A9L,0x0000010000000006L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_precedencePlusExpression_in_columnAssignmentClause19323 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_setColumnsClause19343 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_columnAssignmentClause_in_setColumnsClause19345 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_setColumnsClause19348 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_columnAssignmentClause_in_setColumnsClause19350 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_KW_UPDATE_in_updateStatement19392 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableName_in_updateStatement19394 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_setColumnsClause_in_updateStatement19396 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_whereClause_in_updateStatement19398 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_startTransactionStatement_in_sqlTransactionStatement19440 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_commitStatement_in_sqlTransactionStatement19445 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rollbackStatement_in_sqlTransactionStatement19450 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_setAutoCommitStatement_in_sqlTransactionStatement19455 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_START_in_startTransactionStatement19469 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_KW_TRANSACTION_in_startTransactionStatement19471 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000008000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_transactionMode_in_startTransactionStatement19475 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_startTransactionStatement19480 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_transactionMode_in_startTransactionStatement19482 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_isolationLevel_in_transactionMode19513 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_transactionAccessMode_in_transactionMode19519 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_READ_in_transactionAccessMode19542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_KW_ONLY_in_transactionAccessMode19544 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_READ_in_transactionAccessMode19554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_KW_WRITE_in_transactionAccessMode19556 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ISOLATION_in_isolationLevel19575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_KW_LEVEL_in_isolationLevel19577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_levelOfIsolation_in_isolationLevel19579 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SNAPSHOT_in_levelOfIsolation19604 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COMMIT_in_commitStatement19623 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_KW_WORK_in_commitStatement19627 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ROLLBACK_in_rollbackStatement19649 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_KW_WORK_in_rollbackStatement19653 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_setAutoCommitStatement19674 = new BitSet(new long[]{0x0000200000000000L});
	public static final BitSet FOLLOW_KW_AUTOCOMMIT_in_setAutoCommitStatement19676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_booleanValueTok_in_setAutoCommitStatement19678 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ABORT_in_abortTransactionStatement19713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_KW_TRANSACTIONS_in_abortTransactionStatement19715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_Number_in_abortTransactionStatement19719 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_KW_MERGE_in_mergeStatement19765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_QUERY_HINT_in_mergeStatement19767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_INTO_in_mergeStatement19770 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_tableName_in_mergeStatement19772 = new BitSet(new long[]{0xE9B06E8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5EDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_AS_in_mergeStatement19775 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE874FEF7DEF0CBFFL,0x000007C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_identifier_in_mergeStatement19778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_KW_USING_in_mergeStatement19782 = new BitSet(new long[]{0xE9B06C8AFD000000L,0x1D35ADEEEFD013DBL,0xBEE8FB81D8CA303CL,0x1CBD0F76CB2ADB5EL,0xE876FEF7DEF0CBFFL,0x000087C9F5CDF2A1L,0x0000010000000000L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_joinSourcePart_in_mergeStatement19784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_KW_ON_in_mergeStatement19786 = new BitSet(new long[]{0xEFB76D8AFF001000L,0x9F35BDEEEFD613DBL,0xBEE8FB95D9DA30FDL,0x1EBD0F76CB2FDB5FL,0xEE74FEFFDEF0CBFFL,0x00E487C9F5CDF2A9L,0x0000010000000006L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_expression_in_mergeStatement19788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_whenClauses_in_mergeStatement19790 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_whenMatchedAndClause_in_whenClauses19839 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_whenMatchedThenClause_in_whenClauses19841 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_whenNotMatchedClause_in_whenClauses19845 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_WHEN_in_whenNotMatchedClause19872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_KW_NOT_in_whenNotMatchedClause19874 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_KW_MATCHED_in_whenNotMatchedClause19876 = new BitSet(new long[]{0x0000001000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_KW_AND_in_whenNotMatchedClause19879 = new BitSet(new long[]{0xEFB76D8AFF001000L,0x9F35BDEEEFD613DBL,0xBEE8FB95D9DA30FDL,0x1EBD0F76CB2FDB5FL,0xEE74FEFFDEF0CBFFL,0x00E487C9F5CDF2A9L,0x0000010000000006L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_expression_in_whenNotMatchedClause19881 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_KW_THEN_in_whenNotMatchedClause19885 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_KW_INSERT_in_whenNotMatchedClause19887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_KW_VALUES_in_whenNotMatchedClause19889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_valueRowConstructor_in_whenNotMatchedClause19891 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_WHEN_in_whenMatchedAndClause19934 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_KW_MATCHED_in_whenMatchedAndClause19936 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_KW_AND_in_whenMatchedAndClause19938 = new BitSet(new long[]{0xEFB76D8AFF001000L,0x9F35BDEEEFD613DBL,0xBEE8FB95D9DA30FDL,0x1EBD0F76CB2FDB5FL,0xEE74FEFFDEF0CBFFL,0x00E487C9F5CDF2A9L,0x0000010000000006L,0x2000000000002000L,0x0011000000000002L,0x0000000000204000L,0x0000000000040000L});
	public static final BitSet FOLLOW_expression_in_whenMatchedAndClause19940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_KW_THEN_in_whenMatchedAndClause19942 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_updateOrDelete_in_whenMatchedAndClause19944 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_WHEN_in_whenMatchedThenClause19982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_KW_MATCHED_in_whenMatchedThenClause19984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_KW_THEN_in_whenMatchedThenClause19986 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_updateOrDelete_in_whenMatchedThenClause19988 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UPDATE_in_updateOrDelete20017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_setColumnsClause_in_updateOrDelete20019 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DELETE_in_updateOrDelete20037 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_KILL_in_killQueryStatement20069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_QUERY_in_killQueryStatement20071 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_killQueryStatement20075 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_grantPrivileges_in_synpred1_HiveParser2830 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_revokePrivileges_in_synpred2_HiveParser2844 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixRename_in_synpred3_HiveParser4376 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ELEM_TYPE_in_synpred4_HiveParser7217 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_KEY_TYPE_in_synpred5_HiveParser7233 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_VALUE_TYPE_in_synpred6_HiveParser7249 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FUNCTION_in_synpred8_HiveParser7456 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COMPUTE_in_synpred10_HiveParser7609 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CACHE_in_synpred11_HiveParser7737 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALL_in_synpred14_HiveParser9250 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NONE_in_synpred15_HiveParser9281 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALL_in_synpred16_HiveParser9455 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_storedAsDirs_in_synpred17_HiveParser11855 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_synpred18_HiveParser12836 = new BitSet(new long[]{0x0000020000000000L});
	public static final BitSet FOLLOW_KW_AS_in_synpred18_HiveParser12838 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_KW_INPUTFORMAT_in_synpred18_HiveParser12840 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ELEM_TYPE_in_synpred19_HiveParser13278 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_KEY_TYPE_in_synpred20_HiveParser13288 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_VALUE_TYPE_in_synpred21_HiveParser13298 = new BitSet(new long[]{0x0000000000000002L});
}
